
snt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005fc4  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000024c  08006080  08006080  00016080  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080062cc  080062cc  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  080062cc  080062cc  000162cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080062d4  080062d4  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080062d4  080062d4  000162d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080062d8  080062d8  000162d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  080062dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002a4  20000078  08006354  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000031c  08006354  0002031c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015cec  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000310c  00000000  00000000  00035d8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001218  00000000  00000000  00038e98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010c0  00000000  00000000  0003a0b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ac2d  00000000  00000000  0003b170  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017349  00000000  00000000  00055d9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a4d4d  00000000  00000000  0006d0e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00111e33  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004ec0  00000000  00000000  00111e84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000078 	.word	0x20000078
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08006068 	.word	0x08006068

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	2000007c 	.word	0x2000007c
 8000100:	08006068 	.word	0x08006068

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__gnu_thumb1_case_shi>:
 8000114:	b403      	push	{r0, r1}
 8000116:	4671      	mov	r1, lr
 8000118:	0849      	lsrs	r1, r1, #1
 800011a:	0040      	lsls	r0, r0, #1
 800011c:	0049      	lsls	r1, r1, #1
 800011e:	5e09      	ldrsh	r1, [r1, r0]
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	448e      	add	lr, r1
 8000124:	bc03      	pop	{r0, r1}
 8000126:	4770      	bx	lr

08000128 <__udivsi3>:
 8000128:	2200      	movs	r2, #0
 800012a:	0843      	lsrs	r3, r0, #1
 800012c:	428b      	cmp	r3, r1
 800012e:	d374      	bcc.n	800021a <__udivsi3+0xf2>
 8000130:	0903      	lsrs	r3, r0, #4
 8000132:	428b      	cmp	r3, r1
 8000134:	d35f      	bcc.n	80001f6 <__udivsi3+0xce>
 8000136:	0a03      	lsrs	r3, r0, #8
 8000138:	428b      	cmp	r3, r1
 800013a:	d344      	bcc.n	80001c6 <__udivsi3+0x9e>
 800013c:	0b03      	lsrs	r3, r0, #12
 800013e:	428b      	cmp	r3, r1
 8000140:	d328      	bcc.n	8000194 <__udivsi3+0x6c>
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d30d      	bcc.n	8000164 <__udivsi3+0x3c>
 8000148:	22ff      	movs	r2, #255	; 0xff
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	ba12      	rev	r2, r2
 800014e:	0c03      	lsrs	r3, r0, #16
 8000150:	428b      	cmp	r3, r1
 8000152:	d302      	bcc.n	800015a <__udivsi3+0x32>
 8000154:	1212      	asrs	r2, r2, #8
 8000156:	0209      	lsls	r1, r1, #8
 8000158:	d065      	beq.n	8000226 <__udivsi3+0xfe>
 800015a:	0b03      	lsrs	r3, r0, #12
 800015c:	428b      	cmp	r3, r1
 800015e:	d319      	bcc.n	8000194 <__udivsi3+0x6c>
 8000160:	e000      	b.n	8000164 <__udivsi3+0x3c>
 8000162:	0a09      	lsrs	r1, r1, #8
 8000164:	0bc3      	lsrs	r3, r0, #15
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x46>
 800016a:	03cb      	lsls	r3, r1, #15
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b83      	lsrs	r3, r0, #14
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x52>
 8000176:	038b      	lsls	r3, r1, #14
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b43      	lsrs	r3, r0, #13
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x5e>
 8000182:	034b      	lsls	r3, r1, #13
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b03      	lsrs	r3, r0, #12
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x6a>
 800018e:	030b      	lsls	r3, r1, #12
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0ac3      	lsrs	r3, r0, #11
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x76>
 800019a:	02cb      	lsls	r3, r1, #11
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a83      	lsrs	r3, r0, #10
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x82>
 80001a6:	028b      	lsls	r3, r1, #10
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a43      	lsrs	r3, r0, #9
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x8e>
 80001b2:	024b      	lsls	r3, r1, #9
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a03      	lsrs	r3, r0, #8
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x9a>
 80001be:	020b      	lsls	r3, r1, #8
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	d2cd      	bcs.n	8000162 <__udivsi3+0x3a>
 80001c6:	09c3      	lsrs	r3, r0, #7
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xa8>
 80001cc:	01cb      	lsls	r3, r1, #7
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0983      	lsrs	r3, r0, #6
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xb4>
 80001d8:	018b      	lsls	r3, r1, #6
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0943      	lsrs	r3, r0, #5
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xc0>
 80001e4:	014b      	lsls	r3, r1, #5
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0903      	lsrs	r3, r0, #4
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xcc>
 80001f0:	010b      	lsls	r3, r1, #4
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	08c3      	lsrs	r3, r0, #3
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xd8>
 80001fc:	00cb      	lsls	r3, r1, #3
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0883      	lsrs	r3, r0, #2
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xe4>
 8000208:	008b      	lsls	r3, r1, #2
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	0843      	lsrs	r3, r0, #1
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xf0>
 8000214:	004b      	lsls	r3, r1, #1
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	1a41      	subs	r1, r0, r1
 800021c:	d200      	bcs.n	8000220 <__udivsi3+0xf8>
 800021e:	4601      	mov	r1, r0
 8000220:	4152      	adcs	r2, r2
 8000222:	4610      	mov	r0, r2
 8000224:	4770      	bx	lr
 8000226:	e7ff      	b.n	8000228 <__udivsi3+0x100>
 8000228:	b501      	push	{r0, lr}
 800022a:	2000      	movs	r0, #0
 800022c:	f000 f8f0 	bl	8000410 <__aeabi_idiv0>
 8000230:	bd02      	pop	{r1, pc}
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <__aeabi_uidivmod>:
 8000234:	2900      	cmp	r1, #0
 8000236:	d0f7      	beq.n	8000228 <__udivsi3+0x100>
 8000238:	e776      	b.n	8000128 <__udivsi3>
 800023a:	4770      	bx	lr

0800023c <__divsi3>:
 800023c:	4603      	mov	r3, r0
 800023e:	430b      	orrs	r3, r1
 8000240:	d47f      	bmi.n	8000342 <__divsi3+0x106>
 8000242:	2200      	movs	r2, #0
 8000244:	0843      	lsrs	r3, r0, #1
 8000246:	428b      	cmp	r3, r1
 8000248:	d374      	bcc.n	8000334 <__divsi3+0xf8>
 800024a:	0903      	lsrs	r3, r0, #4
 800024c:	428b      	cmp	r3, r1
 800024e:	d35f      	bcc.n	8000310 <__divsi3+0xd4>
 8000250:	0a03      	lsrs	r3, r0, #8
 8000252:	428b      	cmp	r3, r1
 8000254:	d344      	bcc.n	80002e0 <__divsi3+0xa4>
 8000256:	0b03      	lsrs	r3, r0, #12
 8000258:	428b      	cmp	r3, r1
 800025a:	d328      	bcc.n	80002ae <__divsi3+0x72>
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d30d      	bcc.n	800027e <__divsi3+0x42>
 8000262:	22ff      	movs	r2, #255	; 0xff
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	ba12      	rev	r2, r2
 8000268:	0c03      	lsrs	r3, r0, #16
 800026a:	428b      	cmp	r3, r1
 800026c:	d302      	bcc.n	8000274 <__divsi3+0x38>
 800026e:	1212      	asrs	r2, r2, #8
 8000270:	0209      	lsls	r1, r1, #8
 8000272:	d065      	beq.n	8000340 <__divsi3+0x104>
 8000274:	0b03      	lsrs	r3, r0, #12
 8000276:	428b      	cmp	r3, r1
 8000278:	d319      	bcc.n	80002ae <__divsi3+0x72>
 800027a:	e000      	b.n	800027e <__divsi3+0x42>
 800027c:	0a09      	lsrs	r1, r1, #8
 800027e:	0bc3      	lsrs	r3, r0, #15
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x4c>
 8000284:	03cb      	lsls	r3, r1, #15
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b83      	lsrs	r3, r0, #14
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x58>
 8000290:	038b      	lsls	r3, r1, #14
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b43      	lsrs	r3, r0, #13
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x64>
 800029c:	034b      	lsls	r3, r1, #13
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b03      	lsrs	r3, r0, #12
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x70>
 80002a8:	030b      	lsls	r3, r1, #12
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0ac3      	lsrs	r3, r0, #11
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x7c>
 80002b4:	02cb      	lsls	r3, r1, #11
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a83      	lsrs	r3, r0, #10
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x88>
 80002c0:	028b      	lsls	r3, r1, #10
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a43      	lsrs	r3, r0, #9
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x94>
 80002cc:	024b      	lsls	r3, r1, #9
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a03      	lsrs	r3, r0, #8
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0xa0>
 80002d8:	020b      	lsls	r3, r1, #8
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	d2cd      	bcs.n	800027c <__divsi3+0x40>
 80002e0:	09c3      	lsrs	r3, r0, #7
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xae>
 80002e6:	01cb      	lsls	r3, r1, #7
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0983      	lsrs	r3, r0, #6
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xba>
 80002f2:	018b      	lsls	r3, r1, #6
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0943      	lsrs	r3, r0, #5
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xc6>
 80002fe:	014b      	lsls	r3, r1, #5
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0903      	lsrs	r3, r0, #4
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xd2>
 800030a:	010b      	lsls	r3, r1, #4
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	08c3      	lsrs	r3, r0, #3
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xde>
 8000316:	00cb      	lsls	r3, r1, #3
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0883      	lsrs	r3, r0, #2
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xea>
 8000322:	008b      	lsls	r3, r1, #2
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	0843      	lsrs	r3, r0, #1
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xf6>
 800032e:	004b      	lsls	r3, r1, #1
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	1a41      	subs	r1, r0, r1
 8000336:	d200      	bcs.n	800033a <__divsi3+0xfe>
 8000338:	4601      	mov	r1, r0
 800033a:	4152      	adcs	r2, r2
 800033c:	4610      	mov	r0, r2
 800033e:	4770      	bx	lr
 8000340:	e05d      	b.n	80003fe <__divsi3+0x1c2>
 8000342:	0fca      	lsrs	r2, r1, #31
 8000344:	d000      	beq.n	8000348 <__divsi3+0x10c>
 8000346:	4249      	negs	r1, r1
 8000348:	1003      	asrs	r3, r0, #32
 800034a:	d300      	bcc.n	800034e <__divsi3+0x112>
 800034c:	4240      	negs	r0, r0
 800034e:	4053      	eors	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	469c      	mov	ip, r3
 8000354:	0903      	lsrs	r3, r0, #4
 8000356:	428b      	cmp	r3, r1
 8000358:	d32d      	bcc.n	80003b6 <__divsi3+0x17a>
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d312      	bcc.n	8000386 <__divsi3+0x14a>
 8000360:	22fc      	movs	r2, #252	; 0xfc
 8000362:	0189      	lsls	r1, r1, #6
 8000364:	ba12      	rev	r2, r2
 8000366:	0a03      	lsrs	r3, r0, #8
 8000368:	428b      	cmp	r3, r1
 800036a:	d30c      	bcc.n	8000386 <__divsi3+0x14a>
 800036c:	0189      	lsls	r1, r1, #6
 800036e:	1192      	asrs	r2, r2, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d308      	bcc.n	8000386 <__divsi3+0x14a>
 8000374:	0189      	lsls	r1, r1, #6
 8000376:	1192      	asrs	r2, r2, #6
 8000378:	428b      	cmp	r3, r1
 800037a:	d304      	bcc.n	8000386 <__divsi3+0x14a>
 800037c:	0189      	lsls	r1, r1, #6
 800037e:	d03a      	beq.n	80003f6 <__divsi3+0x1ba>
 8000380:	1192      	asrs	r2, r2, #6
 8000382:	e000      	b.n	8000386 <__divsi3+0x14a>
 8000384:	0989      	lsrs	r1, r1, #6
 8000386:	09c3      	lsrs	r3, r0, #7
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x154>
 800038c:	01cb      	lsls	r3, r1, #7
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0983      	lsrs	r3, r0, #6
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x160>
 8000398:	018b      	lsls	r3, r1, #6
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0943      	lsrs	r3, r0, #5
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x16c>
 80003a4:	014b      	lsls	r3, r1, #5
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0903      	lsrs	r3, r0, #4
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x178>
 80003b0:	010b      	lsls	r3, r1, #4
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	08c3      	lsrs	r3, r0, #3
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x184>
 80003bc:	00cb      	lsls	r3, r1, #3
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0883      	lsrs	r3, r0, #2
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x190>
 80003c8:	008b      	lsls	r3, r1, #2
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	d2d9      	bcs.n	8000384 <__divsi3+0x148>
 80003d0:	0843      	lsrs	r3, r0, #1
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d301      	bcc.n	80003da <__divsi3+0x19e>
 80003d6:	004b      	lsls	r3, r1, #1
 80003d8:	1ac0      	subs	r0, r0, r3
 80003da:	4152      	adcs	r2, r2
 80003dc:	1a41      	subs	r1, r0, r1
 80003de:	d200      	bcs.n	80003e2 <__divsi3+0x1a6>
 80003e0:	4601      	mov	r1, r0
 80003e2:	4663      	mov	r3, ip
 80003e4:	4152      	adcs	r2, r2
 80003e6:	105b      	asrs	r3, r3, #1
 80003e8:	4610      	mov	r0, r2
 80003ea:	d301      	bcc.n	80003f0 <__divsi3+0x1b4>
 80003ec:	4240      	negs	r0, r0
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d500      	bpl.n	80003f4 <__divsi3+0x1b8>
 80003f2:	4249      	negs	r1, r1
 80003f4:	4770      	bx	lr
 80003f6:	4663      	mov	r3, ip
 80003f8:	105b      	asrs	r3, r3, #1
 80003fa:	d300      	bcc.n	80003fe <__divsi3+0x1c2>
 80003fc:	4240      	negs	r0, r0
 80003fe:	b501      	push	{r0, lr}
 8000400:	2000      	movs	r0, #0
 8000402:	f000 f805 	bl	8000410 <__aeabi_idiv0>
 8000406:	bd02      	pop	{r1, pc}

08000408 <__aeabi_idivmod>:
 8000408:	2900      	cmp	r1, #0
 800040a:	d0f8      	beq.n	80003fe <__divsi3+0x1c2>
 800040c:	e716      	b.n	800023c <__divsi3>
 800040e:	4770      	bx	lr

08000410 <__aeabi_idiv0>:
 8000410:	4770      	bx	lr
 8000412:	46c0      	nop			; (mov r8, r8)

08000414 <__aeabi_uldivmod>:
 8000414:	2b00      	cmp	r3, #0
 8000416:	d111      	bne.n	800043c <__aeabi_uldivmod+0x28>
 8000418:	2a00      	cmp	r2, #0
 800041a:	d10f      	bne.n	800043c <__aeabi_uldivmod+0x28>
 800041c:	2900      	cmp	r1, #0
 800041e:	d100      	bne.n	8000422 <__aeabi_uldivmod+0xe>
 8000420:	2800      	cmp	r0, #0
 8000422:	d002      	beq.n	800042a <__aeabi_uldivmod+0x16>
 8000424:	2100      	movs	r1, #0
 8000426:	43c9      	mvns	r1, r1
 8000428:	0008      	movs	r0, r1
 800042a:	b407      	push	{r0, r1, r2}
 800042c:	4802      	ldr	r0, [pc, #8]	; (8000438 <__aeabi_uldivmod+0x24>)
 800042e:	a102      	add	r1, pc, #8	; (adr r1, 8000438 <__aeabi_uldivmod+0x24>)
 8000430:	1840      	adds	r0, r0, r1
 8000432:	9002      	str	r0, [sp, #8]
 8000434:	bd03      	pop	{r0, r1, pc}
 8000436:	46c0      	nop			; (mov r8, r8)
 8000438:	ffffffd9 	.word	0xffffffd9
 800043c:	b403      	push	{r0, r1}
 800043e:	4668      	mov	r0, sp
 8000440:	b501      	push	{r0, lr}
 8000442:	9802      	ldr	r0, [sp, #8]
 8000444:	f000 f806 	bl	8000454 <__udivmoddi4>
 8000448:	9b01      	ldr	r3, [sp, #4]
 800044a:	469e      	mov	lr, r3
 800044c:	b002      	add	sp, #8
 800044e:	bc0c      	pop	{r2, r3}
 8000450:	4770      	bx	lr
 8000452:	46c0      	nop			; (mov r8, r8)

08000454 <__udivmoddi4>:
 8000454:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000456:	4657      	mov	r7, sl
 8000458:	464e      	mov	r6, r9
 800045a:	4645      	mov	r5, r8
 800045c:	46de      	mov	lr, fp
 800045e:	b5e0      	push	{r5, r6, r7, lr}
 8000460:	0004      	movs	r4, r0
 8000462:	000d      	movs	r5, r1
 8000464:	4692      	mov	sl, r2
 8000466:	4699      	mov	r9, r3
 8000468:	b083      	sub	sp, #12
 800046a:	428b      	cmp	r3, r1
 800046c:	d830      	bhi.n	80004d0 <__udivmoddi4+0x7c>
 800046e:	d02d      	beq.n	80004cc <__udivmoddi4+0x78>
 8000470:	4649      	mov	r1, r9
 8000472:	4650      	mov	r0, sl
 8000474:	f000 f8ba 	bl	80005ec <__clzdi2>
 8000478:	0029      	movs	r1, r5
 800047a:	0006      	movs	r6, r0
 800047c:	0020      	movs	r0, r4
 800047e:	f000 f8b5 	bl	80005ec <__clzdi2>
 8000482:	1a33      	subs	r3, r6, r0
 8000484:	4698      	mov	r8, r3
 8000486:	3b20      	subs	r3, #32
 8000488:	469b      	mov	fp, r3
 800048a:	d433      	bmi.n	80004f4 <__udivmoddi4+0xa0>
 800048c:	465a      	mov	r2, fp
 800048e:	4653      	mov	r3, sl
 8000490:	4093      	lsls	r3, r2
 8000492:	4642      	mov	r2, r8
 8000494:	001f      	movs	r7, r3
 8000496:	4653      	mov	r3, sl
 8000498:	4093      	lsls	r3, r2
 800049a:	001e      	movs	r6, r3
 800049c:	42af      	cmp	r7, r5
 800049e:	d83a      	bhi.n	8000516 <__udivmoddi4+0xc2>
 80004a0:	42af      	cmp	r7, r5
 80004a2:	d100      	bne.n	80004a6 <__udivmoddi4+0x52>
 80004a4:	e078      	b.n	8000598 <__udivmoddi4+0x144>
 80004a6:	465b      	mov	r3, fp
 80004a8:	1ba4      	subs	r4, r4, r6
 80004aa:	41bd      	sbcs	r5, r7
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	da00      	bge.n	80004b2 <__udivmoddi4+0x5e>
 80004b0:	e075      	b.n	800059e <__udivmoddi4+0x14a>
 80004b2:	2200      	movs	r2, #0
 80004b4:	2300      	movs	r3, #0
 80004b6:	9200      	str	r2, [sp, #0]
 80004b8:	9301      	str	r3, [sp, #4]
 80004ba:	2301      	movs	r3, #1
 80004bc:	465a      	mov	r2, fp
 80004be:	4093      	lsls	r3, r2
 80004c0:	9301      	str	r3, [sp, #4]
 80004c2:	2301      	movs	r3, #1
 80004c4:	4642      	mov	r2, r8
 80004c6:	4093      	lsls	r3, r2
 80004c8:	9300      	str	r3, [sp, #0]
 80004ca:	e028      	b.n	800051e <__udivmoddi4+0xca>
 80004cc:	4282      	cmp	r2, r0
 80004ce:	d9cf      	bls.n	8000470 <__udivmoddi4+0x1c>
 80004d0:	2200      	movs	r2, #0
 80004d2:	2300      	movs	r3, #0
 80004d4:	9200      	str	r2, [sp, #0]
 80004d6:	9301      	str	r3, [sp, #4]
 80004d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d001      	beq.n	80004e2 <__udivmoddi4+0x8e>
 80004de:	601c      	str	r4, [r3, #0]
 80004e0:	605d      	str	r5, [r3, #4]
 80004e2:	9800      	ldr	r0, [sp, #0]
 80004e4:	9901      	ldr	r1, [sp, #4]
 80004e6:	b003      	add	sp, #12
 80004e8:	bcf0      	pop	{r4, r5, r6, r7}
 80004ea:	46bb      	mov	fp, r7
 80004ec:	46b2      	mov	sl, r6
 80004ee:	46a9      	mov	r9, r5
 80004f0:	46a0      	mov	r8, r4
 80004f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004f4:	4642      	mov	r2, r8
 80004f6:	2320      	movs	r3, #32
 80004f8:	1a9b      	subs	r3, r3, r2
 80004fa:	4652      	mov	r2, sl
 80004fc:	40da      	lsrs	r2, r3
 80004fe:	4641      	mov	r1, r8
 8000500:	0013      	movs	r3, r2
 8000502:	464a      	mov	r2, r9
 8000504:	408a      	lsls	r2, r1
 8000506:	0017      	movs	r7, r2
 8000508:	4642      	mov	r2, r8
 800050a:	431f      	orrs	r7, r3
 800050c:	4653      	mov	r3, sl
 800050e:	4093      	lsls	r3, r2
 8000510:	001e      	movs	r6, r3
 8000512:	42af      	cmp	r7, r5
 8000514:	d9c4      	bls.n	80004a0 <__udivmoddi4+0x4c>
 8000516:	2200      	movs	r2, #0
 8000518:	2300      	movs	r3, #0
 800051a:	9200      	str	r2, [sp, #0]
 800051c:	9301      	str	r3, [sp, #4]
 800051e:	4643      	mov	r3, r8
 8000520:	2b00      	cmp	r3, #0
 8000522:	d0d9      	beq.n	80004d8 <__udivmoddi4+0x84>
 8000524:	07fb      	lsls	r3, r7, #31
 8000526:	0872      	lsrs	r2, r6, #1
 8000528:	431a      	orrs	r2, r3
 800052a:	4646      	mov	r6, r8
 800052c:	087b      	lsrs	r3, r7, #1
 800052e:	e00e      	b.n	800054e <__udivmoddi4+0xfa>
 8000530:	42ab      	cmp	r3, r5
 8000532:	d101      	bne.n	8000538 <__udivmoddi4+0xe4>
 8000534:	42a2      	cmp	r2, r4
 8000536:	d80c      	bhi.n	8000552 <__udivmoddi4+0xfe>
 8000538:	1aa4      	subs	r4, r4, r2
 800053a:	419d      	sbcs	r5, r3
 800053c:	2001      	movs	r0, #1
 800053e:	1924      	adds	r4, r4, r4
 8000540:	416d      	adcs	r5, r5
 8000542:	2100      	movs	r1, #0
 8000544:	3e01      	subs	r6, #1
 8000546:	1824      	adds	r4, r4, r0
 8000548:	414d      	adcs	r5, r1
 800054a:	2e00      	cmp	r6, #0
 800054c:	d006      	beq.n	800055c <__udivmoddi4+0x108>
 800054e:	42ab      	cmp	r3, r5
 8000550:	d9ee      	bls.n	8000530 <__udivmoddi4+0xdc>
 8000552:	3e01      	subs	r6, #1
 8000554:	1924      	adds	r4, r4, r4
 8000556:	416d      	adcs	r5, r5
 8000558:	2e00      	cmp	r6, #0
 800055a:	d1f8      	bne.n	800054e <__udivmoddi4+0xfa>
 800055c:	9800      	ldr	r0, [sp, #0]
 800055e:	9901      	ldr	r1, [sp, #4]
 8000560:	465b      	mov	r3, fp
 8000562:	1900      	adds	r0, r0, r4
 8000564:	4169      	adcs	r1, r5
 8000566:	2b00      	cmp	r3, #0
 8000568:	db24      	blt.n	80005b4 <__udivmoddi4+0x160>
 800056a:	002b      	movs	r3, r5
 800056c:	465a      	mov	r2, fp
 800056e:	4644      	mov	r4, r8
 8000570:	40d3      	lsrs	r3, r2
 8000572:	002a      	movs	r2, r5
 8000574:	40e2      	lsrs	r2, r4
 8000576:	001c      	movs	r4, r3
 8000578:	465b      	mov	r3, fp
 800057a:	0015      	movs	r5, r2
 800057c:	2b00      	cmp	r3, #0
 800057e:	db2a      	blt.n	80005d6 <__udivmoddi4+0x182>
 8000580:	0026      	movs	r6, r4
 8000582:	409e      	lsls	r6, r3
 8000584:	0033      	movs	r3, r6
 8000586:	0026      	movs	r6, r4
 8000588:	4647      	mov	r7, r8
 800058a:	40be      	lsls	r6, r7
 800058c:	0032      	movs	r2, r6
 800058e:	1a80      	subs	r0, r0, r2
 8000590:	4199      	sbcs	r1, r3
 8000592:	9000      	str	r0, [sp, #0]
 8000594:	9101      	str	r1, [sp, #4]
 8000596:	e79f      	b.n	80004d8 <__udivmoddi4+0x84>
 8000598:	42a3      	cmp	r3, r4
 800059a:	d8bc      	bhi.n	8000516 <__udivmoddi4+0xc2>
 800059c:	e783      	b.n	80004a6 <__udivmoddi4+0x52>
 800059e:	4642      	mov	r2, r8
 80005a0:	2320      	movs	r3, #32
 80005a2:	2100      	movs	r1, #0
 80005a4:	1a9b      	subs	r3, r3, r2
 80005a6:	2200      	movs	r2, #0
 80005a8:	9100      	str	r1, [sp, #0]
 80005aa:	9201      	str	r2, [sp, #4]
 80005ac:	2201      	movs	r2, #1
 80005ae:	40da      	lsrs	r2, r3
 80005b0:	9201      	str	r2, [sp, #4]
 80005b2:	e786      	b.n	80004c2 <__udivmoddi4+0x6e>
 80005b4:	4642      	mov	r2, r8
 80005b6:	2320      	movs	r3, #32
 80005b8:	1a9b      	subs	r3, r3, r2
 80005ba:	002a      	movs	r2, r5
 80005bc:	4646      	mov	r6, r8
 80005be:	409a      	lsls	r2, r3
 80005c0:	0023      	movs	r3, r4
 80005c2:	40f3      	lsrs	r3, r6
 80005c4:	4644      	mov	r4, r8
 80005c6:	4313      	orrs	r3, r2
 80005c8:	002a      	movs	r2, r5
 80005ca:	40e2      	lsrs	r2, r4
 80005cc:	001c      	movs	r4, r3
 80005ce:	465b      	mov	r3, fp
 80005d0:	0015      	movs	r5, r2
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	dad4      	bge.n	8000580 <__udivmoddi4+0x12c>
 80005d6:	4642      	mov	r2, r8
 80005d8:	002f      	movs	r7, r5
 80005da:	2320      	movs	r3, #32
 80005dc:	0026      	movs	r6, r4
 80005de:	4097      	lsls	r7, r2
 80005e0:	1a9b      	subs	r3, r3, r2
 80005e2:	40de      	lsrs	r6, r3
 80005e4:	003b      	movs	r3, r7
 80005e6:	4333      	orrs	r3, r6
 80005e8:	e7cd      	b.n	8000586 <__udivmoddi4+0x132>
 80005ea:	46c0      	nop			; (mov r8, r8)

080005ec <__clzdi2>:
 80005ec:	b510      	push	{r4, lr}
 80005ee:	2900      	cmp	r1, #0
 80005f0:	d103      	bne.n	80005fa <__clzdi2+0xe>
 80005f2:	f000 f807 	bl	8000604 <__clzsi2>
 80005f6:	3020      	adds	r0, #32
 80005f8:	e002      	b.n	8000600 <__clzdi2+0x14>
 80005fa:	0008      	movs	r0, r1
 80005fc:	f000 f802 	bl	8000604 <__clzsi2>
 8000600:	bd10      	pop	{r4, pc}
 8000602:	46c0      	nop			; (mov r8, r8)

08000604 <__clzsi2>:
 8000604:	211c      	movs	r1, #28
 8000606:	2301      	movs	r3, #1
 8000608:	041b      	lsls	r3, r3, #16
 800060a:	4298      	cmp	r0, r3
 800060c:	d301      	bcc.n	8000612 <__clzsi2+0xe>
 800060e:	0c00      	lsrs	r0, r0, #16
 8000610:	3910      	subs	r1, #16
 8000612:	0a1b      	lsrs	r3, r3, #8
 8000614:	4298      	cmp	r0, r3
 8000616:	d301      	bcc.n	800061c <__clzsi2+0x18>
 8000618:	0a00      	lsrs	r0, r0, #8
 800061a:	3908      	subs	r1, #8
 800061c:	091b      	lsrs	r3, r3, #4
 800061e:	4298      	cmp	r0, r3
 8000620:	d301      	bcc.n	8000626 <__clzsi2+0x22>
 8000622:	0900      	lsrs	r0, r0, #4
 8000624:	3904      	subs	r1, #4
 8000626:	a202      	add	r2, pc, #8	; (adr r2, 8000630 <__clzsi2+0x2c>)
 8000628:	5c10      	ldrb	r0, [r2, r0]
 800062a:	1840      	adds	r0, r0, r1
 800062c:	4770      	bx	lr
 800062e:	46c0      	nop			; (mov r8, r8)
 8000630:	02020304 	.word	0x02020304
 8000634:	01010101 	.word	0x01010101
	...

08000640 <portInit_shiftreg>:
#include "cd4094.h"
#include "main.h"

//switches connected on encoder - D1, D4, D5, D8, D9, D12, D13, D16, D17, D20, D21, D22
void portInit_shiftreg(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	af00      	add	r7, sp, #0

    //default conditions
//    WDI_TOGGLE();
//    ANDgate_LOW();
//    STROBE_4094_LOW();
	HAL_GPIO_WritePin(STROBE_4094_GPIO_Port, STROBE_4094_Pin, RESET);
 8000644:	2380      	movs	r3, #128	; 0x80
 8000646:	005b      	lsls	r3, r3, #1
 8000648:	480a      	ldr	r0, [pc, #40]	; (8000674 <portInit_shiftreg+0x34>)
 800064a:	2200      	movs	r2, #0
 800064c:	0019      	movs	r1, r3
 800064e:	f001 f8f0 	bl	8001832 <HAL_GPIO_WritePin>
//    CLOCK_4094_LOW();
	HAL_GPIO_WritePin(CLK_4094_GPIO_Port, CLK_4094_Pin, RESET);
 8000652:	2380      	movs	r3, #128	; 0x80
 8000654:	009b      	lsls	r3, r3, #2
 8000656:	4807      	ldr	r0, [pc, #28]	; (8000674 <portInit_shiftreg+0x34>)
 8000658:	2200      	movs	r2, #0
 800065a:	0019      	movs	r1, r3
 800065c:	f001 f8e9 	bl	8001832 <HAL_GPIO_WritePin>
//    DATA_4094_LOW();
	HAL_GPIO_WritePin(DATA_4094_GPIO_Port, DATA_4094_Pin, RESET);
 8000660:	2380      	movs	r3, #128	; 0x80
 8000662:	005b      	lsls	r3, r3, #1
 8000664:	4804      	ldr	r0, [pc, #16]	; (8000678 <portInit_shiftreg+0x38>)
 8000666:	2200      	movs	r2, #0
 8000668:	0019      	movs	r1, r3
 800066a:	f001 f8e2 	bl	8001832 <HAL_GPIO_WritePin>
}
 800066e:	46c0      	nop			; (mov r8, r8)
 8000670:	46bd      	mov	sp, r7
 8000672:	bd80      	pop	{r7, pc}
 8000674:	50000800 	.word	0x50000800
 8000678:	50000400 	.word	0x50000400

0800067c <writeToShiftRegister>:


void writeToShiftRegister(uint32_t value)
{
 800067c:	b590      	push	{r4, r7, lr}
 800067e:	b087      	sub	sp, #28
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]
    uint32_t tempValue = value;
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	617b      	str	r3, [r7, #20]
    if(tempValue > MaxAllowedNum)
 8000688:	697a      	ldr	r2, [r7, #20]
 800068a:	2380      	movs	r3, #128	; 0x80
 800068c:	045b      	lsls	r3, r3, #17
 800068e:	429a      	cmp	r2, r3
 8000690:	d301      	bcc.n	8000696 <writeToShiftRegister+0x1a>
    {
        tempValue = MaxAllowedNum;
 8000692:	4b2a      	ldr	r3, [pc, #168]	; (800073c <writeToShiftRegister+0xc0>)
 8000694:	617b      	str	r3, [r7, #20]
    }
    int j;

//    STROBE_4094_LOW();
	HAL_GPIO_WritePin(STROBE_4094_GPIO_Port, STROBE_4094_Pin, RESET);
 8000696:	2380      	movs	r3, #128	; 0x80
 8000698:	005b      	lsls	r3, r3, #1
 800069a:	4829      	ldr	r0, [pc, #164]	; (8000740 <writeToShiftRegister+0xc4>)
 800069c:	2200      	movs	r2, #0
 800069e:	0019      	movs	r1, r3
 80006a0:	f001 f8c7 	bl	8001832 <HAL_GPIO_WritePin>

    for(j = HCF4094_outputs-1; j>=0; j--)
 80006a4:	2317      	movs	r3, #23
 80006a6:	613b      	str	r3, [r7, #16]
 80006a8:	e03a      	b.n	8000720 <writeToShiftRegister+0xa4>
    {
        bool num = 0;
 80006aa:	210f      	movs	r1, #15
 80006ac:	187b      	adds	r3, r7, r1
 80006ae:	2200      	movs	r2, #0
 80006b0:	701a      	strb	r2, [r3, #0]
        uint32_t temp1Val = 0;
 80006b2:	2300      	movs	r3, #0
 80006b4:	60bb      	str	r3, [r7, #8]
        temp1Val = (tempValue >> (j - 1));
 80006b6:	693b      	ldr	r3, [r7, #16]
 80006b8:	3b01      	subs	r3, #1
 80006ba:	697a      	ldr	r2, [r7, #20]
 80006bc:	40da      	lsrs	r2, r3
 80006be:	0013      	movs	r3, r2
 80006c0:	60bb      	str	r3, [r7, #8]
        num = (bool)(temp1Val & 0x01);
 80006c2:	68bb      	ldr	r3, [r7, #8]
 80006c4:	2201      	movs	r2, #1
 80006c6:	401a      	ands	r2, r3
 80006c8:	000c      	movs	r4, r1
 80006ca:	187b      	adds	r3, r7, r1
 80006cc:	1e51      	subs	r1, r2, #1
 80006ce:	418a      	sbcs	r2, r1
 80006d0:	701a      	strb	r2, [r3, #0]

//        CLOCK_4094_LOW();
    	HAL_GPIO_WritePin(CLK_4094_GPIO_Port, CLK_4094_Pin, RESET);
 80006d2:	2380      	movs	r3, #128	; 0x80
 80006d4:	009b      	lsls	r3, r3, #2
 80006d6:	481a      	ldr	r0, [pc, #104]	; (8000740 <writeToShiftRegister+0xc4>)
 80006d8:	2200      	movs	r2, #0
 80006da:	0019      	movs	r1, r3
 80006dc:	f001 f8a9 	bl	8001832 <HAL_GPIO_WritePin>

        if(num == 0)
 80006e0:	193b      	adds	r3, r7, r4
 80006e2:	781b      	ldrb	r3, [r3, #0]
 80006e4:	2201      	movs	r2, #1
 80006e6:	4053      	eors	r3, r2
 80006e8:	b2db      	uxtb	r3, r3
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d007      	beq.n	80006fe <writeToShiftRegister+0x82>
        {
//            DATA_4094_HIGH();
        	HAL_GPIO_WritePin(DATA_4094_GPIO_Port, DATA_4094_Pin, SET);
 80006ee:	2380      	movs	r3, #128	; 0x80
 80006f0:	005b      	lsls	r3, r3, #1
 80006f2:	4814      	ldr	r0, [pc, #80]	; (8000744 <writeToShiftRegister+0xc8>)
 80006f4:	2201      	movs	r2, #1
 80006f6:	0019      	movs	r1, r3
 80006f8:	f001 f89b 	bl	8001832 <HAL_GPIO_WritePin>
 80006fc:	e006      	b.n	800070c <writeToShiftRegister+0x90>

        }
        else
        {
//            DATA_4094_LOW();
        	HAL_GPIO_WritePin(DATA_4094_GPIO_Port, DATA_4094_Pin, RESET);
 80006fe:	2380      	movs	r3, #128	; 0x80
 8000700:	005b      	lsls	r3, r3, #1
 8000702:	4810      	ldr	r0, [pc, #64]	; (8000744 <writeToShiftRegister+0xc8>)
 8000704:	2200      	movs	r2, #0
 8000706:	0019      	movs	r1, r3
 8000708:	f001 f893 	bl	8001832 <HAL_GPIO_WritePin>

        }
//        CLOCK_4094_HIGH();
    	HAL_GPIO_WritePin(CLK_4094_GPIO_Port, CLK_4094_Pin, SET);
 800070c:	2380      	movs	r3, #128	; 0x80
 800070e:	009b      	lsls	r3, r3, #2
 8000710:	480b      	ldr	r0, [pc, #44]	; (8000740 <writeToShiftRegister+0xc4>)
 8000712:	2201      	movs	r2, #1
 8000714:	0019      	movs	r1, r3
 8000716:	f001 f88c 	bl	8001832 <HAL_GPIO_WritePin>
    for(j = HCF4094_outputs-1; j>=0; j--)
 800071a:	693b      	ldr	r3, [r7, #16]
 800071c:	3b01      	subs	r3, #1
 800071e:	613b      	str	r3, [r7, #16]
 8000720:	693b      	ldr	r3, [r7, #16]
 8000722:	2b00      	cmp	r3, #0
 8000724:	dac1      	bge.n	80006aa <writeToShiftRegister+0x2e>

    }
//    STROBE_4094_HIGH();
	HAL_GPIO_WritePin(STROBE_4094_GPIO_Port, STROBE_4094_Pin, SET);
 8000726:	2380      	movs	r3, #128	; 0x80
 8000728:	005b      	lsls	r3, r3, #1
 800072a:	4805      	ldr	r0, [pc, #20]	; (8000740 <writeToShiftRegister+0xc4>)
 800072c:	2201      	movs	r2, #1
 800072e:	0019      	movs	r1, r3
 8000730:	f001 f87f 	bl	8001832 <HAL_GPIO_WritePin>

}
 8000734:	46c0      	nop			; (mov r8, r8)
 8000736:	46bd      	mov	sp, r7
 8000738:	b007      	add	sp, #28
 800073a:	bd90      	pop	{r4, r7, pc}
 800073c:	00ffffff 	.word	0x00ffffff
 8000740:	50000800 	.word	0x50000800
 8000744:	50000400 	.word	0x50000400

08000748 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000748:	b590      	push	{r4, r7, lr}
 800074a:	b08b      	sub	sp, #44	; 0x2c
 800074c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800074e:	2414      	movs	r4, #20
 8000750:	193b      	adds	r3, r7, r4
 8000752:	0018      	movs	r0, r3
 8000754:	2314      	movs	r3, #20
 8000756:	001a      	movs	r2, r3
 8000758:	2100      	movs	r1, #0
 800075a:	f004 fc4a 	bl	8004ff2 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800075e:	4b5e      	ldr	r3, [pc, #376]	; (80008d8 <MX_GPIO_Init+0x190>)
 8000760:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000762:	4b5d      	ldr	r3, [pc, #372]	; (80008d8 <MX_GPIO_Init+0x190>)
 8000764:	2104      	movs	r1, #4
 8000766:	430a      	orrs	r2, r1
 8000768:	635a      	str	r2, [r3, #52]	; 0x34
 800076a:	4b5b      	ldr	r3, [pc, #364]	; (80008d8 <MX_GPIO_Init+0x190>)
 800076c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800076e:	2204      	movs	r2, #4
 8000770:	4013      	ands	r3, r2
 8000772:	613b      	str	r3, [r7, #16]
 8000774:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000776:	4b58      	ldr	r3, [pc, #352]	; (80008d8 <MX_GPIO_Init+0x190>)
 8000778:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800077a:	4b57      	ldr	r3, [pc, #348]	; (80008d8 <MX_GPIO_Init+0x190>)
 800077c:	2120      	movs	r1, #32
 800077e:	430a      	orrs	r2, r1
 8000780:	635a      	str	r2, [r3, #52]	; 0x34
 8000782:	4b55      	ldr	r3, [pc, #340]	; (80008d8 <MX_GPIO_Init+0x190>)
 8000784:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000786:	2220      	movs	r2, #32
 8000788:	4013      	ands	r3, r2
 800078a:	60fb      	str	r3, [r7, #12]
 800078c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800078e:	4b52      	ldr	r3, [pc, #328]	; (80008d8 <MX_GPIO_Init+0x190>)
 8000790:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000792:	4b51      	ldr	r3, [pc, #324]	; (80008d8 <MX_GPIO_Init+0x190>)
 8000794:	2101      	movs	r1, #1
 8000796:	430a      	orrs	r2, r1
 8000798:	635a      	str	r2, [r3, #52]	; 0x34
 800079a:	4b4f      	ldr	r3, [pc, #316]	; (80008d8 <MX_GPIO_Init+0x190>)
 800079c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800079e:	2201      	movs	r2, #1
 80007a0:	4013      	ands	r3, r2
 80007a2:	60bb      	str	r3, [r7, #8]
 80007a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007a6:	4b4c      	ldr	r3, [pc, #304]	; (80008d8 <MX_GPIO_Init+0x190>)
 80007a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80007aa:	4b4b      	ldr	r3, [pc, #300]	; (80008d8 <MX_GPIO_Init+0x190>)
 80007ac:	2102      	movs	r1, #2
 80007ae:	430a      	orrs	r2, r1
 80007b0:	635a      	str	r2, [r3, #52]	; 0x34
 80007b2:	4b49      	ldr	r3, [pc, #292]	; (80008d8 <MX_GPIO_Init+0x190>)
 80007b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80007b6:	2202      	movs	r2, #2
 80007b8:	4013      	ands	r3, r2
 80007ba:	607b      	str	r3, [r7, #4]
 80007bc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI_CS_Pin|LED_GREEN_Pin, GPIO_PIN_RESET);
 80007be:	23a0      	movs	r3, #160	; 0xa0
 80007c0:	05db      	lsls	r3, r3, #23
 80007c2:	2200      	movs	r2, #0
 80007c4:	2122      	movs	r1, #34	; 0x22
 80007c6:	0018      	movs	r0, r3
 80007c8:	f001 f833 	bl	8001832 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, PWR_Pin|TRX_CE_Pin|TXEN_Pin|DATA_4094_Pin
 80007cc:	23e3      	movs	r3, #227	; 0xe3
 80007ce:	021b      	lsls	r3, r3, #8
 80007d0:	4842      	ldr	r0, [pc, #264]	; (80008dc <MX_GPIO_Init+0x194>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	0019      	movs	r1, r3
 80007d6:	f001 f82c 	bl	8001832 <HAL_GPIO_WritePin>
                          |RELAY3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, RELAY2_Pin|STROBE_4094_Pin|CLK_4094_Pin, GPIO_PIN_RESET);
 80007da:	23d0      	movs	r3, #208	; 0xd0
 80007dc:	009b      	lsls	r3, r3, #2
 80007de:	4840      	ldr	r0, [pc, #256]	; (80008e0 <MX_GPIO_Init+0x198>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	0019      	movs	r1, r3
 80007e4:	f001 f825 	bl	8001832 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI_CS_Pin;
 80007e8:	193b      	adds	r3, r7, r4
 80007ea:	2202      	movs	r2, #2
 80007ec:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ee:	193b      	adds	r3, r7, r4
 80007f0:	2201      	movs	r2, #1
 80007f2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f4:	193b      	adds	r3, r7, r4
 80007f6:	2200      	movs	r2, #0
 80007f8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007fa:	193b      	adds	r3, r7, r4
 80007fc:	2200      	movs	r2, #0
 80007fe:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(SPI_CS_GPIO_Port, &GPIO_InitStruct);
 8000800:	193a      	adds	r2, r7, r4
 8000802:	23a0      	movs	r3, #160	; 0xa0
 8000804:	05db      	lsls	r3, r3, #23
 8000806:	0011      	movs	r1, r2
 8000808:	0018      	movs	r0, r3
 800080a:	f000 fe91 	bl	8001530 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 800080e:	193b      	adds	r3, r7, r4
 8000810:	2220      	movs	r2, #32
 8000812:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000814:	193b      	adds	r3, r7, r4
 8000816:	2201      	movs	r2, #1
 8000818:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081a:	193b      	adds	r3, r7, r4
 800081c:	2200      	movs	r2, #0
 800081e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000820:	193b      	adds	r3, r7, r4
 8000822:	2202      	movs	r2, #2
 8000824:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8000826:	193a      	adds	r2, r7, r4
 8000828:	23a0      	movs	r3, #160	; 0xa0
 800082a:	05db      	lsls	r3, r3, #23
 800082c:	0011      	movs	r1, r2
 800082e:	0018      	movs	r0, r3
 8000830:	f000 fe7e 	bl	8001530 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CD_Pin;
 8000834:	0021      	movs	r1, r4
 8000836:	187b      	adds	r3, r7, r1
 8000838:	2280      	movs	r2, #128	; 0x80
 800083a:	0152      	lsls	r2, r2, #5
 800083c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800083e:	000c      	movs	r4, r1
 8000840:	193b      	adds	r3, r7, r4
 8000842:	2200      	movs	r2, #0
 8000844:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000846:	193b      	adds	r3, r7, r4
 8000848:	2200      	movs	r2, #0
 800084a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(CD_GPIO_Port, &GPIO_InitStruct);
 800084c:	193b      	adds	r3, r7, r4
 800084e:	4a23      	ldr	r2, [pc, #140]	; (80008dc <MX_GPIO_Init+0x194>)
 8000850:	0019      	movs	r1, r3
 8000852:	0010      	movs	r0, r2
 8000854:	f000 fe6c 	bl	8001530 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = PWR_Pin|TRX_CE_Pin|TXEN_Pin|DATA_4094_Pin
 8000858:	0021      	movs	r1, r4
 800085a:	187b      	adds	r3, r7, r1
 800085c:	22e3      	movs	r2, #227	; 0xe3
 800085e:	0212      	lsls	r2, r2, #8
 8000860:	601a      	str	r2, [r3, #0]
                          |RELAY3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000862:	000c      	movs	r4, r1
 8000864:	193b      	adds	r3, r7, r4
 8000866:	2201      	movs	r2, #1
 8000868:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086a:	193b      	adds	r3, r7, r4
 800086c:	2200      	movs	r2, #0
 800086e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000870:	193b      	adds	r3, r7, r4
 8000872:	2200      	movs	r2, #0
 8000874:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000876:	193b      	adds	r3, r7, r4
 8000878:	4a18      	ldr	r2, [pc, #96]	; (80008dc <MX_GPIO_Init+0x194>)
 800087a:	0019      	movs	r1, r3
 800087c:	0010      	movs	r0, r2
 800087e:	f000 fe57 	bl	8001530 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RELAY2_Pin|STROBE_4094_Pin|CLK_4094_Pin;
 8000882:	0021      	movs	r1, r4
 8000884:	187b      	adds	r3, r7, r1
 8000886:	22d0      	movs	r2, #208	; 0xd0
 8000888:	0092      	lsls	r2, r2, #2
 800088a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800088c:	000c      	movs	r4, r1
 800088e:	193b      	adds	r3, r7, r4
 8000890:	2201      	movs	r2, #1
 8000892:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000894:	193b      	adds	r3, r7, r4
 8000896:	2200      	movs	r2, #0
 8000898:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800089a:	193b      	adds	r3, r7, r4
 800089c:	2200      	movs	r2, #0
 800089e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008a0:	193b      	adds	r3, r7, r4
 80008a2:	4a0f      	ldr	r2, [pc, #60]	; (80008e0 <MX_GPIO_Init+0x198>)
 80008a4:	0019      	movs	r1, r3
 80008a6:	0010      	movs	r0, r2
 80008a8:	f000 fe42 	bl	8001530 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = AM_Pin|DR_Pin;
 80008ac:	0021      	movs	r1, r4
 80008ae:	187b      	adds	r3, r7, r1
 80008b0:	22c0      	movs	r2, #192	; 0xc0
 80008b2:	0152      	lsls	r2, r2, #5
 80008b4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008b6:	187b      	adds	r3, r7, r1
 80008b8:	2200      	movs	r2, #0
 80008ba:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008bc:	187b      	adds	r3, r7, r1
 80008be:	2200      	movs	r2, #0
 80008c0:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008c2:	187a      	adds	r2, r7, r1
 80008c4:	23a0      	movs	r3, #160	; 0xa0
 80008c6:	05db      	lsls	r3, r3, #23
 80008c8:	0011      	movs	r1, r2
 80008ca:	0018      	movs	r0, r3
 80008cc:	f000 fe30 	bl	8001530 <HAL_GPIO_Init>

}
 80008d0:	46c0      	nop			; (mov r8, r8)
 80008d2:	46bd      	mov	sp, r7
 80008d4:	b00b      	add	sp, #44	; 0x2c
 80008d6:	bd90      	pop	{r4, r7, pc}
 80008d8:	40021000 	.word	0x40021000
 80008dc:	50000400 	.word	0x50000400
 80008e0:	50000800 	.word	0x50000800

080008e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008e4:	b590      	push	{r4, r7, lr}
 80008e6:	b089      	sub	sp, #36	; 0x24
 80008e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	initialise_monitor_handles();
 80008ea:	f004 f9db 	bl	8004ca4 <initialise_monitor_handles>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008ee:	f000 fc17 	bl	8001120 <HAL_Init>

  /* USER CODE BEGIN Init */
  portInit_shiftreg();
 80008f2:	f7ff fea5 	bl	8000640 <portInit_shiftreg>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008f6:	f000 f93d 	bl	8000b74 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008fa:	f7ff ff25 	bl	8000748 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80008fe:	f000 fb37 	bl	8000f70 <MX_USART2_UART_Init>
  MX_SPI2_Init();
 8000902:	f000 f985 	bl	8000c10 <MX_SPI2_Init>
  MX_TIM3_Init();
 8000906:	f000 fabf 	bl	8000e88 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  uint32_t uid = 0x00;
 800090a:	2300      	movs	r3, #0
 800090c:	61fb      	str	r3, [r7, #28]
  	for (uint8_t i = 0; i < 3; ++i) {
 800090e:	231b      	movs	r3, #27
 8000910:	18fb      	adds	r3, r7, r3
 8000912:	2200      	movs	r2, #0
 8000914:	701a      	strb	r2, [r3, #0]
 8000916:	e00f      	b.n	8000938 <main+0x54>
  		uid += (uint32_t) (UID_BASE + i * 4);
 8000918:	211b      	movs	r1, #27
 800091a:	187b      	adds	r3, r7, r1
 800091c:	781b      	ldrb	r3, [r3, #0]
 800091e:	009b      	lsls	r3, r3, #2
 8000920:	001a      	movs	r2, r3
 8000922:	69fb      	ldr	r3, [r7, #28]
 8000924:	18d3      	adds	r3, r2, r3
 8000926:	4a82      	ldr	r2, [pc, #520]	; (8000b30 <main+0x24c>)
 8000928:	4694      	mov	ip, r2
 800092a:	4463      	add	r3, ip
 800092c:	61fb      	str	r3, [r7, #28]
  	for (uint8_t i = 0; i < 3; ++i) {
 800092e:	187b      	adds	r3, r7, r1
 8000930:	187a      	adds	r2, r7, r1
 8000932:	7812      	ldrb	r2, [r2, #0]
 8000934:	3201      	adds	r2, #1
 8000936:	701a      	strb	r2, [r3, #0]
 8000938:	231b      	movs	r3, #27
 800093a:	18fb      	adds	r3, r7, r3
 800093c:	781b      	ldrb	r3, [r3, #0]
 800093e:	2b02      	cmp	r3, #2
 8000940:	d9ea      	bls.n	8000918 <main+0x34>
  	}
  	srand(uid);
 8000942:	69fb      	ldr	r3, [r7, #28]
 8000944:	0018      	movs	r0, r3
 8000946:	f004 fc8b 	bl	8005260 <srand>

  	NRF905_hw.gpio[NRF905_HW_GPIO_TXEN].pin = TXEN_Pin;
 800094a:	4b7a      	ldr	r3, [pc, #488]	; (8000b34 <main+0x250>)
 800094c:	2280      	movs	r2, #128	; 0x80
 800094e:	0212      	lsls	r2, r2, #8
 8000950:	601a      	str	r2, [r3, #0]
  	NRF905_hw.gpio[NRF905_HW_GPIO_TXEN].port = TXEN_GPIO_Port;
 8000952:	4b78      	ldr	r3, [pc, #480]	; (8000b34 <main+0x250>)
 8000954:	4a78      	ldr	r2, [pc, #480]	; (8000b38 <main+0x254>)
 8000956:	605a      	str	r2, [r3, #4]
  	NRF905_hw.gpio[NRF905_HW_GPIO_TRX_EN].pin = TRX_CE_Pin;
 8000958:	4b76      	ldr	r3, [pc, #472]	; (8000b34 <main+0x250>)
 800095a:	2280      	movs	r2, #128	; 0x80
 800095c:	01d2      	lsls	r2, r2, #7
 800095e:	609a      	str	r2, [r3, #8]
  	NRF905_hw.gpio[NRF905_HW_GPIO_TRX_EN].port = TRX_CE_GPIO_Port;
 8000960:	4b74      	ldr	r3, [pc, #464]	; (8000b34 <main+0x250>)
 8000962:	4a75      	ldr	r2, [pc, #468]	; (8000b38 <main+0x254>)
 8000964:	60da      	str	r2, [r3, #12]
  	NRF905_hw.gpio[NRF905_HW_GPIO_PWR].pin = PWR_Pin;
 8000966:	4b73      	ldr	r3, [pc, #460]	; (8000b34 <main+0x250>)
 8000968:	2280      	movs	r2, #128	; 0x80
 800096a:	0192      	lsls	r2, r2, #6
 800096c:	611a      	str	r2, [r3, #16]
  	NRF905_hw.gpio[NRF905_HW_GPIO_PWR].port = PWR_GPIO_Port;
 800096e:	4b71      	ldr	r3, [pc, #452]	; (8000b34 <main+0x250>)
 8000970:	4a71      	ldr	r2, [pc, #452]	; (8000b38 <main+0x254>)
 8000972:	615a      	str	r2, [r3, #20]

  	NRF905_hw.gpio[NRF905_HW_GPIO_CD].pin = CD_Pin;
 8000974:	4b6f      	ldr	r3, [pc, #444]	; (8000b34 <main+0x250>)
 8000976:	2280      	movs	r2, #128	; 0x80
 8000978:	0152      	lsls	r2, r2, #5
 800097a:	619a      	str	r2, [r3, #24]
  	NRF905_hw.gpio[NRF905_HW_GPIO_CD].port = CD_GPIO_Port;
 800097c:	4b6d      	ldr	r3, [pc, #436]	; (8000b34 <main+0x250>)
 800097e:	4a6e      	ldr	r2, [pc, #440]	; (8000b38 <main+0x254>)
 8000980:	61da      	str	r2, [r3, #28]
  	NRF905_hw.gpio[NRF905_HW_GPIO_AM].pin = AM_Pin;
 8000982:	4b6c      	ldr	r3, [pc, #432]	; (8000b34 <main+0x250>)
 8000984:	2280      	movs	r2, #128	; 0x80
 8000986:	0112      	lsls	r2, r2, #4
 8000988:	621a      	str	r2, [r3, #32]
  	NRF905_hw.gpio[NRF905_HW_GPIO_AM].port = AM_GPIO_Port;
 800098a:	4b6a      	ldr	r3, [pc, #424]	; (8000b34 <main+0x250>)
 800098c:	22a0      	movs	r2, #160	; 0xa0
 800098e:	05d2      	lsls	r2, r2, #23
 8000990:	625a      	str	r2, [r3, #36]	; 0x24
  	NRF905_hw.gpio[NRF905_HW_GPIO_DR].pin = DR_Pin;
 8000992:	4b68      	ldr	r3, [pc, #416]	; (8000b34 <main+0x250>)
 8000994:	2280      	movs	r2, #128	; 0x80
 8000996:	0152      	lsls	r2, r2, #5
 8000998:	629a      	str	r2, [r3, #40]	; 0x28
  	NRF905_hw.gpio[NRF905_HW_GPIO_DR].port = DR_GPIO_Port;
 800099a:	4b66      	ldr	r3, [pc, #408]	; (8000b34 <main+0x250>)
 800099c:	22a0      	movs	r2, #160	; 0xa0
 800099e:	05d2      	lsls	r2, r2, #23
 80009a0:	62da      	str	r2, [r3, #44]	; 0x2c

  	NRF905_hw.gpio[NRF905_HW_GPIO_CS].pin = SPI_CS_Pin;
 80009a2:	4b64      	ldr	r3, [pc, #400]	; (8000b34 <main+0x250>)
 80009a4:	2202      	movs	r2, #2
 80009a6:	631a      	str	r2, [r3, #48]	; 0x30
  	NRF905_hw.gpio[NRF905_HW_GPIO_CS].port = SPI_CS_GPIO_Port;
 80009a8:	4b62      	ldr	r3, [pc, #392]	; (8000b34 <main+0x250>)
 80009aa:	22a0      	movs	r2, #160	; 0xa0
 80009ac:	05d2      	lsls	r2, r2, #23
 80009ae:	635a      	str	r2, [r3, #52]	; 0x34

  	NRF905_hw.tim = &htim3;
 80009b0:	4b60      	ldr	r3, [pc, #384]	; (8000b34 <main+0x250>)
 80009b2:	4a62      	ldr	r2, [pc, #392]	; (8000b3c <main+0x258>)
 80009b4:	63da      	str	r2, [r3, #60]	; 0x3c
  	NRF905_hw.spi = &hspi2;
 80009b6:	4b5f      	ldr	r3, [pc, #380]	; (8000b34 <main+0x250>)
 80009b8:	4a61      	ldr	r2, [pc, #388]	; (8000b40 <main+0x25c>)
 80009ba:	639a      	str	r2, [r3, #56]	; 0x38

  	master = 0; //HAL_GPIO_ReadPin(MODE_GPIO_Port, MODE_Pin);
 80009bc:	4b61      	ldr	r3, [pc, #388]	; (8000b44 <main+0x260>)
 80009be:	2200      	movs	r2, #0
 80009c0:	601a      	str	r2, [r3, #0]
  	if (master == 1) {
 80009c2:	4b60      	ldr	r3, [pc, #384]	; (8000b44 <main+0x260>)
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	2b01      	cmp	r3, #1
 80009c8:	d106      	bne.n	80009d8 <main+0xf4>
  		my_address = ADDRESS_MASTER;
 80009ca:	4b5f      	ldr	r3, [pc, #380]	; (8000b48 <main+0x264>)
 80009cc:	4a5f      	ldr	r2, [pc, #380]	; (8000b4c <main+0x268>)
 80009ce:	601a      	str	r2, [r3, #0]
  		receiver_address = ADDRESS_SLAVE;
 80009d0:	4b5f      	ldr	r3, [pc, #380]	; (8000b50 <main+0x26c>)
 80009d2:	4a5e      	ldr	r2, [pc, #376]	; (8000b4c <main+0x268>)
 80009d4:	601a      	str	r2, [r3, #0]
 80009d6:	e005      	b.n	80009e4 <main+0x100>
  	} else {
  		my_address = ADDRESS_SLAVE;
 80009d8:	4b5b      	ldr	r3, [pc, #364]	; (8000b48 <main+0x264>)
 80009da:	4a5c      	ldr	r2, [pc, #368]	; (8000b4c <main+0x268>)
 80009dc:	601a      	str	r2, [r3, #0]
  		receiver_address = ADDRESS_MASTER;
 80009de:	4b5c      	ldr	r3, [pc, #368]	; (8000b50 <main+0x26c>)
 80009e0:	4a5a      	ldr	r2, [pc, #360]	; (8000b4c <main+0x268>)
 80009e2:	601a      	str	r2, [r3, #0]
  	}

  	if (master == 1) {
 80009e4:	4b57      	ldr	r3, [pc, #348]	; (8000b44 <main+0x260>)
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	2b01      	cmp	r3, #1
 80009ea:	d107      	bne.n	80009fc <main+0x118>
  		printf("Mode: Master, TX, %08lX\r\n", my_address);
 80009ec:	4b56      	ldr	r3, [pc, #344]	; (8000b48 <main+0x264>)
 80009ee:	681a      	ldr	r2, [r3, #0]
 80009f0:	4b58      	ldr	r3, [pc, #352]	; (8000b54 <main+0x270>)
 80009f2:	0011      	movs	r1, r2
 80009f4:	0018      	movs	r0, r3
 80009f6:	f004 fb9d 	bl	8005134 <iprintf>
 80009fa:	e006      	b.n	8000a0a <main+0x126>
//  		HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
  	} else {
  		printf("Mode: Slave, RX, %08lX\r\n", my_address);
 80009fc:	4b52      	ldr	r3, [pc, #328]	; (8000b48 <main+0x264>)
 80009fe:	681a      	ldr	r2, [r3, #0]
 8000a00:	4b55      	ldr	r3, [pc, #340]	; (8000b58 <main+0x274>)
 8000a02:	0011      	movs	r1, r2
 8000a04:	0018      	movs	r0, r3
 8000a06:	f004 fb95 	bl	8005134 <iprintf>
//  		HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_SET);
  	}

  	NRF905_init(&NRF905, &NRF905_hw);
 8000a0a:	4a4a      	ldr	r2, [pc, #296]	; (8000b34 <main+0x250>)
 8000a0c:	4b53      	ldr	r3, [pc, #332]	; (8000b5c <main+0x278>)
 8000a0e:	0011      	movs	r1, r2
 8000a10:	0018      	movs	r0, r3
 8000a12:	f003 fd27 	bl	8004464 <NRF905_init>
  	NRF905_set_listen_address(&NRF905, receiver_address);
 8000a16:	4b4e      	ldr	r3, [pc, #312]	; (8000b50 <main+0x26c>)
 8000a18:	681a      	ldr	r2, [r3, #0]
 8000a1a:	4b50      	ldr	r3, [pc, #320]	; (8000b5c <main+0x278>)
 8000a1c:	0011      	movs	r1, r2
 8000a1e:	0018      	movs	r0, r3
 8000a20:	f003 fc9c 	bl	800435c <NRF905_set_listen_address>

  	printf("Reg conf: ");
 8000a24:	4b4e      	ldr	r3, [pc, #312]	; (8000b60 <main+0x27c>)
 8000a26:	0018      	movs	r0, r3
 8000a28:	f004 fb84 	bl	8005134 <iprintf>
  	for (int i = 0; i < 10; ++i) {
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	617b      	str	r3, [r7, #20]
 8000a30:	e013      	b.n	8000a5a <main+0x176>
  		uint8_t d = NRF905_read_config_register(&NRF905, i);
 8000a32:	697b      	ldr	r3, [r7, #20]
 8000a34:	b2da      	uxtb	r2, r3
 8000a36:	1d7c      	adds	r4, r7, #5
 8000a38:	4b48      	ldr	r3, [pc, #288]	; (8000b5c <main+0x278>)
 8000a3a:	0011      	movs	r1, r2
 8000a3c:	0018      	movs	r0, r3
 8000a3e:	f003 fba5 	bl	800418c <NRF905_read_config_register>
 8000a42:	0003      	movs	r3, r0
 8000a44:	7023      	strb	r3, [r4, #0]
  		printf("%02X, ", d);
 8000a46:	1d7b      	adds	r3, r7, #5
 8000a48:	781a      	ldrb	r2, [r3, #0]
 8000a4a:	4b46      	ldr	r3, [pc, #280]	; (8000b64 <main+0x280>)
 8000a4c:	0011      	movs	r1, r2
 8000a4e:	0018      	movs	r0, r3
 8000a50:	f004 fb70 	bl	8005134 <iprintf>
  	for (int i = 0; i < 10; ++i) {
 8000a54:	697b      	ldr	r3, [r7, #20]
 8000a56:	3301      	adds	r3, #1
 8000a58:	617b      	str	r3, [r7, #20]
 8000a5a:	697b      	ldr	r3, [r7, #20]
 8000a5c:	2b09      	cmp	r3, #9
 8000a5e:	dde8      	ble.n	8000a32 <main+0x14e>
  	}
  	printf("\r\n");
 8000a60:	4b41      	ldr	r3, [pc, #260]	; (8000b68 <main+0x284>)
 8000a62:	0018      	movs	r0, r3
 8000a64:	f004 fbf2 	bl	800524c <puts>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  	int c = 0;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	613b      	str	r3, [r7, #16]
//		printf("ret = %d\r\n", ret);
//		++c;
//		}

//		printf("Switching to RX (%08lX)\r\n", my_address);
		NRF905_rx(&NRF905);
 8000a6c:	4b3b      	ldr	r3, [pc, #236]	; (8000b5c <main+0x278>)
 8000a6e:	0018      	movs	r0, r3
 8000a70:	f003 fc8a 	bl	8004388 <NRF905_rx>
//		uint32_t wait = rand() % 21 + 20;
//		printf("Waiting for max %ld ms\r\n", wait * 100);
		uint8_t response_ok = 0;
 8000a74:	230f      	movs	r3, #15
 8000a76:	18fb      	adds	r3, r7, r3
 8000a78:	2200      	movs	r2, #0
 8000a7a:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < 500; ++i) {
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	60bb      	str	r3, [r7, #8]
 8000a80:	e03e      	b.n	8000b00 <main+0x21c>
			uint8_t state_DR = NRF905_data_ready(&NRF905);
 8000a82:	4b36      	ldr	r3, [pc, #216]	; (8000b5c <main+0x278>)
 8000a84:	0018      	movs	r0, r3
 8000a86:	f003 fc21 	bl	80042cc <NRF905_data_ready>
 8000a8a:	0002      	movs	r2, r0
 8000a8c:	1dfb      	adds	r3, r7, #7
 8000a8e:	701a      	strb	r2, [r3, #0]
			uint8_t state_AM = NRF905_address_matched(&NRF905);
 8000a90:	4b32      	ldr	r3, [pc, #200]	; (8000b5c <main+0x278>)
 8000a92:	0018      	movs	r0, r3
 8000a94:	f003 fc3e 	bl	8004314 <NRF905_address_matched>
 8000a98:	0002      	movs	r2, r0
 8000a9a:	1dbb      	adds	r3, r7, #6
 8000a9c:	701a      	strb	r2, [r3, #0]

			if (state_DR && state_AM) {
 8000a9e:	1dfb      	adds	r3, r7, #7
 8000aa0:	781b      	ldrb	r3, [r3, #0]
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d029      	beq.n	8000afa <main+0x216>
 8000aa6:	1dbb      	adds	r3, r7, #6
 8000aa8:	781b      	ldrb	r3, [r3, #0]
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d025      	beq.n	8000afa <main+0x216>
				NRF905_read(&NRF905, nrf905_payload_buffer, NRF905_MAX_PAYLOAD);
 8000aae:	492f      	ldr	r1, [pc, #188]	; (8000b6c <main+0x288>)
 8000ab0:	4b2a      	ldr	r3, [pc, #168]	; (8000b5c <main+0x278>)
 8000ab2:	2220      	movs	r2, #32
 8000ab4:	0018      	movs	r0, r3
 8000ab6:	f003 fc8b 	bl	80043d0 <NRF905_read>
				nrf905_payload_buffer[NRF905_MAX_PAYLOAD] = 0x00;
 8000aba:	4b2c      	ldr	r3, [pc, #176]	; (8000b6c <main+0x288>)
 8000abc:	2220      	movs	r2, #32
 8000abe:	2100      	movs	r1, #0
 8000ac0:	5499      	strb	r1, [r3, r2]
				++c;
 8000ac2:	693b      	ldr	r3, [r7, #16]
 8000ac4:	3301      	adds	r3, #1
 8000ac6:	613b      	str	r3, [r7, #16]
				printf("C: %d\r\n",c);
 8000ac8:	693a      	ldr	r2, [r7, #16]
 8000aca:	4b29      	ldr	r3, [pc, #164]	; (8000b70 <main+0x28c>)
 8000acc:	0011      	movs	r1, r2
 8000ace:	0018      	movs	r0, r3
 8000ad0:	f004 fb30 	bl	8005134 <iprintf>
//				printf("Received0: %d\r\n", nrf905_payload_buffer[0]);
//				printf("Received1: %d\r\n", nrf905_payload_buffer[1]);
//				printf("Received2: %d\r\n", nrf905_payload_buffer[2]);
//				printf("Received3: %d\r\n", nrf905_payload_buffer[3]);
				if(nrf905_payload_buffer[2]==0xD3){
 8000ad4:	4b25      	ldr	r3, [pc, #148]	; (8000b6c <main+0x288>)
 8000ad6:	789b      	ldrb	r3, [r3, #2]
 8000ad8:	2bd3      	cmp	r3, #211	; 0xd3
 8000ada:	d109      	bne.n	8000af0 <main+0x20c>
					writeToShiftRegister(0x00000000 + RELAY07);
 8000adc:	2080      	movs	r0, #128	; 0x80
 8000ade:	f7ff fdcd 	bl	800067c <writeToShiftRegister>
					HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_SET);
 8000ae2:	23a0      	movs	r3, #160	; 0xa0
 8000ae4:	05db      	lsls	r3, r3, #23
 8000ae6:	2201      	movs	r2, #1
 8000ae8:	2120      	movs	r1, #32
 8000aea:	0018      	movs	r0, r3
 8000aec:	f000 fea1 	bl	8001832 <HAL_GPIO_WritePin>
				}


//				printf("Switching to TX (%08lX)\r\n", my_address);
//				HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_SET);
				response_ok = 1;
 8000af0:	230f      	movs	r3, #15
 8000af2:	18fb      	adds	r3, r7, r3
 8000af4:	2201      	movs	r2, #1
 8000af6:	701a      	strb	r2, [r3, #0]
				break;
 8000af8:	e007      	b.n	8000b0a <main+0x226>
		for (int i = 0; i < 500; ++i) {
 8000afa:	68bb      	ldr	r3, [r7, #8]
 8000afc:	3301      	adds	r3, #1
 8000afe:	60bb      	str	r3, [r7, #8]
 8000b00:	68ba      	ldr	r2, [r7, #8]
 8000b02:	23fa      	movs	r3, #250	; 0xfa
 8000b04:	005b      	lsls	r3, r3, #1
 8000b06:	429a      	cmp	r2, r3
 8000b08:	dbbb      	blt.n	8000a82 <main+0x19e>
			}

		}
		HAL_Delay(60);
 8000b0a:	203c      	movs	r0, #60	; 0x3c
 8000b0c:	f000 fb8e 	bl	800122c <HAL_Delay>

		if (response_ok == 0) {
 8000b10:	230f      	movs	r3, #15
 8000b12:	18fb      	adds	r3, r7, r3
 8000b14:	781b      	ldrb	r3, [r3, #0]
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d1a8      	bne.n	8000a6c <main+0x188>
			HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8000b1a:	23a0      	movs	r3, #160	; 0xa0
 8000b1c:	05db      	lsls	r3, r3, #23
 8000b1e:	2200      	movs	r2, #0
 8000b20:	2120      	movs	r1, #32
 8000b22:	0018      	movs	r0, r3
 8000b24:	f000 fe85 	bl	8001832 <HAL_GPIO_WritePin>
			writeToShiftRegister(0x00000000);
 8000b28:	2000      	movs	r0, #0
 8000b2a:	f7ff fda7 	bl	800067c <writeToShiftRegister>
	while (1) {
 8000b2e:	e79d      	b.n	8000a6c <main+0x188>
 8000b30:	1fff7590 	.word	0x1fff7590
 8000b34:	20000094 	.word	0x20000094
 8000b38:	50000400 	.word	0x50000400
 8000b3c:	20000180 	.word	0x20000180
 8000b40:	20000118 	.word	0x20000118
 8000b44:	200000e8 	.word	0x200000e8
 8000b48:	20000110 	.word	0x20000110
 8000b4c:	a2b5d154 	.word	0xa2b5d154
 8000b50:	20000114 	.word	0x20000114
 8000b54:	08006080 	.word	0x08006080
 8000b58:	0800609c 	.word	0x0800609c
 8000b5c:	200000d4 	.word	0x200000d4
 8000b60:	080060b8 	.word	0x080060b8
 8000b64:	080060c4 	.word	0x080060c4
 8000b68:	080060cc 	.word	0x080060cc
 8000b6c:	200000ec 	.word	0x200000ec
 8000b70:	080060d0 	.word	0x080060d0

08000b74 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b74:	b590      	push	{r4, r7, lr}
 8000b76:	b093      	sub	sp, #76	; 0x4c
 8000b78:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b7a:	2410      	movs	r4, #16
 8000b7c:	193b      	adds	r3, r7, r4
 8000b7e:	0018      	movs	r0, r3
 8000b80:	2338      	movs	r3, #56	; 0x38
 8000b82:	001a      	movs	r2, r3
 8000b84:	2100      	movs	r1, #0
 8000b86:	f004 fa34 	bl	8004ff2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b8a:	003b      	movs	r3, r7
 8000b8c:	0018      	movs	r0, r3
 8000b8e:	2310      	movs	r3, #16
 8000b90:	001a      	movs	r2, r3
 8000b92:	2100      	movs	r1, #0
 8000b94:	f004 fa2d 	bl	8004ff2 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b98:	2380      	movs	r3, #128	; 0x80
 8000b9a:	009b      	lsls	r3, r3, #2
 8000b9c:	0018      	movs	r0, r3
 8000b9e:	f000 fe65 	bl	800186c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ba2:	193b      	adds	r3, r7, r4
 8000ba4:	2202      	movs	r2, #2
 8000ba6:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ba8:	193b      	adds	r3, r7, r4
 8000baa:	2280      	movs	r2, #128	; 0x80
 8000bac:	0052      	lsls	r2, r2, #1
 8000bae:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000bb0:	193b      	adds	r3, r7, r4
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000bb6:	193b      	adds	r3, r7, r4
 8000bb8:	2240      	movs	r2, #64	; 0x40
 8000bba:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000bbc:	193b      	adds	r3, r7, r4
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bc2:	193b      	adds	r3, r7, r4
 8000bc4:	0018      	movs	r0, r3
 8000bc6:	f000 fe9d 	bl	8001904 <HAL_RCC_OscConfig>
 8000bca:	1e03      	subs	r3, r0, #0
 8000bcc:	d001      	beq.n	8000bd2 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000bce:	f000 f819 	bl	8000c04 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bd2:	003b      	movs	r3, r7
 8000bd4:	2207      	movs	r2, #7
 8000bd6:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000bd8:	003b      	movs	r3, r7
 8000bda:	2200      	movs	r2, #0
 8000bdc:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bde:	003b      	movs	r3, r7
 8000be0:	2200      	movs	r2, #0
 8000be2:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000be4:	003b      	movs	r3, r7
 8000be6:	2200      	movs	r2, #0
 8000be8:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000bea:	003b      	movs	r3, r7
 8000bec:	2100      	movs	r1, #0
 8000bee:	0018      	movs	r0, r3
 8000bf0:	f001 f9a2 	bl	8001f38 <HAL_RCC_ClockConfig>
 8000bf4:	1e03      	subs	r3, r0, #0
 8000bf6:	d001      	beq.n	8000bfc <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000bf8:	f000 f804 	bl	8000c04 <Error_Handler>
  }
}
 8000bfc:	46c0      	nop			; (mov r8, r8)
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	b013      	add	sp, #76	; 0x4c
 8000c02:	bd90      	pop	{r4, r7, pc}

08000c04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c08:	b672      	cpsid	i
}
 8000c0a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c0c:	e7fe      	b.n	8000c0c <Error_Handler+0x8>
	...

08000c10 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8000c14:	4b1b      	ldr	r3, [pc, #108]	; (8000c84 <MX_SPI2_Init+0x74>)
 8000c16:	4a1c      	ldr	r2, [pc, #112]	; (8000c88 <MX_SPI2_Init+0x78>)
 8000c18:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000c1a:	4b1a      	ldr	r3, [pc, #104]	; (8000c84 <MX_SPI2_Init+0x74>)
 8000c1c:	2282      	movs	r2, #130	; 0x82
 8000c1e:	0052      	lsls	r2, r2, #1
 8000c20:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000c22:	4b18      	ldr	r3, [pc, #96]	; (8000c84 <MX_SPI2_Init+0x74>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c28:	4b16      	ldr	r3, [pc, #88]	; (8000c84 <MX_SPI2_Init+0x74>)
 8000c2a:	22e0      	movs	r2, #224	; 0xe0
 8000c2c:	00d2      	lsls	r2, r2, #3
 8000c2e:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c30:	4b14      	ldr	r3, [pc, #80]	; (8000c84 <MX_SPI2_Init+0x74>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c36:	4b13      	ldr	r3, [pc, #76]	; (8000c84 <MX_SPI2_Init+0x74>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000c3c:	4b11      	ldr	r3, [pc, #68]	; (8000c84 <MX_SPI2_Init+0x74>)
 8000c3e:	2280      	movs	r2, #128	; 0x80
 8000c40:	0092      	lsls	r2, r2, #2
 8000c42:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000c44:	4b0f      	ldr	r3, [pc, #60]	; (8000c84 <MX_SPI2_Init+0x74>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c4a:	4b0e      	ldr	r3, [pc, #56]	; (8000c84 <MX_SPI2_Init+0x74>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c50:	4b0c      	ldr	r3, [pc, #48]	; (8000c84 <MX_SPI2_Init+0x74>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c56:	4b0b      	ldr	r3, [pc, #44]	; (8000c84 <MX_SPI2_Init+0x74>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000c5c:	4b09      	ldr	r3, [pc, #36]	; (8000c84 <MX_SPI2_Init+0x74>)
 8000c5e:	2207      	movs	r2, #7
 8000c60:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000c62:	4b08      	ldr	r3, [pc, #32]	; (8000c84 <MX_SPI2_Init+0x74>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000c68:	4b06      	ldr	r3, [pc, #24]	; (8000c84 <MX_SPI2_Init+0x74>)
 8000c6a:	2208      	movs	r2, #8
 8000c6c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000c6e:	4b05      	ldr	r3, [pc, #20]	; (8000c84 <MX_SPI2_Init+0x74>)
 8000c70:	0018      	movs	r0, r3
 8000c72:	f001 fcc3 	bl	80025fc <HAL_SPI_Init>
 8000c76:	1e03      	subs	r3, r0, #0
 8000c78:	d001      	beq.n	8000c7e <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8000c7a:	f7ff ffc3 	bl	8000c04 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000c7e:	46c0      	nop			; (mov r8, r8)
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd80      	pop	{r7, pc}
 8000c84:	20000118 	.word	0x20000118
 8000c88:	40003800 	.word	0x40003800

08000c8c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000c8c:	b590      	push	{r4, r7, lr}
 8000c8e:	b08b      	sub	sp, #44	; 0x2c
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c94:	2414      	movs	r4, #20
 8000c96:	193b      	adds	r3, r7, r4
 8000c98:	0018      	movs	r0, r3
 8000c9a:	2314      	movs	r3, #20
 8000c9c:	001a      	movs	r2, r3
 8000c9e:	2100      	movs	r1, #0
 8000ca0:	f004 f9a7 	bl	8004ff2 <memset>
  if(spiHandle->Instance==SPI2)
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	4a30      	ldr	r2, [pc, #192]	; (8000d6c <HAL_SPI_MspInit+0xe0>)
 8000caa:	4293      	cmp	r3, r2
 8000cac:	d159      	bne.n	8000d62 <HAL_SPI_MspInit+0xd6>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000cae:	4b30      	ldr	r3, [pc, #192]	; (8000d70 <HAL_SPI_MspInit+0xe4>)
 8000cb0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000cb2:	4b2f      	ldr	r3, [pc, #188]	; (8000d70 <HAL_SPI_MspInit+0xe4>)
 8000cb4:	2180      	movs	r1, #128	; 0x80
 8000cb6:	01c9      	lsls	r1, r1, #7
 8000cb8:	430a      	orrs	r2, r1
 8000cba:	63da      	str	r2, [r3, #60]	; 0x3c
 8000cbc:	4b2c      	ldr	r3, [pc, #176]	; (8000d70 <HAL_SPI_MspInit+0xe4>)
 8000cbe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000cc0:	2380      	movs	r3, #128	; 0x80
 8000cc2:	01db      	lsls	r3, r3, #7
 8000cc4:	4013      	ands	r3, r2
 8000cc6:	613b      	str	r3, [r7, #16]
 8000cc8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cca:	4b29      	ldr	r3, [pc, #164]	; (8000d70 <HAL_SPI_MspInit+0xe4>)
 8000ccc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000cce:	4b28      	ldr	r3, [pc, #160]	; (8000d70 <HAL_SPI_MspInit+0xe4>)
 8000cd0:	2104      	movs	r1, #4
 8000cd2:	430a      	orrs	r2, r1
 8000cd4:	635a      	str	r2, [r3, #52]	; 0x34
 8000cd6:	4b26      	ldr	r3, [pc, #152]	; (8000d70 <HAL_SPI_MspInit+0xe4>)
 8000cd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000cda:	2204      	movs	r2, #4
 8000cdc:	4013      	ands	r3, r2
 8000cde:	60fb      	str	r3, [r7, #12]
 8000ce0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ce2:	4b23      	ldr	r3, [pc, #140]	; (8000d70 <HAL_SPI_MspInit+0xe4>)
 8000ce4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000ce6:	4b22      	ldr	r3, [pc, #136]	; (8000d70 <HAL_SPI_MspInit+0xe4>)
 8000ce8:	2101      	movs	r1, #1
 8000cea:	430a      	orrs	r2, r1
 8000cec:	635a      	str	r2, [r3, #52]	; 0x34
 8000cee:	4b20      	ldr	r3, [pc, #128]	; (8000d70 <HAL_SPI_MspInit+0xe4>)
 8000cf0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000cf2:	2201      	movs	r2, #1
 8000cf4:	4013      	ands	r3, r2
 8000cf6:	60bb      	str	r3, [r7, #8]
 8000cf8:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PA0     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000cfa:	193b      	adds	r3, r7, r4
 8000cfc:	220c      	movs	r2, #12
 8000cfe:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d00:	193b      	adds	r3, r7, r4
 8000d02:	2202      	movs	r2, #2
 8000d04:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d06:	193b      	adds	r3, r7, r4
 8000d08:	2200      	movs	r2, #0
 8000d0a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d0c:	193b      	adds	r3, r7, r4
 8000d0e:	2200      	movs	r2, #0
 8000d10:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_SPI2;
 8000d12:	193b      	adds	r3, r7, r4
 8000d14:	2201      	movs	r2, #1
 8000d16:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d18:	193b      	adds	r3, r7, r4
 8000d1a:	4a16      	ldr	r2, [pc, #88]	; (8000d74 <HAL_SPI_MspInit+0xe8>)
 8000d1c:	0019      	movs	r1, r3
 8000d1e:	0010      	movs	r0, r2
 8000d20:	f000 fc06 	bl	8001530 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000d24:	0021      	movs	r1, r4
 8000d26:	187b      	adds	r3, r7, r1
 8000d28:	2201      	movs	r2, #1
 8000d2a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d2c:	187b      	adds	r3, r7, r1
 8000d2e:	2202      	movs	r2, #2
 8000d30:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d32:	187b      	adds	r3, r7, r1
 8000d34:	2200      	movs	r2, #0
 8000d36:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d38:	187b      	adds	r3, r7, r1
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 8000d3e:	187b      	adds	r3, r7, r1
 8000d40:	2200      	movs	r2, #0
 8000d42:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d44:	187a      	adds	r2, r7, r1
 8000d46:	23a0      	movs	r3, #160	; 0xa0
 8000d48:	05db      	lsls	r3, r3, #23
 8000d4a:	0011      	movs	r1, r2
 8000d4c:	0018      	movs	r0, r3
 8000d4e:	f000 fbef 	bl	8001530 <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8000d52:	2200      	movs	r2, #0
 8000d54:	2100      	movs	r1, #0
 8000d56:	201a      	movs	r0, #26
 8000d58:	f000 fb4e 	bl	80013f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8000d5c:	201a      	movs	r0, #26
 8000d5e:	f000 fb60 	bl	8001422 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8000d62:	46c0      	nop			; (mov r8, r8)
 8000d64:	46bd      	mov	sp, r7
 8000d66:	b00b      	add	sp, #44	; 0x2c
 8000d68:	bd90      	pop	{r4, r7, pc}
 8000d6a:	46c0      	nop			; (mov r8, r8)
 8000d6c:	40003800 	.word	0x40003800
 8000d70:	40021000 	.word	0x40021000
 8000d74:	50000800 	.word	0x50000800

08000d78 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b082      	sub	sp, #8
 8000d7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d7e:	4b11      	ldr	r3, [pc, #68]	; (8000dc4 <HAL_MspInit+0x4c>)
 8000d80:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d82:	4b10      	ldr	r3, [pc, #64]	; (8000dc4 <HAL_MspInit+0x4c>)
 8000d84:	2101      	movs	r1, #1
 8000d86:	430a      	orrs	r2, r1
 8000d88:	641a      	str	r2, [r3, #64]	; 0x40
 8000d8a:	4b0e      	ldr	r3, [pc, #56]	; (8000dc4 <HAL_MspInit+0x4c>)
 8000d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d8e:	2201      	movs	r2, #1
 8000d90:	4013      	ands	r3, r2
 8000d92:	607b      	str	r3, [r7, #4]
 8000d94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d96:	4b0b      	ldr	r3, [pc, #44]	; (8000dc4 <HAL_MspInit+0x4c>)
 8000d98:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000d9a:	4b0a      	ldr	r3, [pc, #40]	; (8000dc4 <HAL_MspInit+0x4c>)
 8000d9c:	2180      	movs	r1, #128	; 0x80
 8000d9e:	0549      	lsls	r1, r1, #21
 8000da0:	430a      	orrs	r2, r1
 8000da2:	63da      	str	r2, [r3, #60]	; 0x3c
 8000da4:	4b07      	ldr	r3, [pc, #28]	; (8000dc4 <HAL_MspInit+0x4c>)
 8000da6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000da8:	2380      	movs	r3, #128	; 0x80
 8000daa:	055b      	lsls	r3, r3, #21
 8000dac:	4013      	ands	r3, r2
 8000dae:	603b      	str	r3, [r7, #0]
 8000db0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 8000db2:	23c0      	movs	r3, #192	; 0xc0
 8000db4:	00db      	lsls	r3, r3, #3
 8000db6:	0018      	movs	r0, r3
 8000db8:	f000 fa5c 	bl	8001274 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dbc:	46c0      	nop			; (mov r8, r8)
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	b002      	add	sp, #8
 8000dc2:	bd80      	pop	{r7, pc}
 8000dc4:	40021000 	.word	0x40021000

08000dc8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000dcc:	e7fe      	b.n	8000dcc <NMI_Handler+0x4>

08000dce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dce:	b580      	push	{r7, lr}
 8000dd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dd2:	e7fe      	b.n	8000dd2 <HardFault_Handler+0x4>

08000dd4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000dd8:	46c0      	nop			; (mov r8, r8)
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}

08000dde <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dde:	b580      	push	{r7, lr}
 8000de0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000de2:	46c0      	nop			; (mov r8, r8)
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bd80      	pop	{r7, pc}

08000de8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dec:	f000 fa02 	bl	80011f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000df0:	46c0      	nop			; (mov r8, r8)
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}
	...

08000df8 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8000dfc:	4b03      	ldr	r3, [pc, #12]	; (8000e0c <SPI2_IRQHandler+0x14>)
 8000dfe:	0018      	movs	r0, r3
 8000e00:	f001 fe86 	bl	8002b10 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8000e04:	46c0      	nop			; (mov r8, r8)
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	46c0      	nop			; (mov r8, r8)
 8000e0c:	20000118 	.word	0x20000118

08000e10 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b086      	sub	sp, #24
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e18:	4a14      	ldr	r2, [pc, #80]	; (8000e6c <_sbrk+0x5c>)
 8000e1a:	4b15      	ldr	r3, [pc, #84]	; (8000e70 <_sbrk+0x60>)
 8000e1c:	1ad3      	subs	r3, r2, r3
 8000e1e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e20:	697b      	ldr	r3, [r7, #20]
 8000e22:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e24:	4b13      	ldr	r3, [pc, #76]	; (8000e74 <_sbrk+0x64>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d102      	bne.n	8000e32 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e2c:	4b11      	ldr	r3, [pc, #68]	; (8000e74 <_sbrk+0x64>)
 8000e2e:	4a12      	ldr	r2, [pc, #72]	; (8000e78 <_sbrk+0x68>)
 8000e30:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e32:	4b10      	ldr	r3, [pc, #64]	; (8000e74 <_sbrk+0x64>)
 8000e34:	681a      	ldr	r2, [r3, #0]
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	18d3      	adds	r3, r2, r3
 8000e3a:	693a      	ldr	r2, [r7, #16]
 8000e3c:	429a      	cmp	r2, r3
 8000e3e:	d207      	bcs.n	8000e50 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e40:	f003 ffa8 	bl	8004d94 <__errno>
 8000e44:	0003      	movs	r3, r0
 8000e46:	220c      	movs	r2, #12
 8000e48:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	425b      	negs	r3, r3
 8000e4e:	e009      	b.n	8000e64 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e50:	4b08      	ldr	r3, [pc, #32]	; (8000e74 <_sbrk+0x64>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e56:	4b07      	ldr	r3, [pc, #28]	; (8000e74 <_sbrk+0x64>)
 8000e58:	681a      	ldr	r2, [r3, #0]
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	18d2      	adds	r2, r2, r3
 8000e5e:	4b05      	ldr	r3, [pc, #20]	; (8000e74 <_sbrk+0x64>)
 8000e60:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000e62:	68fb      	ldr	r3, [r7, #12]
}
 8000e64:	0018      	movs	r0, r3
 8000e66:	46bd      	mov	sp, r7
 8000e68:	b006      	add	sp, #24
 8000e6a:	bd80      	pop	{r7, pc}
 8000e6c:	20009000 	.word	0x20009000
 8000e70:	00000400 	.word	0x00000400
 8000e74:	2000017c 	.word	0x2000017c
 8000e78:	20000320 	.word	0x20000320

08000e7c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e80:	46c0      	nop			; (mov r8, r8)
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}
	...

08000e88 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b088      	sub	sp, #32
 8000e8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e8e:	2310      	movs	r3, #16
 8000e90:	18fb      	adds	r3, r7, r3
 8000e92:	0018      	movs	r0, r3
 8000e94:	2310      	movs	r3, #16
 8000e96:	001a      	movs	r2, r3
 8000e98:	2100      	movs	r1, #0
 8000e9a:	f004 f8aa 	bl	8004ff2 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e9e:	1d3b      	adds	r3, r7, #4
 8000ea0:	0018      	movs	r0, r3
 8000ea2:	230c      	movs	r3, #12
 8000ea4:	001a      	movs	r2, r3
 8000ea6:	2100      	movs	r1, #0
 8000ea8:	f004 f8a3 	bl	8004ff2 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000eac:	4b1e      	ldr	r3, [pc, #120]	; (8000f28 <MX_TIM3_Init+0xa0>)
 8000eae:	4a1f      	ldr	r2, [pc, #124]	; (8000f2c <MX_TIM3_Init+0xa4>)
 8000eb0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 79;
 8000eb2:	4b1d      	ldr	r3, [pc, #116]	; (8000f28 <MX_TIM3_Init+0xa0>)
 8000eb4:	224f      	movs	r2, #79	; 0x4f
 8000eb6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000eb8:	4b1b      	ldr	r3, [pc, #108]	; (8000f28 <MX_TIM3_Init+0xa0>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000ebe:	4b1a      	ldr	r3, [pc, #104]	; (8000f28 <MX_TIM3_Init+0xa0>)
 8000ec0:	4a1b      	ldr	r2, [pc, #108]	; (8000f30 <MX_TIM3_Init+0xa8>)
 8000ec2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ec4:	4b18      	ldr	r3, [pc, #96]	; (8000f28 <MX_TIM3_Init+0xa0>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000eca:	4b17      	ldr	r3, [pc, #92]	; (8000f28 <MX_TIM3_Init+0xa0>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000ed0:	4b15      	ldr	r3, [pc, #84]	; (8000f28 <MX_TIM3_Init+0xa0>)
 8000ed2:	0018      	movs	r0, r3
 8000ed4:	f002 f8ae 	bl	8003034 <HAL_TIM_Base_Init>
 8000ed8:	1e03      	subs	r3, r0, #0
 8000eda:	d001      	beq.n	8000ee0 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8000edc:	f7ff fe92 	bl	8000c04 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ee0:	2110      	movs	r1, #16
 8000ee2:	187b      	adds	r3, r7, r1
 8000ee4:	2280      	movs	r2, #128	; 0x80
 8000ee6:	0152      	lsls	r2, r2, #5
 8000ee8:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000eea:	187a      	adds	r2, r7, r1
 8000eec:	4b0e      	ldr	r3, [pc, #56]	; (8000f28 <MX_TIM3_Init+0xa0>)
 8000eee:	0011      	movs	r1, r2
 8000ef0:	0018      	movs	r0, r3
 8000ef2:	f002 f8f7 	bl	80030e4 <HAL_TIM_ConfigClockSource>
 8000ef6:	1e03      	subs	r3, r0, #0
 8000ef8:	d001      	beq.n	8000efe <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8000efa:	f7ff fe83 	bl	8000c04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000efe:	1d3b      	adds	r3, r7, #4
 8000f00:	2200      	movs	r2, #0
 8000f02:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f04:	1d3b      	adds	r3, r7, #4
 8000f06:	2200      	movs	r2, #0
 8000f08:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000f0a:	1d3a      	adds	r2, r7, #4
 8000f0c:	4b06      	ldr	r3, [pc, #24]	; (8000f28 <MX_TIM3_Init+0xa0>)
 8000f0e:	0011      	movs	r1, r2
 8000f10:	0018      	movs	r0, r3
 8000f12:	f002 fad9 	bl	80034c8 <HAL_TIMEx_MasterConfigSynchronization>
 8000f16:	1e03      	subs	r3, r0, #0
 8000f18:	d001      	beq.n	8000f1e <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8000f1a:	f7ff fe73 	bl	8000c04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000f1e:	46c0      	nop			; (mov r8, r8)
 8000f20:	46bd      	mov	sp, r7
 8000f22:	b008      	add	sp, #32
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	46c0      	nop			; (mov r8, r8)
 8000f28:	20000180 	.word	0x20000180
 8000f2c:	40000400 	.word	0x40000400
 8000f30:	0000ffff 	.word	0x0000ffff

08000f34 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b084      	sub	sp, #16
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	4a09      	ldr	r2, [pc, #36]	; (8000f68 <HAL_TIM_Base_MspInit+0x34>)
 8000f42:	4293      	cmp	r3, r2
 8000f44:	d10b      	bne.n	8000f5e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000f46:	4b09      	ldr	r3, [pc, #36]	; (8000f6c <HAL_TIM_Base_MspInit+0x38>)
 8000f48:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000f4a:	4b08      	ldr	r3, [pc, #32]	; (8000f6c <HAL_TIM_Base_MspInit+0x38>)
 8000f4c:	2102      	movs	r1, #2
 8000f4e:	430a      	orrs	r2, r1
 8000f50:	63da      	str	r2, [r3, #60]	; 0x3c
 8000f52:	4b06      	ldr	r3, [pc, #24]	; (8000f6c <HAL_TIM_Base_MspInit+0x38>)
 8000f54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f56:	2202      	movs	r2, #2
 8000f58:	4013      	ands	r3, r2
 8000f5a:	60fb      	str	r3, [r7, #12]
 8000f5c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8000f5e:	46c0      	nop			; (mov r8, r8)
 8000f60:	46bd      	mov	sp, r7
 8000f62:	b004      	add	sp, #16
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	46c0      	nop			; (mov r8, r8)
 8000f68:	40000400 	.word	0x40000400
 8000f6c:	40021000 	.word	0x40021000

08000f70 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000f74:	4b23      	ldr	r3, [pc, #140]	; (8001004 <MX_USART2_UART_Init+0x94>)
 8000f76:	4a24      	ldr	r2, [pc, #144]	; (8001008 <MX_USART2_UART_Init+0x98>)
 8000f78:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000f7a:	4b22      	ldr	r3, [pc, #136]	; (8001004 <MX_USART2_UART_Init+0x94>)
 8000f7c:	22e1      	movs	r2, #225	; 0xe1
 8000f7e:	0252      	lsls	r2, r2, #9
 8000f80:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f82:	4b20      	ldr	r3, [pc, #128]	; (8001004 <MX_USART2_UART_Init+0x94>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f88:	4b1e      	ldr	r3, [pc, #120]	; (8001004 <MX_USART2_UART_Init+0x94>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f8e:	4b1d      	ldr	r3, [pc, #116]	; (8001004 <MX_USART2_UART_Init+0x94>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f94:	4b1b      	ldr	r3, [pc, #108]	; (8001004 <MX_USART2_UART_Init+0x94>)
 8000f96:	220c      	movs	r2, #12
 8000f98:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f9a:	4b1a      	ldr	r3, [pc, #104]	; (8001004 <MX_USART2_UART_Init+0x94>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fa0:	4b18      	ldr	r3, [pc, #96]	; (8001004 <MX_USART2_UART_Init+0x94>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000fa6:	4b17      	ldr	r3, [pc, #92]	; (8001004 <MX_USART2_UART_Init+0x94>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000fac:	4b15      	ldr	r3, [pc, #84]	; (8001004 <MX_USART2_UART_Init+0x94>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000fb2:	4b14      	ldr	r3, [pc, #80]	; (8001004 <MX_USART2_UART_Init+0x94>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000fb8:	4b12      	ldr	r3, [pc, #72]	; (8001004 <MX_USART2_UART_Init+0x94>)
 8000fba:	0018      	movs	r0, r3
 8000fbc:	f002 faf2 	bl	80035a4 <HAL_UART_Init>
 8000fc0:	1e03      	subs	r3, r0, #0
 8000fc2:	d001      	beq.n	8000fc8 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000fc4:	f7ff fe1e 	bl	8000c04 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000fc8:	4b0e      	ldr	r3, [pc, #56]	; (8001004 <MX_USART2_UART_Init+0x94>)
 8000fca:	2100      	movs	r1, #0
 8000fcc:	0018      	movs	r0, r3
 8000fce:	f002 fffd 	bl	8003fcc <HAL_UARTEx_SetTxFifoThreshold>
 8000fd2:	1e03      	subs	r3, r0, #0
 8000fd4:	d001      	beq.n	8000fda <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000fd6:	f7ff fe15 	bl	8000c04 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000fda:	4b0a      	ldr	r3, [pc, #40]	; (8001004 <MX_USART2_UART_Init+0x94>)
 8000fdc:	2100      	movs	r1, #0
 8000fde:	0018      	movs	r0, r3
 8000fe0:	f003 f834 	bl	800404c <HAL_UARTEx_SetRxFifoThreshold>
 8000fe4:	1e03      	subs	r3, r0, #0
 8000fe6:	d001      	beq.n	8000fec <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000fe8:	f7ff fe0c 	bl	8000c04 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000fec:	4b05      	ldr	r3, [pc, #20]	; (8001004 <MX_USART2_UART_Init+0x94>)
 8000fee:	0018      	movs	r0, r3
 8000ff0:	f002 ffb2 	bl	8003f58 <HAL_UARTEx_DisableFifoMode>
 8000ff4:	1e03      	subs	r3, r0, #0
 8000ff6:	d001      	beq.n	8000ffc <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000ff8:	f7ff fe04 	bl	8000c04 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ffc:	46c0      	nop			; (mov r8, r8)
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}
 8001002:	46c0      	nop			; (mov r8, r8)
 8001004:	200001cc 	.word	0x200001cc
 8001008:	40004400 	.word	0x40004400

0800100c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800100c:	b590      	push	{r4, r7, lr}
 800100e:	b097      	sub	sp, #92	; 0x5c
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001014:	2344      	movs	r3, #68	; 0x44
 8001016:	18fb      	adds	r3, r7, r3
 8001018:	0018      	movs	r0, r3
 800101a:	2314      	movs	r3, #20
 800101c:	001a      	movs	r2, r3
 800101e:	2100      	movs	r1, #0
 8001020:	f003 ffe7 	bl	8004ff2 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001024:	2410      	movs	r4, #16
 8001026:	193b      	adds	r3, r7, r4
 8001028:	0018      	movs	r0, r3
 800102a:	2334      	movs	r3, #52	; 0x34
 800102c:	001a      	movs	r2, r3
 800102e:	2100      	movs	r1, #0
 8001030:	f003 ffdf 	bl	8004ff2 <memset>
  if(uartHandle->Instance==USART2)
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	4a22      	ldr	r2, [pc, #136]	; (80010c4 <HAL_UART_MspInit+0xb8>)
 800103a:	4293      	cmp	r3, r2
 800103c:	d13e      	bne.n	80010bc <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800103e:	193b      	adds	r3, r7, r4
 8001040:	2202      	movs	r2, #2
 8001042:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001044:	193b      	adds	r3, r7, r4
 8001046:	2200      	movs	r2, #0
 8001048:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800104a:	193b      	adds	r3, r7, r4
 800104c:	0018      	movs	r0, r3
 800104e:	f001 f91d 	bl	800228c <HAL_RCCEx_PeriphCLKConfig>
 8001052:	1e03      	subs	r3, r0, #0
 8001054:	d001      	beq.n	800105a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001056:	f7ff fdd5 	bl	8000c04 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800105a:	4b1b      	ldr	r3, [pc, #108]	; (80010c8 <HAL_UART_MspInit+0xbc>)
 800105c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800105e:	4b1a      	ldr	r3, [pc, #104]	; (80010c8 <HAL_UART_MspInit+0xbc>)
 8001060:	2180      	movs	r1, #128	; 0x80
 8001062:	0289      	lsls	r1, r1, #10
 8001064:	430a      	orrs	r2, r1
 8001066:	63da      	str	r2, [r3, #60]	; 0x3c
 8001068:	4b17      	ldr	r3, [pc, #92]	; (80010c8 <HAL_UART_MspInit+0xbc>)
 800106a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800106c:	2380      	movs	r3, #128	; 0x80
 800106e:	029b      	lsls	r3, r3, #10
 8001070:	4013      	ands	r3, r2
 8001072:	60fb      	str	r3, [r7, #12]
 8001074:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001076:	4b14      	ldr	r3, [pc, #80]	; (80010c8 <HAL_UART_MspInit+0xbc>)
 8001078:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800107a:	4b13      	ldr	r3, [pc, #76]	; (80010c8 <HAL_UART_MspInit+0xbc>)
 800107c:	2101      	movs	r1, #1
 800107e:	430a      	orrs	r2, r1
 8001080:	635a      	str	r2, [r3, #52]	; 0x34
 8001082:	4b11      	ldr	r3, [pc, #68]	; (80010c8 <HAL_UART_MspInit+0xbc>)
 8001084:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001086:	2201      	movs	r2, #1
 8001088:	4013      	ands	r3, r2
 800108a:	60bb      	str	r3, [r7, #8]
 800108c:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 800108e:	2144      	movs	r1, #68	; 0x44
 8001090:	187b      	adds	r3, r7, r1
 8001092:	220c      	movs	r2, #12
 8001094:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001096:	187b      	adds	r3, r7, r1
 8001098:	2202      	movs	r2, #2
 800109a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800109c:	187b      	adds	r3, r7, r1
 800109e:	2201      	movs	r2, #1
 80010a0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010a2:	187b      	adds	r3, r7, r1
 80010a4:	2200      	movs	r2, #0
 80010a6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80010a8:	187b      	adds	r3, r7, r1
 80010aa:	2201      	movs	r2, #1
 80010ac:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010ae:	187a      	adds	r2, r7, r1
 80010b0:	23a0      	movs	r3, #160	; 0xa0
 80010b2:	05db      	lsls	r3, r3, #23
 80010b4:	0011      	movs	r1, r2
 80010b6:	0018      	movs	r0, r3
 80010b8:	f000 fa3a 	bl	8001530 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80010bc:	46c0      	nop			; (mov r8, r8)
 80010be:	46bd      	mov	sp, r7
 80010c0:	b017      	add	sp, #92	; 0x5c
 80010c2:	bd90      	pop	{r4, r7, pc}
 80010c4:	40004400 	.word	0x40004400
 80010c8:	40021000 	.word	0x40021000

080010cc <Reset_Handler>:
 80010cc:	480d      	ldr	r0, [pc, #52]	; (8001104 <LoopForever+0x2>)
 80010ce:	4685      	mov	sp, r0
 80010d0:	f7ff fed4 	bl	8000e7c <SystemInit>
 80010d4:	480c      	ldr	r0, [pc, #48]	; (8001108 <LoopForever+0x6>)
 80010d6:	490d      	ldr	r1, [pc, #52]	; (800110c <LoopForever+0xa>)
 80010d8:	4a0d      	ldr	r2, [pc, #52]	; (8001110 <LoopForever+0xe>)
 80010da:	2300      	movs	r3, #0
 80010dc:	e002      	b.n	80010e4 <LoopCopyDataInit>

080010de <CopyDataInit>:
 80010de:	58d4      	ldr	r4, [r2, r3]
 80010e0:	50c4      	str	r4, [r0, r3]
 80010e2:	3304      	adds	r3, #4

080010e4 <LoopCopyDataInit>:
 80010e4:	18c4      	adds	r4, r0, r3
 80010e6:	428c      	cmp	r4, r1
 80010e8:	d3f9      	bcc.n	80010de <CopyDataInit>
 80010ea:	4a0a      	ldr	r2, [pc, #40]	; (8001114 <LoopForever+0x12>)
 80010ec:	4c0a      	ldr	r4, [pc, #40]	; (8001118 <LoopForever+0x16>)
 80010ee:	2300      	movs	r3, #0
 80010f0:	e001      	b.n	80010f6 <LoopFillZerobss>

080010f2 <FillZerobss>:
 80010f2:	6013      	str	r3, [r2, #0]
 80010f4:	3204      	adds	r2, #4

080010f6 <LoopFillZerobss>:
 80010f6:	42a2      	cmp	r2, r4
 80010f8:	d3fb      	bcc.n	80010f2 <FillZerobss>
 80010fa:	f003 ff53 	bl	8004fa4 <__libc_init_array>
 80010fe:	f7ff fbf1 	bl	80008e4 <main>

08001102 <LoopForever>:
 8001102:	e7fe      	b.n	8001102 <LoopForever>
 8001104:	20009000 	.word	0x20009000
 8001108:	20000000 	.word	0x20000000
 800110c:	20000078 	.word	0x20000078
 8001110:	080062dc 	.word	0x080062dc
 8001114:	20000078 	.word	0x20000078
 8001118:	2000031c 	.word	0x2000031c

0800111c <ADC1_COMP_IRQHandler>:
 800111c:	e7fe      	b.n	800111c <ADC1_COMP_IRQHandler>
	...

08001120 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b082      	sub	sp, #8
 8001124:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001126:	1dfb      	adds	r3, r7, #7
 8001128:	2200      	movs	r2, #0
 800112a:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800112c:	4b0b      	ldr	r3, [pc, #44]	; (800115c <HAL_Init+0x3c>)
 800112e:	681a      	ldr	r2, [r3, #0]
 8001130:	4b0a      	ldr	r3, [pc, #40]	; (800115c <HAL_Init+0x3c>)
 8001132:	2180      	movs	r1, #128	; 0x80
 8001134:	0049      	lsls	r1, r1, #1
 8001136:	430a      	orrs	r2, r1
 8001138:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800113a:	2000      	movs	r0, #0
 800113c:	f000 f810 	bl	8001160 <HAL_InitTick>
 8001140:	1e03      	subs	r3, r0, #0
 8001142:	d003      	beq.n	800114c <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001144:	1dfb      	adds	r3, r7, #7
 8001146:	2201      	movs	r2, #1
 8001148:	701a      	strb	r2, [r3, #0]
 800114a:	e001      	b.n	8001150 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 800114c:	f7ff fe14 	bl	8000d78 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001150:	1dfb      	adds	r3, r7, #7
 8001152:	781b      	ldrb	r3, [r3, #0]
}
 8001154:	0018      	movs	r0, r3
 8001156:	46bd      	mov	sp, r7
 8001158:	b002      	add	sp, #8
 800115a:	bd80      	pop	{r7, pc}
 800115c:	40022000 	.word	0x40022000

08001160 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001160:	b590      	push	{r4, r7, lr}
 8001162:	b085      	sub	sp, #20
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001168:	230f      	movs	r3, #15
 800116a:	18fb      	adds	r3, r7, r3
 800116c:	2200      	movs	r2, #0
 800116e:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8001170:	4b1d      	ldr	r3, [pc, #116]	; (80011e8 <HAL_InitTick+0x88>)
 8001172:	781b      	ldrb	r3, [r3, #0]
 8001174:	2b00      	cmp	r3, #0
 8001176:	d02b      	beq.n	80011d0 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8001178:	4b1c      	ldr	r3, [pc, #112]	; (80011ec <HAL_InitTick+0x8c>)
 800117a:	681c      	ldr	r4, [r3, #0]
 800117c:	4b1a      	ldr	r3, [pc, #104]	; (80011e8 <HAL_InitTick+0x88>)
 800117e:	781b      	ldrb	r3, [r3, #0]
 8001180:	0019      	movs	r1, r3
 8001182:	23fa      	movs	r3, #250	; 0xfa
 8001184:	0098      	lsls	r0, r3, #2
 8001186:	f7fe ffcf 	bl	8000128 <__udivsi3>
 800118a:	0003      	movs	r3, r0
 800118c:	0019      	movs	r1, r3
 800118e:	0020      	movs	r0, r4
 8001190:	f7fe ffca 	bl	8000128 <__udivsi3>
 8001194:	0003      	movs	r3, r0
 8001196:	0018      	movs	r0, r3
 8001198:	f000 f953 	bl	8001442 <HAL_SYSTICK_Config>
 800119c:	1e03      	subs	r3, r0, #0
 800119e:	d112      	bne.n	80011c6 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	2b03      	cmp	r3, #3
 80011a4:	d80a      	bhi.n	80011bc <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011a6:	6879      	ldr	r1, [r7, #4]
 80011a8:	2301      	movs	r3, #1
 80011aa:	425b      	negs	r3, r3
 80011ac:	2200      	movs	r2, #0
 80011ae:	0018      	movs	r0, r3
 80011b0:	f000 f922 	bl	80013f8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80011b4:	4b0e      	ldr	r3, [pc, #56]	; (80011f0 <HAL_InitTick+0x90>)
 80011b6:	687a      	ldr	r2, [r7, #4]
 80011b8:	601a      	str	r2, [r3, #0]
 80011ba:	e00d      	b.n	80011d8 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80011bc:	230f      	movs	r3, #15
 80011be:	18fb      	adds	r3, r7, r3
 80011c0:	2201      	movs	r2, #1
 80011c2:	701a      	strb	r2, [r3, #0]
 80011c4:	e008      	b.n	80011d8 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80011c6:	230f      	movs	r3, #15
 80011c8:	18fb      	adds	r3, r7, r3
 80011ca:	2201      	movs	r2, #1
 80011cc:	701a      	strb	r2, [r3, #0]
 80011ce:	e003      	b.n	80011d8 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80011d0:	230f      	movs	r3, #15
 80011d2:	18fb      	adds	r3, r7, r3
 80011d4:	2201      	movs	r2, #1
 80011d6:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80011d8:	230f      	movs	r3, #15
 80011da:	18fb      	adds	r3, r7, r3
 80011dc:	781b      	ldrb	r3, [r3, #0]
}
 80011de:	0018      	movs	r0, r3
 80011e0:	46bd      	mov	sp, r7
 80011e2:	b005      	add	sp, #20
 80011e4:	bd90      	pop	{r4, r7, pc}
 80011e6:	46c0      	nop			; (mov r8, r8)
 80011e8:	20000008 	.word	0x20000008
 80011ec:	20000000 	.word	0x20000000
 80011f0:	20000004 	.word	0x20000004

080011f4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80011f8:	4b05      	ldr	r3, [pc, #20]	; (8001210 <HAL_IncTick+0x1c>)
 80011fa:	781b      	ldrb	r3, [r3, #0]
 80011fc:	001a      	movs	r2, r3
 80011fe:	4b05      	ldr	r3, [pc, #20]	; (8001214 <HAL_IncTick+0x20>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	18d2      	adds	r2, r2, r3
 8001204:	4b03      	ldr	r3, [pc, #12]	; (8001214 <HAL_IncTick+0x20>)
 8001206:	601a      	str	r2, [r3, #0]
}
 8001208:	46c0      	nop			; (mov r8, r8)
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}
 800120e:	46c0      	nop			; (mov r8, r8)
 8001210:	20000008 	.word	0x20000008
 8001214:	2000025c 	.word	0x2000025c

08001218 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	af00      	add	r7, sp, #0
  return uwTick;
 800121c:	4b02      	ldr	r3, [pc, #8]	; (8001228 <HAL_GetTick+0x10>)
 800121e:	681b      	ldr	r3, [r3, #0]
}
 8001220:	0018      	movs	r0, r3
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}
 8001226:	46c0      	nop			; (mov r8, r8)
 8001228:	2000025c 	.word	0x2000025c

0800122c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b084      	sub	sp, #16
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001234:	f7ff fff0 	bl	8001218 <HAL_GetTick>
 8001238:	0003      	movs	r3, r0
 800123a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	3301      	adds	r3, #1
 8001244:	d005      	beq.n	8001252 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001246:	4b0a      	ldr	r3, [pc, #40]	; (8001270 <HAL_Delay+0x44>)
 8001248:	781b      	ldrb	r3, [r3, #0]
 800124a:	001a      	movs	r2, r3
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	189b      	adds	r3, r3, r2
 8001250:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001252:	46c0      	nop			; (mov r8, r8)
 8001254:	f7ff ffe0 	bl	8001218 <HAL_GetTick>
 8001258:	0002      	movs	r2, r0
 800125a:	68bb      	ldr	r3, [r7, #8]
 800125c:	1ad3      	subs	r3, r2, r3
 800125e:	68fa      	ldr	r2, [r7, #12]
 8001260:	429a      	cmp	r2, r3
 8001262:	d8f7      	bhi.n	8001254 <HAL_Delay+0x28>
  {
  }
}
 8001264:	46c0      	nop			; (mov r8, r8)
 8001266:	46c0      	nop			; (mov r8, r8)
 8001268:	46bd      	mov	sp, r7
 800126a:	b004      	add	sp, #16
 800126c:	bd80      	pop	{r7, pc}
 800126e:	46c0      	nop			; (mov r8, r8)
 8001270:	20000008 	.word	0x20000008

08001274 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b082      	sub	sp, #8
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 800127c:	4b06      	ldr	r3, [pc, #24]	; (8001298 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	4a06      	ldr	r2, [pc, #24]	; (800129c <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8001282:	4013      	ands	r3, r2
 8001284:	0019      	movs	r1, r3
 8001286:	4b04      	ldr	r3, [pc, #16]	; (8001298 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8001288:	687a      	ldr	r2, [r7, #4]
 800128a:	430a      	orrs	r2, r1
 800128c:	601a      	str	r2, [r3, #0]
}
 800128e:	46c0      	nop			; (mov r8, r8)
 8001290:	46bd      	mov	sp, r7
 8001292:	b002      	add	sp, #8
 8001294:	bd80      	pop	{r7, pc}
 8001296:	46c0      	nop			; (mov r8, r8)
 8001298:	40010000 	.word	0x40010000
 800129c:	fffff9ff 	.word	0xfffff9ff

080012a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b082      	sub	sp, #8
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	0002      	movs	r2, r0
 80012a8:	1dfb      	adds	r3, r7, #7
 80012aa:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80012ac:	1dfb      	adds	r3, r7, #7
 80012ae:	781b      	ldrb	r3, [r3, #0]
 80012b0:	2b7f      	cmp	r3, #127	; 0x7f
 80012b2:	d809      	bhi.n	80012c8 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012b4:	1dfb      	adds	r3, r7, #7
 80012b6:	781b      	ldrb	r3, [r3, #0]
 80012b8:	001a      	movs	r2, r3
 80012ba:	231f      	movs	r3, #31
 80012bc:	401a      	ands	r2, r3
 80012be:	4b04      	ldr	r3, [pc, #16]	; (80012d0 <__NVIC_EnableIRQ+0x30>)
 80012c0:	2101      	movs	r1, #1
 80012c2:	4091      	lsls	r1, r2
 80012c4:	000a      	movs	r2, r1
 80012c6:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 80012c8:	46c0      	nop			; (mov r8, r8)
 80012ca:	46bd      	mov	sp, r7
 80012cc:	b002      	add	sp, #8
 80012ce:	bd80      	pop	{r7, pc}
 80012d0:	e000e100 	.word	0xe000e100

080012d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012d4:	b590      	push	{r4, r7, lr}
 80012d6:	b083      	sub	sp, #12
 80012d8:	af00      	add	r7, sp, #0
 80012da:	0002      	movs	r2, r0
 80012dc:	6039      	str	r1, [r7, #0]
 80012de:	1dfb      	adds	r3, r7, #7
 80012e0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80012e2:	1dfb      	adds	r3, r7, #7
 80012e4:	781b      	ldrb	r3, [r3, #0]
 80012e6:	2b7f      	cmp	r3, #127	; 0x7f
 80012e8:	d828      	bhi.n	800133c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80012ea:	4a2f      	ldr	r2, [pc, #188]	; (80013a8 <__NVIC_SetPriority+0xd4>)
 80012ec:	1dfb      	adds	r3, r7, #7
 80012ee:	781b      	ldrb	r3, [r3, #0]
 80012f0:	b25b      	sxtb	r3, r3
 80012f2:	089b      	lsrs	r3, r3, #2
 80012f4:	33c0      	adds	r3, #192	; 0xc0
 80012f6:	009b      	lsls	r3, r3, #2
 80012f8:	589b      	ldr	r3, [r3, r2]
 80012fa:	1dfa      	adds	r2, r7, #7
 80012fc:	7812      	ldrb	r2, [r2, #0]
 80012fe:	0011      	movs	r1, r2
 8001300:	2203      	movs	r2, #3
 8001302:	400a      	ands	r2, r1
 8001304:	00d2      	lsls	r2, r2, #3
 8001306:	21ff      	movs	r1, #255	; 0xff
 8001308:	4091      	lsls	r1, r2
 800130a:	000a      	movs	r2, r1
 800130c:	43d2      	mvns	r2, r2
 800130e:	401a      	ands	r2, r3
 8001310:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	019b      	lsls	r3, r3, #6
 8001316:	22ff      	movs	r2, #255	; 0xff
 8001318:	401a      	ands	r2, r3
 800131a:	1dfb      	adds	r3, r7, #7
 800131c:	781b      	ldrb	r3, [r3, #0]
 800131e:	0018      	movs	r0, r3
 8001320:	2303      	movs	r3, #3
 8001322:	4003      	ands	r3, r0
 8001324:	00db      	lsls	r3, r3, #3
 8001326:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001328:	481f      	ldr	r0, [pc, #124]	; (80013a8 <__NVIC_SetPriority+0xd4>)
 800132a:	1dfb      	adds	r3, r7, #7
 800132c:	781b      	ldrb	r3, [r3, #0]
 800132e:	b25b      	sxtb	r3, r3
 8001330:	089b      	lsrs	r3, r3, #2
 8001332:	430a      	orrs	r2, r1
 8001334:	33c0      	adds	r3, #192	; 0xc0
 8001336:	009b      	lsls	r3, r3, #2
 8001338:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800133a:	e031      	b.n	80013a0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800133c:	4a1b      	ldr	r2, [pc, #108]	; (80013ac <__NVIC_SetPriority+0xd8>)
 800133e:	1dfb      	adds	r3, r7, #7
 8001340:	781b      	ldrb	r3, [r3, #0]
 8001342:	0019      	movs	r1, r3
 8001344:	230f      	movs	r3, #15
 8001346:	400b      	ands	r3, r1
 8001348:	3b08      	subs	r3, #8
 800134a:	089b      	lsrs	r3, r3, #2
 800134c:	3306      	adds	r3, #6
 800134e:	009b      	lsls	r3, r3, #2
 8001350:	18d3      	adds	r3, r2, r3
 8001352:	3304      	adds	r3, #4
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	1dfa      	adds	r2, r7, #7
 8001358:	7812      	ldrb	r2, [r2, #0]
 800135a:	0011      	movs	r1, r2
 800135c:	2203      	movs	r2, #3
 800135e:	400a      	ands	r2, r1
 8001360:	00d2      	lsls	r2, r2, #3
 8001362:	21ff      	movs	r1, #255	; 0xff
 8001364:	4091      	lsls	r1, r2
 8001366:	000a      	movs	r2, r1
 8001368:	43d2      	mvns	r2, r2
 800136a:	401a      	ands	r2, r3
 800136c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	019b      	lsls	r3, r3, #6
 8001372:	22ff      	movs	r2, #255	; 0xff
 8001374:	401a      	ands	r2, r3
 8001376:	1dfb      	adds	r3, r7, #7
 8001378:	781b      	ldrb	r3, [r3, #0]
 800137a:	0018      	movs	r0, r3
 800137c:	2303      	movs	r3, #3
 800137e:	4003      	ands	r3, r0
 8001380:	00db      	lsls	r3, r3, #3
 8001382:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001384:	4809      	ldr	r0, [pc, #36]	; (80013ac <__NVIC_SetPriority+0xd8>)
 8001386:	1dfb      	adds	r3, r7, #7
 8001388:	781b      	ldrb	r3, [r3, #0]
 800138a:	001c      	movs	r4, r3
 800138c:	230f      	movs	r3, #15
 800138e:	4023      	ands	r3, r4
 8001390:	3b08      	subs	r3, #8
 8001392:	089b      	lsrs	r3, r3, #2
 8001394:	430a      	orrs	r2, r1
 8001396:	3306      	adds	r3, #6
 8001398:	009b      	lsls	r3, r3, #2
 800139a:	18c3      	adds	r3, r0, r3
 800139c:	3304      	adds	r3, #4
 800139e:	601a      	str	r2, [r3, #0]
}
 80013a0:	46c0      	nop			; (mov r8, r8)
 80013a2:	46bd      	mov	sp, r7
 80013a4:	b003      	add	sp, #12
 80013a6:	bd90      	pop	{r4, r7, pc}
 80013a8:	e000e100 	.word	0xe000e100
 80013ac:	e000ed00 	.word	0xe000ed00

080013b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b082      	sub	sp, #8
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	1e5a      	subs	r2, r3, #1
 80013bc:	2380      	movs	r3, #128	; 0x80
 80013be:	045b      	lsls	r3, r3, #17
 80013c0:	429a      	cmp	r2, r3
 80013c2:	d301      	bcc.n	80013c8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013c4:	2301      	movs	r3, #1
 80013c6:	e010      	b.n	80013ea <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013c8:	4b0a      	ldr	r3, [pc, #40]	; (80013f4 <SysTick_Config+0x44>)
 80013ca:	687a      	ldr	r2, [r7, #4]
 80013cc:	3a01      	subs	r2, #1
 80013ce:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013d0:	2301      	movs	r3, #1
 80013d2:	425b      	negs	r3, r3
 80013d4:	2103      	movs	r1, #3
 80013d6:	0018      	movs	r0, r3
 80013d8:	f7ff ff7c 	bl	80012d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013dc:	4b05      	ldr	r3, [pc, #20]	; (80013f4 <SysTick_Config+0x44>)
 80013de:	2200      	movs	r2, #0
 80013e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013e2:	4b04      	ldr	r3, [pc, #16]	; (80013f4 <SysTick_Config+0x44>)
 80013e4:	2207      	movs	r2, #7
 80013e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013e8:	2300      	movs	r3, #0
}
 80013ea:	0018      	movs	r0, r3
 80013ec:	46bd      	mov	sp, r7
 80013ee:	b002      	add	sp, #8
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	46c0      	nop			; (mov r8, r8)
 80013f4:	e000e010 	.word	0xe000e010

080013f8 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b084      	sub	sp, #16
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	60b9      	str	r1, [r7, #8]
 8001400:	607a      	str	r2, [r7, #4]
 8001402:	210f      	movs	r1, #15
 8001404:	187b      	adds	r3, r7, r1
 8001406:	1c02      	adds	r2, r0, #0
 8001408:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 800140a:	68ba      	ldr	r2, [r7, #8]
 800140c:	187b      	adds	r3, r7, r1
 800140e:	781b      	ldrb	r3, [r3, #0]
 8001410:	b25b      	sxtb	r3, r3
 8001412:	0011      	movs	r1, r2
 8001414:	0018      	movs	r0, r3
 8001416:	f7ff ff5d 	bl	80012d4 <__NVIC_SetPriority>
}
 800141a:	46c0      	nop			; (mov r8, r8)
 800141c:	46bd      	mov	sp, r7
 800141e:	b004      	add	sp, #16
 8001420:	bd80      	pop	{r7, pc}

08001422 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001422:	b580      	push	{r7, lr}
 8001424:	b082      	sub	sp, #8
 8001426:	af00      	add	r7, sp, #0
 8001428:	0002      	movs	r2, r0
 800142a:	1dfb      	adds	r3, r7, #7
 800142c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800142e:	1dfb      	adds	r3, r7, #7
 8001430:	781b      	ldrb	r3, [r3, #0]
 8001432:	b25b      	sxtb	r3, r3
 8001434:	0018      	movs	r0, r3
 8001436:	f7ff ff33 	bl	80012a0 <__NVIC_EnableIRQ>
}
 800143a:	46c0      	nop			; (mov r8, r8)
 800143c:	46bd      	mov	sp, r7
 800143e:	b002      	add	sp, #8
 8001440:	bd80      	pop	{r7, pc}

08001442 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001442:	b580      	push	{r7, lr}
 8001444:	b082      	sub	sp, #8
 8001446:	af00      	add	r7, sp, #0
 8001448:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	0018      	movs	r0, r3
 800144e:	f7ff ffaf 	bl	80013b0 <SysTick_Config>
 8001452:	0003      	movs	r3, r0
}
 8001454:	0018      	movs	r0, r3
 8001456:	46bd      	mov	sp, r7
 8001458:	b002      	add	sp, #8
 800145a:	bd80      	pop	{r7, pc}

0800145c <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b084      	sub	sp, #16
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001464:	210f      	movs	r1, #15
 8001466:	187b      	adds	r3, r7, r1
 8001468:	2200      	movs	r2, #0
 800146a:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	2225      	movs	r2, #37	; 0x25
 8001470:	5c9b      	ldrb	r3, [r3, r2]
 8001472:	b2db      	uxtb	r3, r3
 8001474:	2b02      	cmp	r3, #2
 8001476:	d006      	beq.n	8001486 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	2204      	movs	r2, #4
 800147c:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800147e:	187b      	adds	r3, r7, r1
 8001480:	2201      	movs	r2, #1
 8001482:	701a      	strb	r2, [r3, #0]
 8001484:	e049      	b.n	800151a <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	681a      	ldr	r2, [r3, #0]
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	210e      	movs	r1, #14
 8001492:	438a      	bics	r2, r1
 8001494:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	681a      	ldr	r2, [r3, #0]
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	2101      	movs	r1, #1
 80014a2:	438a      	bics	r2, r1
 80014a4:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014aa:	681a      	ldr	r2, [r3, #0]
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014b0:	491d      	ldr	r1, [pc, #116]	; (8001528 <HAL_DMA_Abort_IT+0xcc>)
 80014b2:	400a      	ands	r2, r1
 80014b4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 80014b6:	4b1d      	ldr	r3, [pc, #116]	; (800152c <HAL_DMA_Abort_IT+0xd0>)
 80014b8:	6859      	ldr	r1, [r3, #4]
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014be:	221c      	movs	r2, #28
 80014c0:	4013      	ands	r3, r2
 80014c2:	2201      	movs	r2, #1
 80014c4:	409a      	lsls	r2, r3
 80014c6:	4b19      	ldr	r3, [pc, #100]	; (800152c <HAL_DMA_Abort_IT+0xd0>)
 80014c8:	430a      	orrs	r2, r1
 80014ca:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80014d0:	687a      	ldr	r2, [r7, #4]
 80014d2:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80014d4:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d00c      	beq.n	80014f8 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80014e2:	681a      	ldr	r2, [r3, #0]
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80014e8:	490f      	ldr	r1, [pc, #60]	; (8001528 <HAL_DMA_Abort_IT+0xcc>)
 80014ea:	400a      	ands	r2, r1
 80014ec:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014f2:	687a      	ldr	r2, [r7, #4]
 80014f4:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80014f6:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	2225      	movs	r2, #37	; 0x25
 80014fc:	2101      	movs	r1, #1
 80014fe:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	2224      	movs	r2, #36	; 0x24
 8001504:	2100      	movs	r1, #0
 8001506:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800150c:	2b00      	cmp	r3, #0
 800150e:	d004      	beq.n	800151a <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001514:	687a      	ldr	r2, [r7, #4]
 8001516:	0010      	movs	r0, r2
 8001518:	4798      	blx	r3
    }
  }
  return status;
 800151a:	230f      	movs	r3, #15
 800151c:	18fb      	adds	r3, r7, r3
 800151e:	781b      	ldrb	r3, [r3, #0]
}
 8001520:	0018      	movs	r0, r3
 8001522:	46bd      	mov	sp, r7
 8001524:	b004      	add	sp, #16
 8001526:	bd80      	pop	{r7, pc}
 8001528:	fffffeff 	.word	0xfffffeff
 800152c:	40020000 	.word	0x40020000

08001530 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b086      	sub	sp, #24
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
 8001538:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800153a:	2300      	movs	r3, #0
 800153c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800153e:	e147      	b.n	80017d0 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	2101      	movs	r1, #1
 8001546:	697a      	ldr	r2, [r7, #20]
 8001548:	4091      	lsls	r1, r2
 800154a:	000a      	movs	r2, r1
 800154c:	4013      	ands	r3, r2
 800154e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	2b00      	cmp	r3, #0
 8001554:	d100      	bne.n	8001558 <HAL_GPIO_Init+0x28>
 8001556:	e138      	b.n	80017ca <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	2203      	movs	r2, #3
 800155e:	4013      	ands	r3, r2
 8001560:	2b01      	cmp	r3, #1
 8001562:	d005      	beq.n	8001570 <HAL_GPIO_Init+0x40>
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	2203      	movs	r2, #3
 800156a:	4013      	ands	r3, r2
 800156c:	2b02      	cmp	r3, #2
 800156e:	d130      	bne.n	80015d2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	689b      	ldr	r3, [r3, #8]
 8001574:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001576:	697b      	ldr	r3, [r7, #20]
 8001578:	005b      	lsls	r3, r3, #1
 800157a:	2203      	movs	r2, #3
 800157c:	409a      	lsls	r2, r3
 800157e:	0013      	movs	r3, r2
 8001580:	43da      	mvns	r2, r3
 8001582:	693b      	ldr	r3, [r7, #16]
 8001584:	4013      	ands	r3, r2
 8001586:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	68da      	ldr	r2, [r3, #12]
 800158c:	697b      	ldr	r3, [r7, #20]
 800158e:	005b      	lsls	r3, r3, #1
 8001590:	409a      	lsls	r2, r3
 8001592:	0013      	movs	r3, r2
 8001594:	693a      	ldr	r2, [r7, #16]
 8001596:	4313      	orrs	r3, r2
 8001598:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	693a      	ldr	r2, [r7, #16]
 800159e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80015a6:	2201      	movs	r2, #1
 80015a8:	697b      	ldr	r3, [r7, #20]
 80015aa:	409a      	lsls	r2, r3
 80015ac:	0013      	movs	r3, r2
 80015ae:	43da      	mvns	r2, r3
 80015b0:	693b      	ldr	r3, [r7, #16]
 80015b2:	4013      	ands	r3, r2
 80015b4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	685b      	ldr	r3, [r3, #4]
 80015ba:	091b      	lsrs	r3, r3, #4
 80015bc:	2201      	movs	r2, #1
 80015be:	401a      	ands	r2, r3
 80015c0:	697b      	ldr	r3, [r7, #20]
 80015c2:	409a      	lsls	r2, r3
 80015c4:	0013      	movs	r3, r2
 80015c6:	693a      	ldr	r2, [r7, #16]
 80015c8:	4313      	orrs	r3, r2
 80015ca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	693a      	ldr	r2, [r7, #16]
 80015d0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	685b      	ldr	r3, [r3, #4]
 80015d6:	2203      	movs	r2, #3
 80015d8:	4013      	ands	r3, r2
 80015da:	2b03      	cmp	r3, #3
 80015dc:	d017      	beq.n	800160e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	68db      	ldr	r3, [r3, #12]
 80015e2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80015e4:	697b      	ldr	r3, [r7, #20]
 80015e6:	005b      	lsls	r3, r3, #1
 80015e8:	2203      	movs	r2, #3
 80015ea:	409a      	lsls	r2, r3
 80015ec:	0013      	movs	r3, r2
 80015ee:	43da      	mvns	r2, r3
 80015f0:	693b      	ldr	r3, [r7, #16]
 80015f2:	4013      	ands	r3, r2
 80015f4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	689a      	ldr	r2, [r3, #8]
 80015fa:	697b      	ldr	r3, [r7, #20]
 80015fc:	005b      	lsls	r3, r3, #1
 80015fe:	409a      	lsls	r2, r3
 8001600:	0013      	movs	r3, r2
 8001602:	693a      	ldr	r2, [r7, #16]
 8001604:	4313      	orrs	r3, r2
 8001606:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	693a      	ldr	r2, [r7, #16]
 800160c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	685b      	ldr	r3, [r3, #4]
 8001612:	2203      	movs	r2, #3
 8001614:	4013      	ands	r3, r2
 8001616:	2b02      	cmp	r3, #2
 8001618:	d123      	bne.n	8001662 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800161a:	697b      	ldr	r3, [r7, #20]
 800161c:	08da      	lsrs	r2, r3, #3
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	3208      	adds	r2, #8
 8001622:	0092      	lsls	r2, r2, #2
 8001624:	58d3      	ldr	r3, [r2, r3]
 8001626:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001628:	697b      	ldr	r3, [r7, #20]
 800162a:	2207      	movs	r2, #7
 800162c:	4013      	ands	r3, r2
 800162e:	009b      	lsls	r3, r3, #2
 8001630:	220f      	movs	r2, #15
 8001632:	409a      	lsls	r2, r3
 8001634:	0013      	movs	r3, r2
 8001636:	43da      	mvns	r2, r3
 8001638:	693b      	ldr	r3, [r7, #16]
 800163a:	4013      	ands	r3, r2
 800163c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	691a      	ldr	r2, [r3, #16]
 8001642:	697b      	ldr	r3, [r7, #20]
 8001644:	2107      	movs	r1, #7
 8001646:	400b      	ands	r3, r1
 8001648:	009b      	lsls	r3, r3, #2
 800164a:	409a      	lsls	r2, r3
 800164c:	0013      	movs	r3, r2
 800164e:	693a      	ldr	r2, [r7, #16]
 8001650:	4313      	orrs	r3, r2
 8001652:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001654:	697b      	ldr	r3, [r7, #20]
 8001656:	08da      	lsrs	r2, r3, #3
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	3208      	adds	r2, #8
 800165c:	0092      	lsls	r2, r2, #2
 800165e:	6939      	ldr	r1, [r7, #16]
 8001660:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001668:	697b      	ldr	r3, [r7, #20]
 800166a:	005b      	lsls	r3, r3, #1
 800166c:	2203      	movs	r2, #3
 800166e:	409a      	lsls	r2, r3
 8001670:	0013      	movs	r3, r2
 8001672:	43da      	mvns	r2, r3
 8001674:	693b      	ldr	r3, [r7, #16]
 8001676:	4013      	ands	r3, r2
 8001678:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	685b      	ldr	r3, [r3, #4]
 800167e:	2203      	movs	r2, #3
 8001680:	401a      	ands	r2, r3
 8001682:	697b      	ldr	r3, [r7, #20]
 8001684:	005b      	lsls	r3, r3, #1
 8001686:	409a      	lsls	r2, r3
 8001688:	0013      	movs	r3, r2
 800168a:	693a      	ldr	r2, [r7, #16]
 800168c:	4313      	orrs	r3, r2
 800168e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	693a      	ldr	r2, [r7, #16]
 8001694:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	685a      	ldr	r2, [r3, #4]
 800169a:	23c0      	movs	r3, #192	; 0xc0
 800169c:	029b      	lsls	r3, r3, #10
 800169e:	4013      	ands	r3, r2
 80016a0:	d100      	bne.n	80016a4 <HAL_GPIO_Init+0x174>
 80016a2:	e092      	b.n	80017ca <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80016a4:	4a50      	ldr	r2, [pc, #320]	; (80017e8 <HAL_GPIO_Init+0x2b8>)
 80016a6:	697b      	ldr	r3, [r7, #20]
 80016a8:	089b      	lsrs	r3, r3, #2
 80016aa:	3318      	adds	r3, #24
 80016ac:	009b      	lsls	r3, r3, #2
 80016ae:	589b      	ldr	r3, [r3, r2]
 80016b0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80016b2:	697b      	ldr	r3, [r7, #20]
 80016b4:	2203      	movs	r2, #3
 80016b6:	4013      	ands	r3, r2
 80016b8:	00db      	lsls	r3, r3, #3
 80016ba:	220f      	movs	r2, #15
 80016bc:	409a      	lsls	r2, r3
 80016be:	0013      	movs	r3, r2
 80016c0:	43da      	mvns	r2, r3
 80016c2:	693b      	ldr	r3, [r7, #16]
 80016c4:	4013      	ands	r3, r2
 80016c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80016c8:	687a      	ldr	r2, [r7, #4]
 80016ca:	23a0      	movs	r3, #160	; 0xa0
 80016cc:	05db      	lsls	r3, r3, #23
 80016ce:	429a      	cmp	r2, r3
 80016d0:	d013      	beq.n	80016fa <HAL_GPIO_Init+0x1ca>
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	4a45      	ldr	r2, [pc, #276]	; (80017ec <HAL_GPIO_Init+0x2bc>)
 80016d6:	4293      	cmp	r3, r2
 80016d8:	d00d      	beq.n	80016f6 <HAL_GPIO_Init+0x1c6>
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	4a44      	ldr	r2, [pc, #272]	; (80017f0 <HAL_GPIO_Init+0x2c0>)
 80016de:	4293      	cmp	r3, r2
 80016e0:	d007      	beq.n	80016f2 <HAL_GPIO_Init+0x1c2>
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	4a43      	ldr	r2, [pc, #268]	; (80017f4 <HAL_GPIO_Init+0x2c4>)
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d101      	bne.n	80016ee <HAL_GPIO_Init+0x1be>
 80016ea:	2303      	movs	r3, #3
 80016ec:	e006      	b.n	80016fc <HAL_GPIO_Init+0x1cc>
 80016ee:	2305      	movs	r3, #5
 80016f0:	e004      	b.n	80016fc <HAL_GPIO_Init+0x1cc>
 80016f2:	2302      	movs	r3, #2
 80016f4:	e002      	b.n	80016fc <HAL_GPIO_Init+0x1cc>
 80016f6:	2301      	movs	r3, #1
 80016f8:	e000      	b.n	80016fc <HAL_GPIO_Init+0x1cc>
 80016fa:	2300      	movs	r3, #0
 80016fc:	697a      	ldr	r2, [r7, #20]
 80016fe:	2103      	movs	r1, #3
 8001700:	400a      	ands	r2, r1
 8001702:	00d2      	lsls	r2, r2, #3
 8001704:	4093      	lsls	r3, r2
 8001706:	693a      	ldr	r2, [r7, #16]
 8001708:	4313      	orrs	r3, r2
 800170a:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 800170c:	4936      	ldr	r1, [pc, #216]	; (80017e8 <HAL_GPIO_Init+0x2b8>)
 800170e:	697b      	ldr	r3, [r7, #20]
 8001710:	089b      	lsrs	r3, r3, #2
 8001712:	3318      	adds	r3, #24
 8001714:	009b      	lsls	r3, r3, #2
 8001716:	693a      	ldr	r2, [r7, #16]
 8001718:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800171a:	4b33      	ldr	r3, [pc, #204]	; (80017e8 <HAL_GPIO_Init+0x2b8>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	43da      	mvns	r2, r3
 8001724:	693b      	ldr	r3, [r7, #16]
 8001726:	4013      	ands	r3, r2
 8001728:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	685a      	ldr	r2, [r3, #4]
 800172e:	2380      	movs	r3, #128	; 0x80
 8001730:	035b      	lsls	r3, r3, #13
 8001732:	4013      	ands	r3, r2
 8001734:	d003      	beq.n	800173e <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8001736:	693a      	ldr	r2, [r7, #16]
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	4313      	orrs	r3, r2
 800173c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800173e:	4b2a      	ldr	r3, [pc, #168]	; (80017e8 <HAL_GPIO_Init+0x2b8>)
 8001740:	693a      	ldr	r2, [r7, #16]
 8001742:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001744:	4b28      	ldr	r3, [pc, #160]	; (80017e8 <HAL_GPIO_Init+0x2b8>)
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	43da      	mvns	r2, r3
 800174e:	693b      	ldr	r3, [r7, #16]
 8001750:	4013      	ands	r3, r2
 8001752:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	685a      	ldr	r2, [r3, #4]
 8001758:	2380      	movs	r3, #128	; 0x80
 800175a:	039b      	lsls	r3, r3, #14
 800175c:	4013      	ands	r3, r2
 800175e:	d003      	beq.n	8001768 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8001760:	693a      	ldr	r2, [r7, #16]
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	4313      	orrs	r3, r2
 8001766:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001768:	4b1f      	ldr	r3, [pc, #124]	; (80017e8 <HAL_GPIO_Init+0x2b8>)
 800176a:	693a      	ldr	r2, [r7, #16]
 800176c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800176e:	4a1e      	ldr	r2, [pc, #120]	; (80017e8 <HAL_GPIO_Init+0x2b8>)
 8001770:	2384      	movs	r3, #132	; 0x84
 8001772:	58d3      	ldr	r3, [r2, r3]
 8001774:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	43da      	mvns	r2, r3
 800177a:	693b      	ldr	r3, [r7, #16]
 800177c:	4013      	ands	r3, r2
 800177e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	685a      	ldr	r2, [r3, #4]
 8001784:	2380      	movs	r3, #128	; 0x80
 8001786:	029b      	lsls	r3, r3, #10
 8001788:	4013      	ands	r3, r2
 800178a:	d003      	beq.n	8001794 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 800178c:	693a      	ldr	r2, [r7, #16]
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	4313      	orrs	r3, r2
 8001792:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001794:	4914      	ldr	r1, [pc, #80]	; (80017e8 <HAL_GPIO_Init+0x2b8>)
 8001796:	2284      	movs	r2, #132	; 0x84
 8001798:	693b      	ldr	r3, [r7, #16]
 800179a:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 800179c:	4a12      	ldr	r2, [pc, #72]	; (80017e8 <HAL_GPIO_Init+0x2b8>)
 800179e:	2380      	movs	r3, #128	; 0x80
 80017a0:	58d3      	ldr	r3, [r2, r3]
 80017a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	43da      	mvns	r2, r3
 80017a8:	693b      	ldr	r3, [r7, #16]
 80017aa:	4013      	ands	r3, r2
 80017ac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	685a      	ldr	r2, [r3, #4]
 80017b2:	2380      	movs	r3, #128	; 0x80
 80017b4:	025b      	lsls	r3, r3, #9
 80017b6:	4013      	ands	r3, r2
 80017b8:	d003      	beq.n	80017c2 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 80017ba:	693a      	ldr	r2, [r7, #16]
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	4313      	orrs	r3, r2
 80017c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80017c2:	4909      	ldr	r1, [pc, #36]	; (80017e8 <HAL_GPIO_Init+0x2b8>)
 80017c4:	2280      	movs	r2, #128	; 0x80
 80017c6:	693b      	ldr	r3, [r7, #16]
 80017c8:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80017ca:	697b      	ldr	r3, [r7, #20]
 80017cc:	3301      	adds	r3, #1
 80017ce:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	681a      	ldr	r2, [r3, #0]
 80017d4:	697b      	ldr	r3, [r7, #20]
 80017d6:	40da      	lsrs	r2, r3
 80017d8:	1e13      	subs	r3, r2, #0
 80017da:	d000      	beq.n	80017de <HAL_GPIO_Init+0x2ae>
 80017dc:	e6b0      	b.n	8001540 <HAL_GPIO_Init+0x10>
  }
}
 80017de:	46c0      	nop			; (mov r8, r8)
 80017e0:	46c0      	nop			; (mov r8, r8)
 80017e2:	46bd      	mov	sp, r7
 80017e4:	b006      	add	sp, #24
 80017e6:	bd80      	pop	{r7, pc}
 80017e8:	40021800 	.word	0x40021800
 80017ec:	50000400 	.word	0x50000400
 80017f0:	50000800 	.word	0x50000800
 80017f4:	50000c00 	.word	0x50000c00

080017f8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b084      	sub	sp, #16
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
 8001800:	000a      	movs	r2, r1
 8001802:	1cbb      	adds	r3, r7, #2
 8001804:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	691b      	ldr	r3, [r3, #16]
 800180a:	1cba      	adds	r2, r7, #2
 800180c:	8812      	ldrh	r2, [r2, #0]
 800180e:	4013      	ands	r3, r2
 8001810:	d004      	beq.n	800181c <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8001812:	230f      	movs	r3, #15
 8001814:	18fb      	adds	r3, r7, r3
 8001816:	2201      	movs	r2, #1
 8001818:	701a      	strb	r2, [r3, #0]
 800181a:	e003      	b.n	8001824 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800181c:	230f      	movs	r3, #15
 800181e:	18fb      	adds	r3, r7, r3
 8001820:	2200      	movs	r2, #0
 8001822:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8001824:	230f      	movs	r3, #15
 8001826:	18fb      	adds	r3, r7, r3
 8001828:	781b      	ldrb	r3, [r3, #0]
}
 800182a:	0018      	movs	r0, r3
 800182c:	46bd      	mov	sp, r7
 800182e:	b004      	add	sp, #16
 8001830:	bd80      	pop	{r7, pc}

08001832 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001832:	b580      	push	{r7, lr}
 8001834:	b082      	sub	sp, #8
 8001836:	af00      	add	r7, sp, #0
 8001838:	6078      	str	r0, [r7, #4]
 800183a:	0008      	movs	r0, r1
 800183c:	0011      	movs	r1, r2
 800183e:	1cbb      	adds	r3, r7, #2
 8001840:	1c02      	adds	r2, r0, #0
 8001842:	801a      	strh	r2, [r3, #0]
 8001844:	1c7b      	adds	r3, r7, #1
 8001846:	1c0a      	adds	r2, r1, #0
 8001848:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800184a:	1c7b      	adds	r3, r7, #1
 800184c:	781b      	ldrb	r3, [r3, #0]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d004      	beq.n	800185c <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001852:	1cbb      	adds	r3, r7, #2
 8001854:	881a      	ldrh	r2, [r3, #0]
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800185a:	e003      	b.n	8001864 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800185c:	1cbb      	adds	r3, r7, #2
 800185e:	881a      	ldrh	r2, [r3, #0]
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001864:	46c0      	nop			; (mov r8, r8)
 8001866:	46bd      	mov	sp, r7
 8001868:	b002      	add	sp, #8
 800186a:	bd80      	pop	{r7, pc}

0800186c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b084      	sub	sp, #16
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001874:	4b19      	ldr	r3, [pc, #100]	; (80018dc <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4a19      	ldr	r2, [pc, #100]	; (80018e0 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800187a:	4013      	ands	r3, r2
 800187c:	0019      	movs	r1, r3
 800187e:	4b17      	ldr	r3, [pc, #92]	; (80018dc <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001880:	687a      	ldr	r2, [r7, #4]
 8001882:	430a      	orrs	r2, r1
 8001884:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001886:	687a      	ldr	r2, [r7, #4]
 8001888:	2380      	movs	r3, #128	; 0x80
 800188a:	009b      	lsls	r3, r3, #2
 800188c:	429a      	cmp	r2, r3
 800188e:	d11f      	bne.n	80018d0 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8001890:	4b14      	ldr	r3, [pc, #80]	; (80018e4 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8001892:	681a      	ldr	r2, [r3, #0]
 8001894:	0013      	movs	r3, r2
 8001896:	005b      	lsls	r3, r3, #1
 8001898:	189b      	adds	r3, r3, r2
 800189a:	005b      	lsls	r3, r3, #1
 800189c:	4912      	ldr	r1, [pc, #72]	; (80018e8 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800189e:	0018      	movs	r0, r3
 80018a0:	f7fe fc42 	bl	8000128 <__udivsi3>
 80018a4:	0003      	movs	r3, r0
 80018a6:	3301      	adds	r3, #1
 80018a8:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80018aa:	e008      	b.n	80018be <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d003      	beq.n	80018ba <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	3b01      	subs	r3, #1
 80018b6:	60fb      	str	r3, [r7, #12]
 80018b8:	e001      	b.n	80018be <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80018ba:	2303      	movs	r3, #3
 80018bc:	e009      	b.n	80018d2 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80018be:	4b07      	ldr	r3, [pc, #28]	; (80018dc <HAL_PWREx_ControlVoltageScaling+0x70>)
 80018c0:	695a      	ldr	r2, [r3, #20]
 80018c2:	2380      	movs	r3, #128	; 0x80
 80018c4:	00db      	lsls	r3, r3, #3
 80018c6:	401a      	ands	r2, r3
 80018c8:	2380      	movs	r3, #128	; 0x80
 80018ca:	00db      	lsls	r3, r3, #3
 80018cc:	429a      	cmp	r2, r3
 80018ce:	d0ed      	beq.n	80018ac <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80018d0:	2300      	movs	r3, #0
}
 80018d2:	0018      	movs	r0, r3
 80018d4:	46bd      	mov	sp, r7
 80018d6:	b004      	add	sp, #16
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	46c0      	nop			; (mov r8, r8)
 80018dc:	40007000 	.word	0x40007000
 80018e0:	fffff9ff 	.word	0xfffff9ff
 80018e4:	20000000 	.word	0x20000000
 80018e8:	000f4240 	.word	0x000f4240

080018ec <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80018f0:	4b03      	ldr	r3, [pc, #12]	; (8001900 <LL_RCC_GetAPB1Prescaler+0x14>)
 80018f2:	689a      	ldr	r2, [r3, #8]
 80018f4:	23e0      	movs	r3, #224	; 0xe0
 80018f6:	01db      	lsls	r3, r3, #7
 80018f8:	4013      	ands	r3, r2
}
 80018fa:	0018      	movs	r0, r3
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bd80      	pop	{r7, pc}
 8001900:	40021000 	.word	0x40021000

08001904 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b088      	sub	sp, #32
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	2b00      	cmp	r3, #0
 8001910:	d101      	bne.n	8001916 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001912:	2301      	movs	r3, #1
 8001914:	e2fe      	b.n	8001f14 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	2201      	movs	r2, #1
 800191c:	4013      	ands	r3, r2
 800191e:	d100      	bne.n	8001922 <HAL_RCC_OscConfig+0x1e>
 8001920:	e07c      	b.n	8001a1c <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001922:	4bc3      	ldr	r3, [pc, #780]	; (8001c30 <HAL_RCC_OscConfig+0x32c>)
 8001924:	689b      	ldr	r3, [r3, #8]
 8001926:	2238      	movs	r2, #56	; 0x38
 8001928:	4013      	ands	r3, r2
 800192a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800192c:	4bc0      	ldr	r3, [pc, #768]	; (8001c30 <HAL_RCC_OscConfig+0x32c>)
 800192e:	68db      	ldr	r3, [r3, #12]
 8001930:	2203      	movs	r2, #3
 8001932:	4013      	ands	r3, r2
 8001934:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8001936:	69bb      	ldr	r3, [r7, #24]
 8001938:	2b10      	cmp	r3, #16
 800193a:	d102      	bne.n	8001942 <HAL_RCC_OscConfig+0x3e>
 800193c:	697b      	ldr	r3, [r7, #20]
 800193e:	2b03      	cmp	r3, #3
 8001940:	d002      	beq.n	8001948 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8001942:	69bb      	ldr	r3, [r7, #24]
 8001944:	2b08      	cmp	r3, #8
 8001946:	d10b      	bne.n	8001960 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001948:	4bb9      	ldr	r3, [pc, #740]	; (8001c30 <HAL_RCC_OscConfig+0x32c>)
 800194a:	681a      	ldr	r2, [r3, #0]
 800194c:	2380      	movs	r3, #128	; 0x80
 800194e:	029b      	lsls	r3, r3, #10
 8001950:	4013      	ands	r3, r2
 8001952:	d062      	beq.n	8001a1a <HAL_RCC_OscConfig+0x116>
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	2b00      	cmp	r3, #0
 800195a:	d15e      	bne.n	8001a1a <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 800195c:	2301      	movs	r3, #1
 800195e:	e2d9      	b.n	8001f14 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	685a      	ldr	r2, [r3, #4]
 8001964:	2380      	movs	r3, #128	; 0x80
 8001966:	025b      	lsls	r3, r3, #9
 8001968:	429a      	cmp	r2, r3
 800196a:	d107      	bne.n	800197c <HAL_RCC_OscConfig+0x78>
 800196c:	4bb0      	ldr	r3, [pc, #704]	; (8001c30 <HAL_RCC_OscConfig+0x32c>)
 800196e:	681a      	ldr	r2, [r3, #0]
 8001970:	4baf      	ldr	r3, [pc, #700]	; (8001c30 <HAL_RCC_OscConfig+0x32c>)
 8001972:	2180      	movs	r1, #128	; 0x80
 8001974:	0249      	lsls	r1, r1, #9
 8001976:	430a      	orrs	r2, r1
 8001978:	601a      	str	r2, [r3, #0]
 800197a:	e020      	b.n	80019be <HAL_RCC_OscConfig+0xba>
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	685a      	ldr	r2, [r3, #4]
 8001980:	23a0      	movs	r3, #160	; 0xa0
 8001982:	02db      	lsls	r3, r3, #11
 8001984:	429a      	cmp	r2, r3
 8001986:	d10e      	bne.n	80019a6 <HAL_RCC_OscConfig+0xa2>
 8001988:	4ba9      	ldr	r3, [pc, #676]	; (8001c30 <HAL_RCC_OscConfig+0x32c>)
 800198a:	681a      	ldr	r2, [r3, #0]
 800198c:	4ba8      	ldr	r3, [pc, #672]	; (8001c30 <HAL_RCC_OscConfig+0x32c>)
 800198e:	2180      	movs	r1, #128	; 0x80
 8001990:	02c9      	lsls	r1, r1, #11
 8001992:	430a      	orrs	r2, r1
 8001994:	601a      	str	r2, [r3, #0]
 8001996:	4ba6      	ldr	r3, [pc, #664]	; (8001c30 <HAL_RCC_OscConfig+0x32c>)
 8001998:	681a      	ldr	r2, [r3, #0]
 800199a:	4ba5      	ldr	r3, [pc, #660]	; (8001c30 <HAL_RCC_OscConfig+0x32c>)
 800199c:	2180      	movs	r1, #128	; 0x80
 800199e:	0249      	lsls	r1, r1, #9
 80019a0:	430a      	orrs	r2, r1
 80019a2:	601a      	str	r2, [r3, #0]
 80019a4:	e00b      	b.n	80019be <HAL_RCC_OscConfig+0xba>
 80019a6:	4ba2      	ldr	r3, [pc, #648]	; (8001c30 <HAL_RCC_OscConfig+0x32c>)
 80019a8:	681a      	ldr	r2, [r3, #0]
 80019aa:	4ba1      	ldr	r3, [pc, #644]	; (8001c30 <HAL_RCC_OscConfig+0x32c>)
 80019ac:	49a1      	ldr	r1, [pc, #644]	; (8001c34 <HAL_RCC_OscConfig+0x330>)
 80019ae:	400a      	ands	r2, r1
 80019b0:	601a      	str	r2, [r3, #0]
 80019b2:	4b9f      	ldr	r3, [pc, #636]	; (8001c30 <HAL_RCC_OscConfig+0x32c>)
 80019b4:	681a      	ldr	r2, [r3, #0]
 80019b6:	4b9e      	ldr	r3, [pc, #632]	; (8001c30 <HAL_RCC_OscConfig+0x32c>)
 80019b8:	499f      	ldr	r1, [pc, #636]	; (8001c38 <HAL_RCC_OscConfig+0x334>)
 80019ba:	400a      	ands	r2, r1
 80019bc:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d014      	beq.n	80019f0 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019c6:	f7ff fc27 	bl	8001218 <HAL_GetTick>
 80019ca:	0003      	movs	r3, r0
 80019cc:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80019ce:	e008      	b.n	80019e2 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019d0:	f7ff fc22 	bl	8001218 <HAL_GetTick>
 80019d4:	0002      	movs	r2, r0
 80019d6:	693b      	ldr	r3, [r7, #16]
 80019d8:	1ad3      	subs	r3, r2, r3
 80019da:	2b64      	cmp	r3, #100	; 0x64
 80019dc:	d901      	bls.n	80019e2 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80019de:	2303      	movs	r3, #3
 80019e0:	e298      	b.n	8001f14 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80019e2:	4b93      	ldr	r3, [pc, #588]	; (8001c30 <HAL_RCC_OscConfig+0x32c>)
 80019e4:	681a      	ldr	r2, [r3, #0]
 80019e6:	2380      	movs	r3, #128	; 0x80
 80019e8:	029b      	lsls	r3, r3, #10
 80019ea:	4013      	ands	r3, r2
 80019ec:	d0f0      	beq.n	80019d0 <HAL_RCC_OscConfig+0xcc>
 80019ee:	e015      	b.n	8001a1c <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019f0:	f7ff fc12 	bl	8001218 <HAL_GetTick>
 80019f4:	0003      	movs	r3, r0
 80019f6:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80019f8:	e008      	b.n	8001a0c <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019fa:	f7ff fc0d 	bl	8001218 <HAL_GetTick>
 80019fe:	0002      	movs	r2, r0
 8001a00:	693b      	ldr	r3, [r7, #16]
 8001a02:	1ad3      	subs	r3, r2, r3
 8001a04:	2b64      	cmp	r3, #100	; 0x64
 8001a06:	d901      	bls.n	8001a0c <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001a08:	2303      	movs	r3, #3
 8001a0a:	e283      	b.n	8001f14 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a0c:	4b88      	ldr	r3, [pc, #544]	; (8001c30 <HAL_RCC_OscConfig+0x32c>)
 8001a0e:	681a      	ldr	r2, [r3, #0]
 8001a10:	2380      	movs	r3, #128	; 0x80
 8001a12:	029b      	lsls	r3, r3, #10
 8001a14:	4013      	ands	r3, r2
 8001a16:	d1f0      	bne.n	80019fa <HAL_RCC_OscConfig+0xf6>
 8001a18:	e000      	b.n	8001a1c <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a1a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	2202      	movs	r2, #2
 8001a22:	4013      	ands	r3, r2
 8001a24:	d100      	bne.n	8001a28 <HAL_RCC_OscConfig+0x124>
 8001a26:	e099      	b.n	8001b5c <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a28:	4b81      	ldr	r3, [pc, #516]	; (8001c30 <HAL_RCC_OscConfig+0x32c>)
 8001a2a:	689b      	ldr	r3, [r3, #8]
 8001a2c:	2238      	movs	r2, #56	; 0x38
 8001a2e:	4013      	ands	r3, r2
 8001a30:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001a32:	4b7f      	ldr	r3, [pc, #508]	; (8001c30 <HAL_RCC_OscConfig+0x32c>)
 8001a34:	68db      	ldr	r3, [r3, #12]
 8001a36:	2203      	movs	r2, #3
 8001a38:	4013      	ands	r3, r2
 8001a3a:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8001a3c:	69bb      	ldr	r3, [r7, #24]
 8001a3e:	2b10      	cmp	r3, #16
 8001a40:	d102      	bne.n	8001a48 <HAL_RCC_OscConfig+0x144>
 8001a42:	697b      	ldr	r3, [r7, #20]
 8001a44:	2b02      	cmp	r3, #2
 8001a46:	d002      	beq.n	8001a4e <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8001a48:	69bb      	ldr	r3, [r7, #24]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d135      	bne.n	8001aba <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a4e:	4b78      	ldr	r3, [pc, #480]	; (8001c30 <HAL_RCC_OscConfig+0x32c>)
 8001a50:	681a      	ldr	r2, [r3, #0]
 8001a52:	2380      	movs	r3, #128	; 0x80
 8001a54:	00db      	lsls	r3, r3, #3
 8001a56:	4013      	ands	r3, r2
 8001a58:	d005      	beq.n	8001a66 <HAL_RCC_OscConfig+0x162>
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	68db      	ldr	r3, [r3, #12]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d101      	bne.n	8001a66 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8001a62:	2301      	movs	r3, #1
 8001a64:	e256      	b.n	8001f14 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a66:	4b72      	ldr	r3, [pc, #456]	; (8001c30 <HAL_RCC_OscConfig+0x32c>)
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	4a74      	ldr	r2, [pc, #464]	; (8001c3c <HAL_RCC_OscConfig+0x338>)
 8001a6c:	4013      	ands	r3, r2
 8001a6e:	0019      	movs	r1, r3
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	695b      	ldr	r3, [r3, #20]
 8001a74:	021a      	lsls	r2, r3, #8
 8001a76:	4b6e      	ldr	r3, [pc, #440]	; (8001c30 <HAL_RCC_OscConfig+0x32c>)
 8001a78:	430a      	orrs	r2, r1
 8001a7a:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001a7c:	69bb      	ldr	r3, [r7, #24]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d112      	bne.n	8001aa8 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001a82:	4b6b      	ldr	r3, [pc, #428]	; (8001c30 <HAL_RCC_OscConfig+0x32c>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4a6e      	ldr	r2, [pc, #440]	; (8001c40 <HAL_RCC_OscConfig+0x33c>)
 8001a88:	4013      	ands	r3, r2
 8001a8a:	0019      	movs	r1, r3
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	691a      	ldr	r2, [r3, #16]
 8001a90:	4b67      	ldr	r3, [pc, #412]	; (8001c30 <HAL_RCC_OscConfig+0x32c>)
 8001a92:	430a      	orrs	r2, r1
 8001a94:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001a96:	4b66      	ldr	r3, [pc, #408]	; (8001c30 <HAL_RCC_OscConfig+0x32c>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	0adb      	lsrs	r3, r3, #11
 8001a9c:	2207      	movs	r2, #7
 8001a9e:	4013      	ands	r3, r2
 8001aa0:	4a68      	ldr	r2, [pc, #416]	; (8001c44 <HAL_RCC_OscConfig+0x340>)
 8001aa2:	40da      	lsrs	r2, r3
 8001aa4:	4b68      	ldr	r3, [pc, #416]	; (8001c48 <HAL_RCC_OscConfig+0x344>)
 8001aa6:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001aa8:	4b68      	ldr	r3, [pc, #416]	; (8001c4c <HAL_RCC_OscConfig+0x348>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	0018      	movs	r0, r3
 8001aae:	f7ff fb57 	bl	8001160 <HAL_InitTick>
 8001ab2:	1e03      	subs	r3, r0, #0
 8001ab4:	d051      	beq.n	8001b5a <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	e22c      	b.n	8001f14 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	68db      	ldr	r3, [r3, #12]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d030      	beq.n	8001b24 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001ac2:	4b5b      	ldr	r3, [pc, #364]	; (8001c30 <HAL_RCC_OscConfig+0x32c>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4a5e      	ldr	r2, [pc, #376]	; (8001c40 <HAL_RCC_OscConfig+0x33c>)
 8001ac8:	4013      	ands	r3, r2
 8001aca:	0019      	movs	r1, r3
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	691a      	ldr	r2, [r3, #16]
 8001ad0:	4b57      	ldr	r3, [pc, #348]	; (8001c30 <HAL_RCC_OscConfig+0x32c>)
 8001ad2:	430a      	orrs	r2, r1
 8001ad4:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8001ad6:	4b56      	ldr	r3, [pc, #344]	; (8001c30 <HAL_RCC_OscConfig+0x32c>)
 8001ad8:	681a      	ldr	r2, [r3, #0]
 8001ada:	4b55      	ldr	r3, [pc, #340]	; (8001c30 <HAL_RCC_OscConfig+0x32c>)
 8001adc:	2180      	movs	r1, #128	; 0x80
 8001ade:	0049      	lsls	r1, r1, #1
 8001ae0:	430a      	orrs	r2, r1
 8001ae2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ae4:	f7ff fb98 	bl	8001218 <HAL_GetTick>
 8001ae8:	0003      	movs	r3, r0
 8001aea:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001aec:	e008      	b.n	8001b00 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001aee:	f7ff fb93 	bl	8001218 <HAL_GetTick>
 8001af2:	0002      	movs	r2, r0
 8001af4:	693b      	ldr	r3, [r7, #16]
 8001af6:	1ad3      	subs	r3, r2, r3
 8001af8:	2b02      	cmp	r3, #2
 8001afa:	d901      	bls.n	8001b00 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8001afc:	2303      	movs	r3, #3
 8001afe:	e209      	b.n	8001f14 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b00:	4b4b      	ldr	r3, [pc, #300]	; (8001c30 <HAL_RCC_OscConfig+0x32c>)
 8001b02:	681a      	ldr	r2, [r3, #0]
 8001b04:	2380      	movs	r3, #128	; 0x80
 8001b06:	00db      	lsls	r3, r3, #3
 8001b08:	4013      	ands	r3, r2
 8001b0a:	d0f0      	beq.n	8001aee <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b0c:	4b48      	ldr	r3, [pc, #288]	; (8001c30 <HAL_RCC_OscConfig+0x32c>)
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	4a4a      	ldr	r2, [pc, #296]	; (8001c3c <HAL_RCC_OscConfig+0x338>)
 8001b12:	4013      	ands	r3, r2
 8001b14:	0019      	movs	r1, r3
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	695b      	ldr	r3, [r3, #20]
 8001b1a:	021a      	lsls	r2, r3, #8
 8001b1c:	4b44      	ldr	r3, [pc, #272]	; (8001c30 <HAL_RCC_OscConfig+0x32c>)
 8001b1e:	430a      	orrs	r2, r1
 8001b20:	605a      	str	r2, [r3, #4]
 8001b22:	e01b      	b.n	8001b5c <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8001b24:	4b42      	ldr	r3, [pc, #264]	; (8001c30 <HAL_RCC_OscConfig+0x32c>)
 8001b26:	681a      	ldr	r2, [r3, #0]
 8001b28:	4b41      	ldr	r3, [pc, #260]	; (8001c30 <HAL_RCC_OscConfig+0x32c>)
 8001b2a:	4949      	ldr	r1, [pc, #292]	; (8001c50 <HAL_RCC_OscConfig+0x34c>)
 8001b2c:	400a      	ands	r2, r1
 8001b2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b30:	f7ff fb72 	bl	8001218 <HAL_GetTick>
 8001b34:	0003      	movs	r3, r0
 8001b36:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b38:	e008      	b.n	8001b4c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b3a:	f7ff fb6d 	bl	8001218 <HAL_GetTick>
 8001b3e:	0002      	movs	r2, r0
 8001b40:	693b      	ldr	r3, [r7, #16]
 8001b42:	1ad3      	subs	r3, r2, r3
 8001b44:	2b02      	cmp	r3, #2
 8001b46:	d901      	bls.n	8001b4c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8001b48:	2303      	movs	r3, #3
 8001b4a:	e1e3      	b.n	8001f14 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b4c:	4b38      	ldr	r3, [pc, #224]	; (8001c30 <HAL_RCC_OscConfig+0x32c>)
 8001b4e:	681a      	ldr	r2, [r3, #0]
 8001b50:	2380      	movs	r3, #128	; 0x80
 8001b52:	00db      	lsls	r3, r3, #3
 8001b54:	4013      	ands	r3, r2
 8001b56:	d1f0      	bne.n	8001b3a <HAL_RCC_OscConfig+0x236>
 8001b58:	e000      	b.n	8001b5c <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b5a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	2208      	movs	r2, #8
 8001b62:	4013      	ands	r3, r2
 8001b64:	d047      	beq.n	8001bf6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001b66:	4b32      	ldr	r3, [pc, #200]	; (8001c30 <HAL_RCC_OscConfig+0x32c>)
 8001b68:	689b      	ldr	r3, [r3, #8]
 8001b6a:	2238      	movs	r2, #56	; 0x38
 8001b6c:	4013      	ands	r3, r2
 8001b6e:	2b18      	cmp	r3, #24
 8001b70:	d10a      	bne.n	8001b88 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8001b72:	4b2f      	ldr	r3, [pc, #188]	; (8001c30 <HAL_RCC_OscConfig+0x32c>)
 8001b74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b76:	2202      	movs	r2, #2
 8001b78:	4013      	ands	r3, r2
 8001b7a:	d03c      	beq.n	8001bf6 <HAL_RCC_OscConfig+0x2f2>
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	699b      	ldr	r3, [r3, #24]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d138      	bne.n	8001bf6 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8001b84:	2301      	movs	r3, #1
 8001b86:	e1c5      	b.n	8001f14 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	699b      	ldr	r3, [r3, #24]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d019      	beq.n	8001bc4 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001b90:	4b27      	ldr	r3, [pc, #156]	; (8001c30 <HAL_RCC_OscConfig+0x32c>)
 8001b92:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001b94:	4b26      	ldr	r3, [pc, #152]	; (8001c30 <HAL_RCC_OscConfig+0x32c>)
 8001b96:	2101      	movs	r1, #1
 8001b98:	430a      	orrs	r2, r1
 8001b9a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b9c:	f7ff fb3c 	bl	8001218 <HAL_GetTick>
 8001ba0:	0003      	movs	r3, r0
 8001ba2:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001ba4:	e008      	b.n	8001bb8 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ba6:	f7ff fb37 	bl	8001218 <HAL_GetTick>
 8001baa:	0002      	movs	r2, r0
 8001bac:	693b      	ldr	r3, [r7, #16]
 8001bae:	1ad3      	subs	r3, r2, r3
 8001bb0:	2b02      	cmp	r3, #2
 8001bb2:	d901      	bls.n	8001bb8 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8001bb4:	2303      	movs	r3, #3
 8001bb6:	e1ad      	b.n	8001f14 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001bb8:	4b1d      	ldr	r3, [pc, #116]	; (8001c30 <HAL_RCC_OscConfig+0x32c>)
 8001bba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bbc:	2202      	movs	r2, #2
 8001bbe:	4013      	ands	r3, r2
 8001bc0:	d0f1      	beq.n	8001ba6 <HAL_RCC_OscConfig+0x2a2>
 8001bc2:	e018      	b.n	8001bf6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001bc4:	4b1a      	ldr	r3, [pc, #104]	; (8001c30 <HAL_RCC_OscConfig+0x32c>)
 8001bc6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001bc8:	4b19      	ldr	r3, [pc, #100]	; (8001c30 <HAL_RCC_OscConfig+0x32c>)
 8001bca:	2101      	movs	r1, #1
 8001bcc:	438a      	bics	r2, r1
 8001bce:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bd0:	f7ff fb22 	bl	8001218 <HAL_GetTick>
 8001bd4:	0003      	movs	r3, r0
 8001bd6:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001bd8:	e008      	b.n	8001bec <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bda:	f7ff fb1d 	bl	8001218 <HAL_GetTick>
 8001bde:	0002      	movs	r2, r0
 8001be0:	693b      	ldr	r3, [r7, #16]
 8001be2:	1ad3      	subs	r3, r2, r3
 8001be4:	2b02      	cmp	r3, #2
 8001be6:	d901      	bls.n	8001bec <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8001be8:	2303      	movs	r3, #3
 8001bea:	e193      	b.n	8001f14 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001bec:	4b10      	ldr	r3, [pc, #64]	; (8001c30 <HAL_RCC_OscConfig+0x32c>)
 8001bee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bf0:	2202      	movs	r2, #2
 8001bf2:	4013      	ands	r3, r2
 8001bf4:	d1f1      	bne.n	8001bda <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	2204      	movs	r2, #4
 8001bfc:	4013      	ands	r3, r2
 8001bfe:	d100      	bne.n	8001c02 <HAL_RCC_OscConfig+0x2fe>
 8001c00:	e0c6      	b.n	8001d90 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c02:	231f      	movs	r3, #31
 8001c04:	18fb      	adds	r3, r7, r3
 8001c06:	2200      	movs	r2, #0
 8001c08:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001c0a:	4b09      	ldr	r3, [pc, #36]	; (8001c30 <HAL_RCC_OscConfig+0x32c>)
 8001c0c:	689b      	ldr	r3, [r3, #8]
 8001c0e:	2238      	movs	r2, #56	; 0x38
 8001c10:	4013      	ands	r3, r2
 8001c12:	2b20      	cmp	r3, #32
 8001c14:	d11e      	bne.n	8001c54 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8001c16:	4b06      	ldr	r3, [pc, #24]	; (8001c30 <HAL_RCC_OscConfig+0x32c>)
 8001c18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c1a:	2202      	movs	r2, #2
 8001c1c:	4013      	ands	r3, r2
 8001c1e:	d100      	bne.n	8001c22 <HAL_RCC_OscConfig+0x31e>
 8001c20:	e0b6      	b.n	8001d90 <HAL_RCC_OscConfig+0x48c>
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	689b      	ldr	r3, [r3, #8]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d000      	beq.n	8001c2c <HAL_RCC_OscConfig+0x328>
 8001c2a:	e0b1      	b.n	8001d90 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	e171      	b.n	8001f14 <HAL_RCC_OscConfig+0x610>
 8001c30:	40021000 	.word	0x40021000
 8001c34:	fffeffff 	.word	0xfffeffff
 8001c38:	fffbffff 	.word	0xfffbffff
 8001c3c:	ffff80ff 	.word	0xffff80ff
 8001c40:	ffffc7ff 	.word	0xffffc7ff
 8001c44:	00f42400 	.word	0x00f42400
 8001c48:	20000000 	.word	0x20000000
 8001c4c:	20000004 	.word	0x20000004
 8001c50:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001c54:	4bb1      	ldr	r3, [pc, #708]	; (8001f1c <HAL_RCC_OscConfig+0x618>)
 8001c56:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001c58:	2380      	movs	r3, #128	; 0x80
 8001c5a:	055b      	lsls	r3, r3, #21
 8001c5c:	4013      	ands	r3, r2
 8001c5e:	d101      	bne.n	8001c64 <HAL_RCC_OscConfig+0x360>
 8001c60:	2301      	movs	r3, #1
 8001c62:	e000      	b.n	8001c66 <HAL_RCC_OscConfig+0x362>
 8001c64:	2300      	movs	r3, #0
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d011      	beq.n	8001c8e <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8001c6a:	4bac      	ldr	r3, [pc, #688]	; (8001f1c <HAL_RCC_OscConfig+0x618>)
 8001c6c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001c6e:	4bab      	ldr	r3, [pc, #684]	; (8001f1c <HAL_RCC_OscConfig+0x618>)
 8001c70:	2180      	movs	r1, #128	; 0x80
 8001c72:	0549      	lsls	r1, r1, #21
 8001c74:	430a      	orrs	r2, r1
 8001c76:	63da      	str	r2, [r3, #60]	; 0x3c
 8001c78:	4ba8      	ldr	r3, [pc, #672]	; (8001f1c <HAL_RCC_OscConfig+0x618>)
 8001c7a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001c7c:	2380      	movs	r3, #128	; 0x80
 8001c7e:	055b      	lsls	r3, r3, #21
 8001c80:	4013      	ands	r3, r2
 8001c82:	60fb      	str	r3, [r7, #12]
 8001c84:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8001c86:	231f      	movs	r3, #31
 8001c88:	18fb      	adds	r3, r7, r3
 8001c8a:	2201      	movs	r2, #1
 8001c8c:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c8e:	4ba4      	ldr	r3, [pc, #656]	; (8001f20 <HAL_RCC_OscConfig+0x61c>)
 8001c90:	681a      	ldr	r2, [r3, #0]
 8001c92:	2380      	movs	r3, #128	; 0x80
 8001c94:	005b      	lsls	r3, r3, #1
 8001c96:	4013      	ands	r3, r2
 8001c98:	d11a      	bne.n	8001cd0 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001c9a:	4ba1      	ldr	r3, [pc, #644]	; (8001f20 <HAL_RCC_OscConfig+0x61c>)
 8001c9c:	681a      	ldr	r2, [r3, #0]
 8001c9e:	4ba0      	ldr	r3, [pc, #640]	; (8001f20 <HAL_RCC_OscConfig+0x61c>)
 8001ca0:	2180      	movs	r1, #128	; 0x80
 8001ca2:	0049      	lsls	r1, r1, #1
 8001ca4:	430a      	orrs	r2, r1
 8001ca6:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8001ca8:	f7ff fab6 	bl	8001218 <HAL_GetTick>
 8001cac:	0003      	movs	r3, r0
 8001cae:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001cb0:	e008      	b.n	8001cc4 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cb2:	f7ff fab1 	bl	8001218 <HAL_GetTick>
 8001cb6:	0002      	movs	r2, r0
 8001cb8:	693b      	ldr	r3, [r7, #16]
 8001cba:	1ad3      	subs	r3, r2, r3
 8001cbc:	2b02      	cmp	r3, #2
 8001cbe:	d901      	bls.n	8001cc4 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8001cc0:	2303      	movs	r3, #3
 8001cc2:	e127      	b.n	8001f14 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001cc4:	4b96      	ldr	r3, [pc, #600]	; (8001f20 <HAL_RCC_OscConfig+0x61c>)
 8001cc6:	681a      	ldr	r2, [r3, #0]
 8001cc8:	2380      	movs	r3, #128	; 0x80
 8001cca:	005b      	lsls	r3, r3, #1
 8001ccc:	4013      	ands	r3, r2
 8001cce:	d0f0      	beq.n	8001cb2 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	689b      	ldr	r3, [r3, #8]
 8001cd4:	2b01      	cmp	r3, #1
 8001cd6:	d106      	bne.n	8001ce6 <HAL_RCC_OscConfig+0x3e2>
 8001cd8:	4b90      	ldr	r3, [pc, #576]	; (8001f1c <HAL_RCC_OscConfig+0x618>)
 8001cda:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001cdc:	4b8f      	ldr	r3, [pc, #572]	; (8001f1c <HAL_RCC_OscConfig+0x618>)
 8001cde:	2101      	movs	r1, #1
 8001ce0:	430a      	orrs	r2, r1
 8001ce2:	65da      	str	r2, [r3, #92]	; 0x5c
 8001ce4:	e01c      	b.n	8001d20 <HAL_RCC_OscConfig+0x41c>
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	689b      	ldr	r3, [r3, #8]
 8001cea:	2b05      	cmp	r3, #5
 8001cec:	d10c      	bne.n	8001d08 <HAL_RCC_OscConfig+0x404>
 8001cee:	4b8b      	ldr	r3, [pc, #556]	; (8001f1c <HAL_RCC_OscConfig+0x618>)
 8001cf0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001cf2:	4b8a      	ldr	r3, [pc, #552]	; (8001f1c <HAL_RCC_OscConfig+0x618>)
 8001cf4:	2104      	movs	r1, #4
 8001cf6:	430a      	orrs	r2, r1
 8001cf8:	65da      	str	r2, [r3, #92]	; 0x5c
 8001cfa:	4b88      	ldr	r3, [pc, #544]	; (8001f1c <HAL_RCC_OscConfig+0x618>)
 8001cfc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001cfe:	4b87      	ldr	r3, [pc, #540]	; (8001f1c <HAL_RCC_OscConfig+0x618>)
 8001d00:	2101      	movs	r1, #1
 8001d02:	430a      	orrs	r2, r1
 8001d04:	65da      	str	r2, [r3, #92]	; 0x5c
 8001d06:	e00b      	b.n	8001d20 <HAL_RCC_OscConfig+0x41c>
 8001d08:	4b84      	ldr	r3, [pc, #528]	; (8001f1c <HAL_RCC_OscConfig+0x618>)
 8001d0a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001d0c:	4b83      	ldr	r3, [pc, #524]	; (8001f1c <HAL_RCC_OscConfig+0x618>)
 8001d0e:	2101      	movs	r1, #1
 8001d10:	438a      	bics	r2, r1
 8001d12:	65da      	str	r2, [r3, #92]	; 0x5c
 8001d14:	4b81      	ldr	r3, [pc, #516]	; (8001f1c <HAL_RCC_OscConfig+0x618>)
 8001d16:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001d18:	4b80      	ldr	r3, [pc, #512]	; (8001f1c <HAL_RCC_OscConfig+0x618>)
 8001d1a:	2104      	movs	r1, #4
 8001d1c:	438a      	bics	r2, r1
 8001d1e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	689b      	ldr	r3, [r3, #8]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d014      	beq.n	8001d52 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d28:	f7ff fa76 	bl	8001218 <HAL_GetTick>
 8001d2c:	0003      	movs	r3, r0
 8001d2e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d30:	e009      	b.n	8001d46 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d32:	f7ff fa71 	bl	8001218 <HAL_GetTick>
 8001d36:	0002      	movs	r2, r0
 8001d38:	693b      	ldr	r3, [r7, #16]
 8001d3a:	1ad3      	subs	r3, r2, r3
 8001d3c:	4a79      	ldr	r2, [pc, #484]	; (8001f24 <HAL_RCC_OscConfig+0x620>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d901      	bls.n	8001d46 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8001d42:	2303      	movs	r3, #3
 8001d44:	e0e6      	b.n	8001f14 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d46:	4b75      	ldr	r3, [pc, #468]	; (8001f1c <HAL_RCC_OscConfig+0x618>)
 8001d48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d4a:	2202      	movs	r2, #2
 8001d4c:	4013      	ands	r3, r2
 8001d4e:	d0f0      	beq.n	8001d32 <HAL_RCC_OscConfig+0x42e>
 8001d50:	e013      	b.n	8001d7a <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d52:	f7ff fa61 	bl	8001218 <HAL_GetTick>
 8001d56:	0003      	movs	r3, r0
 8001d58:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001d5a:	e009      	b.n	8001d70 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d5c:	f7ff fa5c 	bl	8001218 <HAL_GetTick>
 8001d60:	0002      	movs	r2, r0
 8001d62:	693b      	ldr	r3, [r7, #16]
 8001d64:	1ad3      	subs	r3, r2, r3
 8001d66:	4a6f      	ldr	r2, [pc, #444]	; (8001f24 <HAL_RCC_OscConfig+0x620>)
 8001d68:	4293      	cmp	r3, r2
 8001d6a:	d901      	bls.n	8001d70 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8001d6c:	2303      	movs	r3, #3
 8001d6e:	e0d1      	b.n	8001f14 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001d70:	4b6a      	ldr	r3, [pc, #424]	; (8001f1c <HAL_RCC_OscConfig+0x618>)
 8001d72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d74:	2202      	movs	r2, #2
 8001d76:	4013      	ands	r3, r2
 8001d78:	d1f0      	bne.n	8001d5c <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001d7a:	231f      	movs	r3, #31
 8001d7c:	18fb      	adds	r3, r7, r3
 8001d7e:	781b      	ldrb	r3, [r3, #0]
 8001d80:	2b01      	cmp	r3, #1
 8001d82:	d105      	bne.n	8001d90 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001d84:	4b65      	ldr	r3, [pc, #404]	; (8001f1c <HAL_RCC_OscConfig+0x618>)
 8001d86:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001d88:	4b64      	ldr	r3, [pc, #400]	; (8001f1c <HAL_RCC_OscConfig+0x618>)
 8001d8a:	4967      	ldr	r1, [pc, #412]	; (8001f28 <HAL_RCC_OscConfig+0x624>)
 8001d8c:	400a      	ands	r2, r1
 8001d8e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	69db      	ldr	r3, [r3, #28]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d100      	bne.n	8001d9a <HAL_RCC_OscConfig+0x496>
 8001d98:	e0bb      	b.n	8001f12 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d9a:	4b60      	ldr	r3, [pc, #384]	; (8001f1c <HAL_RCC_OscConfig+0x618>)
 8001d9c:	689b      	ldr	r3, [r3, #8]
 8001d9e:	2238      	movs	r2, #56	; 0x38
 8001da0:	4013      	ands	r3, r2
 8001da2:	2b10      	cmp	r3, #16
 8001da4:	d100      	bne.n	8001da8 <HAL_RCC_OscConfig+0x4a4>
 8001da6:	e07b      	b.n	8001ea0 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	69db      	ldr	r3, [r3, #28]
 8001dac:	2b02      	cmp	r3, #2
 8001dae:	d156      	bne.n	8001e5e <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001db0:	4b5a      	ldr	r3, [pc, #360]	; (8001f1c <HAL_RCC_OscConfig+0x618>)
 8001db2:	681a      	ldr	r2, [r3, #0]
 8001db4:	4b59      	ldr	r3, [pc, #356]	; (8001f1c <HAL_RCC_OscConfig+0x618>)
 8001db6:	495d      	ldr	r1, [pc, #372]	; (8001f2c <HAL_RCC_OscConfig+0x628>)
 8001db8:	400a      	ands	r2, r1
 8001dba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dbc:	f7ff fa2c 	bl	8001218 <HAL_GetTick>
 8001dc0:	0003      	movs	r3, r0
 8001dc2:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001dc4:	e008      	b.n	8001dd8 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dc6:	f7ff fa27 	bl	8001218 <HAL_GetTick>
 8001dca:	0002      	movs	r2, r0
 8001dcc:	693b      	ldr	r3, [r7, #16]
 8001dce:	1ad3      	subs	r3, r2, r3
 8001dd0:	2b02      	cmp	r3, #2
 8001dd2:	d901      	bls.n	8001dd8 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8001dd4:	2303      	movs	r3, #3
 8001dd6:	e09d      	b.n	8001f14 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001dd8:	4b50      	ldr	r3, [pc, #320]	; (8001f1c <HAL_RCC_OscConfig+0x618>)
 8001dda:	681a      	ldr	r2, [r3, #0]
 8001ddc:	2380      	movs	r3, #128	; 0x80
 8001dde:	049b      	lsls	r3, r3, #18
 8001de0:	4013      	ands	r3, r2
 8001de2:	d1f0      	bne.n	8001dc6 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001de4:	4b4d      	ldr	r3, [pc, #308]	; (8001f1c <HAL_RCC_OscConfig+0x618>)
 8001de6:	68db      	ldr	r3, [r3, #12]
 8001de8:	4a51      	ldr	r2, [pc, #324]	; (8001f30 <HAL_RCC_OscConfig+0x62c>)
 8001dea:	4013      	ands	r3, r2
 8001dec:	0019      	movs	r1, r3
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6a1a      	ldr	r2, [r3, #32]
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001df6:	431a      	orrs	r2, r3
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dfc:	021b      	lsls	r3, r3, #8
 8001dfe:	431a      	orrs	r2, r3
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e04:	431a      	orrs	r2, r3
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e0a:	431a      	orrs	r2, r3
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e10:	431a      	orrs	r2, r3
 8001e12:	4b42      	ldr	r3, [pc, #264]	; (8001f1c <HAL_RCC_OscConfig+0x618>)
 8001e14:	430a      	orrs	r2, r1
 8001e16:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e18:	4b40      	ldr	r3, [pc, #256]	; (8001f1c <HAL_RCC_OscConfig+0x618>)
 8001e1a:	681a      	ldr	r2, [r3, #0]
 8001e1c:	4b3f      	ldr	r3, [pc, #252]	; (8001f1c <HAL_RCC_OscConfig+0x618>)
 8001e1e:	2180      	movs	r1, #128	; 0x80
 8001e20:	0449      	lsls	r1, r1, #17
 8001e22:	430a      	orrs	r2, r1
 8001e24:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001e26:	4b3d      	ldr	r3, [pc, #244]	; (8001f1c <HAL_RCC_OscConfig+0x618>)
 8001e28:	68da      	ldr	r2, [r3, #12]
 8001e2a:	4b3c      	ldr	r3, [pc, #240]	; (8001f1c <HAL_RCC_OscConfig+0x618>)
 8001e2c:	2180      	movs	r1, #128	; 0x80
 8001e2e:	0549      	lsls	r1, r1, #21
 8001e30:	430a      	orrs	r2, r1
 8001e32:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e34:	f7ff f9f0 	bl	8001218 <HAL_GetTick>
 8001e38:	0003      	movs	r3, r0
 8001e3a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e3c:	e008      	b.n	8001e50 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e3e:	f7ff f9eb 	bl	8001218 <HAL_GetTick>
 8001e42:	0002      	movs	r2, r0
 8001e44:	693b      	ldr	r3, [r7, #16]
 8001e46:	1ad3      	subs	r3, r2, r3
 8001e48:	2b02      	cmp	r3, #2
 8001e4a:	d901      	bls.n	8001e50 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8001e4c:	2303      	movs	r3, #3
 8001e4e:	e061      	b.n	8001f14 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e50:	4b32      	ldr	r3, [pc, #200]	; (8001f1c <HAL_RCC_OscConfig+0x618>)
 8001e52:	681a      	ldr	r2, [r3, #0]
 8001e54:	2380      	movs	r3, #128	; 0x80
 8001e56:	049b      	lsls	r3, r3, #18
 8001e58:	4013      	ands	r3, r2
 8001e5a:	d0f0      	beq.n	8001e3e <HAL_RCC_OscConfig+0x53a>
 8001e5c:	e059      	b.n	8001f12 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e5e:	4b2f      	ldr	r3, [pc, #188]	; (8001f1c <HAL_RCC_OscConfig+0x618>)
 8001e60:	681a      	ldr	r2, [r3, #0]
 8001e62:	4b2e      	ldr	r3, [pc, #184]	; (8001f1c <HAL_RCC_OscConfig+0x618>)
 8001e64:	4931      	ldr	r1, [pc, #196]	; (8001f2c <HAL_RCC_OscConfig+0x628>)
 8001e66:	400a      	ands	r2, r1
 8001e68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e6a:	f7ff f9d5 	bl	8001218 <HAL_GetTick>
 8001e6e:	0003      	movs	r3, r0
 8001e70:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e72:	e008      	b.n	8001e86 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e74:	f7ff f9d0 	bl	8001218 <HAL_GetTick>
 8001e78:	0002      	movs	r2, r0
 8001e7a:	693b      	ldr	r3, [r7, #16]
 8001e7c:	1ad3      	subs	r3, r2, r3
 8001e7e:	2b02      	cmp	r3, #2
 8001e80:	d901      	bls.n	8001e86 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8001e82:	2303      	movs	r3, #3
 8001e84:	e046      	b.n	8001f14 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e86:	4b25      	ldr	r3, [pc, #148]	; (8001f1c <HAL_RCC_OscConfig+0x618>)
 8001e88:	681a      	ldr	r2, [r3, #0]
 8001e8a:	2380      	movs	r3, #128	; 0x80
 8001e8c:	049b      	lsls	r3, r3, #18
 8001e8e:	4013      	ands	r3, r2
 8001e90:	d1f0      	bne.n	8001e74 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8001e92:	4b22      	ldr	r3, [pc, #136]	; (8001f1c <HAL_RCC_OscConfig+0x618>)
 8001e94:	68da      	ldr	r2, [r3, #12]
 8001e96:	4b21      	ldr	r3, [pc, #132]	; (8001f1c <HAL_RCC_OscConfig+0x618>)
 8001e98:	4926      	ldr	r1, [pc, #152]	; (8001f34 <HAL_RCC_OscConfig+0x630>)
 8001e9a:	400a      	ands	r2, r1
 8001e9c:	60da      	str	r2, [r3, #12]
 8001e9e:	e038      	b.n	8001f12 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	69db      	ldr	r3, [r3, #28]
 8001ea4:	2b01      	cmp	r3, #1
 8001ea6:	d101      	bne.n	8001eac <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	e033      	b.n	8001f14 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8001eac:	4b1b      	ldr	r3, [pc, #108]	; (8001f1c <HAL_RCC_OscConfig+0x618>)
 8001eae:	68db      	ldr	r3, [r3, #12]
 8001eb0:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001eb2:	697b      	ldr	r3, [r7, #20]
 8001eb4:	2203      	movs	r2, #3
 8001eb6:	401a      	ands	r2, r3
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6a1b      	ldr	r3, [r3, #32]
 8001ebc:	429a      	cmp	r2, r3
 8001ebe:	d126      	bne.n	8001f0e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001ec0:	697b      	ldr	r3, [r7, #20]
 8001ec2:	2270      	movs	r2, #112	; 0x70
 8001ec4:	401a      	ands	r2, r3
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001eca:	429a      	cmp	r2, r3
 8001ecc:	d11f      	bne.n	8001f0e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ece:	697a      	ldr	r2, [r7, #20]
 8001ed0:	23fe      	movs	r3, #254	; 0xfe
 8001ed2:	01db      	lsls	r3, r3, #7
 8001ed4:	401a      	ands	r2, r3
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eda:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001edc:	429a      	cmp	r2, r3
 8001ede:	d116      	bne.n	8001f0e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001ee0:	697a      	ldr	r2, [r7, #20]
 8001ee2:	23f8      	movs	r3, #248	; 0xf8
 8001ee4:	039b      	lsls	r3, r3, #14
 8001ee6:	401a      	ands	r2, r3
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001eec:	429a      	cmp	r2, r3
 8001eee:	d10e      	bne.n	8001f0e <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001ef0:	697a      	ldr	r2, [r7, #20]
 8001ef2:	23e0      	movs	r3, #224	; 0xe0
 8001ef4:	051b      	lsls	r3, r3, #20
 8001ef6:	401a      	ands	r2, r3
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001efc:	429a      	cmp	r2, r3
 8001efe:	d106      	bne.n	8001f0e <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001f00:	697b      	ldr	r3, [r7, #20]
 8001f02:	0f5b      	lsrs	r3, r3, #29
 8001f04:	075a      	lsls	r2, r3, #29
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001f0a:	429a      	cmp	r2, r3
 8001f0c:	d001      	beq.n	8001f12 <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8001f0e:	2301      	movs	r3, #1
 8001f10:	e000      	b.n	8001f14 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8001f12:	2300      	movs	r3, #0
}
 8001f14:	0018      	movs	r0, r3
 8001f16:	46bd      	mov	sp, r7
 8001f18:	b008      	add	sp, #32
 8001f1a:	bd80      	pop	{r7, pc}
 8001f1c:	40021000 	.word	0x40021000
 8001f20:	40007000 	.word	0x40007000
 8001f24:	00001388 	.word	0x00001388
 8001f28:	efffffff 	.word	0xefffffff
 8001f2c:	feffffff 	.word	0xfeffffff
 8001f30:	11c1808c 	.word	0x11c1808c
 8001f34:	eefefffc 	.word	0xeefefffc

08001f38 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b084      	sub	sp, #16
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
 8001f40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d101      	bne.n	8001f4c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f48:	2301      	movs	r3, #1
 8001f4a:	e0e9      	b.n	8002120 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f4c:	4b76      	ldr	r3, [pc, #472]	; (8002128 <HAL_RCC_ClockConfig+0x1f0>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	2207      	movs	r2, #7
 8001f52:	4013      	ands	r3, r2
 8001f54:	683a      	ldr	r2, [r7, #0]
 8001f56:	429a      	cmp	r2, r3
 8001f58:	d91e      	bls.n	8001f98 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f5a:	4b73      	ldr	r3, [pc, #460]	; (8002128 <HAL_RCC_ClockConfig+0x1f0>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	2207      	movs	r2, #7
 8001f60:	4393      	bics	r3, r2
 8001f62:	0019      	movs	r1, r3
 8001f64:	4b70      	ldr	r3, [pc, #448]	; (8002128 <HAL_RCC_ClockConfig+0x1f0>)
 8001f66:	683a      	ldr	r2, [r7, #0]
 8001f68:	430a      	orrs	r2, r1
 8001f6a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001f6c:	f7ff f954 	bl	8001218 <HAL_GetTick>
 8001f70:	0003      	movs	r3, r0
 8001f72:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001f74:	e009      	b.n	8001f8a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f76:	f7ff f94f 	bl	8001218 <HAL_GetTick>
 8001f7a:	0002      	movs	r2, r0
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	1ad3      	subs	r3, r2, r3
 8001f80:	4a6a      	ldr	r2, [pc, #424]	; (800212c <HAL_RCC_ClockConfig+0x1f4>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d901      	bls.n	8001f8a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001f86:	2303      	movs	r3, #3
 8001f88:	e0ca      	b.n	8002120 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001f8a:	4b67      	ldr	r3, [pc, #412]	; (8002128 <HAL_RCC_ClockConfig+0x1f0>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	2207      	movs	r2, #7
 8001f90:	4013      	ands	r3, r2
 8001f92:	683a      	ldr	r2, [r7, #0]
 8001f94:	429a      	cmp	r2, r3
 8001f96:	d1ee      	bne.n	8001f76 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	2202      	movs	r2, #2
 8001f9e:	4013      	ands	r3, r2
 8001fa0:	d015      	beq.n	8001fce <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	2204      	movs	r2, #4
 8001fa8:	4013      	ands	r3, r2
 8001faa:	d006      	beq.n	8001fba <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001fac:	4b60      	ldr	r3, [pc, #384]	; (8002130 <HAL_RCC_ClockConfig+0x1f8>)
 8001fae:	689a      	ldr	r2, [r3, #8]
 8001fb0:	4b5f      	ldr	r3, [pc, #380]	; (8002130 <HAL_RCC_ClockConfig+0x1f8>)
 8001fb2:	21e0      	movs	r1, #224	; 0xe0
 8001fb4:	01c9      	lsls	r1, r1, #7
 8001fb6:	430a      	orrs	r2, r1
 8001fb8:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fba:	4b5d      	ldr	r3, [pc, #372]	; (8002130 <HAL_RCC_ClockConfig+0x1f8>)
 8001fbc:	689b      	ldr	r3, [r3, #8]
 8001fbe:	4a5d      	ldr	r2, [pc, #372]	; (8002134 <HAL_RCC_ClockConfig+0x1fc>)
 8001fc0:	4013      	ands	r3, r2
 8001fc2:	0019      	movs	r1, r3
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	689a      	ldr	r2, [r3, #8]
 8001fc8:	4b59      	ldr	r3, [pc, #356]	; (8002130 <HAL_RCC_ClockConfig+0x1f8>)
 8001fca:	430a      	orrs	r2, r1
 8001fcc:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	2201      	movs	r2, #1
 8001fd4:	4013      	ands	r3, r2
 8001fd6:	d057      	beq.n	8002088 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	2b01      	cmp	r3, #1
 8001fde:	d107      	bne.n	8001ff0 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001fe0:	4b53      	ldr	r3, [pc, #332]	; (8002130 <HAL_RCC_ClockConfig+0x1f8>)
 8001fe2:	681a      	ldr	r2, [r3, #0]
 8001fe4:	2380      	movs	r3, #128	; 0x80
 8001fe6:	029b      	lsls	r3, r3, #10
 8001fe8:	4013      	ands	r3, r2
 8001fea:	d12b      	bne.n	8002044 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001fec:	2301      	movs	r3, #1
 8001fee:	e097      	b.n	8002120 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	2b02      	cmp	r3, #2
 8001ff6:	d107      	bne.n	8002008 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ff8:	4b4d      	ldr	r3, [pc, #308]	; (8002130 <HAL_RCC_ClockConfig+0x1f8>)
 8001ffa:	681a      	ldr	r2, [r3, #0]
 8001ffc:	2380      	movs	r3, #128	; 0x80
 8001ffe:	049b      	lsls	r3, r3, #18
 8002000:	4013      	ands	r3, r2
 8002002:	d11f      	bne.n	8002044 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002004:	2301      	movs	r3, #1
 8002006:	e08b      	b.n	8002120 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	2b00      	cmp	r3, #0
 800200e:	d107      	bne.n	8002020 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002010:	4b47      	ldr	r3, [pc, #284]	; (8002130 <HAL_RCC_ClockConfig+0x1f8>)
 8002012:	681a      	ldr	r2, [r3, #0]
 8002014:	2380      	movs	r3, #128	; 0x80
 8002016:	00db      	lsls	r3, r3, #3
 8002018:	4013      	ands	r3, r2
 800201a:	d113      	bne.n	8002044 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800201c:	2301      	movs	r3, #1
 800201e:	e07f      	b.n	8002120 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	2b03      	cmp	r3, #3
 8002026:	d106      	bne.n	8002036 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002028:	4b41      	ldr	r3, [pc, #260]	; (8002130 <HAL_RCC_ClockConfig+0x1f8>)
 800202a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800202c:	2202      	movs	r2, #2
 800202e:	4013      	ands	r3, r2
 8002030:	d108      	bne.n	8002044 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002032:	2301      	movs	r3, #1
 8002034:	e074      	b.n	8002120 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002036:	4b3e      	ldr	r3, [pc, #248]	; (8002130 <HAL_RCC_ClockConfig+0x1f8>)
 8002038:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800203a:	2202      	movs	r2, #2
 800203c:	4013      	ands	r3, r2
 800203e:	d101      	bne.n	8002044 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002040:	2301      	movs	r3, #1
 8002042:	e06d      	b.n	8002120 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002044:	4b3a      	ldr	r3, [pc, #232]	; (8002130 <HAL_RCC_ClockConfig+0x1f8>)
 8002046:	689b      	ldr	r3, [r3, #8]
 8002048:	2207      	movs	r2, #7
 800204a:	4393      	bics	r3, r2
 800204c:	0019      	movs	r1, r3
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	685a      	ldr	r2, [r3, #4]
 8002052:	4b37      	ldr	r3, [pc, #220]	; (8002130 <HAL_RCC_ClockConfig+0x1f8>)
 8002054:	430a      	orrs	r2, r1
 8002056:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002058:	f7ff f8de 	bl	8001218 <HAL_GetTick>
 800205c:	0003      	movs	r3, r0
 800205e:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002060:	e009      	b.n	8002076 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002062:	f7ff f8d9 	bl	8001218 <HAL_GetTick>
 8002066:	0002      	movs	r2, r0
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	1ad3      	subs	r3, r2, r3
 800206c:	4a2f      	ldr	r2, [pc, #188]	; (800212c <HAL_RCC_ClockConfig+0x1f4>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d901      	bls.n	8002076 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8002072:	2303      	movs	r3, #3
 8002074:	e054      	b.n	8002120 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002076:	4b2e      	ldr	r3, [pc, #184]	; (8002130 <HAL_RCC_ClockConfig+0x1f8>)
 8002078:	689b      	ldr	r3, [r3, #8]
 800207a:	2238      	movs	r2, #56	; 0x38
 800207c:	401a      	ands	r2, r3
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	00db      	lsls	r3, r3, #3
 8002084:	429a      	cmp	r2, r3
 8002086:	d1ec      	bne.n	8002062 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002088:	4b27      	ldr	r3, [pc, #156]	; (8002128 <HAL_RCC_ClockConfig+0x1f0>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	2207      	movs	r2, #7
 800208e:	4013      	ands	r3, r2
 8002090:	683a      	ldr	r2, [r7, #0]
 8002092:	429a      	cmp	r2, r3
 8002094:	d21e      	bcs.n	80020d4 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002096:	4b24      	ldr	r3, [pc, #144]	; (8002128 <HAL_RCC_ClockConfig+0x1f0>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	2207      	movs	r2, #7
 800209c:	4393      	bics	r3, r2
 800209e:	0019      	movs	r1, r3
 80020a0:	4b21      	ldr	r3, [pc, #132]	; (8002128 <HAL_RCC_ClockConfig+0x1f0>)
 80020a2:	683a      	ldr	r2, [r7, #0]
 80020a4:	430a      	orrs	r2, r1
 80020a6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80020a8:	f7ff f8b6 	bl	8001218 <HAL_GetTick>
 80020ac:	0003      	movs	r3, r0
 80020ae:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80020b0:	e009      	b.n	80020c6 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020b2:	f7ff f8b1 	bl	8001218 <HAL_GetTick>
 80020b6:	0002      	movs	r2, r0
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	1ad3      	subs	r3, r2, r3
 80020bc:	4a1b      	ldr	r2, [pc, #108]	; (800212c <HAL_RCC_ClockConfig+0x1f4>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d901      	bls.n	80020c6 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80020c2:	2303      	movs	r3, #3
 80020c4:	e02c      	b.n	8002120 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80020c6:	4b18      	ldr	r3, [pc, #96]	; (8002128 <HAL_RCC_ClockConfig+0x1f0>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	2207      	movs	r2, #7
 80020cc:	4013      	ands	r3, r2
 80020ce:	683a      	ldr	r2, [r7, #0]
 80020d0:	429a      	cmp	r2, r3
 80020d2:	d1ee      	bne.n	80020b2 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	2204      	movs	r2, #4
 80020da:	4013      	ands	r3, r2
 80020dc:	d009      	beq.n	80020f2 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80020de:	4b14      	ldr	r3, [pc, #80]	; (8002130 <HAL_RCC_ClockConfig+0x1f8>)
 80020e0:	689b      	ldr	r3, [r3, #8]
 80020e2:	4a15      	ldr	r2, [pc, #84]	; (8002138 <HAL_RCC_ClockConfig+0x200>)
 80020e4:	4013      	ands	r3, r2
 80020e6:	0019      	movs	r1, r3
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	68da      	ldr	r2, [r3, #12]
 80020ec:	4b10      	ldr	r3, [pc, #64]	; (8002130 <HAL_RCC_ClockConfig+0x1f8>)
 80020ee:	430a      	orrs	r2, r1
 80020f0:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80020f2:	f000 f829 	bl	8002148 <HAL_RCC_GetSysClockFreq>
 80020f6:	0001      	movs	r1, r0
 80020f8:	4b0d      	ldr	r3, [pc, #52]	; (8002130 <HAL_RCC_ClockConfig+0x1f8>)
 80020fa:	689b      	ldr	r3, [r3, #8]
 80020fc:	0a1b      	lsrs	r3, r3, #8
 80020fe:	220f      	movs	r2, #15
 8002100:	401a      	ands	r2, r3
 8002102:	4b0e      	ldr	r3, [pc, #56]	; (800213c <HAL_RCC_ClockConfig+0x204>)
 8002104:	0092      	lsls	r2, r2, #2
 8002106:	58d3      	ldr	r3, [r2, r3]
 8002108:	221f      	movs	r2, #31
 800210a:	4013      	ands	r3, r2
 800210c:	000a      	movs	r2, r1
 800210e:	40da      	lsrs	r2, r3
 8002110:	4b0b      	ldr	r3, [pc, #44]	; (8002140 <HAL_RCC_ClockConfig+0x208>)
 8002112:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002114:	4b0b      	ldr	r3, [pc, #44]	; (8002144 <HAL_RCC_ClockConfig+0x20c>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	0018      	movs	r0, r3
 800211a:	f7ff f821 	bl	8001160 <HAL_InitTick>
 800211e:	0003      	movs	r3, r0
}
 8002120:	0018      	movs	r0, r3
 8002122:	46bd      	mov	sp, r7
 8002124:	b004      	add	sp, #16
 8002126:	bd80      	pop	{r7, pc}
 8002128:	40022000 	.word	0x40022000
 800212c:	00001388 	.word	0x00001388
 8002130:	40021000 	.word	0x40021000
 8002134:	fffff0ff 	.word	0xfffff0ff
 8002138:	ffff8fff 	.word	0xffff8fff
 800213c:	080060d8 	.word	0x080060d8
 8002140:	20000000 	.word	0x20000000
 8002144:	20000004 	.word	0x20000004

08002148 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b086      	sub	sp, #24
 800214c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800214e:	4b3c      	ldr	r3, [pc, #240]	; (8002240 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002150:	689b      	ldr	r3, [r3, #8]
 8002152:	2238      	movs	r2, #56	; 0x38
 8002154:	4013      	ands	r3, r2
 8002156:	d10f      	bne.n	8002178 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002158:	4b39      	ldr	r3, [pc, #228]	; (8002240 <HAL_RCC_GetSysClockFreq+0xf8>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	0adb      	lsrs	r3, r3, #11
 800215e:	2207      	movs	r2, #7
 8002160:	4013      	ands	r3, r2
 8002162:	2201      	movs	r2, #1
 8002164:	409a      	lsls	r2, r3
 8002166:	0013      	movs	r3, r2
 8002168:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800216a:	6839      	ldr	r1, [r7, #0]
 800216c:	4835      	ldr	r0, [pc, #212]	; (8002244 <HAL_RCC_GetSysClockFreq+0xfc>)
 800216e:	f7fd ffdb 	bl	8000128 <__udivsi3>
 8002172:	0003      	movs	r3, r0
 8002174:	613b      	str	r3, [r7, #16]
 8002176:	e05d      	b.n	8002234 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002178:	4b31      	ldr	r3, [pc, #196]	; (8002240 <HAL_RCC_GetSysClockFreq+0xf8>)
 800217a:	689b      	ldr	r3, [r3, #8]
 800217c:	2238      	movs	r2, #56	; 0x38
 800217e:	4013      	ands	r3, r2
 8002180:	2b08      	cmp	r3, #8
 8002182:	d102      	bne.n	800218a <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002184:	4b30      	ldr	r3, [pc, #192]	; (8002248 <HAL_RCC_GetSysClockFreq+0x100>)
 8002186:	613b      	str	r3, [r7, #16]
 8002188:	e054      	b.n	8002234 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800218a:	4b2d      	ldr	r3, [pc, #180]	; (8002240 <HAL_RCC_GetSysClockFreq+0xf8>)
 800218c:	689b      	ldr	r3, [r3, #8]
 800218e:	2238      	movs	r2, #56	; 0x38
 8002190:	4013      	ands	r3, r2
 8002192:	2b10      	cmp	r3, #16
 8002194:	d138      	bne.n	8002208 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8002196:	4b2a      	ldr	r3, [pc, #168]	; (8002240 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002198:	68db      	ldr	r3, [r3, #12]
 800219a:	2203      	movs	r2, #3
 800219c:	4013      	ands	r3, r2
 800219e:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80021a0:	4b27      	ldr	r3, [pc, #156]	; (8002240 <HAL_RCC_GetSysClockFreq+0xf8>)
 80021a2:	68db      	ldr	r3, [r3, #12]
 80021a4:	091b      	lsrs	r3, r3, #4
 80021a6:	2207      	movs	r2, #7
 80021a8:	4013      	ands	r3, r2
 80021aa:	3301      	adds	r3, #1
 80021ac:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	2b03      	cmp	r3, #3
 80021b2:	d10d      	bne.n	80021d0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80021b4:	68b9      	ldr	r1, [r7, #8]
 80021b6:	4824      	ldr	r0, [pc, #144]	; (8002248 <HAL_RCC_GetSysClockFreq+0x100>)
 80021b8:	f7fd ffb6 	bl	8000128 <__udivsi3>
 80021bc:	0003      	movs	r3, r0
 80021be:	0019      	movs	r1, r3
 80021c0:	4b1f      	ldr	r3, [pc, #124]	; (8002240 <HAL_RCC_GetSysClockFreq+0xf8>)
 80021c2:	68db      	ldr	r3, [r3, #12]
 80021c4:	0a1b      	lsrs	r3, r3, #8
 80021c6:	227f      	movs	r2, #127	; 0x7f
 80021c8:	4013      	ands	r3, r2
 80021ca:	434b      	muls	r3, r1
 80021cc:	617b      	str	r3, [r7, #20]
        break;
 80021ce:	e00d      	b.n	80021ec <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80021d0:	68b9      	ldr	r1, [r7, #8]
 80021d2:	481c      	ldr	r0, [pc, #112]	; (8002244 <HAL_RCC_GetSysClockFreq+0xfc>)
 80021d4:	f7fd ffa8 	bl	8000128 <__udivsi3>
 80021d8:	0003      	movs	r3, r0
 80021da:	0019      	movs	r1, r3
 80021dc:	4b18      	ldr	r3, [pc, #96]	; (8002240 <HAL_RCC_GetSysClockFreq+0xf8>)
 80021de:	68db      	ldr	r3, [r3, #12]
 80021e0:	0a1b      	lsrs	r3, r3, #8
 80021e2:	227f      	movs	r2, #127	; 0x7f
 80021e4:	4013      	ands	r3, r2
 80021e6:	434b      	muls	r3, r1
 80021e8:	617b      	str	r3, [r7, #20]
        break;
 80021ea:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80021ec:	4b14      	ldr	r3, [pc, #80]	; (8002240 <HAL_RCC_GetSysClockFreq+0xf8>)
 80021ee:	68db      	ldr	r3, [r3, #12]
 80021f0:	0f5b      	lsrs	r3, r3, #29
 80021f2:	2207      	movs	r2, #7
 80021f4:	4013      	ands	r3, r2
 80021f6:	3301      	adds	r3, #1
 80021f8:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80021fa:	6879      	ldr	r1, [r7, #4]
 80021fc:	6978      	ldr	r0, [r7, #20]
 80021fe:	f7fd ff93 	bl	8000128 <__udivsi3>
 8002202:	0003      	movs	r3, r0
 8002204:	613b      	str	r3, [r7, #16]
 8002206:	e015      	b.n	8002234 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002208:	4b0d      	ldr	r3, [pc, #52]	; (8002240 <HAL_RCC_GetSysClockFreq+0xf8>)
 800220a:	689b      	ldr	r3, [r3, #8]
 800220c:	2238      	movs	r2, #56	; 0x38
 800220e:	4013      	ands	r3, r2
 8002210:	2b20      	cmp	r3, #32
 8002212:	d103      	bne.n	800221c <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002214:	2380      	movs	r3, #128	; 0x80
 8002216:	021b      	lsls	r3, r3, #8
 8002218:	613b      	str	r3, [r7, #16]
 800221a:	e00b      	b.n	8002234 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800221c:	4b08      	ldr	r3, [pc, #32]	; (8002240 <HAL_RCC_GetSysClockFreq+0xf8>)
 800221e:	689b      	ldr	r3, [r3, #8]
 8002220:	2238      	movs	r2, #56	; 0x38
 8002222:	4013      	ands	r3, r2
 8002224:	2b18      	cmp	r3, #24
 8002226:	d103      	bne.n	8002230 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002228:	23fa      	movs	r3, #250	; 0xfa
 800222a:	01db      	lsls	r3, r3, #7
 800222c:	613b      	str	r3, [r7, #16]
 800222e:	e001      	b.n	8002234 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8002230:	2300      	movs	r3, #0
 8002232:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002234:	693b      	ldr	r3, [r7, #16]
}
 8002236:	0018      	movs	r0, r3
 8002238:	46bd      	mov	sp, r7
 800223a:	b006      	add	sp, #24
 800223c:	bd80      	pop	{r7, pc}
 800223e:	46c0      	nop			; (mov r8, r8)
 8002240:	40021000 	.word	0x40021000
 8002244:	00f42400 	.word	0x00f42400
 8002248:	007a1200 	.word	0x007a1200

0800224c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002250:	4b02      	ldr	r3, [pc, #8]	; (800225c <HAL_RCC_GetHCLKFreq+0x10>)
 8002252:	681b      	ldr	r3, [r3, #0]
}
 8002254:	0018      	movs	r0, r3
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}
 800225a:	46c0      	nop			; (mov r8, r8)
 800225c:	20000000 	.word	0x20000000

08002260 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002260:	b5b0      	push	{r4, r5, r7, lr}
 8002262:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002264:	f7ff fff2 	bl	800224c <HAL_RCC_GetHCLKFreq>
 8002268:	0004      	movs	r4, r0
 800226a:	f7ff fb3f 	bl	80018ec <LL_RCC_GetAPB1Prescaler>
 800226e:	0003      	movs	r3, r0
 8002270:	0b1a      	lsrs	r2, r3, #12
 8002272:	4b05      	ldr	r3, [pc, #20]	; (8002288 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002274:	0092      	lsls	r2, r2, #2
 8002276:	58d3      	ldr	r3, [r2, r3]
 8002278:	221f      	movs	r2, #31
 800227a:	4013      	ands	r3, r2
 800227c:	40dc      	lsrs	r4, r3
 800227e:	0023      	movs	r3, r4
}
 8002280:	0018      	movs	r0, r3
 8002282:	46bd      	mov	sp, r7
 8002284:	bdb0      	pop	{r4, r5, r7, pc}
 8002286:	46c0      	nop			; (mov r8, r8)
 8002288:	08006118 	.word	0x08006118

0800228c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b086      	sub	sp, #24
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8002294:	2313      	movs	r3, #19
 8002296:	18fb      	adds	r3, r7, r3
 8002298:	2200      	movs	r2, #0
 800229a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800229c:	2312      	movs	r3, #18
 800229e:	18fb      	adds	r3, r7, r3
 80022a0:	2200      	movs	r2, #0
 80022a2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681a      	ldr	r2, [r3, #0]
 80022a8:	2380      	movs	r3, #128	; 0x80
 80022aa:	029b      	lsls	r3, r3, #10
 80022ac:	4013      	ands	r3, r2
 80022ae:	d100      	bne.n	80022b2 <HAL_RCCEx_PeriphCLKConfig+0x26>
 80022b0:	e0a3      	b.n	80023fa <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022b2:	2011      	movs	r0, #17
 80022b4:	183b      	adds	r3, r7, r0
 80022b6:	2200      	movs	r2, #0
 80022b8:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022ba:	4bc3      	ldr	r3, [pc, #780]	; (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80022bc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80022be:	2380      	movs	r3, #128	; 0x80
 80022c0:	055b      	lsls	r3, r3, #21
 80022c2:	4013      	ands	r3, r2
 80022c4:	d110      	bne.n	80022e8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022c6:	4bc0      	ldr	r3, [pc, #768]	; (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80022c8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80022ca:	4bbf      	ldr	r3, [pc, #764]	; (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80022cc:	2180      	movs	r1, #128	; 0x80
 80022ce:	0549      	lsls	r1, r1, #21
 80022d0:	430a      	orrs	r2, r1
 80022d2:	63da      	str	r2, [r3, #60]	; 0x3c
 80022d4:	4bbc      	ldr	r3, [pc, #752]	; (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80022d6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80022d8:	2380      	movs	r3, #128	; 0x80
 80022da:	055b      	lsls	r3, r3, #21
 80022dc:	4013      	ands	r3, r2
 80022de:	60bb      	str	r3, [r7, #8]
 80022e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022e2:	183b      	adds	r3, r7, r0
 80022e4:	2201      	movs	r2, #1
 80022e6:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80022e8:	4bb8      	ldr	r3, [pc, #736]	; (80025cc <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80022ea:	681a      	ldr	r2, [r3, #0]
 80022ec:	4bb7      	ldr	r3, [pc, #732]	; (80025cc <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80022ee:	2180      	movs	r1, #128	; 0x80
 80022f0:	0049      	lsls	r1, r1, #1
 80022f2:	430a      	orrs	r2, r1
 80022f4:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80022f6:	f7fe ff8f 	bl	8001218 <HAL_GetTick>
 80022fa:	0003      	movs	r3, r0
 80022fc:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80022fe:	e00b      	b.n	8002318 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002300:	f7fe ff8a 	bl	8001218 <HAL_GetTick>
 8002304:	0002      	movs	r2, r0
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	1ad3      	subs	r3, r2, r3
 800230a:	2b02      	cmp	r3, #2
 800230c:	d904      	bls.n	8002318 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 800230e:	2313      	movs	r3, #19
 8002310:	18fb      	adds	r3, r7, r3
 8002312:	2203      	movs	r2, #3
 8002314:	701a      	strb	r2, [r3, #0]
        break;
 8002316:	e005      	b.n	8002324 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002318:	4bac      	ldr	r3, [pc, #688]	; (80025cc <HAL_RCCEx_PeriphCLKConfig+0x340>)
 800231a:	681a      	ldr	r2, [r3, #0]
 800231c:	2380      	movs	r3, #128	; 0x80
 800231e:	005b      	lsls	r3, r3, #1
 8002320:	4013      	ands	r3, r2
 8002322:	d0ed      	beq.n	8002300 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8002324:	2313      	movs	r3, #19
 8002326:	18fb      	adds	r3, r7, r3
 8002328:	781b      	ldrb	r3, [r3, #0]
 800232a:	2b00      	cmp	r3, #0
 800232c:	d154      	bne.n	80023d8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800232e:	4ba6      	ldr	r3, [pc, #664]	; (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002330:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002332:	23c0      	movs	r3, #192	; 0xc0
 8002334:	009b      	lsls	r3, r3, #2
 8002336:	4013      	ands	r3, r2
 8002338:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800233a:	697b      	ldr	r3, [r7, #20]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d019      	beq.n	8002374 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002344:	697a      	ldr	r2, [r7, #20]
 8002346:	429a      	cmp	r2, r3
 8002348:	d014      	beq.n	8002374 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800234a:	4b9f      	ldr	r3, [pc, #636]	; (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800234c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800234e:	4aa0      	ldr	r2, [pc, #640]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8002350:	4013      	ands	r3, r2
 8002352:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002354:	4b9c      	ldr	r3, [pc, #624]	; (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002356:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002358:	4b9b      	ldr	r3, [pc, #620]	; (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800235a:	2180      	movs	r1, #128	; 0x80
 800235c:	0249      	lsls	r1, r1, #9
 800235e:	430a      	orrs	r2, r1
 8002360:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002362:	4b99      	ldr	r3, [pc, #612]	; (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002364:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002366:	4b98      	ldr	r3, [pc, #608]	; (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002368:	499a      	ldr	r1, [pc, #616]	; (80025d4 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 800236a:	400a      	ands	r2, r1
 800236c:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800236e:	4b96      	ldr	r3, [pc, #600]	; (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002370:	697a      	ldr	r2, [r7, #20]
 8002372:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002374:	697b      	ldr	r3, [r7, #20]
 8002376:	2201      	movs	r2, #1
 8002378:	4013      	ands	r3, r2
 800237a:	d016      	beq.n	80023aa <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800237c:	f7fe ff4c 	bl	8001218 <HAL_GetTick>
 8002380:	0003      	movs	r3, r0
 8002382:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002384:	e00c      	b.n	80023a0 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002386:	f7fe ff47 	bl	8001218 <HAL_GetTick>
 800238a:	0002      	movs	r2, r0
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	1ad3      	subs	r3, r2, r3
 8002390:	4a91      	ldr	r2, [pc, #580]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d904      	bls.n	80023a0 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8002396:	2313      	movs	r3, #19
 8002398:	18fb      	adds	r3, r7, r3
 800239a:	2203      	movs	r2, #3
 800239c:	701a      	strb	r2, [r3, #0]
            break;
 800239e:	e004      	b.n	80023aa <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80023a0:	4b89      	ldr	r3, [pc, #548]	; (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80023a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023a4:	2202      	movs	r2, #2
 80023a6:	4013      	ands	r3, r2
 80023a8:	d0ed      	beq.n	8002386 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 80023aa:	2313      	movs	r3, #19
 80023ac:	18fb      	adds	r3, r7, r3
 80023ae:	781b      	ldrb	r3, [r3, #0]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d10a      	bne.n	80023ca <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80023b4:	4b84      	ldr	r3, [pc, #528]	; (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80023b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023b8:	4a85      	ldr	r2, [pc, #532]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80023ba:	4013      	ands	r3, r2
 80023bc:	0019      	movs	r1, r3
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80023c2:	4b81      	ldr	r3, [pc, #516]	; (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80023c4:	430a      	orrs	r2, r1
 80023c6:	65da      	str	r2, [r3, #92]	; 0x5c
 80023c8:	e00c      	b.n	80023e4 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80023ca:	2312      	movs	r3, #18
 80023cc:	18fb      	adds	r3, r7, r3
 80023ce:	2213      	movs	r2, #19
 80023d0:	18ba      	adds	r2, r7, r2
 80023d2:	7812      	ldrb	r2, [r2, #0]
 80023d4:	701a      	strb	r2, [r3, #0]
 80023d6:	e005      	b.n	80023e4 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80023d8:	2312      	movs	r3, #18
 80023da:	18fb      	adds	r3, r7, r3
 80023dc:	2213      	movs	r2, #19
 80023de:	18ba      	adds	r2, r7, r2
 80023e0:	7812      	ldrb	r2, [r2, #0]
 80023e2:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80023e4:	2311      	movs	r3, #17
 80023e6:	18fb      	adds	r3, r7, r3
 80023e8:	781b      	ldrb	r3, [r3, #0]
 80023ea:	2b01      	cmp	r3, #1
 80023ec:	d105      	bne.n	80023fa <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023ee:	4b76      	ldr	r3, [pc, #472]	; (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80023f0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80023f2:	4b75      	ldr	r3, [pc, #468]	; (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80023f4:	4979      	ldr	r1, [pc, #484]	; (80025dc <HAL_RCCEx_PeriphCLKConfig+0x350>)
 80023f6:	400a      	ands	r2, r1
 80023f8:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	2201      	movs	r2, #1
 8002400:	4013      	ands	r3, r2
 8002402:	d009      	beq.n	8002418 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002404:	4b70      	ldr	r3, [pc, #448]	; (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002406:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002408:	2203      	movs	r2, #3
 800240a:	4393      	bics	r3, r2
 800240c:	0019      	movs	r1, r3
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	685a      	ldr	r2, [r3, #4]
 8002412:	4b6d      	ldr	r3, [pc, #436]	; (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002414:	430a      	orrs	r2, r1
 8002416:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	2202      	movs	r2, #2
 800241e:	4013      	ands	r3, r2
 8002420:	d009      	beq.n	8002436 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002422:	4b69      	ldr	r3, [pc, #420]	; (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002424:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002426:	220c      	movs	r2, #12
 8002428:	4393      	bics	r3, r2
 800242a:	0019      	movs	r1, r3
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	689a      	ldr	r2, [r3, #8]
 8002430:	4b65      	ldr	r3, [pc, #404]	; (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002432:	430a      	orrs	r2, r1
 8002434:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	2210      	movs	r2, #16
 800243c:	4013      	ands	r3, r2
 800243e:	d009      	beq.n	8002454 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002440:	4b61      	ldr	r3, [pc, #388]	; (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002442:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002444:	4a66      	ldr	r2, [pc, #408]	; (80025e0 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 8002446:	4013      	ands	r3, r2
 8002448:	0019      	movs	r1, r3
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	68da      	ldr	r2, [r3, #12]
 800244e:	4b5e      	ldr	r3, [pc, #376]	; (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002450:	430a      	orrs	r2, r1
 8002452:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681a      	ldr	r2, [r3, #0]
 8002458:	2380      	movs	r3, #128	; 0x80
 800245a:	009b      	lsls	r3, r3, #2
 800245c:	4013      	ands	r3, r2
 800245e:	d009      	beq.n	8002474 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002460:	4b59      	ldr	r3, [pc, #356]	; (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002462:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002464:	4a5f      	ldr	r2, [pc, #380]	; (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002466:	4013      	ands	r3, r2
 8002468:	0019      	movs	r1, r3
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	699a      	ldr	r2, [r3, #24]
 800246e:	4b56      	ldr	r3, [pc, #344]	; (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002470:	430a      	orrs	r2, r1
 8002472:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681a      	ldr	r2, [r3, #0]
 8002478:	2380      	movs	r3, #128	; 0x80
 800247a:	00db      	lsls	r3, r3, #3
 800247c:	4013      	ands	r3, r2
 800247e:	d009      	beq.n	8002494 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002480:	4b51      	ldr	r3, [pc, #324]	; (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002482:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002484:	4a58      	ldr	r2, [pc, #352]	; (80025e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002486:	4013      	ands	r3, r2
 8002488:	0019      	movs	r1, r3
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	69da      	ldr	r2, [r3, #28]
 800248e:	4b4e      	ldr	r3, [pc, #312]	; (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002490:	430a      	orrs	r2, r1
 8002492:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	2220      	movs	r2, #32
 800249a:	4013      	ands	r3, r2
 800249c:	d009      	beq.n	80024b2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800249e:	4b4a      	ldr	r3, [pc, #296]	; (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80024a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024a2:	4a52      	ldr	r2, [pc, #328]	; (80025ec <HAL_RCCEx_PeriphCLKConfig+0x360>)
 80024a4:	4013      	ands	r3, r2
 80024a6:	0019      	movs	r1, r3
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	691a      	ldr	r2, [r3, #16]
 80024ac:	4b46      	ldr	r3, [pc, #280]	; (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80024ae:	430a      	orrs	r2, r1
 80024b0:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681a      	ldr	r2, [r3, #0]
 80024b6:	2380      	movs	r3, #128	; 0x80
 80024b8:	01db      	lsls	r3, r3, #7
 80024ba:	4013      	ands	r3, r2
 80024bc:	d015      	beq.n	80024ea <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80024be:	4b42      	ldr	r3, [pc, #264]	; (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80024c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024c2:	009b      	lsls	r3, r3, #2
 80024c4:	0899      	lsrs	r1, r3, #2
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6a1a      	ldr	r2, [r3, #32]
 80024ca:	4b3f      	ldr	r3, [pc, #252]	; (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80024cc:	430a      	orrs	r2, r1
 80024ce:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6a1a      	ldr	r2, [r3, #32]
 80024d4:	2380      	movs	r3, #128	; 0x80
 80024d6:	05db      	lsls	r3, r3, #23
 80024d8:	429a      	cmp	r2, r3
 80024da:	d106      	bne.n	80024ea <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80024dc:	4b3a      	ldr	r3, [pc, #232]	; (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80024de:	68da      	ldr	r2, [r3, #12]
 80024e0:	4b39      	ldr	r3, [pc, #228]	; (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80024e2:	2180      	movs	r1, #128	; 0x80
 80024e4:	0249      	lsls	r1, r1, #9
 80024e6:	430a      	orrs	r2, r1
 80024e8:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681a      	ldr	r2, [r3, #0]
 80024ee:	2380      	movs	r3, #128	; 0x80
 80024f0:	031b      	lsls	r3, r3, #12
 80024f2:	4013      	ands	r3, r2
 80024f4:	d009      	beq.n	800250a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80024f6:	4b34      	ldr	r3, [pc, #208]	; (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80024f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024fa:	2240      	movs	r2, #64	; 0x40
 80024fc:	4393      	bics	r3, r2
 80024fe:	0019      	movs	r1, r3
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002504:	4b30      	ldr	r3, [pc, #192]	; (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002506:	430a      	orrs	r2, r1
 8002508:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681a      	ldr	r2, [r3, #0]
 800250e:	2380      	movs	r3, #128	; 0x80
 8002510:	039b      	lsls	r3, r3, #14
 8002512:	4013      	ands	r3, r2
 8002514:	d016      	beq.n	8002544 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002516:	4b2c      	ldr	r3, [pc, #176]	; (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002518:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800251a:	4a35      	ldr	r2, [pc, #212]	; (80025f0 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800251c:	4013      	ands	r3, r2
 800251e:	0019      	movs	r1, r3
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002524:	4b28      	ldr	r3, [pc, #160]	; (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002526:	430a      	orrs	r2, r1
 8002528:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800252e:	2380      	movs	r3, #128	; 0x80
 8002530:	03db      	lsls	r3, r3, #15
 8002532:	429a      	cmp	r2, r3
 8002534:	d106      	bne.n	8002544 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002536:	4b24      	ldr	r3, [pc, #144]	; (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002538:	68da      	ldr	r2, [r3, #12]
 800253a:	4b23      	ldr	r3, [pc, #140]	; (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800253c:	2180      	movs	r1, #128	; 0x80
 800253e:	0449      	lsls	r1, r1, #17
 8002540:	430a      	orrs	r2, r1
 8002542:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681a      	ldr	r2, [r3, #0]
 8002548:	2380      	movs	r3, #128	; 0x80
 800254a:	03db      	lsls	r3, r3, #15
 800254c:	4013      	ands	r3, r2
 800254e:	d016      	beq.n	800257e <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002550:	4b1d      	ldr	r3, [pc, #116]	; (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002552:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002554:	4a27      	ldr	r2, [pc, #156]	; (80025f4 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 8002556:	4013      	ands	r3, r2
 8002558:	0019      	movs	r1, r3
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800255e:	4b1a      	ldr	r3, [pc, #104]	; (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002560:	430a      	orrs	r2, r1
 8002562:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002568:	2380      	movs	r3, #128	; 0x80
 800256a:	045b      	lsls	r3, r3, #17
 800256c:	429a      	cmp	r2, r3
 800256e:	d106      	bne.n	800257e <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002570:	4b15      	ldr	r3, [pc, #84]	; (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002572:	68da      	ldr	r2, [r3, #12]
 8002574:	4b14      	ldr	r3, [pc, #80]	; (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002576:	2180      	movs	r1, #128	; 0x80
 8002578:	0449      	lsls	r1, r1, #17
 800257a:	430a      	orrs	r2, r1
 800257c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681a      	ldr	r2, [r3, #0]
 8002582:	2380      	movs	r3, #128	; 0x80
 8002584:	011b      	lsls	r3, r3, #4
 8002586:	4013      	ands	r3, r2
 8002588:	d016      	beq.n	80025b8 <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800258a:	4b0f      	ldr	r3, [pc, #60]	; (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800258c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800258e:	4a1a      	ldr	r2, [pc, #104]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8002590:	4013      	ands	r3, r2
 8002592:	0019      	movs	r1, r3
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	695a      	ldr	r2, [r3, #20]
 8002598:	4b0b      	ldr	r3, [pc, #44]	; (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800259a:	430a      	orrs	r2, r1
 800259c:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	695a      	ldr	r2, [r3, #20]
 80025a2:	2380      	movs	r3, #128	; 0x80
 80025a4:	01db      	lsls	r3, r3, #7
 80025a6:	429a      	cmp	r2, r3
 80025a8:	d106      	bne.n	80025b8 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80025aa:	4b07      	ldr	r3, [pc, #28]	; (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80025ac:	68da      	ldr	r2, [r3, #12]
 80025ae:	4b06      	ldr	r3, [pc, #24]	; (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80025b0:	2180      	movs	r1, #128	; 0x80
 80025b2:	0249      	lsls	r1, r1, #9
 80025b4:	430a      	orrs	r2, r1
 80025b6:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 80025b8:	2312      	movs	r3, #18
 80025ba:	18fb      	adds	r3, r7, r3
 80025bc:	781b      	ldrb	r3, [r3, #0]
}
 80025be:	0018      	movs	r0, r3
 80025c0:	46bd      	mov	sp, r7
 80025c2:	b006      	add	sp, #24
 80025c4:	bd80      	pop	{r7, pc}
 80025c6:	46c0      	nop			; (mov r8, r8)
 80025c8:	40021000 	.word	0x40021000
 80025cc:	40007000 	.word	0x40007000
 80025d0:	fffffcff 	.word	0xfffffcff
 80025d4:	fffeffff 	.word	0xfffeffff
 80025d8:	00001388 	.word	0x00001388
 80025dc:	efffffff 	.word	0xefffffff
 80025e0:	fffff3ff 	.word	0xfffff3ff
 80025e4:	fff3ffff 	.word	0xfff3ffff
 80025e8:	ffcfffff 	.word	0xffcfffff
 80025ec:	ffffcfff 	.word	0xffffcfff
 80025f0:	ffbfffff 	.word	0xffbfffff
 80025f4:	feffffff 	.word	0xfeffffff
 80025f8:	ffff3fff 	.word	0xffff3fff

080025fc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b084      	sub	sp, #16
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2b00      	cmp	r3, #0
 8002608:	d101      	bne.n	800260e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800260a:	2301      	movs	r3, #1
 800260c:	e0a8      	b.n	8002760 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002612:	2b00      	cmp	r3, #0
 8002614:	d109      	bne.n	800262a <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	685a      	ldr	r2, [r3, #4]
 800261a:	2382      	movs	r3, #130	; 0x82
 800261c:	005b      	lsls	r3, r3, #1
 800261e:	429a      	cmp	r2, r3
 8002620:	d009      	beq.n	8002636 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2200      	movs	r2, #0
 8002626:	61da      	str	r2, [r3, #28]
 8002628:	e005      	b.n	8002636 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2200      	movs	r2, #0
 800262e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2200      	movs	r2, #0
 8002634:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2200      	movs	r2, #0
 800263a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	225d      	movs	r2, #93	; 0x5d
 8002640:	5c9b      	ldrb	r3, [r3, r2]
 8002642:	b2db      	uxtb	r3, r3
 8002644:	2b00      	cmp	r3, #0
 8002646:	d107      	bne.n	8002658 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	225c      	movs	r2, #92	; 0x5c
 800264c:	2100      	movs	r1, #0
 800264e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	0018      	movs	r0, r3
 8002654:	f7fe fb1a 	bl	8000c8c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	225d      	movs	r2, #93	; 0x5d
 800265c:	2102      	movs	r1, #2
 800265e:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	681a      	ldr	r2, [r3, #0]
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	2140      	movs	r1, #64	; 0x40
 800266c:	438a      	bics	r2, r1
 800266e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	68da      	ldr	r2, [r3, #12]
 8002674:	23e0      	movs	r3, #224	; 0xe0
 8002676:	00db      	lsls	r3, r3, #3
 8002678:	429a      	cmp	r2, r3
 800267a:	d902      	bls.n	8002682 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800267c:	2300      	movs	r3, #0
 800267e:	60fb      	str	r3, [r7, #12]
 8002680:	e002      	b.n	8002688 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002682:	2380      	movs	r3, #128	; 0x80
 8002684:	015b      	lsls	r3, r3, #5
 8002686:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	68da      	ldr	r2, [r3, #12]
 800268c:	23f0      	movs	r3, #240	; 0xf0
 800268e:	011b      	lsls	r3, r3, #4
 8002690:	429a      	cmp	r2, r3
 8002692:	d008      	beq.n	80026a6 <HAL_SPI_Init+0xaa>
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	68da      	ldr	r2, [r3, #12]
 8002698:	23e0      	movs	r3, #224	; 0xe0
 800269a:	00db      	lsls	r3, r3, #3
 800269c:	429a      	cmp	r2, r3
 800269e:	d002      	beq.n	80026a6 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2200      	movs	r2, #0
 80026a4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	685a      	ldr	r2, [r3, #4]
 80026aa:	2382      	movs	r3, #130	; 0x82
 80026ac:	005b      	lsls	r3, r3, #1
 80026ae:	401a      	ands	r2, r3
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6899      	ldr	r1, [r3, #8]
 80026b4:	2384      	movs	r3, #132	; 0x84
 80026b6:	021b      	lsls	r3, r3, #8
 80026b8:	400b      	ands	r3, r1
 80026ba:	431a      	orrs	r2, r3
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	691b      	ldr	r3, [r3, #16]
 80026c0:	2102      	movs	r1, #2
 80026c2:	400b      	ands	r3, r1
 80026c4:	431a      	orrs	r2, r3
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	695b      	ldr	r3, [r3, #20]
 80026ca:	2101      	movs	r1, #1
 80026cc:	400b      	ands	r3, r1
 80026ce:	431a      	orrs	r2, r3
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6999      	ldr	r1, [r3, #24]
 80026d4:	2380      	movs	r3, #128	; 0x80
 80026d6:	009b      	lsls	r3, r3, #2
 80026d8:	400b      	ands	r3, r1
 80026da:	431a      	orrs	r2, r3
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	69db      	ldr	r3, [r3, #28]
 80026e0:	2138      	movs	r1, #56	; 0x38
 80026e2:	400b      	ands	r3, r1
 80026e4:	431a      	orrs	r2, r3
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6a1b      	ldr	r3, [r3, #32]
 80026ea:	2180      	movs	r1, #128	; 0x80
 80026ec:	400b      	ands	r3, r1
 80026ee:	431a      	orrs	r2, r3
 80026f0:	0011      	movs	r1, r2
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80026f6:	2380      	movs	r3, #128	; 0x80
 80026f8:	019b      	lsls	r3, r3, #6
 80026fa:	401a      	ands	r2, r3
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	430a      	orrs	r2, r1
 8002702:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	699b      	ldr	r3, [r3, #24]
 8002708:	0c1b      	lsrs	r3, r3, #16
 800270a:	2204      	movs	r2, #4
 800270c:	401a      	ands	r2, r3
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002712:	2110      	movs	r1, #16
 8002714:	400b      	ands	r3, r1
 8002716:	431a      	orrs	r2, r3
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800271c:	2108      	movs	r1, #8
 800271e:	400b      	ands	r3, r1
 8002720:	431a      	orrs	r2, r3
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	68d9      	ldr	r1, [r3, #12]
 8002726:	23f0      	movs	r3, #240	; 0xf0
 8002728:	011b      	lsls	r3, r3, #4
 800272a:	400b      	ands	r3, r1
 800272c:	431a      	orrs	r2, r3
 800272e:	0011      	movs	r1, r2
 8002730:	68fa      	ldr	r2, [r7, #12]
 8002732:	2380      	movs	r3, #128	; 0x80
 8002734:	015b      	lsls	r3, r3, #5
 8002736:	401a      	ands	r2, r3
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	430a      	orrs	r2, r1
 800273e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	69da      	ldr	r2, [r3, #28]
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4907      	ldr	r1, [pc, #28]	; (8002768 <HAL_SPI_Init+0x16c>)
 800274c:	400a      	ands	r2, r1
 800274e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2200      	movs	r2, #0
 8002754:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	225d      	movs	r2, #93	; 0x5d
 800275a:	2101      	movs	r1, #1
 800275c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800275e:	2300      	movs	r3, #0
}
 8002760:	0018      	movs	r0, r3
 8002762:	46bd      	mov	sp, r7
 8002764:	b004      	add	sp, #16
 8002766:	bd80      	pop	{r7, pc}
 8002768:	fffff7ff 	.word	0xfffff7ff

0800276c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b08a      	sub	sp, #40	; 0x28
 8002770:	af00      	add	r7, sp, #0
 8002772:	60f8      	str	r0, [r7, #12]
 8002774:	60b9      	str	r1, [r7, #8]
 8002776:	607a      	str	r2, [r7, #4]
 8002778:	001a      	movs	r2, r3
 800277a:	1cbb      	adds	r3, r7, #2
 800277c:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800277e:	2301      	movs	r3, #1
 8002780:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002782:	2323      	movs	r3, #35	; 0x23
 8002784:	18fb      	adds	r3, r7, r3
 8002786:	2200      	movs	r2, #0
 8002788:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	225c      	movs	r2, #92	; 0x5c
 800278e:	5c9b      	ldrb	r3, [r3, r2]
 8002790:	2b01      	cmp	r3, #1
 8002792:	d101      	bne.n	8002798 <HAL_SPI_TransmitReceive+0x2c>
 8002794:	2302      	movs	r3, #2
 8002796:	e1b5      	b.n	8002b04 <HAL_SPI_TransmitReceive+0x398>
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	225c      	movs	r2, #92	; 0x5c
 800279c:	2101      	movs	r1, #1
 800279e:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80027a0:	f7fe fd3a 	bl	8001218 <HAL_GetTick>
 80027a4:	0003      	movs	r3, r0
 80027a6:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80027a8:	201b      	movs	r0, #27
 80027aa:	183b      	adds	r3, r7, r0
 80027ac:	68fa      	ldr	r2, [r7, #12]
 80027ae:	215d      	movs	r1, #93	; 0x5d
 80027b0:	5c52      	ldrb	r2, [r2, r1]
 80027b2:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80027ba:	2312      	movs	r3, #18
 80027bc:	18fb      	adds	r3, r7, r3
 80027be:	1cba      	adds	r2, r7, #2
 80027c0:	8812      	ldrh	r2, [r2, #0]
 80027c2:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80027c4:	183b      	adds	r3, r7, r0
 80027c6:	781b      	ldrb	r3, [r3, #0]
 80027c8:	2b01      	cmp	r3, #1
 80027ca:	d011      	beq.n	80027f0 <HAL_SPI_TransmitReceive+0x84>
 80027cc:	697a      	ldr	r2, [r7, #20]
 80027ce:	2382      	movs	r3, #130	; 0x82
 80027d0:	005b      	lsls	r3, r3, #1
 80027d2:	429a      	cmp	r2, r3
 80027d4:	d107      	bne.n	80027e6 <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	689b      	ldr	r3, [r3, #8]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d103      	bne.n	80027e6 <HAL_SPI_TransmitReceive+0x7a>
 80027de:	183b      	adds	r3, r7, r0
 80027e0:	781b      	ldrb	r3, [r3, #0]
 80027e2:	2b04      	cmp	r3, #4
 80027e4:	d004      	beq.n	80027f0 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 80027e6:	2323      	movs	r3, #35	; 0x23
 80027e8:	18fb      	adds	r3, r7, r3
 80027ea:	2202      	movs	r2, #2
 80027ec:	701a      	strb	r2, [r3, #0]
    goto error;
 80027ee:	e17e      	b.n	8002aee <HAL_SPI_TransmitReceive+0x382>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80027f0:	68bb      	ldr	r3, [r7, #8]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d006      	beq.n	8002804 <HAL_SPI_TransmitReceive+0x98>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d003      	beq.n	8002804 <HAL_SPI_TransmitReceive+0x98>
 80027fc:	1cbb      	adds	r3, r7, #2
 80027fe:	881b      	ldrh	r3, [r3, #0]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d104      	bne.n	800280e <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8002804:	2323      	movs	r3, #35	; 0x23
 8002806:	18fb      	adds	r3, r7, r3
 8002808:	2201      	movs	r2, #1
 800280a:	701a      	strb	r2, [r3, #0]
    goto error;
 800280c:	e16f      	b.n	8002aee <HAL_SPI_TransmitReceive+0x382>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	225d      	movs	r2, #93	; 0x5d
 8002812:	5c9b      	ldrb	r3, [r3, r2]
 8002814:	b2db      	uxtb	r3, r3
 8002816:	2b04      	cmp	r3, #4
 8002818:	d003      	beq.n	8002822 <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	225d      	movs	r2, #93	; 0x5d
 800281e:	2105      	movs	r1, #5
 8002820:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	2200      	movs	r2, #0
 8002826:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	687a      	ldr	r2, [r7, #4]
 800282c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	1cba      	adds	r2, r7, #2
 8002832:	2146      	movs	r1, #70	; 0x46
 8002834:	8812      	ldrh	r2, [r2, #0]
 8002836:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	1cba      	adds	r2, r7, #2
 800283c:	2144      	movs	r1, #68	; 0x44
 800283e:	8812      	ldrh	r2, [r2, #0]
 8002840:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	68ba      	ldr	r2, [r7, #8]
 8002846:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	1cba      	adds	r2, r7, #2
 800284c:	8812      	ldrh	r2, [r2, #0]
 800284e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	1cba      	adds	r2, r7, #2
 8002854:	8812      	ldrh	r2, [r2, #0]
 8002856:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	2200      	movs	r2, #0
 800285c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	2200      	movs	r2, #0
 8002862:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	68da      	ldr	r2, [r3, #12]
 8002868:	23e0      	movs	r3, #224	; 0xe0
 800286a:	00db      	lsls	r3, r3, #3
 800286c:	429a      	cmp	r2, r3
 800286e:	d908      	bls.n	8002882 <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	685a      	ldr	r2, [r3, #4]
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	49a4      	ldr	r1, [pc, #656]	; (8002b0c <HAL_SPI_TransmitReceive+0x3a0>)
 800287c:	400a      	ands	r2, r1
 800287e:	605a      	str	r2, [r3, #4]
 8002880:	e008      	b.n	8002894 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	685a      	ldr	r2, [r3, #4]
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	2180      	movs	r1, #128	; 0x80
 800288e:	0149      	lsls	r1, r1, #5
 8002890:	430a      	orrs	r2, r1
 8002892:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	2240      	movs	r2, #64	; 0x40
 800289c:	4013      	ands	r3, r2
 800289e:	2b40      	cmp	r3, #64	; 0x40
 80028a0:	d007      	beq.n	80028b2 <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	681a      	ldr	r2, [r3, #0]
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	2140      	movs	r1, #64	; 0x40
 80028ae:	430a      	orrs	r2, r1
 80028b0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	68da      	ldr	r2, [r3, #12]
 80028b6:	23e0      	movs	r3, #224	; 0xe0
 80028b8:	00db      	lsls	r3, r3, #3
 80028ba:	429a      	cmp	r2, r3
 80028bc:	d800      	bhi.n	80028c0 <HAL_SPI_TransmitReceive+0x154>
 80028be:	e07f      	b.n	80029c0 <HAL_SPI_TransmitReceive+0x254>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d005      	beq.n	80028d4 <HAL_SPI_TransmitReceive+0x168>
 80028c8:	2312      	movs	r3, #18
 80028ca:	18fb      	adds	r3, r7, r3
 80028cc:	881b      	ldrh	r3, [r3, #0]
 80028ce:	2b01      	cmp	r3, #1
 80028d0:	d000      	beq.n	80028d4 <HAL_SPI_TransmitReceive+0x168>
 80028d2:	e069      	b.n	80029a8 <HAL_SPI_TransmitReceive+0x23c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028d8:	881a      	ldrh	r2, [r3, #0]
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028e4:	1c9a      	adds	r2, r3, #2
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80028ee:	b29b      	uxth	r3, r3
 80028f0:	3b01      	subs	r3, #1
 80028f2:	b29a      	uxth	r2, r3
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80028f8:	e056      	b.n	80029a8 <HAL_SPI_TransmitReceive+0x23c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	689b      	ldr	r3, [r3, #8]
 8002900:	2202      	movs	r2, #2
 8002902:	4013      	ands	r3, r2
 8002904:	2b02      	cmp	r3, #2
 8002906:	d11b      	bne.n	8002940 <HAL_SPI_TransmitReceive+0x1d4>
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800290c:	b29b      	uxth	r3, r3
 800290e:	2b00      	cmp	r3, #0
 8002910:	d016      	beq.n	8002940 <HAL_SPI_TransmitReceive+0x1d4>
 8002912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002914:	2b01      	cmp	r3, #1
 8002916:	d113      	bne.n	8002940 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800291c:	881a      	ldrh	r2, [r3, #0]
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002928:	1c9a      	adds	r2, r3, #2
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002932:	b29b      	uxth	r3, r3
 8002934:	3b01      	subs	r3, #1
 8002936:	b29a      	uxth	r2, r3
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800293c:	2300      	movs	r3, #0
 800293e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	689b      	ldr	r3, [r3, #8]
 8002946:	2201      	movs	r2, #1
 8002948:	4013      	ands	r3, r2
 800294a:	2b01      	cmp	r3, #1
 800294c:	d11c      	bne.n	8002988 <HAL_SPI_TransmitReceive+0x21c>
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	2246      	movs	r2, #70	; 0x46
 8002952:	5a9b      	ldrh	r3, [r3, r2]
 8002954:	b29b      	uxth	r3, r3
 8002956:	2b00      	cmp	r3, #0
 8002958:	d016      	beq.n	8002988 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	68da      	ldr	r2, [r3, #12]
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002964:	b292      	uxth	r2, r2
 8002966:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800296c:	1c9a      	adds	r2, r3, #2
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	2246      	movs	r2, #70	; 0x46
 8002976:	5a9b      	ldrh	r3, [r3, r2]
 8002978:	b29b      	uxth	r3, r3
 800297a:	3b01      	subs	r3, #1
 800297c:	b299      	uxth	r1, r3
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	2246      	movs	r2, #70	; 0x46
 8002982:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002984:	2301      	movs	r3, #1
 8002986:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002988:	f7fe fc46 	bl	8001218 <HAL_GetTick>
 800298c:	0002      	movs	r2, r0
 800298e:	69fb      	ldr	r3, [r7, #28]
 8002990:	1ad3      	subs	r3, r2, r3
 8002992:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002994:	429a      	cmp	r2, r3
 8002996:	d807      	bhi.n	80029a8 <HAL_SPI_TransmitReceive+0x23c>
 8002998:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800299a:	3301      	adds	r3, #1
 800299c:	d004      	beq.n	80029a8 <HAL_SPI_TransmitReceive+0x23c>
      {
        errorcode = HAL_TIMEOUT;
 800299e:	2323      	movs	r3, #35	; 0x23
 80029a0:	18fb      	adds	r3, r7, r3
 80029a2:	2203      	movs	r2, #3
 80029a4:	701a      	strb	r2, [r3, #0]
        goto error;
 80029a6:	e0a2      	b.n	8002aee <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80029ac:	b29b      	uxth	r3, r3
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d1a3      	bne.n	80028fa <HAL_SPI_TransmitReceive+0x18e>
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	2246      	movs	r2, #70	; 0x46
 80029b6:	5a9b      	ldrh	r3, [r3, r2]
 80029b8:	b29b      	uxth	r3, r3
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d19d      	bne.n	80028fa <HAL_SPI_TransmitReceive+0x18e>
 80029be:	e085      	b.n	8002acc <HAL_SPI_TransmitReceive+0x360>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d005      	beq.n	80029d4 <HAL_SPI_TransmitReceive+0x268>
 80029c8:	2312      	movs	r3, #18
 80029ca:	18fb      	adds	r3, r7, r3
 80029cc:	881b      	ldrh	r3, [r3, #0]
 80029ce:	2b01      	cmp	r3, #1
 80029d0:	d000      	beq.n	80029d4 <HAL_SPI_TransmitReceive+0x268>
 80029d2:	e070      	b.n	8002ab6 <HAL_SPI_TransmitReceive+0x34a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	330c      	adds	r3, #12
 80029de:	7812      	ldrb	r2, [r2, #0]
 80029e0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029e6:	1c5a      	adds	r2, r3, #1
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80029f0:	b29b      	uxth	r3, r3
 80029f2:	3b01      	subs	r3, #1
 80029f4:	b29a      	uxth	r2, r3
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80029fa:	e05c      	b.n	8002ab6 <HAL_SPI_TransmitReceive+0x34a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	689b      	ldr	r3, [r3, #8]
 8002a02:	2202      	movs	r2, #2
 8002a04:	4013      	ands	r3, r2
 8002a06:	2b02      	cmp	r3, #2
 8002a08:	d11c      	bne.n	8002a44 <HAL_SPI_TransmitReceive+0x2d8>
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a0e:	b29b      	uxth	r3, r3
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d017      	beq.n	8002a44 <HAL_SPI_TransmitReceive+0x2d8>
 8002a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a16:	2b01      	cmp	r3, #1
 8002a18:	d114      	bne.n	8002a44 <HAL_SPI_TransmitReceive+0x2d8>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	330c      	adds	r3, #12
 8002a24:	7812      	ldrb	r2, [r2, #0]
 8002a26:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a2c:	1c5a      	adds	r2, r3, #1
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a36:	b29b      	uxth	r3, r3
 8002a38:	3b01      	subs	r3, #1
 8002a3a:	b29a      	uxth	r2, r3
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002a40:	2300      	movs	r3, #0
 8002a42:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	689b      	ldr	r3, [r3, #8]
 8002a4a:	2201      	movs	r2, #1
 8002a4c:	4013      	ands	r3, r2
 8002a4e:	2b01      	cmp	r3, #1
 8002a50:	d11e      	bne.n	8002a90 <HAL_SPI_TransmitReceive+0x324>
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	2246      	movs	r2, #70	; 0x46
 8002a56:	5a9b      	ldrh	r3, [r3, r2]
 8002a58:	b29b      	uxth	r3, r3
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d018      	beq.n	8002a90 <HAL_SPI_TransmitReceive+0x324>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	330c      	adds	r3, #12
 8002a64:	001a      	movs	r2, r3
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a6a:	7812      	ldrb	r2, [r2, #0]
 8002a6c:	b2d2      	uxtb	r2, r2
 8002a6e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a74:	1c5a      	adds	r2, r3, #1
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	2246      	movs	r2, #70	; 0x46
 8002a7e:	5a9b      	ldrh	r3, [r3, r2]
 8002a80:	b29b      	uxth	r3, r3
 8002a82:	3b01      	subs	r3, #1
 8002a84:	b299      	uxth	r1, r3
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	2246      	movs	r2, #70	; 0x46
 8002a8a:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002a90:	f7fe fbc2 	bl	8001218 <HAL_GetTick>
 8002a94:	0002      	movs	r2, r0
 8002a96:	69fb      	ldr	r3, [r7, #28]
 8002a98:	1ad3      	subs	r3, r2, r3
 8002a9a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002a9c:	429a      	cmp	r2, r3
 8002a9e:	d802      	bhi.n	8002aa6 <HAL_SPI_TransmitReceive+0x33a>
 8002aa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002aa2:	3301      	adds	r3, #1
 8002aa4:	d102      	bne.n	8002aac <HAL_SPI_TransmitReceive+0x340>
 8002aa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d104      	bne.n	8002ab6 <HAL_SPI_TransmitReceive+0x34a>
      {
        errorcode = HAL_TIMEOUT;
 8002aac:	2323      	movs	r3, #35	; 0x23
 8002aae:	18fb      	adds	r3, r7, r3
 8002ab0:	2203      	movs	r2, #3
 8002ab2:	701a      	strb	r2, [r3, #0]
        goto error;
 8002ab4:	e01b      	b.n	8002aee <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002aba:	b29b      	uxth	r3, r3
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d19d      	bne.n	80029fc <HAL_SPI_TransmitReceive+0x290>
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	2246      	movs	r2, #70	; 0x46
 8002ac4:	5a9b      	ldrh	r3, [r3, r2]
 8002ac6:	b29b      	uxth	r3, r3
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d197      	bne.n	80029fc <HAL_SPI_TransmitReceive+0x290>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002acc:	69fa      	ldr	r2, [r7, #28]
 8002ace:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	0018      	movs	r0, r3
 8002ad4:	f000 fa68 	bl	8002fa8 <SPI_EndRxTxTransaction>
 8002ad8:	1e03      	subs	r3, r0, #0
 8002ada:	d007      	beq.n	8002aec <HAL_SPI_TransmitReceive+0x380>
  {
    errorcode = HAL_ERROR;
 8002adc:	2323      	movs	r3, #35	; 0x23
 8002ade:	18fb      	adds	r3, r7, r3
 8002ae0:	2201      	movs	r2, #1
 8002ae2:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	2220      	movs	r2, #32
 8002ae8:	661a      	str	r2, [r3, #96]	; 0x60
 8002aea:	e000      	b.n	8002aee <HAL_SPI_TransmitReceive+0x382>
  }

error :
 8002aec:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	225d      	movs	r2, #93	; 0x5d
 8002af2:	2101      	movs	r1, #1
 8002af4:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	225c      	movs	r2, #92	; 0x5c
 8002afa:	2100      	movs	r1, #0
 8002afc:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8002afe:	2323      	movs	r3, #35	; 0x23
 8002b00:	18fb      	adds	r3, r7, r3
 8002b02:	781b      	ldrb	r3, [r3, #0]
}
 8002b04:	0018      	movs	r0, r3
 8002b06:	46bd      	mov	sp, r7
 8002b08:	b00a      	add	sp, #40	; 0x28
 8002b0a:	bd80      	pop	{r7, pc}
 8002b0c:	ffffefff 	.word	0xffffefff

08002b10 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b088      	sub	sp, #32
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	689b      	ldr	r3, [r3, #8]
 8002b26:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002b28:	69bb      	ldr	r3, [r7, #24]
 8002b2a:	099b      	lsrs	r3, r3, #6
 8002b2c:	001a      	movs	r2, r3
 8002b2e:	2301      	movs	r3, #1
 8002b30:	4013      	ands	r3, r2
 8002b32:	d10f      	bne.n	8002b54 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002b34:	69bb      	ldr	r3, [r7, #24]
 8002b36:	2201      	movs	r2, #1
 8002b38:	4013      	ands	r3, r2
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002b3a:	d00b      	beq.n	8002b54 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002b3c:	69fb      	ldr	r3, [r7, #28]
 8002b3e:	099b      	lsrs	r3, r3, #6
 8002b40:	001a      	movs	r2, r3
 8002b42:	2301      	movs	r3, #1
 8002b44:	4013      	ands	r3, r2
 8002b46:	d005      	beq.n	8002b54 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b4c:	687a      	ldr	r2, [r7, #4]
 8002b4e:	0010      	movs	r0, r2
 8002b50:	4798      	blx	r3
    return;
 8002b52:	e0d5      	b.n	8002d00 <HAL_SPI_IRQHandler+0x1f0>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8002b54:	69bb      	ldr	r3, [r7, #24]
 8002b56:	085b      	lsrs	r3, r3, #1
 8002b58:	001a      	movs	r2, r3
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	4013      	ands	r3, r2
 8002b5e:	d00b      	beq.n	8002b78 <HAL_SPI_IRQHandler+0x68>
 8002b60:	69fb      	ldr	r3, [r7, #28]
 8002b62:	09db      	lsrs	r3, r3, #7
 8002b64:	001a      	movs	r2, r3
 8002b66:	2301      	movs	r3, #1
 8002b68:	4013      	ands	r3, r2
 8002b6a:	d005      	beq.n	8002b78 <HAL_SPI_IRQHandler+0x68>
  {
    hspi->TxISR(hspi);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b70:	687a      	ldr	r2, [r7, #4]
 8002b72:	0010      	movs	r0, r2
 8002b74:	4798      	blx	r3
    return;
 8002b76:	e0c3      	b.n	8002d00 <HAL_SPI_IRQHandler+0x1f0>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002b78:	69bb      	ldr	r3, [r7, #24]
 8002b7a:	095b      	lsrs	r3, r3, #5
 8002b7c:	001a      	movs	r2, r3
 8002b7e:	2301      	movs	r3, #1
 8002b80:	4013      	ands	r3, r2
 8002b82:	d10c      	bne.n	8002b9e <HAL_SPI_IRQHandler+0x8e>
 8002b84:	69bb      	ldr	r3, [r7, #24]
 8002b86:	099b      	lsrs	r3, r3, #6
 8002b88:	001a      	movs	r2, r3
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	4013      	ands	r3, r2
 8002b8e:	d106      	bne.n	8002b9e <HAL_SPI_IRQHandler+0x8e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8002b90:	69bb      	ldr	r3, [r7, #24]
 8002b92:	0a1b      	lsrs	r3, r3, #8
 8002b94:	001a      	movs	r2, r3
 8002b96:	2301      	movs	r3, #1
 8002b98:	4013      	ands	r3, r2
 8002b9a:	d100      	bne.n	8002b9e <HAL_SPI_IRQHandler+0x8e>
 8002b9c:	e0b0      	b.n	8002d00 <HAL_SPI_IRQHandler+0x1f0>
 8002b9e:	69fb      	ldr	r3, [r7, #28]
 8002ba0:	095b      	lsrs	r3, r3, #5
 8002ba2:	001a      	movs	r2, r3
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	4013      	ands	r3, r2
 8002ba8:	d100      	bne.n	8002bac <HAL_SPI_IRQHandler+0x9c>
 8002baa:	e0a9      	b.n	8002d00 <HAL_SPI_IRQHandler+0x1f0>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002bac:	69bb      	ldr	r3, [r7, #24]
 8002bae:	099b      	lsrs	r3, r3, #6
 8002bb0:	001a      	movs	r2, r3
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	4013      	ands	r3, r2
 8002bb6:	d023      	beq.n	8002c00 <HAL_SPI_IRQHandler+0xf0>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	225d      	movs	r2, #93	; 0x5d
 8002bbc:	5c9b      	ldrb	r3, [r3, r2]
 8002bbe:	b2db      	uxtb	r3, r3
 8002bc0:	2b03      	cmp	r3, #3
 8002bc2:	d011      	beq.n	8002be8 <HAL_SPI_IRQHandler+0xd8>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002bc8:	2204      	movs	r2, #4
 8002bca:	431a      	orrs	r2, r3
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	617b      	str	r3, [r7, #20]
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	68db      	ldr	r3, [r3, #12]
 8002bda:	617b      	str	r3, [r7, #20]
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	689b      	ldr	r3, [r3, #8]
 8002be2:	617b      	str	r3, [r7, #20]
 8002be4:	697b      	ldr	r3, [r7, #20]
 8002be6:	e00b      	b.n	8002c00 <HAL_SPI_IRQHandler+0xf0>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002be8:	2300      	movs	r3, #0
 8002bea:	613b      	str	r3, [r7, #16]
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	68db      	ldr	r3, [r3, #12]
 8002bf2:	613b      	str	r3, [r7, #16]
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	689b      	ldr	r3, [r3, #8]
 8002bfa:	613b      	str	r3, [r7, #16]
 8002bfc:	693b      	ldr	r3, [r7, #16]
        return;
 8002bfe:	e07f      	b.n	8002d00 <HAL_SPI_IRQHandler+0x1f0>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8002c00:	69bb      	ldr	r3, [r7, #24]
 8002c02:	095b      	lsrs	r3, r3, #5
 8002c04:	001a      	movs	r2, r3
 8002c06:	2301      	movs	r3, #1
 8002c08:	4013      	ands	r3, r2
 8002c0a:	d014      	beq.n	8002c36 <HAL_SPI_IRQHandler+0x126>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c10:	2201      	movs	r2, #1
 8002c12:	431a      	orrs	r2, r3
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8002c18:	2300      	movs	r3, #0
 8002c1a:	60fb      	str	r3, [r7, #12]
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	689b      	ldr	r3, [r3, #8]
 8002c22:	60fb      	str	r3, [r7, #12]
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	681a      	ldr	r2, [r3, #0]
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	2140      	movs	r1, #64	; 0x40
 8002c30:	438a      	bics	r2, r1
 8002c32:	601a      	str	r2, [r3, #0]
 8002c34:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8002c36:	69bb      	ldr	r3, [r7, #24]
 8002c38:	0a1b      	lsrs	r3, r3, #8
 8002c3a:	001a      	movs	r2, r3
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	4013      	ands	r3, r2
 8002c40:	d00c      	beq.n	8002c5c <HAL_SPI_IRQHandler+0x14c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c46:	2208      	movs	r2, #8
 8002c48:	431a      	orrs	r2, r3
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8002c4e:	2300      	movs	r3, #0
 8002c50:	60bb      	str	r3, [r7, #8]
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	689b      	ldr	r3, [r3, #8]
 8002c58:	60bb      	str	r3, [r7, #8]
 8002c5a:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d04c      	beq.n	8002cfe <HAL_SPI_IRQHandler+0x1ee>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	685a      	ldr	r2, [r3, #4]
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	21e0      	movs	r1, #224	; 0xe0
 8002c70:	438a      	bics	r2, r1
 8002c72:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	225d      	movs	r2, #93	; 0x5d
 8002c78:	2101      	movs	r1, #1
 8002c7a:	5499      	strb	r1, [r3, r2]
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8002c7c:	69fb      	ldr	r3, [r7, #28]
 8002c7e:	2202      	movs	r2, #2
 8002c80:	4013      	ands	r3, r2
 8002c82:	d103      	bne.n	8002c8c <HAL_SPI_IRQHandler+0x17c>
 8002c84:	69fb      	ldr	r3, [r7, #28]
 8002c86:	2201      	movs	r2, #1
 8002c88:	4013      	ands	r3, r2
 8002c8a:	d032      	beq.n	8002cf2 <HAL_SPI_IRQHandler+0x1e2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	685a      	ldr	r2, [r3, #4]
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	2103      	movs	r1, #3
 8002c98:	438a      	bics	r2, r1
 8002c9a:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d010      	beq.n	8002cc6 <HAL_SPI_IRQHandler+0x1b6>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ca8:	4a17      	ldr	r2, [pc, #92]	; (8002d08 <HAL_SPI_IRQHandler+0x1f8>)
 8002caa:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cb0:	0018      	movs	r0, r3
 8002cb2:	f7fe fbd3 	bl	800145c <HAL_DMA_Abort_IT>
 8002cb6:	1e03      	subs	r3, r0, #0
 8002cb8:	d005      	beq.n	8002cc6 <HAL_SPI_IRQHandler+0x1b6>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cbe:	2240      	movs	r2, #64	; 0x40
 8002cc0:	431a      	orrs	r2, r3
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d016      	beq.n	8002cfc <HAL_SPI_IRQHandler+0x1ec>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cd2:	4a0d      	ldr	r2, [pc, #52]	; (8002d08 <HAL_SPI_IRQHandler+0x1f8>)
 8002cd4:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cda:	0018      	movs	r0, r3
 8002cdc:	f7fe fbbe 	bl	800145c <HAL_DMA_Abort_IT>
 8002ce0:	1e03      	subs	r3, r0, #0
 8002ce2:	d00b      	beq.n	8002cfc <HAL_SPI_IRQHandler+0x1ec>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ce8:	2240      	movs	r2, #64	; 0x40
 8002cea:	431a      	orrs	r2, r3
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8002cf0:	e004      	b.n	8002cfc <HAL_SPI_IRQHandler+0x1ec>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	0018      	movs	r0, r3
 8002cf6:	f000 f809 	bl	8002d0c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8002cfa:	e000      	b.n	8002cfe <HAL_SPI_IRQHandler+0x1ee>
        if (hspi->hdmatx != NULL)
 8002cfc:	46c0      	nop			; (mov r8, r8)
    return;
 8002cfe:	46c0      	nop			; (mov r8, r8)
  }
}
 8002d00:	46bd      	mov	sp, r7
 8002d02:	b008      	add	sp, #32
 8002d04:	bd80      	pop	{r7, pc}
 8002d06:	46c0      	nop			; (mov r8, r8)
 8002d08:	08002d1d 	.word	0x08002d1d

08002d0c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b082      	sub	sp, #8
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8002d14:	46c0      	nop			; (mov r8, r8)
 8002d16:	46bd      	mov	sp, r7
 8002d18:	b002      	add	sp, #8
 8002d1a:	bd80      	pop	{r7, pc}

08002d1c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b084      	sub	sp, #16
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d28:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	2246      	movs	r2, #70	; 0x46
 8002d2e:	2100      	movs	r1, #0
 8002d30:	5299      	strh	r1, [r3, r2]
  hspi->TxXferCount = 0U;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	2200      	movs	r2, #0
 8002d36:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	0018      	movs	r0, r3
 8002d3c:	f7ff ffe6 	bl	8002d0c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002d40:	46c0      	nop			; (mov r8, r8)
 8002d42:	46bd      	mov	sp, r7
 8002d44:	b004      	add	sp, #16
 8002d46:	bd80      	pop	{r7, pc}

08002d48 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b088      	sub	sp, #32
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	60f8      	str	r0, [r7, #12]
 8002d50:	60b9      	str	r1, [r7, #8]
 8002d52:	603b      	str	r3, [r7, #0]
 8002d54:	1dfb      	adds	r3, r7, #7
 8002d56:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002d58:	f7fe fa5e 	bl	8001218 <HAL_GetTick>
 8002d5c:	0002      	movs	r2, r0
 8002d5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d60:	1a9b      	subs	r3, r3, r2
 8002d62:	683a      	ldr	r2, [r7, #0]
 8002d64:	18d3      	adds	r3, r2, r3
 8002d66:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002d68:	f7fe fa56 	bl	8001218 <HAL_GetTick>
 8002d6c:	0003      	movs	r3, r0
 8002d6e:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002d70:	4b3a      	ldr	r3, [pc, #232]	; (8002e5c <SPI_WaitFlagStateUntilTimeout+0x114>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	015b      	lsls	r3, r3, #5
 8002d76:	0d1b      	lsrs	r3, r3, #20
 8002d78:	69fa      	ldr	r2, [r7, #28]
 8002d7a:	4353      	muls	r3, r2
 8002d7c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002d7e:	e058      	b.n	8002e32 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	3301      	adds	r3, #1
 8002d84:	d055      	beq.n	8002e32 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002d86:	f7fe fa47 	bl	8001218 <HAL_GetTick>
 8002d8a:	0002      	movs	r2, r0
 8002d8c:	69bb      	ldr	r3, [r7, #24]
 8002d8e:	1ad3      	subs	r3, r2, r3
 8002d90:	69fa      	ldr	r2, [r7, #28]
 8002d92:	429a      	cmp	r2, r3
 8002d94:	d902      	bls.n	8002d9c <SPI_WaitFlagStateUntilTimeout+0x54>
 8002d96:	69fb      	ldr	r3, [r7, #28]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d142      	bne.n	8002e22 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	685a      	ldr	r2, [r3, #4]
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	21e0      	movs	r1, #224	; 0xe0
 8002da8:	438a      	bics	r2, r1
 8002daa:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	685a      	ldr	r2, [r3, #4]
 8002db0:	2382      	movs	r3, #130	; 0x82
 8002db2:	005b      	lsls	r3, r3, #1
 8002db4:	429a      	cmp	r2, r3
 8002db6:	d113      	bne.n	8002de0 <SPI_WaitFlagStateUntilTimeout+0x98>
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	689a      	ldr	r2, [r3, #8]
 8002dbc:	2380      	movs	r3, #128	; 0x80
 8002dbe:	021b      	lsls	r3, r3, #8
 8002dc0:	429a      	cmp	r2, r3
 8002dc2:	d005      	beq.n	8002dd0 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	689a      	ldr	r2, [r3, #8]
 8002dc8:	2380      	movs	r3, #128	; 0x80
 8002dca:	00db      	lsls	r3, r3, #3
 8002dcc:	429a      	cmp	r2, r3
 8002dce:	d107      	bne.n	8002de0 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	681a      	ldr	r2, [r3, #0]
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	2140      	movs	r1, #64	; 0x40
 8002ddc:	438a      	bics	r2, r1
 8002dde:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002de4:	2380      	movs	r3, #128	; 0x80
 8002de6:	019b      	lsls	r3, r3, #6
 8002de8:	429a      	cmp	r2, r3
 8002dea:	d110      	bne.n	8002e0e <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	681a      	ldr	r2, [r3, #0]
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	491a      	ldr	r1, [pc, #104]	; (8002e60 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8002df8:	400a      	ands	r2, r1
 8002dfa:	601a      	str	r2, [r3, #0]
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	681a      	ldr	r2, [r3, #0]
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	2180      	movs	r1, #128	; 0x80
 8002e08:	0189      	lsls	r1, r1, #6
 8002e0a:	430a      	orrs	r2, r1
 8002e0c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	225d      	movs	r2, #93	; 0x5d
 8002e12:	2101      	movs	r1, #1
 8002e14:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	225c      	movs	r2, #92	; 0x5c
 8002e1a:	2100      	movs	r1, #0
 8002e1c:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002e1e:	2303      	movs	r3, #3
 8002e20:	e017      	b.n	8002e52 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002e22:	697b      	ldr	r3, [r7, #20]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d101      	bne.n	8002e2c <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8002e28:	2300      	movs	r3, #0
 8002e2a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002e2c:	697b      	ldr	r3, [r7, #20]
 8002e2e:	3b01      	subs	r3, #1
 8002e30:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	689b      	ldr	r3, [r3, #8]
 8002e38:	68ba      	ldr	r2, [r7, #8]
 8002e3a:	4013      	ands	r3, r2
 8002e3c:	68ba      	ldr	r2, [r7, #8]
 8002e3e:	1ad3      	subs	r3, r2, r3
 8002e40:	425a      	negs	r2, r3
 8002e42:	4153      	adcs	r3, r2
 8002e44:	b2db      	uxtb	r3, r3
 8002e46:	001a      	movs	r2, r3
 8002e48:	1dfb      	adds	r3, r7, #7
 8002e4a:	781b      	ldrb	r3, [r3, #0]
 8002e4c:	429a      	cmp	r2, r3
 8002e4e:	d197      	bne.n	8002d80 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002e50:	2300      	movs	r3, #0
}
 8002e52:	0018      	movs	r0, r3
 8002e54:	46bd      	mov	sp, r7
 8002e56:	b008      	add	sp, #32
 8002e58:	bd80      	pop	{r7, pc}
 8002e5a:	46c0      	nop			; (mov r8, r8)
 8002e5c:	20000000 	.word	0x20000000
 8002e60:	ffffdfff 	.word	0xffffdfff

08002e64 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b08a      	sub	sp, #40	; 0x28
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	60f8      	str	r0, [r7, #12]
 8002e6c:	60b9      	str	r1, [r7, #8]
 8002e6e:	607a      	str	r2, [r7, #4]
 8002e70:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8002e72:	2317      	movs	r3, #23
 8002e74:	18fb      	adds	r3, r7, r3
 8002e76:	2200      	movs	r2, #0
 8002e78:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8002e7a:	f7fe f9cd 	bl	8001218 <HAL_GetTick>
 8002e7e:	0002      	movs	r2, r0
 8002e80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e82:	1a9b      	subs	r3, r3, r2
 8002e84:	683a      	ldr	r2, [r7, #0]
 8002e86:	18d3      	adds	r3, r2, r3
 8002e88:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8002e8a:	f7fe f9c5 	bl	8001218 <HAL_GetTick>
 8002e8e:	0003      	movs	r3, r0
 8002e90:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	330c      	adds	r3, #12
 8002e98:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8002e9a:	4b41      	ldr	r3, [pc, #260]	; (8002fa0 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8002e9c:	681a      	ldr	r2, [r3, #0]
 8002e9e:	0013      	movs	r3, r2
 8002ea0:	009b      	lsls	r3, r3, #2
 8002ea2:	189b      	adds	r3, r3, r2
 8002ea4:	00da      	lsls	r2, r3, #3
 8002ea6:	1ad3      	subs	r3, r2, r3
 8002ea8:	0d1b      	lsrs	r3, r3, #20
 8002eaa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002eac:	4353      	muls	r3, r2
 8002eae:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8002eb0:	e068      	b.n	8002f84 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8002eb2:	68ba      	ldr	r2, [r7, #8]
 8002eb4:	23c0      	movs	r3, #192	; 0xc0
 8002eb6:	00db      	lsls	r3, r3, #3
 8002eb8:	429a      	cmp	r2, r3
 8002eba:	d10a      	bne.n	8002ed2 <SPI_WaitFifoStateUntilTimeout+0x6e>
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d107      	bne.n	8002ed2 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8002ec2:	69fb      	ldr	r3, [r7, #28]
 8002ec4:	781b      	ldrb	r3, [r3, #0]
 8002ec6:	b2da      	uxtb	r2, r3
 8002ec8:	2117      	movs	r1, #23
 8002eca:	187b      	adds	r3, r7, r1
 8002ecc:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8002ece:	187b      	adds	r3, r7, r1
 8002ed0:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	3301      	adds	r3, #1
 8002ed6:	d055      	beq.n	8002f84 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002ed8:	f7fe f99e 	bl	8001218 <HAL_GetTick>
 8002edc:	0002      	movs	r2, r0
 8002ede:	6a3b      	ldr	r3, [r7, #32]
 8002ee0:	1ad3      	subs	r3, r2, r3
 8002ee2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ee4:	429a      	cmp	r2, r3
 8002ee6:	d902      	bls.n	8002eee <SPI_WaitFifoStateUntilTimeout+0x8a>
 8002ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d142      	bne.n	8002f74 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	685a      	ldr	r2, [r3, #4]
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	21e0      	movs	r1, #224	; 0xe0
 8002efa:	438a      	bics	r2, r1
 8002efc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	685a      	ldr	r2, [r3, #4]
 8002f02:	2382      	movs	r3, #130	; 0x82
 8002f04:	005b      	lsls	r3, r3, #1
 8002f06:	429a      	cmp	r2, r3
 8002f08:	d113      	bne.n	8002f32 <SPI_WaitFifoStateUntilTimeout+0xce>
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	689a      	ldr	r2, [r3, #8]
 8002f0e:	2380      	movs	r3, #128	; 0x80
 8002f10:	021b      	lsls	r3, r3, #8
 8002f12:	429a      	cmp	r2, r3
 8002f14:	d005      	beq.n	8002f22 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	689a      	ldr	r2, [r3, #8]
 8002f1a:	2380      	movs	r3, #128	; 0x80
 8002f1c:	00db      	lsls	r3, r3, #3
 8002f1e:	429a      	cmp	r2, r3
 8002f20:	d107      	bne.n	8002f32 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	681a      	ldr	r2, [r3, #0]
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	2140      	movs	r1, #64	; 0x40
 8002f2e:	438a      	bics	r2, r1
 8002f30:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002f36:	2380      	movs	r3, #128	; 0x80
 8002f38:	019b      	lsls	r3, r3, #6
 8002f3a:	429a      	cmp	r2, r3
 8002f3c:	d110      	bne.n	8002f60 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	681a      	ldr	r2, [r3, #0]
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4916      	ldr	r1, [pc, #88]	; (8002fa4 <SPI_WaitFifoStateUntilTimeout+0x140>)
 8002f4a:	400a      	ands	r2, r1
 8002f4c:	601a      	str	r2, [r3, #0]
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	681a      	ldr	r2, [r3, #0]
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	2180      	movs	r1, #128	; 0x80
 8002f5a:	0189      	lsls	r1, r1, #6
 8002f5c:	430a      	orrs	r2, r1
 8002f5e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	225d      	movs	r2, #93	; 0x5d
 8002f64:	2101      	movs	r1, #1
 8002f66:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	225c      	movs	r2, #92	; 0x5c
 8002f6c:	2100      	movs	r1, #0
 8002f6e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002f70:	2303      	movs	r3, #3
 8002f72:	e010      	b.n	8002f96 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002f74:	69bb      	ldr	r3, [r7, #24]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d101      	bne.n	8002f7e <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8002f7e:	69bb      	ldr	r3, [r7, #24]
 8002f80:	3b01      	subs	r3, #1
 8002f82:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	689b      	ldr	r3, [r3, #8]
 8002f8a:	68ba      	ldr	r2, [r7, #8]
 8002f8c:	4013      	ands	r3, r2
 8002f8e:	687a      	ldr	r2, [r7, #4]
 8002f90:	429a      	cmp	r2, r3
 8002f92:	d18e      	bne.n	8002eb2 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8002f94:	2300      	movs	r3, #0
}
 8002f96:	0018      	movs	r0, r3
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	b00a      	add	sp, #40	; 0x28
 8002f9c:	bd80      	pop	{r7, pc}
 8002f9e:	46c0      	nop			; (mov r8, r8)
 8002fa0:	20000000 	.word	0x20000000
 8002fa4:	ffffdfff 	.word	0xffffdfff

08002fa8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b086      	sub	sp, #24
 8002fac:	af02      	add	r7, sp, #8
 8002fae:	60f8      	str	r0, [r7, #12]
 8002fb0:	60b9      	str	r1, [r7, #8]
 8002fb2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002fb4:	68ba      	ldr	r2, [r7, #8]
 8002fb6:	23c0      	movs	r3, #192	; 0xc0
 8002fb8:	0159      	lsls	r1, r3, #5
 8002fba:	68f8      	ldr	r0, [r7, #12]
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	9300      	str	r3, [sp, #0]
 8002fc0:	0013      	movs	r3, r2
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	f7ff ff4e 	bl	8002e64 <SPI_WaitFifoStateUntilTimeout>
 8002fc8:	1e03      	subs	r3, r0, #0
 8002fca:	d007      	beq.n	8002fdc <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fd0:	2220      	movs	r2, #32
 8002fd2:	431a      	orrs	r2, r3
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002fd8:	2303      	movs	r3, #3
 8002fda:	e027      	b.n	800302c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002fdc:	68ba      	ldr	r2, [r7, #8]
 8002fde:	68f8      	ldr	r0, [r7, #12]
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	9300      	str	r3, [sp, #0]
 8002fe4:	0013      	movs	r3, r2
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	2180      	movs	r1, #128	; 0x80
 8002fea:	f7ff fead 	bl	8002d48 <SPI_WaitFlagStateUntilTimeout>
 8002fee:	1e03      	subs	r3, r0, #0
 8002ff0:	d007      	beq.n	8003002 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ff6:	2220      	movs	r2, #32
 8002ff8:	431a      	orrs	r2, r3
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002ffe:	2303      	movs	r3, #3
 8003000:	e014      	b.n	800302c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003002:	68ba      	ldr	r2, [r7, #8]
 8003004:	23c0      	movs	r3, #192	; 0xc0
 8003006:	00d9      	lsls	r1, r3, #3
 8003008:	68f8      	ldr	r0, [r7, #12]
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	9300      	str	r3, [sp, #0]
 800300e:	0013      	movs	r3, r2
 8003010:	2200      	movs	r2, #0
 8003012:	f7ff ff27 	bl	8002e64 <SPI_WaitFifoStateUntilTimeout>
 8003016:	1e03      	subs	r3, r0, #0
 8003018:	d007      	beq.n	800302a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800301e:	2220      	movs	r2, #32
 8003020:	431a      	orrs	r2, r3
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003026:	2303      	movs	r3, #3
 8003028:	e000      	b.n	800302c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800302a:	2300      	movs	r3, #0
}
 800302c:	0018      	movs	r0, r3
 800302e:	46bd      	mov	sp, r7
 8003030:	b004      	add	sp, #16
 8003032:	bd80      	pop	{r7, pc}

08003034 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b082      	sub	sp, #8
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d101      	bne.n	8003046 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003042:	2301      	movs	r3, #1
 8003044:	e04a      	b.n	80030dc <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	223d      	movs	r2, #61	; 0x3d
 800304a:	5c9b      	ldrb	r3, [r3, r2]
 800304c:	b2db      	uxtb	r3, r3
 800304e:	2b00      	cmp	r3, #0
 8003050:	d107      	bne.n	8003062 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	223c      	movs	r2, #60	; 0x3c
 8003056:	2100      	movs	r1, #0
 8003058:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	0018      	movs	r0, r3
 800305e:	f7fd ff69 	bl	8000f34 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	223d      	movs	r2, #61	; 0x3d
 8003066:	2102      	movs	r1, #2
 8003068:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681a      	ldr	r2, [r3, #0]
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	3304      	adds	r3, #4
 8003072:	0019      	movs	r1, r3
 8003074:	0010      	movs	r0, r2
 8003076:	f000 f90b 	bl	8003290 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2248      	movs	r2, #72	; 0x48
 800307e:	2101      	movs	r1, #1
 8003080:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	223e      	movs	r2, #62	; 0x3e
 8003086:	2101      	movs	r1, #1
 8003088:	5499      	strb	r1, [r3, r2]
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	223f      	movs	r2, #63	; 0x3f
 800308e:	2101      	movs	r1, #1
 8003090:	5499      	strb	r1, [r3, r2]
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2240      	movs	r2, #64	; 0x40
 8003096:	2101      	movs	r1, #1
 8003098:	5499      	strb	r1, [r3, r2]
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2241      	movs	r2, #65	; 0x41
 800309e:	2101      	movs	r1, #1
 80030a0:	5499      	strb	r1, [r3, r2]
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2242      	movs	r2, #66	; 0x42
 80030a6:	2101      	movs	r1, #1
 80030a8:	5499      	strb	r1, [r3, r2]
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2243      	movs	r2, #67	; 0x43
 80030ae:	2101      	movs	r1, #1
 80030b0:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2244      	movs	r2, #68	; 0x44
 80030b6:	2101      	movs	r1, #1
 80030b8:	5499      	strb	r1, [r3, r2]
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2245      	movs	r2, #69	; 0x45
 80030be:	2101      	movs	r1, #1
 80030c0:	5499      	strb	r1, [r3, r2]
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2246      	movs	r2, #70	; 0x46
 80030c6:	2101      	movs	r1, #1
 80030c8:	5499      	strb	r1, [r3, r2]
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2247      	movs	r2, #71	; 0x47
 80030ce:	2101      	movs	r1, #1
 80030d0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	223d      	movs	r2, #61	; 0x3d
 80030d6:	2101      	movs	r1, #1
 80030d8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80030da:	2300      	movs	r3, #0
}
 80030dc:	0018      	movs	r0, r3
 80030de:	46bd      	mov	sp, r7
 80030e0:	b002      	add	sp, #8
 80030e2:	bd80      	pop	{r7, pc}

080030e4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b084      	sub	sp, #16
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
 80030ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80030ee:	230f      	movs	r3, #15
 80030f0:	18fb      	adds	r3, r7, r3
 80030f2:	2200      	movs	r2, #0
 80030f4:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	223c      	movs	r2, #60	; 0x3c
 80030fa:	5c9b      	ldrb	r3, [r3, r2]
 80030fc:	2b01      	cmp	r3, #1
 80030fe:	d101      	bne.n	8003104 <HAL_TIM_ConfigClockSource+0x20>
 8003100:	2302      	movs	r3, #2
 8003102:	e0bc      	b.n	800327e <HAL_TIM_ConfigClockSource+0x19a>
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	223c      	movs	r2, #60	; 0x3c
 8003108:	2101      	movs	r1, #1
 800310a:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	223d      	movs	r2, #61	; 0x3d
 8003110:	2102      	movs	r1, #2
 8003112:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	689b      	ldr	r3, [r3, #8]
 800311a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800311c:	68bb      	ldr	r3, [r7, #8]
 800311e:	4a5a      	ldr	r2, [pc, #360]	; (8003288 <HAL_TIM_ConfigClockSource+0x1a4>)
 8003120:	4013      	ands	r3, r2
 8003122:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003124:	68bb      	ldr	r3, [r7, #8]
 8003126:	4a59      	ldr	r2, [pc, #356]	; (800328c <HAL_TIM_ConfigClockSource+0x1a8>)
 8003128:	4013      	ands	r3, r2
 800312a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	68ba      	ldr	r2, [r7, #8]
 8003132:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	2280      	movs	r2, #128	; 0x80
 800313a:	0192      	lsls	r2, r2, #6
 800313c:	4293      	cmp	r3, r2
 800313e:	d040      	beq.n	80031c2 <HAL_TIM_ConfigClockSource+0xde>
 8003140:	2280      	movs	r2, #128	; 0x80
 8003142:	0192      	lsls	r2, r2, #6
 8003144:	4293      	cmp	r3, r2
 8003146:	d900      	bls.n	800314a <HAL_TIM_ConfigClockSource+0x66>
 8003148:	e088      	b.n	800325c <HAL_TIM_ConfigClockSource+0x178>
 800314a:	2280      	movs	r2, #128	; 0x80
 800314c:	0152      	lsls	r2, r2, #5
 800314e:	4293      	cmp	r3, r2
 8003150:	d100      	bne.n	8003154 <HAL_TIM_ConfigClockSource+0x70>
 8003152:	e088      	b.n	8003266 <HAL_TIM_ConfigClockSource+0x182>
 8003154:	2280      	movs	r2, #128	; 0x80
 8003156:	0152      	lsls	r2, r2, #5
 8003158:	4293      	cmp	r3, r2
 800315a:	d900      	bls.n	800315e <HAL_TIM_ConfigClockSource+0x7a>
 800315c:	e07e      	b.n	800325c <HAL_TIM_ConfigClockSource+0x178>
 800315e:	2b70      	cmp	r3, #112	; 0x70
 8003160:	d018      	beq.n	8003194 <HAL_TIM_ConfigClockSource+0xb0>
 8003162:	d900      	bls.n	8003166 <HAL_TIM_ConfigClockSource+0x82>
 8003164:	e07a      	b.n	800325c <HAL_TIM_ConfigClockSource+0x178>
 8003166:	2b60      	cmp	r3, #96	; 0x60
 8003168:	d04f      	beq.n	800320a <HAL_TIM_ConfigClockSource+0x126>
 800316a:	d900      	bls.n	800316e <HAL_TIM_ConfigClockSource+0x8a>
 800316c:	e076      	b.n	800325c <HAL_TIM_ConfigClockSource+0x178>
 800316e:	2b50      	cmp	r3, #80	; 0x50
 8003170:	d03b      	beq.n	80031ea <HAL_TIM_ConfigClockSource+0x106>
 8003172:	d900      	bls.n	8003176 <HAL_TIM_ConfigClockSource+0x92>
 8003174:	e072      	b.n	800325c <HAL_TIM_ConfigClockSource+0x178>
 8003176:	2b40      	cmp	r3, #64	; 0x40
 8003178:	d057      	beq.n	800322a <HAL_TIM_ConfigClockSource+0x146>
 800317a:	d900      	bls.n	800317e <HAL_TIM_ConfigClockSource+0x9a>
 800317c:	e06e      	b.n	800325c <HAL_TIM_ConfigClockSource+0x178>
 800317e:	2b30      	cmp	r3, #48	; 0x30
 8003180:	d063      	beq.n	800324a <HAL_TIM_ConfigClockSource+0x166>
 8003182:	d86b      	bhi.n	800325c <HAL_TIM_ConfigClockSource+0x178>
 8003184:	2b20      	cmp	r3, #32
 8003186:	d060      	beq.n	800324a <HAL_TIM_ConfigClockSource+0x166>
 8003188:	d868      	bhi.n	800325c <HAL_TIM_ConfigClockSource+0x178>
 800318a:	2b00      	cmp	r3, #0
 800318c:	d05d      	beq.n	800324a <HAL_TIM_ConfigClockSource+0x166>
 800318e:	2b10      	cmp	r3, #16
 8003190:	d05b      	beq.n	800324a <HAL_TIM_ConfigClockSource+0x166>
 8003192:	e063      	b.n	800325c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6818      	ldr	r0, [r3, #0]
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	6899      	ldr	r1, [r3, #8]
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	685a      	ldr	r2, [r3, #4]
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	68db      	ldr	r3, [r3, #12]
 80031a4:	f000 f970 	bl	8003488 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	689b      	ldr	r3, [r3, #8]
 80031ae:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80031b0:	68bb      	ldr	r3, [r7, #8]
 80031b2:	2277      	movs	r2, #119	; 0x77
 80031b4:	4313      	orrs	r3, r2
 80031b6:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	68ba      	ldr	r2, [r7, #8]
 80031be:	609a      	str	r2, [r3, #8]
      break;
 80031c0:	e052      	b.n	8003268 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6818      	ldr	r0, [r3, #0]
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	6899      	ldr	r1, [r3, #8]
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	685a      	ldr	r2, [r3, #4]
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	68db      	ldr	r3, [r3, #12]
 80031d2:	f000 f959 	bl	8003488 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	689a      	ldr	r2, [r3, #8]
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	2180      	movs	r1, #128	; 0x80
 80031e2:	01c9      	lsls	r1, r1, #7
 80031e4:	430a      	orrs	r2, r1
 80031e6:	609a      	str	r2, [r3, #8]
      break;
 80031e8:	e03e      	b.n	8003268 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6818      	ldr	r0, [r3, #0]
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	6859      	ldr	r1, [r3, #4]
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	68db      	ldr	r3, [r3, #12]
 80031f6:	001a      	movs	r2, r3
 80031f8:	f000 f8ca 	bl	8003390 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	2150      	movs	r1, #80	; 0x50
 8003202:	0018      	movs	r0, r3
 8003204:	f000 f924 	bl	8003450 <TIM_ITRx_SetConfig>
      break;
 8003208:	e02e      	b.n	8003268 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6818      	ldr	r0, [r3, #0]
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	6859      	ldr	r1, [r3, #4]
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	68db      	ldr	r3, [r3, #12]
 8003216:	001a      	movs	r2, r3
 8003218:	f000 f8e8 	bl	80033ec <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	2160      	movs	r1, #96	; 0x60
 8003222:	0018      	movs	r0, r3
 8003224:	f000 f914 	bl	8003450 <TIM_ITRx_SetConfig>
      break;
 8003228:	e01e      	b.n	8003268 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6818      	ldr	r0, [r3, #0]
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	6859      	ldr	r1, [r3, #4]
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	68db      	ldr	r3, [r3, #12]
 8003236:	001a      	movs	r2, r3
 8003238:	f000 f8aa 	bl	8003390 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	2140      	movs	r1, #64	; 0x40
 8003242:	0018      	movs	r0, r3
 8003244:	f000 f904 	bl	8003450 <TIM_ITRx_SetConfig>
      break;
 8003248:	e00e      	b.n	8003268 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681a      	ldr	r2, [r3, #0]
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	0019      	movs	r1, r3
 8003254:	0010      	movs	r0, r2
 8003256:	f000 f8fb 	bl	8003450 <TIM_ITRx_SetConfig>
      break;
 800325a:	e005      	b.n	8003268 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 800325c:	230f      	movs	r3, #15
 800325e:	18fb      	adds	r3, r7, r3
 8003260:	2201      	movs	r2, #1
 8003262:	701a      	strb	r2, [r3, #0]
      break;
 8003264:	e000      	b.n	8003268 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8003266:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	223d      	movs	r2, #61	; 0x3d
 800326c:	2101      	movs	r1, #1
 800326e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	223c      	movs	r2, #60	; 0x3c
 8003274:	2100      	movs	r1, #0
 8003276:	5499      	strb	r1, [r3, r2]

  return status;
 8003278:	230f      	movs	r3, #15
 800327a:	18fb      	adds	r3, r7, r3
 800327c:	781b      	ldrb	r3, [r3, #0]
}
 800327e:	0018      	movs	r0, r3
 8003280:	46bd      	mov	sp, r7
 8003282:	b004      	add	sp, #16
 8003284:	bd80      	pop	{r7, pc}
 8003286:	46c0      	nop			; (mov r8, r8)
 8003288:	ffceff88 	.word	0xffceff88
 800328c:	ffff00ff 	.word	0xffff00ff

08003290 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b084      	sub	sp, #16
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
 8003298:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	4a34      	ldr	r2, [pc, #208]	; (8003374 <TIM_Base_SetConfig+0xe4>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d008      	beq.n	80032ba <TIM_Base_SetConfig+0x2a>
 80032a8:	687a      	ldr	r2, [r7, #4]
 80032aa:	2380      	movs	r3, #128	; 0x80
 80032ac:	05db      	lsls	r3, r3, #23
 80032ae:	429a      	cmp	r2, r3
 80032b0:	d003      	beq.n	80032ba <TIM_Base_SetConfig+0x2a>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	4a30      	ldr	r2, [pc, #192]	; (8003378 <TIM_Base_SetConfig+0xe8>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d108      	bne.n	80032cc <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	2270      	movs	r2, #112	; 0x70
 80032be:	4393      	bics	r3, r2
 80032c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	68fa      	ldr	r2, [r7, #12]
 80032c8:	4313      	orrs	r3, r2
 80032ca:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	4a29      	ldr	r2, [pc, #164]	; (8003374 <TIM_Base_SetConfig+0xe4>)
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d018      	beq.n	8003306 <TIM_Base_SetConfig+0x76>
 80032d4:	687a      	ldr	r2, [r7, #4]
 80032d6:	2380      	movs	r3, #128	; 0x80
 80032d8:	05db      	lsls	r3, r3, #23
 80032da:	429a      	cmp	r2, r3
 80032dc:	d013      	beq.n	8003306 <TIM_Base_SetConfig+0x76>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	4a25      	ldr	r2, [pc, #148]	; (8003378 <TIM_Base_SetConfig+0xe8>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d00f      	beq.n	8003306 <TIM_Base_SetConfig+0x76>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	4a24      	ldr	r2, [pc, #144]	; (800337c <TIM_Base_SetConfig+0xec>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d00b      	beq.n	8003306 <TIM_Base_SetConfig+0x76>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	4a23      	ldr	r2, [pc, #140]	; (8003380 <TIM_Base_SetConfig+0xf0>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d007      	beq.n	8003306 <TIM_Base_SetConfig+0x76>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	4a22      	ldr	r2, [pc, #136]	; (8003384 <TIM_Base_SetConfig+0xf4>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d003      	beq.n	8003306 <TIM_Base_SetConfig+0x76>
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	4a21      	ldr	r2, [pc, #132]	; (8003388 <TIM_Base_SetConfig+0xf8>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d108      	bne.n	8003318 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	4a20      	ldr	r2, [pc, #128]	; (800338c <TIM_Base_SetConfig+0xfc>)
 800330a:	4013      	ands	r3, r2
 800330c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	68db      	ldr	r3, [r3, #12]
 8003312:	68fa      	ldr	r2, [r7, #12]
 8003314:	4313      	orrs	r3, r2
 8003316:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	2280      	movs	r2, #128	; 0x80
 800331c:	4393      	bics	r3, r2
 800331e:	001a      	movs	r2, r3
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	695b      	ldr	r3, [r3, #20]
 8003324:	4313      	orrs	r3, r2
 8003326:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	68fa      	ldr	r2, [r7, #12]
 800332c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	689a      	ldr	r2, [r3, #8]
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	681a      	ldr	r2, [r3, #0]
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	4a0c      	ldr	r2, [pc, #48]	; (8003374 <TIM_Base_SetConfig+0xe4>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d00b      	beq.n	800335e <TIM_Base_SetConfig+0xce>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	4a0d      	ldr	r2, [pc, #52]	; (8003380 <TIM_Base_SetConfig+0xf0>)
 800334a:	4293      	cmp	r3, r2
 800334c:	d007      	beq.n	800335e <TIM_Base_SetConfig+0xce>
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	4a0c      	ldr	r2, [pc, #48]	; (8003384 <TIM_Base_SetConfig+0xf4>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d003      	beq.n	800335e <TIM_Base_SetConfig+0xce>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	4a0b      	ldr	r2, [pc, #44]	; (8003388 <TIM_Base_SetConfig+0xf8>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d103      	bne.n	8003366 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	691a      	ldr	r2, [r3, #16]
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2201      	movs	r2, #1
 800336a:	615a      	str	r2, [r3, #20]
}
 800336c:	46c0      	nop			; (mov r8, r8)
 800336e:	46bd      	mov	sp, r7
 8003370:	b004      	add	sp, #16
 8003372:	bd80      	pop	{r7, pc}
 8003374:	40012c00 	.word	0x40012c00
 8003378:	40000400 	.word	0x40000400
 800337c:	40002000 	.word	0x40002000
 8003380:	40014000 	.word	0x40014000
 8003384:	40014400 	.word	0x40014400
 8003388:	40014800 	.word	0x40014800
 800338c:	fffffcff 	.word	0xfffffcff

08003390 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b086      	sub	sp, #24
 8003394:	af00      	add	r7, sp, #0
 8003396:	60f8      	str	r0, [r7, #12]
 8003398:	60b9      	str	r1, [r7, #8]
 800339a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	6a1b      	ldr	r3, [r3, #32]
 80033a0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	6a1b      	ldr	r3, [r3, #32]
 80033a6:	2201      	movs	r2, #1
 80033a8:	4393      	bics	r3, r2
 80033aa:	001a      	movs	r2, r3
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	699b      	ldr	r3, [r3, #24]
 80033b4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80033b6:	693b      	ldr	r3, [r7, #16]
 80033b8:	22f0      	movs	r2, #240	; 0xf0
 80033ba:	4393      	bics	r3, r2
 80033bc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	011b      	lsls	r3, r3, #4
 80033c2:	693a      	ldr	r2, [r7, #16]
 80033c4:	4313      	orrs	r3, r2
 80033c6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80033c8:	697b      	ldr	r3, [r7, #20]
 80033ca:	220a      	movs	r2, #10
 80033cc:	4393      	bics	r3, r2
 80033ce:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80033d0:	697a      	ldr	r2, [r7, #20]
 80033d2:	68bb      	ldr	r3, [r7, #8]
 80033d4:	4313      	orrs	r3, r2
 80033d6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	693a      	ldr	r2, [r7, #16]
 80033dc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	697a      	ldr	r2, [r7, #20]
 80033e2:	621a      	str	r2, [r3, #32]
}
 80033e4:	46c0      	nop			; (mov r8, r8)
 80033e6:	46bd      	mov	sp, r7
 80033e8:	b006      	add	sp, #24
 80033ea:	bd80      	pop	{r7, pc}

080033ec <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b086      	sub	sp, #24
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	60f8      	str	r0, [r7, #12]
 80033f4:	60b9      	str	r1, [r7, #8]
 80033f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	6a1b      	ldr	r3, [r3, #32]
 80033fc:	2210      	movs	r2, #16
 80033fe:	4393      	bics	r3, r2
 8003400:	001a      	movs	r2, r3
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	699b      	ldr	r3, [r3, #24]
 800340a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	6a1b      	ldr	r3, [r3, #32]
 8003410:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003412:	697b      	ldr	r3, [r7, #20]
 8003414:	4a0d      	ldr	r2, [pc, #52]	; (800344c <TIM_TI2_ConfigInputStage+0x60>)
 8003416:	4013      	ands	r3, r2
 8003418:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	031b      	lsls	r3, r3, #12
 800341e:	697a      	ldr	r2, [r7, #20]
 8003420:	4313      	orrs	r3, r2
 8003422:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003424:	693b      	ldr	r3, [r7, #16]
 8003426:	22a0      	movs	r2, #160	; 0xa0
 8003428:	4393      	bics	r3, r2
 800342a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800342c:	68bb      	ldr	r3, [r7, #8]
 800342e:	011b      	lsls	r3, r3, #4
 8003430:	693a      	ldr	r2, [r7, #16]
 8003432:	4313      	orrs	r3, r2
 8003434:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	697a      	ldr	r2, [r7, #20]
 800343a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	693a      	ldr	r2, [r7, #16]
 8003440:	621a      	str	r2, [r3, #32]
}
 8003442:	46c0      	nop			; (mov r8, r8)
 8003444:	46bd      	mov	sp, r7
 8003446:	b006      	add	sp, #24
 8003448:	bd80      	pop	{r7, pc}
 800344a:	46c0      	nop			; (mov r8, r8)
 800344c:	ffff0fff 	.word	0xffff0fff

08003450 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b084      	sub	sp, #16
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
 8003458:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	689b      	ldr	r3, [r3, #8]
 800345e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	4a08      	ldr	r2, [pc, #32]	; (8003484 <TIM_ITRx_SetConfig+0x34>)
 8003464:	4013      	ands	r3, r2
 8003466:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003468:	683a      	ldr	r2, [r7, #0]
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	4313      	orrs	r3, r2
 800346e:	2207      	movs	r2, #7
 8003470:	4313      	orrs	r3, r2
 8003472:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	68fa      	ldr	r2, [r7, #12]
 8003478:	609a      	str	r2, [r3, #8]
}
 800347a:	46c0      	nop			; (mov r8, r8)
 800347c:	46bd      	mov	sp, r7
 800347e:	b004      	add	sp, #16
 8003480:	bd80      	pop	{r7, pc}
 8003482:	46c0      	nop			; (mov r8, r8)
 8003484:	ffcfff8f 	.word	0xffcfff8f

08003488 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b086      	sub	sp, #24
 800348c:	af00      	add	r7, sp, #0
 800348e:	60f8      	str	r0, [r7, #12]
 8003490:	60b9      	str	r1, [r7, #8]
 8003492:	607a      	str	r2, [r7, #4]
 8003494:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	689b      	ldr	r3, [r3, #8]
 800349a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800349c:	697b      	ldr	r3, [r7, #20]
 800349e:	4a09      	ldr	r2, [pc, #36]	; (80034c4 <TIM_ETR_SetConfig+0x3c>)
 80034a0:	4013      	ands	r3, r2
 80034a2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	021a      	lsls	r2, r3, #8
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	431a      	orrs	r2, r3
 80034ac:	68bb      	ldr	r3, [r7, #8]
 80034ae:	4313      	orrs	r3, r2
 80034b0:	697a      	ldr	r2, [r7, #20]
 80034b2:	4313      	orrs	r3, r2
 80034b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	697a      	ldr	r2, [r7, #20]
 80034ba:	609a      	str	r2, [r3, #8]
}
 80034bc:	46c0      	nop			; (mov r8, r8)
 80034be:	46bd      	mov	sp, r7
 80034c0:	b006      	add	sp, #24
 80034c2:	bd80      	pop	{r7, pc}
 80034c4:	ffff00ff 	.word	0xffff00ff

080034c8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b084      	sub	sp, #16
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
 80034d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	223c      	movs	r2, #60	; 0x3c
 80034d6:	5c9b      	ldrb	r3, [r3, r2]
 80034d8:	2b01      	cmp	r3, #1
 80034da:	d101      	bne.n	80034e0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80034dc:	2302      	movs	r3, #2
 80034de:	e055      	b.n	800358c <HAL_TIMEx_MasterConfigSynchronization+0xc4>
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	223c      	movs	r2, #60	; 0x3c
 80034e4:	2101      	movs	r1, #1
 80034e6:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	223d      	movs	r2, #61	; 0x3d
 80034ec:	2102      	movs	r1, #2
 80034ee:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	689b      	ldr	r3, [r3, #8]
 80034fe:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4a23      	ldr	r2, [pc, #140]	; (8003594 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d108      	bne.n	800351c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	4a22      	ldr	r2, [pc, #136]	; (8003598 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800350e:	4013      	ands	r3, r2
 8003510:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	685b      	ldr	r3, [r3, #4]
 8003516:	68fa      	ldr	r2, [r7, #12]
 8003518:	4313      	orrs	r3, r2
 800351a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	2270      	movs	r2, #112	; 0x70
 8003520:	4393      	bics	r3, r2
 8003522:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	68fa      	ldr	r2, [r7, #12]
 800352a:	4313      	orrs	r3, r2
 800352c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	68fa      	ldr	r2, [r7, #12]
 8003534:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4a16      	ldr	r2, [pc, #88]	; (8003594 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800353c:	4293      	cmp	r3, r2
 800353e:	d00f      	beq.n	8003560 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681a      	ldr	r2, [r3, #0]
 8003544:	2380      	movs	r3, #128	; 0x80
 8003546:	05db      	lsls	r3, r3, #23
 8003548:	429a      	cmp	r2, r3
 800354a:	d009      	beq.n	8003560 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4a12      	ldr	r2, [pc, #72]	; (800359c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d004      	beq.n	8003560 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4a11      	ldr	r2, [pc, #68]	; (80035a0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800355c:	4293      	cmp	r3, r2
 800355e:	d10c      	bne.n	800357a <HAL_TIMEx_MasterConfigSynchronization+0xb2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003560:	68bb      	ldr	r3, [r7, #8]
 8003562:	2280      	movs	r2, #128	; 0x80
 8003564:	4393      	bics	r3, r2
 8003566:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	689b      	ldr	r3, [r3, #8]
 800356c:	68ba      	ldr	r2, [r7, #8]
 800356e:	4313      	orrs	r3, r2
 8003570:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	68ba      	ldr	r2, [r7, #8]
 8003578:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	223d      	movs	r2, #61	; 0x3d
 800357e:	2101      	movs	r1, #1
 8003580:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	223c      	movs	r2, #60	; 0x3c
 8003586:	2100      	movs	r1, #0
 8003588:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800358a:	2300      	movs	r3, #0
}
 800358c:	0018      	movs	r0, r3
 800358e:	46bd      	mov	sp, r7
 8003590:	b004      	add	sp, #16
 8003592:	bd80      	pop	{r7, pc}
 8003594:	40012c00 	.word	0x40012c00
 8003598:	ff0fffff 	.word	0xff0fffff
 800359c:	40000400 	.word	0x40000400
 80035a0:	40014000 	.word	0x40014000

080035a4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b082      	sub	sp, #8
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d101      	bne.n	80035b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80035b2:	2301      	movs	r3, #1
 80035b4:	e046      	b.n	8003644 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2284      	movs	r2, #132	; 0x84
 80035ba:	589b      	ldr	r3, [r3, r2]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d107      	bne.n	80035d0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2280      	movs	r2, #128	; 0x80
 80035c4:	2100      	movs	r1, #0
 80035c6:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	0018      	movs	r0, r3
 80035cc:	f7fd fd1e 	bl	800100c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2284      	movs	r2, #132	; 0x84
 80035d4:	2124      	movs	r1, #36	; 0x24
 80035d6:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	681a      	ldr	r2, [r3, #0]
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	2101      	movs	r1, #1
 80035e4:	438a      	bics	r2, r1
 80035e6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	0018      	movs	r0, r3
 80035ec:	f000 f830 	bl	8003650 <UART_SetConfig>
 80035f0:	0003      	movs	r3, r0
 80035f2:	2b01      	cmp	r3, #1
 80035f4:	d101      	bne.n	80035fa <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 80035f6:	2301      	movs	r3, #1
 80035f8:	e024      	b.n	8003644 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d003      	beq.n	800360a <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	0018      	movs	r0, r3
 8003606:	f000 fae1 	bl	8003bcc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	685a      	ldr	r2, [r3, #4]
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	490d      	ldr	r1, [pc, #52]	; (800364c <HAL_UART_Init+0xa8>)
 8003616:	400a      	ands	r2, r1
 8003618:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	689a      	ldr	r2, [r3, #8]
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	212a      	movs	r1, #42	; 0x2a
 8003626:	438a      	bics	r2, r1
 8003628:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	681a      	ldr	r2, [r3, #0]
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	2101      	movs	r1, #1
 8003636:	430a      	orrs	r2, r1
 8003638:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	0018      	movs	r0, r3
 800363e:	f000 fb79 	bl	8003d34 <UART_CheckIdleState>
 8003642:	0003      	movs	r3, r0
}
 8003644:	0018      	movs	r0, r3
 8003646:	46bd      	mov	sp, r7
 8003648:	b002      	add	sp, #8
 800364a:	bd80      	pop	{r7, pc}
 800364c:	ffffb7ff 	.word	0xffffb7ff

08003650 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003650:	b5b0      	push	{r4, r5, r7, lr}
 8003652:	b090      	sub	sp, #64	; 0x40
 8003654:	af00      	add	r7, sp, #0
 8003656:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003658:	231a      	movs	r3, #26
 800365a:	2220      	movs	r2, #32
 800365c:	189b      	adds	r3, r3, r2
 800365e:	19db      	adds	r3, r3, r7
 8003660:	2200      	movs	r2, #0
 8003662:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003666:	689a      	ldr	r2, [r3, #8]
 8003668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800366a:	691b      	ldr	r3, [r3, #16]
 800366c:	431a      	orrs	r2, r3
 800366e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003670:	695b      	ldr	r3, [r3, #20]
 8003672:	431a      	orrs	r2, r3
 8003674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003676:	69db      	ldr	r3, [r3, #28]
 8003678:	4313      	orrs	r3, r2
 800367a:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800367c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4aaf      	ldr	r2, [pc, #700]	; (8003940 <UART_SetConfig+0x2f0>)
 8003684:	4013      	ands	r3, r2
 8003686:	0019      	movs	r1, r3
 8003688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800368a:	681a      	ldr	r2, [r3, #0]
 800368c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800368e:	430b      	orrs	r3, r1
 8003690:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	685b      	ldr	r3, [r3, #4]
 8003698:	4aaa      	ldr	r2, [pc, #680]	; (8003944 <UART_SetConfig+0x2f4>)
 800369a:	4013      	ands	r3, r2
 800369c:	0018      	movs	r0, r3
 800369e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036a0:	68d9      	ldr	r1, [r3, #12]
 80036a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036a4:	681a      	ldr	r2, [r3, #0]
 80036a6:	0003      	movs	r3, r0
 80036a8:	430b      	orrs	r3, r1
 80036aa:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80036ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ae:	699b      	ldr	r3, [r3, #24]
 80036b0:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80036b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	4aa4      	ldr	r2, [pc, #656]	; (8003948 <UART_SetConfig+0x2f8>)
 80036b8:	4293      	cmp	r3, r2
 80036ba:	d004      	beq.n	80036c6 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80036bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036be:	6a1b      	ldr	r3, [r3, #32]
 80036c0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80036c2:	4313      	orrs	r3, r2
 80036c4:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80036c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	689b      	ldr	r3, [r3, #8]
 80036cc:	4a9f      	ldr	r2, [pc, #636]	; (800394c <UART_SetConfig+0x2fc>)
 80036ce:	4013      	ands	r3, r2
 80036d0:	0019      	movs	r1, r3
 80036d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036d4:	681a      	ldr	r2, [r3, #0]
 80036d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036d8:	430b      	orrs	r3, r1
 80036da:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80036dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036e2:	220f      	movs	r2, #15
 80036e4:	4393      	bics	r3, r2
 80036e6:	0018      	movs	r0, r3
 80036e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ea:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80036ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ee:	681a      	ldr	r2, [r3, #0]
 80036f0:	0003      	movs	r3, r0
 80036f2:	430b      	orrs	r3, r1
 80036f4:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80036f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4a95      	ldr	r2, [pc, #596]	; (8003950 <UART_SetConfig+0x300>)
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d131      	bne.n	8003764 <UART_SetConfig+0x114>
 8003700:	4b94      	ldr	r3, [pc, #592]	; (8003954 <UART_SetConfig+0x304>)
 8003702:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003704:	2203      	movs	r2, #3
 8003706:	4013      	ands	r3, r2
 8003708:	2b03      	cmp	r3, #3
 800370a:	d01d      	beq.n	8003748 <UART_SetConfig+0xf8>
 800370c:	d823      	bhi.n	8003756 <UART_SetConfig+0x106>
 800370e:	2b02      	cmp	r3, #2
 8003710:	d00c      	beq.n	800372c <UART_SetConfig+0xdc>
 8003712:	d820      	bhi.n	8003756 <UART_SetConfig+0x106>
 8003714:	2b00      	cmp	r3, #0
 8003716:	d002      	beq.n	800371e <UART_SetConfig+0xce>
 8003718:	2b01      	cmp	r3, #1
 800371a:	d00e      	beq.n	800373a <UART_SetConfig+0xea>
 800371c:	e01b      	b.n	8003756 <UART_SetConfig+0x106>
 800371e:	231b      	movs	r3, #27
 8003720:	2220      	movs	r2, #32
 8003722:	189b      	adds	r3, r3, r2
 8003724:	19db      	adds	r3, r3, r7
 8003726:	2200      	movs	r2, #0
 8003728:	701a      	strb	r2, [r3, #0]
 800372a:	e0b4      	b.n	8003896 <UART_SetConfig+0x246>
 800372c:	231b      	movs	r3, #27
 800372e:	2220      	movs	r2, #32
 8003730:	189b      	adds	r3, r3, r2
 8003732:	19db      	adds	r3, r3, r7
 8003734:	2202      	movs	r2, #2
 8003736:	701a      	strb	r2, [r3, #0]
 8003738:	e0ad      	b.n	8003896 <UART_SetConfig+0x246>
 800373a:	231b      	movs	r3, #27
 800373c:	2220      	movs	r2, #32
 800373e:	189b      	adds	r3, r3, r2
 8003740:	19db      	adds	r3, r3, r7
 8003742:	2204      	movs	r2, #4
 8003744:	701a      	strb	r2, [r3, #0]
 8003746:	e0a6      	b.n	8003896 <UART_SetConfig+0x246>
 8003748:	231b      	movs	r3, #27
 800374a:	2220      	movs	r2, #32
 800374c:	189b      	adds	r3, r3, r2
 800374e:	19db      	adds	r3, r3, r7
 8003750:	2208      	movs	r2, #8
 8003752:	701a      	strb	r2, [r3, #0]
 8003754:	e09f      	b.n	8003896 <UART_SetConfig+0x246>
 8003756:	231b      	movs	r3, #27
 8003758:	2220      	movs	r2, #32
 800375a:	189b      	adds	r3, r3, r2
 800375c:	19db      	adds	r3, r3, r7
 800375e:	2210      	movs	r2, #16
 8003760:	701a      	strb	r2, [r3, #0]
 8003762:	e098      	b.n	8003896 <UART_SetConfig+0x246>
 8003764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	4a7b      	ldr	r2, [pc, #492]	; (8003958 <UART_SetConfig+0x308>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d131      	bne.n	80037d2 <UART_SetConfig+0x182>
 800376e:	4b79      	ldr	r3, [pc, #484]	; (8003954 <UART_SetConfig+0x304>)
 8003770:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003772:	220c      	movs	r2, #12
 8003774:	4013      	ands	r3, r2
 8003776:	2b0c      	cmp	r3, #12
 8003778:	d01d      	beq.n	80037b6 <UART_SetConfig+0x166>
 800377a:	d823      	bhi.n	80037c4 <UART_SetConfig+0x174>
 800377c:	2b08      	cmp	r3, #8
 800377e:	d00c      	beq.n	800379a <UART_SetConfig+0x14a>
 8003780:	d820      	bhi.n	80037c4 <UART_SetConfig+0x174>
 8003782:	2b00      	cmp	r3, #0
 8003784:	d002      	beq.n	800378c <UART_SetConfig+0x13c>
 8003786:	2b04      	cmp	r3, #4
 8003788:	d00e      	beq.n	80037a8 <UART_SetConfig+0x158>
 800378a:	e01b      	b.n	80037c4 <UART_SetConfig+0x174>
 800378c:	231b      	movs	r3, #27
 800378e:	2220      	movs	r2, #32
 8003790:	189b      	adds	r3, r3, r2
 8003792:	19db      	adds	r3, r3, r7
 8003794:	2200      	movs	r2, #0
 8003796:	701a      	strb	r2, [r3, #0]
 8003798:	e07d      	b.n	8003896 <UART_SetConfig+0x246>
 800379a:	231b      	movs	r3, #27
 800379c:	2220      	movs	r2, #32
 800379e:	189b      	adds	r3, r3, r2
 80037a0:	19db      	adds	r3, r3, r7
 80037a2:	2202      	movs	r2, #2
 80037a4:	701a      	strb	r2, [r3, #0]
 80037a6:	e076      	b.n	8003896 <UART_SetConfig+0x246>
 80037a8:	231b      	movs	r3, #27
 80037aa:	2220      	movs	r2, #32
 80037ac:	189b      	adds	r3, r3, r2
 80037ae:	19db      	adds	r3, r3, r7
 80037b0:	2204      	movs	r2, #4
 80037b2:	701a      	strb	r2, [r3, #0]
 80037b4:	e06f      	b.n	8003896 <UART_SetConfig+0x246>
 80037b6:	231b      	movs	r3, #27
 80037b8:	2220      	movs	r2, #32
 80037ba:	189b      	adds	r3, r3, r2
 80037bc:	19db      	adds	r3, r3, r7
 80037be:	2208      	movs	r2, #8
 80037c0:	701a      	strb	r2, [r3, #0]
 80037c2:	e068      	b.n	8003896 <UART_SetConfig+0x246>
 80037c4:	231b      	movs	r3, #27
 80037c6:	2220      	movs	r2, #32
 80037c8:	189b      	adds	r3, r3, r2
 80037ca:	19db      	adds	r3, r3, r7
 80037cc:	2210      	movs	r2, #16
 80037ce:	701a      	strb	r2, [r3, #0]
 80037d0:	e061      	b.n	8003896 <UART_SetConfig+0x246>
 80037d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	4a61      	ldr	r2, [pc, #388]	; (800395c <UART_SetConfig+0x30c>)
 80037d8:	4293      	cmp	r3, r2
 80037da:	d106      	bne.n	80037ea <UART_SetConfig+0x19a>
 80037dc:	231b      	movs	r3, #27
 80037de:	2220      	movs	r2, #32
 80037e0:	189b      	adds	r3, r3, r2
 80037e2:	19db      	adds	r3, r3, r7
 80037e4:	2200      	movs	r2, #0
 80037e6:	701a      	strb	r2, [r3, #0]
 80037e8:	e055      	b.n	8003896 <UART_SetConfig+0x246>
 80037ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4a5c      	ldr	r2, [pc, #368]	; (8003960 <UART_SetConfig+0x310>)
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d106      	bne.n	8003802 <UART_SetConfig+0x1b2>
 80037f4:	231b      	movs	r3, #27
 80037f6:	2220      	movs	r2, #32
 80037f8:	189b      	adds	r3, r3, r2
 80037fa:	19db      	adds	r3, r3, r7
 80037fc:	2200      	movs	r2, #0
 80037fe:	701a      	strb	r2, [r3, #0]
 8003800:	e049      	b.n	8003896 <UART_SetConfig+0x246>
 8003802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	4a50      	ldr	r2, [pc, #320]	; (8003948 <UART_SetConfig+0x2f8>)
 8003808:	4293      	cmp	r3, r2
 800380a:	d13e      	bne.n	800388a <UART_SetConfig+0x23a>
 800380c:	4b51      	ldr	r3, [pc, #324]	; (8003954 <UART_SetConfig+0x304>)
 800380e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003810:	23c0      	movs	r3, #192	; 0xc0
 8003812:	011b      	lsls	r3, r3, #4
 8003814:	4013      	ands	r3, r2
 8003816:	22c0      	movs	r2, #192	; 0xc0
 8003818:	0112      	lsls	r2, r2, #4
 800381a:	4293      	cmp	r3, r2
 800381c:	d027      	beq.n	800386e <UART_SetConfig+0x21e>
 800381e:	22c0      	movs	r2, #192	; 0xc0
 8003820:	0112      	lsls	r2, r2, #4
 8003822:	4293      	cmp	r3, r2
 8003824:	d82a      	bhi.n	800387c <UART_SetConfig+0x22c>
 8003826:	2280      	movs	r2, #128	; 0x80
 8003828:	0112      	lsls	r2, r2, #4
 800382a:	4293      	cmp	r3, r2
 800382c:	d011      	beq.n	8003852 <UART_SetConfig+0x202>
 800382e:	2280      	movs	r2, #128	; 0x80
 8003830:	0112      	lsls	r2, r2, #4
 8003832:	4293      	cmp	r3, r2
 8003834:	d822      	bhi.n	800387c <UART_SetConfig+0x22c>
 8003836:	2b00      	cmp	r3, #0
 8003838:	d004      	beq.n	8003844 <UART_SetConfig+0x1f4>
 800383a:	2280      	movs	r2, #128	; 0x80
 800383c:	00d2      	lsls	r2, r2, #3
 800383e:	4293      	cmp	r3, r2
 8003840:	d00e      	beq.n	8003860 <UART_SetConfig+0x210>
 8003842:	e01b      	b.n	800387c <UART_SetConfig+0x22c>
 8003844:	231b      	movs	r3, #27
 8003846:	2220      	movs	r2, #32
 8003848:	189b      	adds	r3, r3, r2
 800384a:	19db      	adds	r3, r3, r7
 800384c:	2200      	movs	r2, #0
 800384e:	701a      	strb	r2, [r3, #0]
 8003850:	e021      	b.n	8003896 <UART_SetConfig+0x246>
 8003852:	231b      	movs	r3, #27
 8003854:	2220      	movs	r2, #32
 8003856:	189b      	adds	r3, r3, r2
 8003858:	19db      	adds	r3, r3, r7
 800385a:	2202      	movs	r2, #2
 800385c:	701a      	strb	r2, [r3, #0]
 800385e:	e01a      	b.n	8003896 <UART_SetConfig+0x246>
 8003860:	231b      	movs	r3, #27
 8003862:	2220      	movs	r2, #32
 8003864:	189b      	adds	r3, r3, r2
 8003866:	19db      	adds	r3, r3, r7
 8003868:	2204      	movs	r2, #4
 800386a:	701a      	strb	r2, [r3, #0]
 800386c:	e013      	b.n	8003896 <UART_SetConfig+0x246>
 800386e:	231b      	movs	r3, #27
 8003870:	2220      	movs	r2, #32
 8003872:	189b      	adds	r3, r3, r2
 8003874:	19db      	adds	r3, r3, r7
 8003876:	2208      	movs	r2, #8
 8003878:	701a      	strb	r2, [r3, #0]
 800387a:	e00c      	b.n	8003896 <UART_SetConfig+0x246>
 800387c:	231b      	movs	r3, #27
 800387e:	2220      	movs	r2, #32
 8003880:	189b      	adds	r3, r3, r2
 8003882:	19db      	adds	r3, r3, r7
 8003884:	2210      	movs	r2, #16
 8003886:	701a      	strb	r2, [r3, #0]
 8003888:	e005      	b.n	8003896 <UART_SetConfig+0x246>
 800388a:	231b      	movs	r3, #27
 800388c:	2220      	movs	r2, #32
 800388e:	189b      	adds	r3, r3, r2
 8003890:	19db      	adds	r3, r3, r7
 8003892:	2210      	movs	r2, #16
 8003894:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4a2b      	ldr	r2, [pc, #172]	; (8003948 <UART_SetConfig+0x2f8>)
 800389c:	4293      	cmp	r3, r2
 800389e:	d000      	beq.n	80038a2 <UART_SetConfig+0x252>
 80038a0:	e0a9      	b.n	80039f6 <UART_SetConfig+0x3a6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80038a2:	231b      	movs	r3, #27
 80038a4:	2220      	movs	r2, #32
 80038a6:	189b      	adds	r3, r3, r2
 80038a8:	19db      	adds	r3, r3, r7
 80038aa:	781b      	ldrb	r3, [r3, #0]
 80038ac:	2b08      	cmp	r3, #8
 80038ae:	d015      	beq.n	80038dc <UART_SetConfig+0x28c>
 80038b0:	dc18      	bgt.n	80038e4 <UART_SetConfig+0x294>
 80038b2:	2b04      	cmp	r3, #4
 80038b4:	d00d      	beq.n	80038d2 <UART_SetConfig+0x282>
 80038b6:	dc15      	bgt.n	80038e4 <UART_SetConfig+0x294>
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d002      	beq.n	80038c2 <UART_SetConfig+0x272>
 80038bc:	2b02      	cmp	r3, #2
 80038be:	d005      	beq.n	80038cc <UART_SetConfig+0x27c>
 80038c0:	e010      	b.n	80038e4 <UART_SetConfig+0x294>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80038c2:	f7fe fccd 	bl	8002260 <HAL_RCC_GetPCLK1Freq>
 80038c6:	0003      	movs	r3, r0
 80038c8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80038ca:	e014      	b.n	80038f6 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80038cc:	4b25      	ldr	r3, [pc, #148]	; (8003964 <UART_SetConfig+0x314>)
 80038ce:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80038d0:	e011      	b.n	80038f6 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80038d2:	f7fe fc39 	bl	8002148 <HAL_RCC_GetSysClockFreq>
 80038d6:	0003      	movs	r3, r0
 80038d8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80038da:	e00c      	b.n	80038f6 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80038dc:	2380      	movs	r3, #128	; 0x80
 80038de:	021b      	lsls	r3, r3, #8
 80038e0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80038e2:	e008      	b.n	80038f6 <UART_SetConfig+0x2a6>
      default:
        pclk = 0U;
 80038e4:	2300      	movs	r3, #0
 80038e6:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80038e8:	231a      	movs	r3, #26
 80038ea:	2220      	movs	r2, #32
 80038ec:	189b      	adds	r3, r3, r2
 80038ee:	19db      	adds	r3, r3, r7
 80038f0:	2201      	movs	r2, #1
 80038f2:	701a      	strb	r2, [r3, #0]
        break;
 80038f4:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80038f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d100      	bne.n	80038fe <UART_SetConfig+0x2ae>
 80038fc:	e14b      	b.n	8003b96 <UART_SetConfig+0x546>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80038fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003900:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003902:	4b19      	ldr	r3, [pc, #100]	; (8003968 <UART_SetConfig+0x318>)
 8003904:	0052      	lsls	r2, r2, #1
 8003906:	5ad3      	ldrh	r3, [r2, r3]
 8003908:	0019      	movs	r1, r3
 800390a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800390c:	f7fc fc0c 	bl	8000128 <__udivsi3>
 8003910:	0003      	movs	r3, r0
 8003912:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003916:	685a      	ldr	r2, [r3, #4]
 8003918:	0013      	movs	r3, r2
 800391a:	005b      	lsls	r3, r3, #1
 800391c:	189b      	adds	r3, r3, r2
 800391e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003920:	429a      	cmp	r2, r3
 8003922:	d305      	bcc.n	8003930 <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003926:	685b      	ldr	r3, [r3, #4]
 8003928:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800392a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800392c:	429a      	cmp	r2, r3
 800392e:	d91d      	bls.n	800396c <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 8003930:	231a      	movs	r3, #26
 8003932:	2220      	movs	r2, #32
 8003934:	189b      	adds	r3, r3, r2
 8003936:	19db      	adds	r3, r3, r7
 8003938:	2201      	movs	r2, #1
 800393a:	701a      	strb	r2, [r3, #0]
 800393c:	e12b      	b.n	8003b96 <UART_SetConfig+0x546>
 800393e:	46c0      	nop			; (mov r8, r8)
 8003940:	cfff69f3 	.word	0xcfff69f3
 8003944:	ffffcfff 	.word	0xffffcfff
 8003948:	40008000 	.word	0x40008000
 800394c:	11fff4ff 	.word	0x11fff4ff
 8003950:	40013800 	.word	0x40013800
 8003954:	40021000 	.word	0x40021000
 8003958:	40004400 	.word	0x40004400
 800395c:	40004800 	.word	0x40004800
 8003960:	40004c00 	.word	0x40004c00
 8003964:	00f42400 	.word	0x00f42400
 8003968:	08006138 	.word	0x08006138
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800396c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800396e:	61bb      	str	r3, [r7, #24]
 8003970:	2300      	movs	r3, #0
 8003972:	61fb      	str	r3, [r7, #28]
 8003974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003976:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003978:	4b92      	ldr	r3, [pc, #584]	; (8003bc4 <UART_SetConfig+0x574>)
 800397a:	0052      	lsls	r2, r2, #1
 800397c:	5ad3      	ldrh	r3, [r2, r3]
 800397e:	613b      	str	r3, [r7, #16]
 8003980:	2300      	movs	r3, #0
 8003982:	617b      	str	r3, [r7, #20]
 8003984:	693a      	ldr	r2, [r7, #16]
 8003986:	697b      	ldr	r3, [r7, #20]
 8003988:	69b8      	ldr	r0, [r7, #24]
 800398a:	69f9      	ldr	r1, [r7, #28]
 800398c:	f7fc fd42 	bl	8000414 <__aeabi_uldivmod>
 8003990:	0002      	movs	r2, r0
 8003992:	000b      	movs	r3, r1
 8003994:	0e11      	lsrs	r1, r2, #24
 8003996:	021d      	lsls	r5, r3, #8
 8003998:	430d      	orrs	r5, r1
 800399a:	0214      	lsls	r4, r2, #8
 800399c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	085b      	lsrs	r3, r3, #1
 80039a2:	60bb      	str	r3, [r7, #8]
 80039a4:	2300      	movs	r3, #0
 80039a6:	60fb      	str	r3, [r7, #12]
 80039a8:	68b8      	ldr	r0, [r7, #8]
 80039aa:	68f9      	ldr	r1, [r7, #12]
 80039ac:	1900      	adds	r0, r0, r4
 80039ae:	4169      	adcs	r1, r5
 80039b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	603b      	str	r3, [r7, #0]
 80039b6:	2300      	movs	r3, #0
 80039b8:	607b      	str	r3, [r7, #4]
 80039ba:	683a      	ldr	r2, [r7, #0]
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	f7fc fd29 	bl	8000414 <__aeabi_uldivmod>
 80039c2:	0002      	movs	r2, r0
 80039c4:	000b      	movs	r3, r1
 80039c6:	0013      	movs	r3, r2
 80039c8:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80039ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80039cc:	23c0      	movs	r3, #192	; 0xc0
 80039ce:	009b      	lsls	r3, r3, #2
 80039d0:	429a      	cmp	r2, r3
 80039d2:	d309      	bcc.n	80039e8 <UART_SetConfig+0x398>
 80039d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80039d6:	2380      	movs	r3, #128	; 0x80
 80039d8:	035b      	lsls	r3, r3, #13
 80039da:	429a      	cmp	r2, r3
 80039dc:	d204      	bcs.n	80039e8 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 80039de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80039e4:	60da      	str	r2, [r3, #12]
 80039e6:	e0d6      	b.n	8003b96 <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 80039e8:	231a      	movs	r3, #26
 80039ea:	2220      	movs	r2, #32
 80039ec:	189b      	adds	r3, r3, r2
 80039ee:	19db      	adds	r3, r3, r7
 80039f0:	2201      	movs	r2, #1
 80039f2:	701a      	strb	r2, [r3, #0]
 80039f4:	e0cf      	b.n	8003b96 <UART_SetConfig+0x546>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80039f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039f8:	69da      	ldr	r2, [r3, #28]
 80039fa:	2380      	movs	r3, #128	; 0x80
 80039fc:	021b      	lsls	r3, r3, #8
 80039fe:	429a      	cmp	r2, r3
 8003a00:	d000      	beq.n	8003a04 <UART_SetConfig+0x3b4>
 8003a02:	e070      	b.n	8003ae6 <UART_SetConfig+0x496>
  {
    switch (clocksource)
 8003a04:	231b      	movs	r3, #27
 8003a06:	2220      	movs	r2, #32
 8003a08:	189b      	adds	r3, r3, r2
 8003a0a:	19db      	adds	r3, r3, r7
 8003a0c:	781b      	ldrb	r3, [r3, #0]
 8003a0e:	2b08      	cmp	r3, #8
 8003a10:	d015      	beq.n	8003a3e <UART_SetConfig+0x3ee>
 8003a12:	dc18      	bgt.n	8003a46 <UART_SetConfig+0x3f6>
 8003a14:	2b04      	cmp	r3, #4
 8003a16:	d00d      	beq.n	8003a34 <UART_SetConfig+0x3e4>
 8003a18:	dc15      	bgt.n	8003a46 <UART_SetConfig+0x3f6>
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d002      	beq.n	8003a24 <UART_SetConfig+0x3d4>
 8003a1e:	2b02      	cmp	r3, #2
 8003a20:	d005      	beq.n	8003a2e <UART_SetConfig+0x3de>
 8003a22:	e010      	b.n	8003a46 <UART_SetConfig+0x3f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003a24:	f7fe fc1c 	bl	8002260 <HAL_RCC_GetPCLK1Freq>
 8003a28:	0003      	movs	r3, r0
 8003a2a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003a2c:	e014      	b.n	8003a58 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003a2e:	4b66      	ldr	r3, [pc, #408]	; (8003bc8 <UART_SetConfig+0x578>)
 8003a30:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003a32:	e011      	b.n	8003a58 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003a34:	f7fe fb88 	bl	8002148 <HAL_RCC_GetSysClockFreq>
 8003a38:	0003      	movs	r3, r0
 8003a3a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003a3c:	e00c      	b.n	8003a58 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003a3e:	2380      	movs	r3, #128	; 0x80
 8003a40:	021b      	lsls	r3, r3, #8
 8003a42:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003a44:	e008      	b.n	8003a58 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8003a46:	2300      	movs	r3, #0
 8003a48:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8003a4a:	231a      	movs	r3, #26
 8003a4c:	2220      	movs	r2, #32
 8003a4e:	189b      	adds	r3, r3, r2
 8003a50:	19db      	adds	r3, r3, r7
 8003a52:	2201      	movs	r2, #1
 8003a54:	701a      	strb	r2, [r3, #0]
        break;
 8003a56:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003a58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d100      	bne.n	8003a60 <UART_SetConfig+0x410>
 8003a5e:	e09a      	b.n	8003b96 <UART_SetConfig+0x546>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a62:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003a64:	4b57      	ldr	r3, [pc, #348]	; (8003bc4 <UART_SetConfig+0x574>)
 8003a66:	0052      	lsls	r2, r2, #1
 8003a68:	5ad3      	ldrh	r3, [r2, r3]
 8003a6a:	0019      	movs	r1, r3
 8003a6c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003a6e:	f7fc fb5b 	bl	8000128 <__udivsi3>
 8003a72:	0003      	movs	r3, r0
 8003a74:	005a      	lsls	r2, r3, #1
 8003a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	085b      	lsrs	r3, r3, #1
 8003a7c:	18d2      	adds	r2, r2, r3
 8003a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a80:	685b      	ldr	r3, [r3, #4]
 8003a82:	0019      	movs	r1, r3
 8003a84:	0010      	movs	r0, r2
 8003a86:	f7fc fb4f 	bl	8000128 <__udivsi3>
 8003a8a:	0003      	movs	r3, r0
 8003a8c:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003a8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a90:	2b0f      	cmp	r3, #15
 8003a92:	d921      	bls.n	8003ad8 <UART_SetConfig+0x488>
 8003a94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a96:	2380      	movs	r3, #128	; 0x80
 8003a98:	025b      	lsls	r3, r3, #9
 8003a9a:	429a      	cmp	r2, r3
 8003a9c:	d21c      	bcs.n	8003ad8 <UART_SetConfig+0x488>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003a9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003aa0:	b29a      	uxth	r2, r3
 8003aa2:	200e      	movs	r0, #14
 8003aa4:	2420      	movs	r4, #32
 8003aa6:	1903      	adds	r3, r0, r4
 8003aa8:	19db      	adds	r3, r3, r7
 8003aaa:	210f      	movs	r1, #15
 8003aac:	438a      	bics	r2, r1
 8003aae:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003ab0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ab2:	085b      	lsrs	r3, r3, #1
 8003ab4:	b29b      	uxth	r3, r3
 8003ab6:	2207      	movs	r2, #7
 8003ab8:	4013      	ands	r3, r2
 8003aba:	b299      	uxth	r1, r3
 8003abc:	1903      	adds	r3, r0, r4
 8003abe:	19db      	adds	r3, r3, r7
 8003ac0:	1902      	adds	r2, r0, r4
 8003ac2:	19d2      	adds	r2, r2, r7
 8003ac4:	8812      	ldrh	r2, [r2, #0]
 8003ac6:	430a      	orrs	r2, r1
 8003ac8:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	1902      	adds	r2, r0, r4
 8003ad0:	19d2      	adds	r2, r2, r7
 8003ad2:	8812      	ldrh	r2, [r2, #0]
 8003ad4:	60da      	str	r2, [r3, #12]
 8003ad6:	e05e      	b.n	8003b96 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8003ad8:	231a      	movs	r3, #26
 8003ada:	2220      	movs	r2, #32
 8003adc:	189b      	adds	r3, r3, r2
 8003ade:	19db      	adds	r3, r3, r7
 8003ae0:	2201      	movs	r2, #1
 8003ae2:	701a      	strb	r2, [r3, #0]
 8003ae4:	e057      	b.n	8003b96 <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003ae6:	231b      	movs	r3, #27
 8003ae8:	2220      	movs	r2, #32
 8003aea:	189b      	adds	r3, r3, r2
 8003aec:	19db      	adds	r3, r3, r7
 8003aee:	781b      	ldrb	r3, [r3, #0]
 8003af0:	2b08      	cmp	r3, #8
 8003af2:	d015      	beq.n	8003b20 <UART_SetConfig+0x4d0>
 8003af4:	dc18      	bgt.n	8003b28 <UART_SetConfig+0x4d8>
 8003af6:	2b04      	cmp	r3, #4
 8003af8:	d00d      	beq.n	8003b16 <UART_SetConfig+0x4c6>
 8003afa:	dc15      	bgt.n	8003b28 <UART_SetConfig+0x4d8>
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d002      	beq.n	8003b06 <UART_SetConfig+0x4b6>
 8003b00:	2b02      	cmp	r3, #2
 8003b02:	d005      	beq.n	8003b10 <UART_SetConfig+0x4c0>
 8003b04:	e010      	b.n	8003b28 <UART_SetConfig+0x4d8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003b06:	f7fe fbab 	bl	8002260 <HAL_RCC_GetPCLK1Freq>
 8003b0a:	0003      	movs	r3, r0
 8003b0c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003b0e:	e014      	b.n	8003b3a <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003b10:	4b2d      	ldr	r3, [pc, #180]	; (8003bc8 <UART_SetConfig+0x578>)
 8003b12:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003b14:	e011      	b.n	8003b3a <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003b16:	f7fe fb17 	bl	8002148 <HAL_RCC_GetSysClockFreq>
 8003b1a:	0003      	movs	r3, r0
 8003b1c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003b1e:	e00c      	b.n	8003b3a <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003b20:	2380      	movs	r3, #128	; 0x80
 8003b22:	021b      	lsls	r3, r3, #8
 8003b24:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003b26:	e008      	b.n	8003b3a <UART_SetConfig+0x4ea>
      default:
        pclk = 0U;
 8003b28:	2300      	movs	r3, #0
 8003b2a:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8003b2c:	231a      	movs	r3, #26
 8003b2e:	2220      	movs	r2, #32
 8003b30:	189b      	adds	r3, r3, r2
 8003b32:	19db      	adds	r3, r3, r7
 8003b34:	2201      	movs	r2, #1
 8003b36:	701a      	strb	r2, [r3, #0]
        break;
 8003b38:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8003b3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d02a      	beq.n	8003b96 <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b42:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003b44:	4b1f      	ldr	r3, [pc, #124]	; (8003bc4 <UART_SetConfig+0x574>)
 8003b46:	0052      	lsls	r2, r2, #1
 8003b48:	5ad3      	ldrh	r3, [r2, r3]
 8003b4a:	0019      	movs	r1, r3
 8003b4c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003b4e:	f7fc faeb 	bl	8000128 <__udivsi3>
 8003b52:	0003      	movs	r3, r0
 8003b54:	001a      	movs	r2, r3
 8003b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	085b      	lsrs	r3, r3, #1
 8003b5c:	18d2      	adds	r2, r2, r3
 8003b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b60:	685b      	ldr	r3, [r3, #4]
 8003b62:	0019      	movs	r1, r3
 8003b64:	0010      	movs	r0, r2
 8003b66:	f7fc fadf 	bl	8000128 <__udivsi3>
 8003b6a:	0003      	movs	r3, r0
 8003b6c:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003b6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b70:	2b0f      	cmp	r3, #15
 8003b72:	d90a      	bls.n	8003b8a <UART_SetConfig+0x53a>
 8003b74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b76:	2380      	movs	r3, #128	; 0x80
 8003b78:	025b      	lsls	r3, r3, #9
 8003b7a:	429a      	cmp	r2, r3
 8003b7c:	d205      	bcs.n	8003b8a <UART_SetConfig+0x53a>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003b7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b80:	b29a      	uxth	r2, r3
 8003b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	60da      	str	r2, [r3, #12]
 8003b88:	e005      	b.n	8003b96 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8003b8a:	231a      	movs	r3, #26
 8003b8c:	2220      	movs	r2, #32
 8003b8e:	189b      	adds	r3, r3, r2
 8003b90:	19db      	adds	r3, r3, r7
 8003b92:	2201      	movs	r2, #1
 8003b94:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b98:	226a      	movs	r2, #106	; 0x6a
 8003b9a:	2101      	movs	r1, #1
 8003b9c:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8003b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ba0:	2268      	movs	r2, #104	; 0x68
 8003ba2:	2101      	movs	r1, #1
 8003ba4:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ba8:	2200      	movs	r2, #0
 8003baa:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8003bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bae:	2200      	movs	r2, #0
 8003bb0:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8003bb2:	231a      	movs	r3, #26
 8003bb4:	2220      	movs	r2, #32
 8003bb6:	189b      	adds	r3, r3, r2
 8003bb8:	19db      	adds	r3, r3, r7
 8003bba:	781b      	ldrb	r3, [r3, #0]
}
 8003bbc:	0018      	movs	r0, r3
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	b010      	add	sp, #64	; 0x40
 8003bc2:	bdb0      	pop	{r4, r5, r7, pc}
 8003bc4:	08006138 	.word	0x08006138
 8003bc8:	00f42400 	.word	0x00f42400

08003bcc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b082      	sub	sp, #8
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bd8:	2201      	movs	r2, #1
 8003bda:	4013      	ands	r3, r2
 8003bdc:	d00b      	beq.n	8003bf6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	685b      	ldr	r3, [r3, #4]
 8003be4:	4a4a      	ldr	r2, [pc, #296]	; (8003d10 <UART_AdvFeatureConfig+0x144>)
 8003be6:	4013      	ands	r3, r2
 8003be8:	0019      	movs	r1, r3
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	430a      	orrs	r2, r1
 8003bf4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bfa:	2202      	movs	r2, #2
 8003bfc:	4013      	ands	r3, r2
 8003bfe:	d00b      	beq.n	8003c18 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	685b      	ldr	r3, [r3, #4]
 8003c06:	4a43      	ldr	r2, [pc, #268]	; (8003d14 <UART_AdvFeatureConfig+0x148>)
 8003c08:	4013      	ands	r3, r2
 8003c0a:	0019      	movs	r1, r3
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	430a      	orrs	r2, r1
 8003c16:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c1c:	2204      	movs	r2, #4
 8003c1e:	4013      	ands	r3, r2
 8003c20:	d00b      	beq.n	8003c3a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	4a3b      	ldr	r2, [pc, #236]	; (8003d18 <UART_AdvFeatureConfig+0x14c>)
 8003c2a:	4013      	ands	r3, r2
 8003c2c:	0019      	movs	r1, r3
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	430a      	orrs	r2, r1
 8003c38:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c3e:	2208      	movs	r2, #8
 8003c40:	4013      	ands	r3, r2
 8003c42:	d00b      	beq.n	8003c5c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	685b      	ldr	r3, [r3, #4]
 8003c4a:	4a34      	ldr	r2, [pc, #208]	; (8003d1c <UART_AdvFeatureConfig+0x150>)
 8003c4c:	4013      	ands	r3, r2
 8003c4e:	0019      	movs	r1, r3
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	430a      	orrs	r2, r1
 8003c5a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c60:	2210      	movs	r2, #16
 8003c62:	4013      	ands	r3, r2
 8003c64:	d00b      	beq.n	8003c7e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	689b      	ldr	r3, [r3, #8]
 8003c6c:	4a2c      	ldr	r2, [pc, #176]	; (8003d20 <UART_AdvFeatureConfig+0x154>)
 8003c6e:	4013      	ands	r3, r2
 8003c70:	0019      	movs	r1, r3
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	430a      	orrs	r2, r1
 8003c7c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c82:	2220      	movs	r2, #32
 8003c84:	4013      	ands	r3, r2
 8003c86:	d00b      	beq.n	8003ca0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	689b      	ldr	r3, [r3, #8]
 8003c8e:	4a25      	ldr	r2, [pc, #148]	; (8003d24 <UART_AdvFeatureConfig+0x158>)
 8003c90:	4013      	ands	r3, r2
 8003c92:	0019      	movs	r1, r3
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	430a      	orrs	r2, r1
 8003c9e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ca4:	2240      	movs	r2, #64	; 0x40
 8003ca6:	4013      	ands	r3, r2
 8003ca8:	d01d      	beq.n	8003ce6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	685b      	ldr	r3, [r3, #4]
 8003cb0:	4a1d      	ldr	r2, [pc, #116]	; (8003d28 <UART_AdvFeatureConfig+0x15c>)
 8003cb2:	4013      	ands	r3, r2
 8003cb4:	0019      	movs	r1, r3
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	430a      	orrs	r2, r1
 8003cc0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003cc6:	2380      	movs	r3, #128	; 0x80
 8003cc8:	035b      	lsls	r3, r3, #13
 8003cca:	429a      	cmp	r2, r3
 8003ccc:	d10b      	bne.n	8003ce6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	685b      	ldr	r3, [r3, #4]
 8003cd4:	4a15      	ldr	r2, [pc, #84]	; (8003d2c <UART_AdvFeatureConfig+0x160>)
 8003cd6:	4013      	ands	r3, r2
 8003cd8:	0019      	movs	r1, r3
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	430a      	orrs	r2, r1
 8003ce4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cea:	2280      	movs	r2, #128	; 0x80
 8003cec:	4013      	ands	r3, r2
 8003cee:	d00b      	beq.n	8003d08 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	685b      	ldr	r3, [r3, #4]
 8003cf6:	4a0e      	ldr	r2, [pc, #56]	; (8003d30 <UART_AdvFeatureConfig+0x164>)
 8003cf8:	4013      	ands	r3, r2
 8003cfa:	0019      	movs	r1, r3
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	430a      	orrs	r2, r1
 8003d06:	605a      	str	r2, [r3, #4]
  }
}
 8003d08:	46c0      	nop			; (mov r8, r8)
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	b002      	add	sp, #8
 8003d0e:	bd80      	pop	{r7, pc}
 8003d10:	fffdffff 	.word	0xfffdffff
 8003d14:	fffeffff 	.word	0xfffeffff
 8003d18:	fffbffff 	.word	0xfffbffff
 8003d1c:	ffff7fff 	.word	0xffff7fff
 8003d20:	ffffefff 	.word	0xffffefff
 8003d24:	ffffdfff 	.word	0xffffdfff
 8003d28:	ffefffff 	.word	0xffefffff
 8003d2c:	ff9fffff 	.word	0xff9fffff
 8003d30:	fff7ffff 	.word	0xfff7ffff

08003d34 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b086      	sub	sp, #24
 8003d38:	af02      	add	r7, sp, #8
 8003d3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	228c      	movs	r2, #140	; 0x8c
 8003d40:	2100      	movs	r1, #0
 8003d42:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003d44:	f7fd fa68 	bl	8001218 <HAL_GetTick>
 8003d48:	0003      	movs	r3, r0
 8003d4a:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	2208      	movs	r2, #8
 8003d54:	4013      	ands	r3, r2
 8003d56:	2b08      	cmp	r3, #8
 8003d58:	d10c      	bne.n	8003d74 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	2280      	movs	r2, #128	; 0x80
 8003d5e:	0391      	lsls	r1, r2, #14
 8003d60:	6878      	ldr	r0, [r7, #4]
 8003d62:	4a18      	ldr	r2, [pc, #96]	; (8003dc4 <UART_CheckIdleState+0x90>)
 8003d64:	9200      	str	r2, [sp, #0]
 8003d66:	2200      	movs	r2, #0
 8003d68:	f000 f82e 	bl	8003dc8 <UART_WaitOnFlagUntilTimeout>
 8003d6c:	1e03      	subs	r3, r0, #0
 8003d6e:	d001      	beq.n	8003d74 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003d70:	2303      	movs	r3, #3
 8003d72:	e023      	b.n	8003dbc <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	2204      	movs	r2, #4
 8003d7c:	4013      	ands	r3, r2
 8003d7e:	2b04      	cmp	r3, #4
 8003d80:	d10c      	bne.n	8003d9c <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	2280      	movs	r2, #128	; 0x80
 8003d86:	03d1      	lsls	r1, r2, #15
 8003d88:	6878      	ldr	r0, [r7, #4]
 8003d8a:	4a0e      	ldr	r2, [pc, #56]	; (8003dc4 <UART_CheckIdleState+0x90>)
 8003d8c:	9200      	str	r2, [sp, #0]
 8003d8e:	2200      	movs	r2, #0
 8003d90:	f000 f81a 	bl	8003dc8 <UART_WaitOnFlagUntilTimeout>
 8003d94:	1e03      	subs	r3, r0, #0
 8003d96:	d001      	beq.n	8003d9c <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003d98:	2303      	movs	r3, #3
 8003d9a:	e00f      	b.n	8003dbc <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2284      	movs	r2, #132	; 0x84
 8003da0:	2120      	movs	r1, #32
 8003da2:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2288      	movs	r2, #136	; 0x88
 8003da8:	2120      	movs	r1, #32
 8003daa:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2200      	movs	r2, #0
 8003db0:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2280      	movs	r2, #128	; 0x80
 8003db6:	2100      	movs	r1, #0
 8003db8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003dba:	2300      	movs	r3, #0
}
 8003dbc:	0018      	movs	r0, r3
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	b004      	add	sp, #16
 8003dc2:	bd80      	pop	{r7, pc}
 8003dc4:	01ffffff 	.word	0x01ffffff

08003dc8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b094      	sub	sp, #80	; 0x50
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	60f8      	str	r0, [r7, #12]
 8003dd0:	60b9      	str	r1, [r7, #8]
 8003dd2:	603b      	str	r3, [r7, #0]
 8003dd4:	1dfb      	adds	r3, r7, #7
 8003dd6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003dd8:	e0a7      	b.n	8003f2a <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003dda:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003ddc:	3301      	adds	r3, #1
 8003dde:	d100      	bne.n	8003de2 <UART_WaitOnFlagUntilTimeout+0x1a>
 8003de0:	e0a3      	b.n	8003f2a <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003de2:	f7fd fa19 	bl	8001218 <HAL_GetTick>
 8003de6:	0002      	movs	r2, r0
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	1ad3      	subs	r3, r2, r3
 8003dec:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003dee:	429a      	cmp	r2, r3
 8003df0:	d302      	bcc.n	8003df8 <UART_WaitOnFlagUntilTimeout+0x30>
 8003df2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d13f      	bne.n	8003e78 <UART_WaitOnFlagUntilTimeout+0xb0>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003df8:	f3ef 8310 	mrs	r3, PRIMASK
 8003dfc:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8003dfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003e00:	647b      	str	r3, [r7, #68]	; 0x44
 8003e02:	2301      	movs	r3, #1
 8003e04:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e08:	f383 8810 	msr	PRIMASK, r3
}
 8003e0c:	46c0      	nop			; (mov r8, r8)
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	681a      	ldr	r2, [r3, #0]
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	494e      	ldr	r1, [pc, #312]	; (8003f54 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8003e1a:	400a      	ands	r2, r1
 8003e1c:	601a      	str	r2, [r3, #0]
 8003e1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e20:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e24:	f383 8810 	msr	PRIMASK, r3
}
 8003e28:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e2a:	f3ef 8310 	mrs	r3, PRIMASK
 8003e2e:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8003e30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e32:	643b      	str	r3, [r7, #64]	; 0x40
 8003e34:	2301      	movs	r3, #1
 8003e36:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e3a:	f383 8810 	msr	PRIMASK, r3
}
 8003e3e:	46c0      	nop			; (mov r8, r8)
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	689a      	ldr	r2, [r3, #8]
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	2101      	movs	r1, #1
 8003e4c:	438a      	bics	r2, r1
 8003e4e:	609a      	str	r2, [r3, #8]
 8003e50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e52:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e56:	f383 8810 	msr	PRIMASK, r3
}
 8003e5a:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	2284      	movs	r2, #132	; 0x84
 8003e60:	2120      	movs	r1, #32
 8003e62:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	2288      	movs	r2, #136	; 0x88
 8003e68:	2120      	movs	r1, #32
 8003e6a:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	2280      	movs	r2, #128	; 0x80
 8003e70:	2100      	movs	r1, #0
 8003e72:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003e74:	2303      	movs	r3, #3
 8003e76:	e069      	b.n	8003f4c <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	2204      	movs	r2, #4
 8003e80:	4013      	ands	r3, r2
 8003e82:	d052      	beq.n	8003f2a <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	69da      	ldr	r2, [r3, #28]
 8003e8a:	2380      	movs	r3, #128	; 0x80
 8003e8c:	011b      	lsls	r3, r3, #4
 8003e8e:	401a      	ands	r2, r3
 8003e90:	2380      	movs	r3, #128	; 0x80
 8003e92:	011b      	lsls	r3, r3, #4
 8003e94:	429a      	cmp	r2, r3
 8003e96:	d148      	bne.n	8003f2a <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	2280      	movs	r2, #128	; 0x80
 8003e9e:	0112      	lsls	r2, r2, #4
 8003ea0:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ea2:	f3ef 8310 	mrs	r3, PRIMASK
 8003ea6:	613b      	str	r3, [r7, #16]
  return(result);
 8003ea8:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003eaa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003eac:	2301      	movs	r3, #1
 8003eae:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003eb0:	697b      	ldr	r3, [r7, #20]
 8003eb2:	f383 8810 	msr	PRIMASK, r3
}
 8003eb6:	46c0      	nop			; (mov r8, r8)
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	681a      	ldr	r2, [r3, #0]
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	4924      	ldr	r1, [pc, #144]	; (8003f54 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8003ec4:	400a      	ands	r2, r1
 8003ec6:	601a      	str	r2, [r3, #0]
 8003ec8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003eca:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ecc:	69bb      	ldr	r3, [r7, #24]
 8003ece:	f383 8810 	msr	PRIMASK, r3
}
 8003ed2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ed4:	f3ef 8310 	mrs	r3, PRIMASK
 8003ed8:	61fb      	str	r3, [r7, #28]
  return(result);
 8003eda:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003edc:	64bb      	str	r3, [r7, #72]	; 0x48
 8003ede:	2301      	movs	r3, #1
 8003ee0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ee2:	6a3b      	ldr	r3, [r7, #32]
 8003ee4:	f383 8810 	msr	PRIMASK, r3
}
 8003ee8:	46c0      	nop			; (mov r8, r8)
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	689a      	ldr	r2, [r3, #8]
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	2101      	movs	r1, #1
 8003ef6:	438a      	bics	r2, r1
 8003ef8:	609a      	str	r2, [r3, #8]
 8003efa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003efc:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f00:	f383 8810 	msr	PRIMASK, r3
}
 8003f04:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	2284      	movs	r2, #132	; 0x84
 8003f0a:	2120      	movs	r1, #32
 8003f0c:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	2288      	movs	r2, #136	; 0x88
 8003f12:	2120      	movs	r1, #32
 8003f14:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	228c      	movs	r2, #140	; 0x8c
 8003f1a:	2120      	movs	r1, #32
 8003f1c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	2280      	movs	r2, #128	; 0x80
 8003f22:	2100      	movs	r1, #0
 8003f24:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003f26:	2303      	movs	r3, #3
 8003f28:	e010      	b.n	8003f4c <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	69db      	ldr	r3, [r3, #28]
 8003f30:	68ba      	ldr	r2, [r7, #8]
 8003f32:	4013      	ands	r3, r2
 8003f34:	68ba      	ldr	r2, [r7, #8]
 8003f36:	1ad3      	subs	r3, r2, r3
 8003f38:	425a      	negs	r2, r3
 8003f3a:	4153      	adcs	r3, r2
 8003f3c:	b2db      	uxtb	r3, r3
 8003f3e:	001a      	movs	r2, r3
 8003f40:	1dfb      	adds	r3, r7, #7
 8003f42:	781b      	ldrb	r3, [r3, #0]
 8003f44:	429a      	cmp	r2, r3
 8003f46:	d100      	bne.n	8003f4a <UART_WaitOnFlagUntilTimeout+0x182>
 8003f48:	e747      	b.n	8003dda <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003f4a:	2300      	movs	r3, #0
}
 8003f4c:	0018      	movs	r0, r3
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	b014      	add	sp, #80	; 0x50
 8003f52:	bd80      	pop	{r7, pc}
 8003f54:	fffffe5f 	.word	0xfffffe5f

08003f58 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b084      	sub	sp, #16
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2280      	movs	r2, #128	; 0x80
 8003f64:	5c9b      	ldrb	r3, [r3, r2]
 8003f66:	2b01      	cmp	r3, #1
 8003f68:	d101      	bne.n	8003f6e <HAL_UARTEx_DisableFifoMode+0x16>
 8003f6a:	2302      	movs	r3, #2
 8003f6c:	e027      	b.n	8003fbe <HAL_UARTEx_DisableFifoMode+0x66>
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2280      	movs	r2, #128	; 0x80
 8003f72:	2101      	movs	r1, #1
 8003f74:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	2284      	movs	r2, #132	; 0x84
 8003f7a:	2124      	movs	r1, #36	; 0x24
 8003f7c:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	681a      	ldr	r2, [r3, #0]
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	2101      	movs	r1, #1
 8003f92:	438a      	bics	r2, r1
 8003f94:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	4a0b      	ldr	r2, [pc, #44]	; (8003fc8 <HAL_UARTEx_DisableFifoMode+0x70>)
 8003f9a:	4013      	ands	r3, r2
 8003f9c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	68fa      	ldr	r2, [r7, #12]
 8003faa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2284      	movs	r2, #132	; 0x84
 8003fb0:	2120      	movs	r1, #32
 8003fb2:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2280      	movs	r2, #128	; 0x80
 8003fb8:	2100      	movs	r1, #0
 8003fba:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003fbc:	2300      	movs	r3, #0
}
 8003fbe:	0018      	movs	r0, r3
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	b004      	add	sp, #16
 8003fc4:	bd80      	pop	{r7, pc}
 8003fc6:	46c0      	nop			; (mov r8, r8)
 8003fc8:	dfffffff 	.word	0xdfffffff

08003fcc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b084      	sub	sp, #16
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
 8003fd4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	2280      	movs	r2, #128	; 0x80
 8003fda:	5c9b      	ldrb	r3, [r3, r2]
 8003fdc:	2b01      	cmp	r3, #1
 8003fde:	d101      	bne.n	8003fe4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003fe0:	2302      	movs	r3, #2
 8003fe2:	e02e      	b.n	8004042 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2280      	movs	r2, #128	; 0x80
 8003fe8:	2101      	movs	r1, #1
 8003fea:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2284      	movs	r2, #132	; 0x84
 8003ff0:	2124      	movs	r1, #36	; 0x24
 8003ff2:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	681a      	ldr	r2, [r3, #0]
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	2101      	movs	r1, #1
 8004008:	438a      	bics	r2, r1
 800400a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	689b      	ldr	r3, [r3, #8]
 8004012:	00db      	lsls	r3, r3, #3
 8004014:	08d9      	lsrs	r1, r3, #3
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	683a      	ldr	r2, [r7, #0]
 800401c:	430a      	orrs	r2, r1
 800401e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	0018      	movs	r0, r3
 8004024:	f000 f854 	bl	80040d0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	68fa      	ldr	r2, [r7, #12]
 800402e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2284      	movs	r2, #132	; 0x84
 8004034:	2120      	movs	r1, #32
 8004036:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2280      	movs	r2, #128	; 0x80
 800403c:	2100      	movs	r1, #0
 800403e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004040:	2300      	movs	r3, #0
}
 8004042:	0018      	movs	r0, r3
 8004044:	46bd      	mov	sp, r7
 8004046:	b004      	add	sp, #16
 8004048:	bd80      	pop	{r7, pc}
	...

0800404c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	b084      	sub	sp, #16
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
 8004054:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2280      	movs	r2, #128	; 0x80
 800405a:	5c9b      	ldrb	r3, [r3, r2]
 800405c:	2b01      	cmp	r3, #1
 800405e:	d101      	bne.n	8004064 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004060:	2302      	movs	r3, #2
 8004062:	e02f      	b.n	80040c4 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2280      	movs	r2, #128	; 0x80
 8004068:	2101      	movs	r1, #1
 800406a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2284      	movs	r2, #132	; 0x84
 8004070:	2124      	movs	r1, #36	; 0x24
 8004072:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	681a      	ldr	r2, [r3, #0]
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	2101      	movs	r1, #1
 8004088:	438a      	bics	r2, r1
 800408a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	689b      	ldr	r3, [r3, #8]
 8004092:	4a0e      	ldr	r2, [pc, #56]	; (80040cc <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8004094:	4013      	ands	r3, r2
 8004096:	0019      	movs	r1, r3
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	683a      	ldr	r2, [r7, #0]
 800409e:	430a      	orrs	r2, r1
 80040a0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	0018      	movs	r0, r3
 80040a6:	f000 f813 	bl	80040d0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	68fa      	ldr	r2, [r7, #12]
 80040b0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2284      	movs	r2, #132	; 0x84
 80040b6:	2120      	movs	r1, #32
 80040b8:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2280      	movs	r2, #128	; 0x80
 80040be:	2100      	movs	r1, #0
 80040c0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80040c2:	2300      	movs	r3, #0
}
 80040c4:	0018      	movs	r0, r3
 80040c6:	46bd      	mov	sp, r7
 80040c8:	b004      	add	sp, #16
 80040ca:	bd80      	pop	{r7, pc}
 80040cc:	f1ffffff 	.word	0xf1ffffff

080040d0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80040d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80040d2:	b085      	sub	sp, #20
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d108      	bne.n	80040f2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	226a      	movs	r2, #106	; 0x6a
 80040e4:	2101      	movs	r1, #1
 80040e6:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2268      	movs	r2, #104	; 0x68
 80040ec:	2101      	movs	r1, #1
 80040ee:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80040f0:	e043      	b.n	800417a <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80040f2:	260f      	movs	r6, #15
 80040f4:	19bb      	adds	r3, r7, r6
 80040f6:	2208      	movs	r2, #8
 80040f8:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80040fa:	200e      	movs	r0, #14
 80040fc:	183b      	adds	r3, r7, r0
 80040fe:	2208      	movs	r2, #8
 8004100:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	689b      	ldr	r3, [r3, #8]
 8004108:	0e5b      	lsrs	r3, r3, #25
 800410a:	b2da      	uxtb	r2, r3
 800410c:	240d      	movs	r4, #13
 800410e:	193b      	adds	r3, r7, r4
 8004110:	2107      	movs	r1, #7
 8004112:	400a      	ands	r2, r1
 8004114:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	689b      	ldr	r3, [r3, #8]
 800411c:	0f5b      	lsrs	r3, r3, #29
 800411e:	b2da      	uxtb	r2, r3
 8004120:	250c      	movs	r5, #12
 8004122:	197b      	adds	r3, r7, r5
 8004124:	2107      	movs	r1, #7
 8004126:	400a      	ands	r2, r1
 8004128:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800412a:	183b      	adds	r3, r7, r0
 800412c:	781b      	ldrb	r3, [r3, #0]
 800412e:	197a      	adds	r2, r7, r5
 8004130:	7812      	ldrb	r2, [r2, #0]
 8004132:	4914      	ldr	r1, [pc, #80]	; (8004184 <UARTEx_SetNbDataToProcess+0xb4>)
 8004134:	5c8a      	ldrb	r2, [r1, r2]
 8004136:	435a      	muls	r2, r3
 8004138:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 800413a:	197b      	adds	r3, r7, r5
 800413c:	781b      	ldrb	r3, [r3, #0]
 800413e:	4a12      	ldr	r2, [pc, #72]	; (8004188 <UARTEx_SetNbDataToProcess+0xb8>)
 8004140:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004142:	0019      	movs	r1, r3
 8004144:	f7fc f87a 	bl	800023c <__divsi3>
 8004148:	0003      	movs	r3, r0
 800414a:	b299      	uxth	r1, r3
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	226a      	movs	r2, #106	; 0x6a
 8004150:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004152:	19bb      	adds	r3, r7, r6
 8004154:	781b      	ldrb	r3, [r3, #0]
 8004156:	193a      	adds	r2, r7, r4
 8004158:	7812      	ldrb	r2, [r2, #0]
 800415a:	490a      	ldr	r1, [pc, #40]	; (8004184 <UARTEx_SetNbDataToProcess+0xb4>)
 800415c:	5c8a      	ldrb	r2, [r1, r2]
 800415e:	435a      	muls	r2, r3
 8004160:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8004162:	193b      	adds	r3, r7, r4
 8004164:	781b      	ldrb	r3, [r3, #0]
 8004166:	4a08      	ldr	r2, [pc, #32]	; (8004188 <UARTEx_SetNbDataToProcess+0xb8>)
 8004168:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800416a:	0019      	movs	r1, r3
 800416c:	f7fc f866 	bl	800023c <__divsi3>
 8004170:	0003      	movs	r3, r0
 8004172:	b299      	uxth	r1, r3
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2268      	movs	r2, #104	; 0x68
 8004178:	5299      	strh	r1, [r3, r2]
}
 800417a:	46c0      	nop			; (mov r8, r8)
 800417c:	46bd      	mov	sp, r7
 800417e:	b005      	add	sp, #20
 8004180:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004182:	46c0      	nop			; (mov r8, r8)
 8004184:	08006150 	.word	0x08006150
 8004188:	08006158 	.word	0x08006158

0800418c <NRF905_read_config_register>:
NRF905_PAYLOAD_SIZE, // RX payload size
		NRF905_PAYLOAD_SIZE, // TX payload size
		0xE7, 0xE7, 0xE7, 0xE7, // Default receive address
		NRF905_CRC | NRF905_CLK_FREQ | NRF905_OUTCLK };

uint8_t NRF905_read_config_register(NRF905_t *dev, uint8_t reg) {
 800418c:	b590      	push	{r4, r7, lr}
 800418e:	b085      	sub	sp, #20
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
 8004194:	000a      	movs	r2, r1
 8004196:	1cfb      	adds	r3, r7, #3
 8004198:	701a      	strb	r2, [r3, #0]
	if (dev == NULL) {
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2b00      	cmp	r3, #0
 800419e:	d101      	bne.n	80041a4 <NRF905_read_config_register+0x18>
		return -1;
 80041a0:	23ff      	movs	r3, #255	; 0xff
 80041a2:	e025      	b.n	80041f0 <NRF905_read_config_register+0x64>
	}
	uint8_t val = 0;
 80041a4:	240f      	movs	r4, #15
 80041a6:	193b      	adds	r3, r7, r4
 80041a8:	2200      	movs	r2, #0
 80041aa:	701a      	strb	r2, [r3, #0]
	NRF905_HW_SPI_SELECT(dev->hw);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	2200      	movs	r2, #0
 80041b2:	2106      	movs	r1, #6
 80041b4:	0018      	movs	r0, r3
 80041b6:	f000 fa74 	bl	80046a2 <NRF905_hw_gpio_set>
	NRF905_hw_spi_transfer(dev->hw, NRF905_CMD_R_CONFIG | reg, NULL);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6818      	ldr	r0, [r3, #0]
 80041be:	1cfb      	adds	r3, r7, #3
 80041c0:	781b      	ldrb	r3, [r3, #0]
 80041c2:	2210      	movs	r2, #16
 80041c4:	4313      	orrs	r3, r2
 80041c6:	b2db      	uxtb	r3, r3
 80041c8:	2200      	movs	r2, #0
 80041ca:	0019      	movs	r1, r3
 80041cc:	f000 fb16 	bl	80047fc <NRF905_hw_spi_transfer>
	NRF905_hw_spi_transfer(dev->hw, NRF905_CMD_NOP, &val);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	193a      	adds	r2, r7, r4
 80041d6:	21ff      	movs	r1, #255	; 0xff
 80041d8:	0018      	movs	r0, r3
 80041da:	f000 fb0f 	bl	80047fc <NRF905_hw_spi_transfer>
	NRF905_HW_SPI_DESELECT(dev->hw);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	2201      	movs	r2, #1
 80041e4:	2106      	movs	r1, #6
 80041e6:	0018      	movs	r0, r3
 80041e8:	f000 fa5b 	bl	80046a2 <NRF905_hw_gpio_set>
	return val;
 80041ec:	193b      	adds	r3, r7, r4
 80041ee:	781b      	ldrb	r3, [r3, #0]
}
 80041f0:	0018      	movs	r0, r3
 80041f2:	46bd      	mov	sp, r7
 80041f4:	b005      	add	sp, #20
 80041f6:	bd90      	pop	{r4, r7, pc}

080041f8 <NRF905_setAddress>:
					| val);

	return 0;
}

int NRF905_setAddress(NRF905_t *dev, uint32_t address, uint8_t cmd) {
 80041f8:	b590      	push	{r4, r7, lr}
 80041fa:	b087      	sub	sp, #28
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	60f8      	str	r0, [r7, #12]
 8004200:	60b9      	str	r1, [r7, #8]
 8004202:	1dfb      	adds	r3, r7, #7
 8004204:	701a      	strb	r2, [r3, #0]
	if (dev == NULL) {
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d102      	bne.n	8004212 <NRF905_setAddress+0x1a>
		return -1;
 800420c:	2301      	movs	r3, #1
 800420e:	425b      	negs	r3, r3
 8004210:	e033      	b.n	800427a <NRF905_setAddress+0x82>
	}
	uint8_t i;
	NRF905_HW_SPI_SELECT(dev->hw);
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	2200      	movs	r2, #0
 8004218:	2106      	movs	r1, #6
 800421a:	0018      	movs	r0, r3
 800421c:	f000 fa41 	bl	80046a2 <NRF905_hw_gpio_set>
	NRF905_hw_spi_transfer(dev->hw, cmd, NULL);
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	6818      	ldr	r0, [r3, #0]
 8004224:	1dfb      	adds	r3, r7, #7
 8004226:	781b      	ldrb	r3, [r3, #0]
 8004228:	2200      	movs	r2, #0
 800422a:	0019      	movs	r1, r3
 800422c:	f000 fae6 	bl	80047fc <NRF905_hw_spi_transfer>
	for (i = 0; i < 4; i++) {
 8004230:	2317      	movs	r3, #23
 8004232:	18fb      	adds	r3, r7, r3
 8004234:	2200      	movs	r2, #0
 8004236:	701a      	strb	r2, [r3, #0]
 8004238:	e012      	b.n	8004260 <NRF905_setAddress+0x68>
		NRF905_hw_spi_transfer(dev->hw, address >> (8 * i), NULL);
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	6818      	ldr	r0, [r3, #0]
 800423e:	2417      	movs	r4, #23
 8004240:	193b      	adds	r3, r7, r4
 8004242:	781b      	ldrb	r3, [r3, #0]
 8004244:	00db      	lsls	r3, r3, #3
 8004246:	68ba      	ldr	r2, [r7, #8]
 8004248:	40da      	lsrs	r2, r3
 800424a:	0013      	movs	r3, r2
 800424c:	b2db      	uxtb	r3, r3
 800424e:	2200      	movs	r2, #0
 8004250:	0019      	movs	r1, r3
 8004252:	f000 fad3 	bl	80047fc <NRF905_hw_spi_transfer>
	for (i = 0; i < 4; i++) {
 8004256:	193b      	adds	r3, r7, r4
 8004258:	781a      	ldrb	r2, [r3, #0]
 800425a:	193b      	adds	r3, r7, r4
 800425c:	3201      	adds	r2, #1
 800425e:	701a      	strb	r2, [r3, #0]
 8004260:	2317      	movs	r3, #23
 8004262:	18fb      	adds	r3, r7, r3
 8004264:	781b      	ldrb	r3, [r3, #0]
 8004266:	2b03      	cmp	r3, #3
 8004268:	d9e7      	bls.n	800423a <NRF905_setAddress+0x42>
	}
	NRF905_HW_SPI_DESELECT(dev->hw);
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	2201      	movs	r2, #1
 8004270:	2106      	movs	r1, #6
 8004272:	0018      	movs	r0, r3
 8004274:	f000 fa15 	bl	80046a2 <NRF905_hw_gpio_set>

	return 0;
 8004278:	2300      	movs	r3, #0
}
 800427a:	0018      	movs	r0, r3
 800427c:	46bd      	mov	sp, r7
 800427e:	b007      	add	sp, #28
 8004280:	bd90      	pop	{r4, r7, pc}

08004282 <NRF905_read_status>:

uint8_t NRF905_read_status(NRF905_t *dev) {
 8004282:	b590      	push	{r4, r7, lr}
 8004284:	b085      	sub	sp, #20
 8004286:	af00      	add	r7, sp, #0
 8004288:	6078      	str	r0, [r7, #4]
	if (dev == NULL) {
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	2b00      	cmp	r3, #0
 800428e:	d101      	bne.n	8004294 <NRF905_read_status+0x12>
		return -1;
 8004290:	23ff      	movs	r3, #255	; 0xff
 8004292:	e017      	b.n	80042c4 <NRF905_read_status+0x42>
	}
	uint8_t status;

	NRF905_HW_SPI_SELECT(dev->hw);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	2200      	movs	r2, #0
 800429a:	2106      	movs	r1, #6
 800429c:	0018      	movs	r0, r3
 800429e:	f000 fa00 	bl	80046a2 <NRF905_hw_gpio_set>
	NRF905_hw_spi_transfer(dev->hw, NRF905_CMD_NOP, &status);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	240f      	movs	r4, #15
 80042a8:	193a      	adds	r2, r7, r4
 80042aa:	21ff      	movs	r1, #255	; 0xff
 80042ac:	0018      	movs	r0, r3
 80042ae:	f000 faa5 	bl	80047fc <NRF905_hw_spi_transfer>
	NRF905_HW_SPI_DESELECT(dev->hw);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	2201      	movs	r2, #1
 80042b8:	2106      	movs	r1, #6
 80042ba:	0018      	movs	r0, r3
 80042bc:	f000 f9f1 	bl	80046a2 <NRF905_hw_gpio_set>

	return status;
 80042c0:	193b      	adds	r3, r7, r4
 80042c2:	781b      	ldrb	r3, [r3, #0]
}
 80042c4:	0018      	movs	r0, r3
 80042c6:	46bd      	mov	sp, r7
 80042c8:	b005      	add	sp, #20
 80042ca:	bd90      	pop	{r4, r7, pc}

080042cc <NRF905_data_ready>:

// Hardware: Data ready pin high
// Software: Data ready status bit set

int NRF905_data_ready(NRF905_t *dev) {
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b082      	sub	sp, #8
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
	if (dev == NULL) {
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d102      	bne.n	80042e0 <NRF905_data_ready+0x14>
		return -1;
 80042da:	2301      	movs	r3, #1
 80042dc:	425b      	negs	r3, r3
 80042de:	e015      	b.n	800430c <NRF905_data_ready+0x40>
	}

	//use software check for data ready
	if (dev->software_pin_configuration & NRF905_USE_SOFTWARE_DATA_READY) {
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	7c1b      	ldrb	r3, [r3, #16]
 80042e4:	001a      	movs	r2, r3
 80042e6:	2301      	movs	r3, #1
 80042e8:	4013      	ands	r3, r2
 80042ea:	d008      	beq.n	80042fe <NRF905_data_ready+0x32>
		return (NRF905_read_status(dev) & (1 << NRF905_STATUS_DR));
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	0018      	movs	r0, r3
 80042f0:	f7ff ffc7 	bl	8004282 <NRF905_read_status>
 80042f4:	0003      	movs	r3, r0
 80042f6:	001a      	movs	r2, r3
 80042f8:	2320      	movs	r3, #32
 80042fa:	4013      	ands	r3, r2
 80042fc:	e006      	b.n	800430c <NRF905_data_ready+0x40>
	}

	//use hardware data ready
	return NRF905_hw_gpio_get(dev->hw, NRF905_HW_GPIO_DR);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	2105      	movs	r1, #5
 8004304:	0018      	movs	r0, r3
 8004306:	f000 f997 	bl	8004638 <NRF905_hw_gpio_get>
 800430a:	0003      	movs	r3, r0
}
 800430c:	0018      	movs	r0, r3
 800430e:	46bd      	mov	sp, r7
 8004310:	b002      	add	sp, #8
 8004312:	bd80      	pop	{r7, pc}

08004314 <NRF905_address_matched>:

// Hardware: Address match pin high
// Software: Address match status bit set
int NRF905_address_matched(NRF905_t *dev) {
 8004314:	b580      	push	{r7, lr}
 8004316:	b082      	sub	sp, #8
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
	if (dev == NULL) {
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2b00      	cmp	r3, #0
 8004320:	d102      	bne.n	8004328 <NRF905_address_matched+0x14>
		return -1;
 8004322:	2301      	movs	r3, #1
 8004324:	425b      	negs	r3, r3
 8004326:	e015      	b.n	8004354 <NRF905_address_matched+0x40>
	}

	//use software check for data ready
	if (dev->software_pin_configuration & NRF905_USE_SOFTWARE_ADDRESS_MATCH) {
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	7c1b      	ldrb	r3, [r3, #16]
 800432c:	001a      	movs	r2, r3
 800432e:	2302      	movs	r3, #2
 8004330:	4013      	ands	r3, r2
 8004332:	d008      	beq.n	8004346 <NRF905_address_matched+0x32>
		return (NRF905_read_status(dev) & (1 << NRF905_STATUS_AM));
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	0018      	movs	r0, r3
 8004338:	f7ff ffa3 	bl	8004282 <NRF905_read_status>
 800433c:	0003      	movs	r3, r0
 800433e:	001a      	movs	r2, r3
 8004340:	2380      	movs	r3, #128	; 0x80
 8004342:	4013      	ands	r3, r2
 8004344:	e006      	b.n	8004354 <NRF905_address_matched+0x40>
	}
	//use hardware address match
	return NRF905_hw_gpio_get(dev->hw, NRF905_HW_GPIO_AM);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	2104      	movs	r1, #4
 800434c:	0018      	movs	r0, r3
 800434e:	f000 f973 	bl	8004638 <NRF905_hw_gpio_get>
 8004352:	0003      	movs	r3, r0
}
 8004354:	0018      	movs	r0, r3
 8004356:	46bd      	mov	sp, r7
 8004358:	b002      	add	sp, #8
 800435a:	bd80      	pop	{r7, pc}

0800435c <NRF905_set_listen_address>:
	}

	return NRF905_hw_gpio_get(dev->hw, NRF905_HW_GPIO_CD);
}

int NRF905_set_listen_address(NRF905_t *dev, uint32_t address) {
 800435c:	b580      	push	{r7, lr}
 800435e:	b082      	sub	sp, #8
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
 8004364:	6039      	str	r1, [r7, #0]
	if (dev == NULL) {
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2b00      	cmp	r3, #0
 800436a:	d102      	bne.n	8004372 <NRF905_set_listen_address+0x16>
		return -1;
 800436c:	2301      	movs	r3, #1
 800436e:	425b      	negs	r3, r3
 8004370:	e006      	b.n	8004380 <NRF905_set_listen_address+0x24>
	}
	NRF905_setAddress(dev, address,
 8004372:	6839      	ldr	r1, [r7, #0]
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2205      	movs	r2, #5
 8004378:	0018      	movs	r0, r3
 800437a:	f7ff ff3d 	bl	80041f8 <NRF905_setAddress>
	NRF905_CMD_W_CONFIG | NRF905_REG_RX_ADDRESS);
	return 0;
 800437e:	2300      	movs	r3, #0
}
 8004380:	0018      	movs	r0, r3
 8004382:	46bd      	mov	sp, r7
 8004384:	b002      	add	sp, #8
 8004386:	bd80      	pop	{r7, pc}

08004388 <NRF905_rx>:
	// else NRF905_NEXTMODE_TX

	return 1;
}

int NRF905_rx(NRF905_t *dev) {
 8004388:	b580      	push	{r7, lr}
 800438a:	b082      	sub	sp, #8
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
	if (dev == NULL) {
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2b00      	cmp	r3, #0
 8004394:	d102      	bne.n	800439c <NRF905_rx+0x14>
		return -1;
 8004396:	2301      	movs	r3, #1
 8004398:	425b      	negs	r3, r3
 800439a:	e015      	b.n	80043c8 <NRF905_rx+0x40>
	}
	NRF905_HW_MODE_RX(dev->hw);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	2200      	movs	r2, #0
 80043a2:	2100      	movs	r1, #0
 80043a4:	0018      	movs	r0, r3
 80043a6:	f000 f97c 	bl	80046a2 <NRF905_hw_gpio_set>
	NRF905_HW_STANDBY_LEAVE(dev->hw);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	2201      	movs	r2, #1
 80043b0:	2101      	movs	r1, #1
 80043b2:	0018      	movs	r0, r3
 80043b4:	f000 f975 	bl	80046a2 <NRF905_hw_gpio_set>
	NRF905_HW_POWER_UP(dev->hw);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	2201      	movs	r2, #1
 80043be:	2102      	movs	r1, #2
 80043c0:	0018      	movs	r0, r3
 80043c2:	f000 f96e 	bl	80046a2 <NRF905_hw_gpio_set>
	return 0;
 80043c6:	2300      	movs	r3, #0
}
 80043c8:	0018      	movs	r0, r3
 80043ca:	46bd      	mov	sp, r7
 80043cc:	b002      	add	sp, #8
 80043ce:	bd80      	pop	{r7, pc}

080043d0 <NRF905_read>:

int NRF905_read(NRF905_t *dev, void *data, uint8_t len) {
 80043d0:	b590      	push	{r4, r7, lr}
 80043d2:	b087      	sub	sp, #28
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	60f8      	str	r0, [r7, #12]
 80043d8:	60b9      	str	r1, [r7, #8]
 80043da:	1dfb      	adds	r3, r7, #7
 80043dc:	701a      	strb	r2, [r3, #0]
	if (dev == NULL) {
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d102      	bne.n	80043ea <NRF905_read+0x1a>
		return -1;
 80043e4:	2301      	movs	r3, #1
 80043e6:	425b      	negs	r3, r3
 80043e8:	e038      	b.n	800445c <NRF905_read+0x8c>
	}
	if (len > NRF905_MAX_PAYLOAD)
 80043ea:	1dfb      	adds	r3, r7, #7
 80043ec:	781b      	ldrb	r3, [r3, #0]
 80043ee:	2b20      	cmp	r3, #32
 80043f0:	d902      	bls.n	80043f8 <NRF905_read+0x28>
		len = NRF905_MAX_PAYLOAD;
 80043f2:	1dfb      	adds	r3, r7, #7
 80043f4:	2220      	movs	r2, #32
 80043f6:	701a      	strb	r2, [r3, #0]

	NRF905_HW_SPI_SELECT(dev->hw);
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	2200      	movs	r2, #0
 80043fe:	2106      	movs	r1, #6
 8004400:	0018      	movs	r0, r3
 8004402:	f000 f94e 	bl	80046a2 <NRF905_hw_gpio_set>
	NRF905_hw_spi_transfer(dev->hw, NRF905_CMD_R_RX_PAYLOAD, NULL);
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	2200      	movs	r2, #0
 800440c:	2124      	movs	r1, #36	; 0x24
 800440e:	0018      	movs	r0, r3
 8004410:	f000 f9f4 	bl	80047fc <NRF905_hw_spi_transfer>

	// Get received payload
	for (uint8_t i = 0; i < len; i++) {
 8004414:	2317      	movs	r3, #23
 8004416:	18fb      	adds	r3, r7, r3
 8004418:	2200      	movs	r2, #0
 800441a:	701a      	strb	r2, [r3, #0]
 800441c:	e00f      	b.n	800443e <NRF905_read+0x6e>
		NRF905_hw_spi_transfer(dev->hw, NRF905_CMD_NOP, &((uint8_t*) data)[i]);
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	6818      	ldr	r0, [r3, #0]
 8004422:	2417      	movs	r4, #23
 8004424:	193b      	adds	r3, r7, r4
 8004426:	781b      	ldrb	r3, [r3, #0]
 8004428:	68ba      	ldr	r2, [r7, #8]
 800442a:	18d3      	adds	r3, r2, r3
 800442c:	001a      	movs	r2, r3
 800442e:	21ff      	movs	r1, #255	; 0xff
 8004430:	f000 f9e4 	bl	80047fc <NRF905_hw_spi_transfer>
	for (uint8_t i = 0; i < len; i++) {
 8004434:	193b      	adds	r3, r7, r4
 8004436:	781a      	ldrb	r2, [r3, #0]
 8004438:	193b      	adds	r3, r7, r4
 800443a:	3201      	adds	r2, #1
 800443c:	701a      	strb	r2, [r3, #0]
 800443e:	2317      	movs	r3, #23
 8004440:	18fa      	adds	r2, r7, r3
 8004442:	1dfb      	adds	r3, r7, #7
 8004444:	7812      	ldrb	r2, [r2, #0]
 8004446:	781b      	ldrb	r3, [r3, #0]
 8004448:	429a      	cmp	r2, r3
 800444a:	d3e8      	bcc.n	800441e <NRF905_read+0x4e>
	}

	NRF905_HW_SPI_DESELECT(dev->hw);
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	2201      	movs	r2, #1
 8004452:	2106      	movs	r1, #6
 8004454:	0018      	movs	r0, r3
 8004456:	f000 f924 	bl	80046a2 <NRF905_hw_gpio_set>

	return 0;
 800445a:	2300      	movs	r3, #0
}
 800445c:	0018      	movs	r0, r3
 800445e:	46bd      	mov	sp, r7
 8004460:	b007      	add	sp, #28
 8004462:	bd90      	pop	{r4, r7, pc}

08004464 <NRF905_init>:
	NRF905_HW_SPI_DESELECT(dev->hw);

	return 0;
}

int NRF905_init(NRF905_t *dev, NRF905_hw_t *hw) {
 8004464:	b590      	push	{r4, r7, lr}
 8004466:	b085      	sub	sp, #20
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
 800446c:	6039      	str	r1, [r7, #0]
	uint8_t i;

	if (dev == NULL) {
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2b00      	cmp	r3, #0
 8004472:	d102      	bne.n	800447a <NRF905_init+0x16>
		return -1;
 8004474:	2301      	movs	r3, #1
 8004476:	425b      	negs	r3, r3
 8004478:	e0d7      	b.n	800462a <NRF905_init+0x1c6>
	}

	if (hw == NULL) {
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	2b00      	cmp	r3, #0
 800447e:	d102      	bne.n	8004486 <NRF905_init+0x22>
		return -2;
 8004480:	2302      	movs	r3, #2
 8004482:	425b      	negs	r3, r3
 8004484:	e0d1      	b.n	800462a <NRF905_init+0x1c6>
	}

	dev->hw = hw;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	683a      	ldr	r2, [r7, #0]
 800448a:	601a      	str	r2, [r3, #0]

	dev->software_pin_configuration = 0x00;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2200      	movs	r2, #0
 8004490:	741a      	strb	r2, [r3, #16]

	NRF905_hw_enable_timer(hw);
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	0018      	movs	r0, r3
 8004496:	f000 f996 	bl	80047c6 <NRF905_hw_enable_timer>

	if (hw->gpio[NRF905_HW_GPIO_DR].port == NULL) {
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d106      	bne.n	80044b0 <NRF905_init+0x4c>
		dev->software_pin_configuration |= NRF905_USE_SOFTWARE_DATA_READY;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	7c1b      	ldrb	r3, [r3, #16]
 80044a6:	2201      	movs	r2, #1
 80044a8:	4313      	orrs	r3, r2
 80044aa:	b2da      	uxtb	r2, r3
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	741a      	strb	r2, [r3, #16]
	}
	if (hw->gpio[NRF905_HW_GPIO_AM].port == NULL) {
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d106      	bne.n	80044c6 <NRF905_init+0x62>
		dev->software_pin_configuration |= NRF905_USE_SOFTWARE_ADDRESS_MATCH;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	7c1b      	ldrb	r3, [r3, #16]
 80044bc:	2202      	movs	r2, #2
 80044be:	4313      	orrs	r3, r2
 80044c0:	b2da      	uxtb	r2, r3
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	741a      	strb	r2, [r3, #16]
	}

	NRF905_HW_SPI_DESELECT(dev->hw);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	2201      	movs	r2, #1
 80044cc:	2106      	movs	r1, #6
 80044ce:	0018      	movs	r0, r3
 80044d0:	f000 f8e7 	bl	80046a2 <NRF905_hw_gpio_set>

	NRF905_HW_POWER_DOWN(dev->hw);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	2200      	movs	r2, #0
 80044da:	2102      	movs	r1, #2
 80044dc:	0018      	movs	r0, r3
 80044de:	f000 f8e0 	bl	80046a2 <NRF905_hw_gpio_set>
	NRF905_HW_STANDBY_ENTER(hw);
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	2200      	movs	r2, #0
 80044e6:	2101      	movs	r1, #1
 80044e8:	0018      	movs	r0, r3
 80044ea:	f000 f8da 	bl	80046a2 <NRF905_hw_gpio_set>
	NRF905_HW_MODE_RX(hw);
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	2200      	movs	r2, #0
 80044f2:	2100      	movs	r1, #0
 80044f4:	0018      	movs	r0, r3
 80044f6:	f000 f8d4 	bl	80046a2 <NRF905_hw_gpio_set>
	NRF905_hw_delay_ms(dev->hw, 3);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	2103      	movs	r1, #3
 8004500:	0018      	movs	r0, r3
 8004502:	f000 f908 	bl	8004716 <NRF905_hw_delay_ms>

	// Set control registers
	NRF905_HW_SPI_SELECT(dev->hw);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	2200      	movs	r2, #0
 800450c:	2106      	movs	r1, #6
 800450e:	0018      	movs	r0, r3
 8004510:	f000 f8c7 	bl	80046a2 <NRF905_hw_gpio_set>
	NRF905_hw_spi_transfer(dev->hw, NRF905_CMD_W_CONFIG | 0x00, NULL);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	2200      	movs	r2, #0
 800451a:	2100      	movs	r1, #0
 800451c:	0018      	movs	r0, r3
 800451e:	f000 f96d 	bl	80047fc <NRF905_hw_spi_transfer>
	for (i = 0; i < sizeof(NRF905_default_config); i++) {
 8004522:	230f      	movs	r3, #15
 8004524:	18fb      	adds	r3, r7, r3
 8004526:	2200      	movs	r2, #0
 8004528:	701a      	strb	r2, [r3, #0]
 800452a:	e00f      	b.n	800454c <NRF905_init+0xe8>
		NRF905_hw_spi_transfer(dev->hw, NRF905_default_config[i], NULL);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6818      	ldr	r0, [r3, #0]
 8004530:	240f      	movs	r4, #15
 8004532:	193b      	adds	r3, r7, r4
 8004534:	781b      	ldrb	r3, [r3, #0]
 8004536:	4a3f      	ldr	r2, [pc, #252]	; (8004634 <NRF905_init+0x1d0>)
 8004538:	5cd3      	ldrb	r3, [r2, r3]
 800453a:	2200      	movs	r2, #0
 800453c:	0019      	movs	r1, r3
 800453e:	f000 f95d 	bl	80047fc <NRF905_hw_spi_transfer>
	for (i = 0; i < sizeof(NRF905_default_config); i++) {
 8004542:	193b      	adds	r3, r7, r4
 8004544:	781a      	ldrb	r2, [r3, #0]
 8004546:	193b      	adds	r3, r7, r4
 8004548:	3201      	adds	r2, #1
 800454a:	701a      	strb	r2, [r3, #0]
 800454c:	240f      	movs	r4, #15
 800454e:	193b      	adds	r3, r7, r4
 8004550:	781b      	ldrb	r3, [r3, #0]
 8004552:	2b09      	cmp	r3, #9
 8004554:	d9ea      	bls.n	800452c <NRF905_init+0xc8>
	}
	NRF905_HW_SPI_DESELECT(dev->hw);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	2201      	movs	r2, #1
 800455c:	2106      	movs	r1, #6
 800455e:	0018      	movs	r0, r3
 8004560:	f000 f89f 	bl	80046a2 <NRF905_hw_gpio_set>

	NRF905_hw_delay_us(dev->hw, 100);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	2164      	movs	r1, #100	; 0x64
 800456a:	0018      	movs	r0, r3
 800456c:	f000 f8e0 	bl	8004730 <NRF905_hw_delay_us>

	NRF905_HW_SPI_SELECT(dev->hw);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	2200      	movs	r2, #0
 8004576:	2106      	movs	r1, #6
 8004578:	0018      	movs	r0, r3
 800457a:	f000 f892 	bl	80046a2 <NRF905_hw_gpio_set>
	// Default transmit address
	NRF905_hw_spi_transfer(dev->hw, NRF905_CMD_W_TX_ADDRESS, NULL);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	2200      	movs	r2, #0
 8004584:	2122      	movs	r1, #34	; 0x22
 8004586:	0018      	movs	r0, r3
 8004588:	f000 f938 	bl	80047fc <NRF905_hw_spi_transfer>
	for (i = 0; i < 4; i++) {
 800458c:	193b      	adds	r3, r7, r4
 800458e:	2200      	movs	r2, #0
 8004590:	701a      	strb	r2, [r3, #0]
 8004592:	e00c      	b.n	80045ae <NRF905_init+0x14a>
		NRF905_hw_spi_transfer(dev->hw, 0xE7, NULL);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	2200      	movs	r2, #0
 800459a:	21e7      	movs	r1, #231	; 0xe7
 800459c:	0018      	movs	r0, r3
 800459e:	f000 f92d 	bl	80047fc <NRF905_hw_spi_transfer>
	for (i = 0; i < 4; i++) {
 80045a2:	210f      	movs	r1, #15
 80045a4:	187b      	adds	r3, r7, r1
 80045a6:	781a      	ldrb	r2, [r3, #0]
 80045a8:	187b      	adds	r3, r7, r1
 80045aa:	3201      	adds	r2, #1
 80045ac:	701a      	strb	r2, [r3, #0]
 80045ae:	240f      	movs	r4, #15
 80045b0:	193b      	adds	r3, r7, r4
 80045b2:	781b      	ldrb	r3, [r3, #0]
 80045b4:	2b03      	cmp	r3, #3
 80045b6:	d9ed      	bls.n	8004594 <NRF905_init+0x130>
	}
	NRF905_HW_SPI_DESELECT(dev->hw);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	2201      	movs	r2, #1
 80045be:	2106      	movs	r1, #6
 80045c0:	0018      	movs	r0, r3
 80045c2:	f000 f86e 	bl	80046a2 <NRF905_hw_gpio_set>

	NRF905_hw_delay_us(dev->hw, 100);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	2164      	movs	r1, #100	; 0x64
 80045cc:	0018      	movs	r0, r3
 80045ce:	f000 f8af 	bl	8004730 <NRF905_hw_delay_us>

	NRF905_HW_SPI_SELECT(dev->hw);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	2200      	movs	r2, #0
 80045d8:	2106      	movs	r1, #6
 80045da:	0018      	movs	r0, r3
 80045dc:	f000 f861 	bl	80046a2 <NRF905_hw_gpio_set>
	// Clear transmit payload
	NRF905_hw_spi_transfer(dev->hw, NRF905_CMD_W_TX_PAYLOAD, NULL);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	2200      	movs	r2, #0
 80045e6:	2120      	movs	r1, #32
 80045e8:	0018      	movs	r0, r3
 80045ea:	f000 f907 	bl	80047fc <NRF905_hw_spi_transfer>
	for (i = 0; i < NRF905_MAX_PAYLOAD; i++) {
 80045ee:	193b      	adds	r3, r7, r4
 80045f0:	2200      	movs	r2, #0
 80045f2:	701a      	strb	r2, [r3, #0]
 80045f4:	e00c      	b.n	8004610 <NRF905_init+0x1ac>
		NRF905_hw_spi_transfer(dev->hw, 0x00, NULL);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	2200      	movs	r2, #0
 80045fc:	2100      	movs	r1, #0
 80045fe:	0018      	movs	r0, r3
 8004600:	f000 f8fc 	bl	80047fc <NRF905_hw_spi_transfer>
	for (i = 0; i < NRF905_MAX_PAYLOAD; i++) {
 8004604:	210f      	movs	r1, #15
 8004606:	187b      	adds	r3, r7, r1
 8004608:	781a      	ldrb	r2, [r3, #0]
 800460a:	187b      	adds	r3, r7, r1
 800460c:	3201      	adds	r2, #1
 800460e:	701a      	strb	r2, [r3, #0]
 8004610:	230f      	movs	r3, #15
 8004612:	18fb      	adds	r3, r7, r3
 8004614:	781b      	ldrb	r3, [r3, #0]
 8004616:	2b1f      	cmp	r3, #31
 8004618:	d9ed      	bls.n	80045f6 <NRF905_init+0x192>
	}
	NRF905_HW_SPI_DESELECT(dev->hw);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	2201      	movs	r2, #1
 8004620:	2106      	movs	r1, #6
 8004622:	0018      	movs	r0, r3
 8004624:	f000 f83d 	bl	80046a2 <NRF905_hw_gpio_set>

	return 0;
 8004628:	2300      	movs	r3, #0
}
 800462a:	0018      	movs	r0, r3
 800462c:	46bd      	mov	sp, r7
 800462e:	b005      	add	sp, #20
 8004630:	bd90      	pop	{r4, r7, pc}
 8004632:	46c0      	nop			; (mov r8, r8)
 8004634:	08006160 	.word	0x08006160

08004638 <NRF905_hw_gpio_get>:

#include "gpio.h"
#include "tim.h"
#include "spi.h"

int NRF905_hw_gpio_get(NRF905_hw_t *hw, uint8_t gpio) {
 8004638:	b580      	push	{r7, lr}
 800463a:	b082      	sub	sp, #8
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
 8004640:	000a      	movs	r2, r1
 8004642:	1cfb      	adds	r3, r7, #3
 8004644:	701a      	strb	r2, [r3, #0]
	if (hw == NULL) {
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2b00      	cmp	r3, #0
 800464a:	d102      	bne.n	8004652 <NRF905_hw_gpio_get+0x1a>
		return -1;
 800464c:	2301      	movs	r3, #1
 800464e:	425b      	negs	r3, r3
 8004650:	e023      	b.n	800469a <NRF905_hw_gpio_get+0x62>
	}

	if (gpio >= 0 && gpio <= 6) {
 8004652:	1cfb      	adds	r3, r7, #3
 8004654:	781b      	ldrb	r3, [r3, #0]
 8004656:	2b06      	cmp	r3, #6
 8004658:	d81d      	bhi.n	8004696 <NRF905_hw_gpio_get+0x5e>
		if (hw->gpio[gpio].port) {
 800465a:	1cfb      	adds	r3, r7, #3
 800465c:	781b      	ldrb	r3, [r3, #0]
 800465e:	687a      	ldr	r2, [r7, #4]
 8004660:	00db      	lsls	r3, r3, #3
 8004662:	18d3      	adds	r3, r2, r3
 8004664:	3304      	adds	r3, #4
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	2b00      	cmp	r3, #0
 800466a:	d011      	beq.n	8004690 <NRF905_hw_gpio_get+0x58>
			return HAL_GPIO_ReadPin((GPIO_TypeDef*) hw->gpio[gpio].port,
 800466c:	1cfb      	adds	r3, r7, #3
 800466e:	781b      	ldrb	r3, [r3, #0]
 8004670:	687a      	ldr	r2, [r7, #4]
 8004672:	00db      	lsls	r3, r3, #3
 8004674:	18d3      	adds	r3, r2, r3
 8004676:	3304      	adds	r3, #4
 8004678:	6818      	ldr	r0, [r3, #0]
					hw->gpio[gpio].pin);
 800467a:	1cfb      	adds	r3, r7, #3
 800467c:	781a      	ldrb	r2, [r3, #0]
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	00d2      	lsls	r2, r2, #3
 8004682:	58d3      	ldr	r3, [r2, r3]
			return HAL_GPIO_ReadPin((GPIO_TypeDef*) hw->gpio[gpio].port,
 8004684:	b29b      	uxth	r3, r3
 8004686:	0019      	movs	r1, r3
 8004688:	f7fd f8b6 	bl	80017f8 <HAL_GPIO_ReadPin>
 800468c:	0003      	movs	r3, r0
 800468e:	e004      	b.n	800469a <NRF905_hw_gpio_get+0x62>
		} else {
			return -2;
 8004690:	2302      	movs	r3, #2
 8004692:	425b      	negs	r3, r3
 8004694:	e001      	b.n	800469a <NRF905_hw_gpio_get+0x62>
		}
	}

	return -3;
 8004696:	2303      	movs	r3, #3
 8004698:	425b      	negs	r3, r3
}
 800469a:	0018      	movs	r0, r3
 800469c:	46bd      	mov	sp, r7
 800469e:	b002      	add	sp, #8
 80046a0:	bd80      	pop	{r7, pc}

080046a2 <NRF905_hw_gpio_set>:

int NRF905_hw_gpio_set(NRF905_hw_t *hw, uint8_t gpio, uint8_t value) {
 80046a2:	b580      	push	{r7, lr}
 80046a4:	b082      	sub	sp, #8
 80046a6:	af00      	add	r7, sp, #0
 80046a8:	6078      	str	r0, [r7, #4]
 80046aa:	0008      	movs	r0, r1
 80046ac:	0011      	movs	r1, r2
 80046ae:	1cfb      	adds	r3, r7, #3
 80046b0:	1c02      	adds	r2, r0, #0
 80046b2:	701a      	strb	r2, [r3, #0]
 80046b4:	1cbb      	adds	r3, r7, #2
 80046b6:	1c0a      	adds	r2, r1, #0
 80046b8:	701a      	strb	r2, [r3, #0]
	if (hw == NULL) {
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d102      	bne.n	80046c6 <NRF905_hw_gpio_set+0x24>
		return -1;
 80046c0:	2301      	movs	r3, #1
 80046c2:	425b      	negs	r3, r3
 80046c4:	e023      	b.n	800470e <NRF905_hw_gpio_set+0x6c>
	}

	if (gpio >= 0 && gpio <= 6) {
 80046c6:	1cfb      	adds	r3, r7, #3
 80046c8:	781b      	ldrb	r3, [r3, #0]
 80046ca:	2b06      	cmp	r3, #6
 80046cc:	d81e      	bhi.n	800470c <NRF905_hw_gpio_set+0x6a>
		if (hw->gpio[gpio].port) {
 80046ce:	1cfb      	adds	r3, r7, #3
 80046d0:	781b      	ldrb	r3, [r3, #0]
 80046d2:	687a      	ldr	r2, [r7, #4]
 80046d4:	00db      	lsls	r3, r3, #3
 80046d6:	18d3      	adds	r3, r2, r3
 80046d8:	3304      	adds	r3, #4
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d012      	beq.n	8004706 <NRF905_hw_gpio_set+0x64>
			HAL_GPIO_WritePin((GPIO_TypeDef*) hw->gpio[gpio].port,
 80046e0:	1cfb      	adds	r3, r7, #3
 80046e2:	781b      	ldrb	r3, [r3, #0]
 80046e4:	687a      	ldr	r2, [r7, #4]
 80046e6:	00db      	lsls	r3, r3, #3
 80046e8:	18d3      	adds	r3, r2, r3
 80046ea:	3304      	adds	r3, #4
 80046ec:	6818      	ldr	r0, [r3, #0]
					hw->gpio[gpio].pin, value);
 80046ee:	1cfb      	adds	r3, r7, #3
 80046f0:	781a      	ldrb	r2, [r3, #0]
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	00d2      	lsls	r2, r2, #3
 80046f6:	58d3      	ldr	r3, [r2, r3]
			HAL_GPIO_WritePin((GPIO_TypeDef*) hw->gpio[gpio].port,
 80046f8:	b299      	uxth	r1, r3
 80046fa:	1cbb      	adds	r3, r7, #2
 80046fc:	781b      	ldrb	r3, [r3, #0]
 80046fe:	001a      	movs	r2, r3
 8004700:	f7fd f897 	bl	8001832 <HAL_GPIO_WritePin>
 8004704:	e002      	b.n	800470c <NRF905_hw_gpio_set+0x6a>
		} else {
			return -2;
 8004706:	2302      	movs	r3, #2
 8004708:	425b      	negs	r3, r3
 800470a:	e000      	b.n	800470e <NRF905_hw_gpio_set+0x6c>
		}
	}

	return 0;
 800470c:	2300      	movs	r3, #0
}
 800470e:	0018      	movs	r0, r3
 8004710:	46bd      	mov	sp, r7
 8004712:	b002      	add	sp, #8
 8004714:	bd80      	pop	{r7, pc}

08004716 <NRF905_hw_delay_ms>:

void NRF905_hw_delay_ms(NRF905_hw_t *hw, uint32_t ms) {
 8004716:	b580      	push	{r7, lr}
 8004718:	b082      	sub	sp, #8
 800471a:	af00      	add	r7, sp, #0
 800471c:	6078      	str	r0, [r7, #4]
 800471e:	6039      	str	r1, [r7, #0]
	HAL_Delay(ms);
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	0018      	movs	r0, r3
 8004724:	f7fc fd82 	bl	800122c <HAL_Delay>
}
 8004728:	46c0      	nop			; (mov r8, r8)
 800472a:	46bd      	mov	sp, r7
 800472c:	b002      	add	sp, #8
 800472e:	bd80      	pop	{r7, pc}

08004730 <NRF905_hw_delay_us>:

void NRF905_hw_delay_us(NRF905_hw_t *hw, uint16_t delay) {
 8004730:	b580      	push	{r7, lr}
 8004732:	b084      	sub	sp, #16
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
 8004738:	000a      	movs	r2, r1
 800473a:	1cbb      	adds	r3, r7, #2
 800473c:	801a      	strh	r2, [r3, #0]
	if (hw->tim != NULL) {
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004742:	2b00      	cmp	r3, #0
 8004744:	d03b      	beq.n	80047be <NRF905_hw_delay_us+0x8e>
		volatile uint16_t current_time, stop_time;
		current_time = __HAL_TIM_GET_COUNTER((TIM_HandleTypeDef* ) (hw->tim));
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800474e:	b29a      	uxth	r2, r3
 8004750:	210e      	movs	r1, #14
 8004752:	187b      	adds	r3, r7, r1
 8004754:	801a      	strh	r2, [r3, #0]
		stop_time = current_time + delay;
 8004756:	187b      	adds	r3, r7, r1
 8004758:	881b      	ldrh	r3, [r3, #0]
 800475a:	b29a      	uxth	r2, r3
 800475c:	1cbb      	adds	r3, r7, #2
 800475e:	881b      	ldrh	r3, [r3, #0]
 8004760:	18d3      	adds	r3, r2, r3
 8004762:	b29a      	uxth	r2, r3
 8004764:	200c      	movs	r0, #12
 8004766:	183b      	adds	r3, r7, r0
 8004768:	801a      	strh	r2, [r3, #0]

		//overflow
		if (stop_time < current_time) {
 800476a:	183b      	adds	r3, r7, r0
 800476c:	881b      	ldrh	r3, [r3, #0]
 800476e:	b29a      	uxth	r2, r3
 8004770:	187b      	adds	r3, r7, r1
 8004772:	881b      	ldrh	r3, [r3, #0]
 8004774:	b29b      	uxth	r3, r3
 8004776:	429a      	cmp	r2, r3
 8004778:	d210      	bcs.n	800479c <NRF905_hw_delay_us+0x6c>
			do {
				current_time = __HAL_TIM_GET_COUNTER(
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004782:	b29a      	uxth	r2, r3
 8004784:	210e      	movs	r1, #14
 8004786:	187b      	adds	r3, r7, r1
 8004788:	801a      	strh	r2, [r3, #0]
						(TIM_HandleTypeDef* ) (hw->tim));
			} while (current_time > stop_time);
 800478a:	187b      	adds	r3, r7, r1
 800478c:	881b      	ldrh	r3, [r3, #0]
 800478e:	b29a      	uxth	r2, r3
 8004790:	230c      	movs	r3, #12
 8004792:	18fb      	adds	r3, r7, r3
 8004794:	881b      	ldrh	r3, [r3, #0]
 8004796:	b29b      	uxth	r3, r3
 8004798:	429a      	cmp	r2, r3
 800479a:	d8ee      	bhi.n	800477a <NRF905_hw_delay_us+0x4a>
		}

		do {
			current_time = __HAL_TIM_GET_COUNTER(
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047a4:	b29a      	uxth	r2, r3
 80047a6:	210e      	movs	r1, #14
 80047a8:	187b      	adds	r3, r7, r1
 80047aa:	801a      	strh	r2, [r3, #0]
					(TIM_HandleTypeDef* ) (hw->tim));
		} while (current_time < stop_time);
 80047ac:	187b      	adds	r3, r7, r1
 80047ae:	881b      	ldrh	r3, [r3, #0]
 80047b0:	b29a      	uxth	r2, r3
 80047b2:	230c      	movs	r3, #12
 80047b4:	18fb      	adds	r3, r7, r3
 80047b6:	881b      	ldrh	r3, [r3, #0]
 80047b8:	b29b      	uxth	r3, r3
 80047ba:	429a      	cmp	r2, r3
 80047bc:	d3ee      	bcc.n	800479c <NRF905_hw_delay_us+0x6c>
	}
}
 80047be:	46c0      	nop			; (mov r8, r8)
 80047c0:	46bd      	mov	sp, r7
 80047c2:	b004      	add	sp, #16
 80047c4:	bd80      	pop	{r7, pc}

080047c6 <NRF905_hw_enable_timer>:

void NRF905_hw_enable_timer(NRF905_hw_t *hw) {
 80047c6:	b580      	push	{r7, lr}
 80047c8:	b082      	sub	sp, #8
 80047ca:	af00      	add	r7, sp, #0
 80047cc:	6078      	str	r0, [r7, #4]
	if (hw->tim != NULL) {
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d00e      	beq.n	80047f4 <NRF905_hw_enable_timer+0x2e>
		__HAL_TIM_SET_COUNTER((TIM_HandleTypeDef* )(hw->tim), 0);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	2200      	movs	r2, #0
 80047de:	625a      	str	r2, [r3, #36]	; 0x24
		__HAL_TIM_ENABLE((TIM_HandleTypeDef* )hw->tim);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	681a      	ldr	r2, [r3, #0]
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	2101      	movs	r1, #1
 80047f0:	430a      	orrs	r2, r1
 80047f2:	601a      	str	r2, [r3, #0]
	}
}
 80047f4:	46c0      	nop			; (mov r8, r8)
 80047f6:	46bd      	mov	sp, r7
 80047f8:	b002      	add	sp, #8
 80047fa:	bd80      	pop	{r7, pc}

080047fc <NRF905_hw_spi_transfer>:

int NRF905_hw_spi_transfer(NRF905_hw_t *hw, uint8_t data_tx, uint8_t *data_rx) {
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b088      	sub	sp, #32
 8004800:	af02      	add	r7, sp, #8
 8004802:	60f8      	str	r0, [r7, #12]
 8004804:	607a      	str	r2, [r7, #4]
 8004806:	230b      	movs	r3, #11
 8004808:	18fb      	adds	r3, r7, r3
 800480a:	1c0a      	adds	r2, r1, #0
 800480c:	701a      	strb	r2, [r3, #0]
	uint8_t dummy;
	int ret;

	if (hw == NULL) {
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d102      	bne.n	800481a <NRF905_hw_spi_transfer+0x1e>
		return -1;
 8004814:	2301      	movs	r3, #1
 8004816:	425b      	negs	r3, r3
 8004818:	e012      	b.n	8004840 <NRF905_hw_spi_transfer+0x44>
	}

	if (data_rx == NULL) {
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2b00      	cmp	r3, #0
 800481e:	d102      	bne.n	8004826 <NRF905_hw_spi_transfer+0x2a>
		data_rx = &dummy;
 8004820:	2313      	movs	r3, #19
 8004822:	18fb      	adds	r3, r7, r3
 8004824:	607b      	str	r3, [r7, #4]
	}

	ret = HAL_SPI_TransmitReceive((SPI_HandleTypeDef*) hw->spi, &data_tx,
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800482a:	687a      	ldr	r2, [r7, #4]
 800482c:	230b      	movs	r3, #11
 800482e:	18f9      	adds	r1, r7, r3
 8004830:	2364      	movs	r3, #100	; 0x64
 8004832:	9300      	str	r3, [sp, #0]
 8004834:	2301      	movs	r3, #1
 8004836:	f7fd ff99 	bl	800276c <HAL_SPI_TransmitReceive>
 800483a:	0003      	movs	r3, r0
 800483c:	617b      	str	r3, [r7, #20]
			data_rx, 1, 100);

	return ret;
 800483e:	697b      	ldr	r3, [r7, #20]
}
 8004840:	0018      	movs	r0, r3
 8004842:	46bd      	mov	sp, r7
 8004844:	b006      	add	sp, #24
 8004846:	bd80      	pop	{r7, pc}

08004848 <findslot>:
 8004848:	4b0a      	ldr	r3, [pc, #40]	; (8004874 <findslot+0x2c>)
 800484a:	b510      	push	{r4, lr}
 800484c:	0004      	movs	r4, r0
 800484e:	6818      	ldr	r0, [r3, #0]
 8004850:	2800      	cmp	r0, #0
 8004852:	d004      	beq.n	800485e <findslot+0x16>
 8004854:	6983      	ldr	r3, [r0, #24]
 8004856:	2b00      	cmp	r3, #0
 8004858:	d101      	bne.n	800485e <findslot+0x16>
 800485a:	f000 fb03 	bl	8004e64 <__sinit>
 800485e:	2000      	movs	r0, #0
 8004860:	2c13      	cmp	r4, #19
 8004862:	d805      	bhi.n	8004870 <findslot+0x28>
 8004864:	4b04      	ldr	r3, [pc, #16]	; (8004878 <findslot+0x30>)
 8004866:	00e4      	lsls	r4, r4, #3
 8004868:	58e2      	ldr	r2, [r4, r3]
 800486a:	3201      	adds	r2, #1
 800486c:	d000      	beq.n	8004870 <findslot+0x28>
 800486e:	18e0      	adds	r0, r4, r3
 8004870:	bd10      	pop	{r4, pc}
 8004872:	46c0      	nop			; (mov r8, r8)
 8004874:	20000014 	.word	0x20000014
 8004878:	2000026c 	.word	0x2000026c

0800487c <error>:
 800487c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800487e:	0004      	movs	r4, r0
 8004880:	f000 fa88 	bl	8004d94 <__errno>
 8004884:	2613      	movs	r6, #19
 8004886:	0005      	movs	r5, r0
 8004888:	2700      	movs	r7, #0
 800488a:	1c30      	adds	r0, r6, #0
 800488c:	1c39      	adds	r1, r7, #0
 800488e:	beab      	bkpt	0x00ab
 8004890:	1c06      	adds	r6, r0, #0
 8004892:	602e      	str	r6, [r5, #0]
 8004894:	0020      	movs	r0, r4
 8004896:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08004898 <checkerror>:
 8004898:	b510      	push	{r4, lr}
 800489a:	1c43      	adds	r3, r0, #1
 800489c:	d101      	bne.n	80048a2 <checkerror+0xa>
 800489e:	f7ff ffed 	bl	800487c <error>
 80048a2:	bd10      	pop	{r4, pc}

080048a4 <_swiread>:
 80048a4:	b530      	push	{r4, r5, lr}
 80048a6:	b085      	sub	sp, #20
 80048a8:	ad01      	add	r5, sp, #4
 80048aa:	9001      	str	r0, [sp, #4]
 80048ac:	9102      	str	r1, [sp, #8]
 80048ae:	9203      	str	r2, [sp, #12]
 80048b0:	2406      	movs	r4, #6
 80048b2:	1c20      	adds	r0, r4, #0
 80048b4:	1c29      	adds	r1, r5, #0
 80048b6:	beab      	bkpt	0x00ab
 80048b8:	1c04      	adds	r4, r0, #0
 80048ba:	0020      	movs	r0, r4
 80048bc:	f7ff ffec 	bl	8004898 <checkerror>
 80048c0:	b005      	add	sp, #20
 80048c2:	bd30      	pop	{r4, r5, pc}

080048c4 <_read>:
 80048c4:	b570      	push	{r4, r5, r6, lr}
 80048c6:	000e      	movs	r6, r1
 80048c8:	0015      	movs	r5, r2
 80048ca:	f7ff ffbd 	bl	8004848 <findslot>
 80048ce:	1e04      	subs	r4, r0, #0
 80048d0:	d106      	bne.n	80048e0 <_read+0x1c>
 80048d2:	f000 fa5f 	bl	8004d94 <__errno>
 80048d6:	2309      	movs	r3, #9
 80048d8:	6003      	str	r3, [r0, #0]
 80048da:	2001      	movs	r0, #1
 80048dc:	4240      	negs	r0, r0
 80048de:	bd70      	pop	{r4, r5, r6, pc}
 80048e0:	002a      	movs	r2, r5
 80048e2:	0031      	movs	r1, r6
 80048e4:	6800      	ldr	r0, [r0, #0]
 80048e6:	f7ff ffdd 	bl	80048a4 <_swiread>
 80048ea:	1c43      	adds	r3, r0, #1
 80048ec:	d0f7      	beq.n	80048de <_read+0x1a>
 80048ee:	6863      	ldr	r3, [r4, #4]
 80048f0:	1a28      	subs	r0, r5, r0
 80048f2:	181b      	adds	r3, r3, r0
 80048f4:	6063      	str	r3, [r4, #4]
 80048f6:	e7f2      	b.n	80048de <_read+0x1a>

080048f8 <_swilseek>:
 80048f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80048fa:	000c      	movs	r4, r1
 80048fc:	0016      	movs	r6, r2
 80048fe:	f7ff ffa3 	bl	8004848 <findslot>
 8004902:	1e05      	subs	r5, r0, #0
 8004904:	d107      	bne.n	8004916 <_swilseek+0x1e>
 8004906:	f000 fa45 	bl	8004d94 <__errno>
 800490a:	2309      	movs	r3, #9
 800490c:	6003      	str	r3, [r0, #0]
 800490e:	2401      	movs	r4, #1
 8004910:	4264      	negs	r4, r4
 8004912:	0020      	movs	r0, r4
 8004914:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004916:	2e02      	cmp	r6, #2
 8004918:	d903      	bls.n	8004922 <_swilseek+0x2a>
 800491a:	f000 fa3b 	bl	8004d94 <__errno>
 800491e:	2316      	movs	r3, #22
 8004920:	e7f4      	b.n	800490c <_swilseek+0x14>
 8004922:	2e01      	cmp	r6, #1
 8004924:	d112      	bne.n	800494c <_swilseek+0x54>
 8004926:	6843      	ldr	r3, [r0, #4]
 8004928:	18e4      	adds	r4, r4, r3
 800492a:	d4f6      	bmi.n	800491a <_swilseek+0x22>
 800492c:	466f      	mov	r7, sp
 800492e:	682b      	ldr	r3, [r5, #0]
 8004930:	260a      	movs	r6, #10
 8004932:	9300      	str	r3, [sp, #0]
 8004934:	607c      	str	r4, [r7, #4]
 8004936:	1c30      	adds	r0, r6, #0
 8004938:	1c39      	adds	r1, r7, #0
 800493a:	beab      	bkpt	0x00ab
 800493c:	1c06      	adds	r6, r0, #0
 800493e:	0030      	movs	r0, r6
 8004940:	f7ff ffaa 	bl	8004898 <checkerror>
 8004944:	2800      	cmp	r0, #0
 8004946:	dbe2      	blt.n	800490e <_swilseek+0x16>
 8004948:	606c      	str	r4, [r5, #4]
 800494a:	e7e2      	b.n	8004912 <_swilseek+0x1a>
 800494c:	2e02      	cmp	r6, #2
 800494e:	d1ed      	bne.n	800492c <_swilseek+0x34>
 8004950:	6803      	ldr	r3, [r0, #0]
 8004952:	466f      	mov	r7, sp
 8004954:	9300      	str	r3, [sp, #0]
 8004956:	360a      	adds	r6, #10
 8004958:	1c30      	adds	r0, r6, #0
 800495a:	1c39      	adds	r1, r7, #0
 800495c:	beab      	bkpt	0x00ab
 800495e:	1c06      	adds	r6, r0, #0
 8004960:	0030      	movs	r0, r6
 8004962:	f7ff ff99 	bl	8004898 <checkerror>
 8004966:	1824      	adds	r4, r4, r0
 8004968:	1c43      	adds	r3, r0, #1
 800496a:	d1df      	bne.n	800492c <_swilseek+0x34>
 800496c:	e7cf      	b.n	800490e <_swilseek+0x16>

0800496e <_lseek>:
 800496e:	b510      	push	{r4, lr}
 8004970:	f7ff ffc2 	bl	80048f8 <_swilseek>
 8004974:	bd10      	pop	{r4, pc}

08004976 <_swiwrite>:
 8004976:	b530      	push	{r4, r5, lr}
 8004978:	b085      	sub	sp, #20
 800497a:	ad01      	add	r5, sp, #4
 800497c:	9001      	str	r0, [sp, #4]
 800497e:	9102      	str	r1, [sp, #8]
 8004980:	9203      	str	r2, [sp, #12]
 8004982:	2405      	movs	r4, #5
 8004984:	1c20      	adds	r0, r4, #0
 8004986:	1c29      	adds	r1, r5, #0
 8004988:	beab      	bkpt	0x00ab
 800498a:	1c04      	adds	r4, r0, #0
 800498c:	0020      	movs	r0, r4
 800498e:	f7ff ff83 	bl	8004898 <checkerror>
 8004992:	b005      	add	sp, #20
 8004994:	bd30      	pop	{r4, r5, pc}

08004996 <_write>:
 8004996:	b570      	push	{r4, r5, r6, lr}
 8004998:	000e      	movs	r6, r1
 800499a:	0015      	movs	r5, r2
 800499c:	f7ff ff54 	bl	8004848 <findslot>
 80049a0:	1e04      	subs	r4, r0, #0
 80049a2:	d106      	bne.n	80049b2 <_write+0x1c>
 80049a4:	f000 f9f6 	bl	8004d94 <__errno>
 80049a8:	2309      	movs	r3, #9
 80049aa:	6003      	str	r3, [r0, #0]
 80049ac:	2001      	movs	r0, #1
 80049ae:	4240      	negs	r0, r0
 80049b0:	e00f      	b.n	80049d2 <_write+0x3c>
 80049b2:	002a      	movs	r2, r5
 80049b4:	0031      	movs	r1, r6
 80049b6:	6800      	ldr	r0, [r0, #0]
 80049b8:	f7ff ffdd 	bl	8004976 <_swiwrite>
 80049bc:	1e03      	subs	r3, r0, #0
 80049be:	dbf5      	blt.n	80049ac <_write+0x16>
 80049c0:	6862      	ldr	r2, [r4, #4]
 80049c2:	1a28      	subs	r0, r5, r0
 80049c4:	1812      	adds	r2, r2, r0
 80049c6:	6062      	str	r2, [r4, #4]
 80049c8:	42ab      	cmp	r3, r5
 80049ca:	d102      	bne.n	80049d2 <_write+0x3c>
 80049cc:	2000      	movs	r0, #0
 80049ce:	f7ff ff55 	bl	800487c <error>
 80049d2:	bd70      	pop	{r4, r5, r6, pc}

080049d4 <_swiclose>:
 80049d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80049d6:	2402      	movs	r4, #2
 80049d8:	9001      	str	r0, [sp, #4]
 80049da:	ad01      	add	r5, sp, #4
 80049dc:	1c20      	adds	r0, r4, #0
 80049de:	1c29      	adds	r1, r5, #0
 80049e0:	beab      	bkpt	0x00ab
 80049e2:	1c04      	adds	r4, r0, #0
 80049e4:	0020      	movs	r0, r4
 80049e6:	f7ff ff57 	bl	8004898 <checkerror>
 80049ea:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

080049ec <_close>:
 80049ec:	b570      	push	{r4, r5, r6, lr}
 80049ee:	0005      	movs	r5, r0
 80049f0:	f7ff ff2a 	bl	8004848 <findslot>
 80049f4:	1e04      	subs	r4, r0, #0
 80049f6:	d106      	bne.n	8004a06 <_close+0x1a>
 80049f8:	f000 f9cc 	bl	8004d94 <__errno>
 80049fc:	2309      	movs	r3, #9
 80049fe:	6003      	str	r3, [r0, #0]
 8004a00:	2001      	movs	r0, #1
 8004a02:	4240      	negs	r0, r0
 8004a04:	bd70      	pop	{r4, r5, r6, pc}
 8004a06:	3d01      	subs	r5, #1
 8004a08:	2d01      	cmp	r5, #1
 8004a0a:	d809      	bhi.n	8004a20 <_close+0x34>
 8004a0c:	4b09      	ldr	r3, [pc, #36]	; (8004a34 <_close+0x48>)
 8004a0e:	689a      	ldr	r2, [r3, #8]
 8004a10:	691b      	ldr	r3, [r3, #16]
 8004a12:	429a      	cmp	r2, r3
 8004a14:	d104      	bne.n	8004a20 <_close+0x34>
 8004a16:	2301      	movs	r3, #1
 8004a18:	425b      	negs	r3, r3
 8004a1a:	6003      	str	r3, [r0, #0]
 8004a1c:	2000      	movs	r0, #0
 8004a1e:	e7f1      	b.n	8004a04 <_close+0x18>
 8004a20:	6820      	ldr	r0, [r4, #0]
 8004a22:	f7ff ffd7 	bl	80049d4 <_swiclose>
 8004a26:	2800      	cmp	r0, #0
 8004a28:	d1ec      	bne.n	8004a04 <_close+0x18>
 8004a2a:	2301      	movs	r3, #1
 8004a2c:	425b      	negs	r3, r3
 8004a2e:	6023      	str	r3, [r4, #0]
 8004a30:	e7e8      	b.n	8004a04 <_close+0x18>
 8004a32:	46c0      	nop			; (mov r8, r8)
 8004a34:	2000026c 	.word	0x2000026c

08004a38 <_getpid>:
 8004a38:	2001      	movs	r0, #1
 8004a3a:	4770      	bx	lr

08004a3c <_swistat>:
 8004a3c:	b570      	push	{r4, r5, r6, lr}
 8004a3e:	000c      	movs	r4, r1
 8004a40:	f7ff ff02 	bl	8004848 <findslot>
 8004a44:	1e05      	subs	r5, r0, #0
 8004a46:	d106      	bne.n	8004a56 <_swistat+0x1a>
 8004a48:	f000 f9a4 	bl	8004d94 <__errno>
 8004a4c:	2309      	movs	r3, #9
 8004a4e:	6003      	str	r3, [r0, #0]
 8004a50:	2001      	movs	r0, #1
 8004a52:	4240      	negs	r0, r0
 8004a54:	bd70      	pop	{r4, r5, r6, pc}
 8004a56:	2380      	movs	r3, #128	; 0x80
 8004a58:	6862      	ldr	r2, [r4, #4]
 8004a5a:	019b      	lsls	r3, r3, #6
 8004a5c:	4313      	orrs	r3, r2
 8004a5e:	6063      	str	r3, [r4, #4]
 8004a60:	2380      	movs	r3, #128	; 0x80
 8004a62:	00db      	lsls	r3, r3, #3
 8004a64:	260c      	movs	r6, #12
 8004a66:	64a3      	str	r3, [r4, #72]	; 0x48
 8004a68:	1c30      	adds	r0, r6, #0
 8004a6a:	1c29      	adds	r1, r5, #0
 8004a6c:	beab      	bkpt	0x00ab
 8004a6e:	1c05      	adds	r5, r0, #0
 8004a70:	0028      	movs	r0, r5
 8004a72:	f7ff ff11 	bl	8004898 <checkerror>
 8004a76:	1c43      	adds	r3, r0, #1
 8004a78:	d0ec      	beq.n	8004a54 <_swistat+0x18>
 8004a7a:	6120      	str	r0, [r4, #16]
 8004a7c:	2000      	movs	r0, #0
 8004a7e:	e7e9      	b.n	8004a54 <_swistat+0x18>

08004a80 <_fstat>:
 8004a80:	b570      	push	{r4, r5, r6, lr}
 8004a82:	000c      	movs	r4, r1
 8004a84:	0005      	movs	r5, r0
 8004a86:	2258      	movs	r2, #88	; 0x58
 8004a88:	2100      	movs	r1, #0
 8004a8a:	0020      	movs	r0, r4
 8004a8c:	f000 fab1 	bl	8004ff2 <memset>
 8004a90:	0028      	movs	r0, r5
 8004a92:	0021      	movs	r1, r4
 8004a94:	f7ff ffd2 	bl	8004a3c <_swistat>
 8004a98:	bd70      	pop	{r4, r5, r6, pc}

08004a9a <_stat>:
 8004a9a:	b570      	push	{r4, r5, r6, lr}
 8004a9c:	000d      	movs	r5, r1
 8004a9e:	0004      	movs	r4, r0
 8004aa0:	2258      	movs	r2, #88	; 0x58
 8004aa2:	2100      	movs	r1, #0
 8004aa4:	0028      	movs	r0, r5
 8004aa6:	f000 faa4 	bl	8004ff2 <memset>
 8004aaa:	0020      	movs	r0, r4
 8004aac:	2100      	movs	r1, #0
 8004aae:	f000 f813 	bl	8004ad8 <_swiopen>
 8004ab2:	0004      	movs	r4, r0
 8004ab4:	1c43      	adds	r3, r0, #1
 8004ab6:	d00c      	beq.n	8004ad2 <_stat+0x38>
 8004ab8:	2381      	movs	r3, #129	; 0x81
 8004aba:	686a      	ldr	r2, [r5, #4]
 8004abc:	021b      	lsls	r3, r3, #8
 8004abe:	4313      	orrs	r3, r2
 8004ac0:	0029      	movs	r1, r5
 8004ac2:	606b      	str	r3, [r5, #4]
 8004ac4:	f7ff ffba 	bl	8004a3c <_swistat>
 8004ac8:	0005      	movs	r5, r0
 8004aca:	0020      	movs	r0, r4
 8004acc:	f7ff ff8e 	bl	80049ec <_close>
 8004ad0:	002c      	movs	r4, r5
 8004ad2:	0020      	movs	r0, r4
 8004ad4:	bd70      	pop	{r4, r5, r6, pc}
	...

08004ad8 <_swiopen>:
 8004ad8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004ada:	000d      	movs	r5, r1
 8004adc:	2600      	movs	r6, #0
 8004ade:	b099      	sub	sp, #100	; 0x64
 8004ae0:	9000      	str	r0, [sp, #0]
 8004ae2:	00f3      	lsls	r3, r6, #3
 8004ae4:	9301      	str	r3, [sp, #4]
 8004ae6:	4b29      	ldr	r3, [pc, #164]	; (8004b8c <_swiopen+0xb4>)
 8004ae8:	00f2      	lsls	r2, r6, #3
 8004aea:	589c      	ldr	r4, [r3, r2]
 8004aec:	1c63      	adds	r3, r4, #1
 8004aee:	d038      	beq.n	8004b62 <_swiopen+0x8a>
 8004af0:	3601      	adds	r6, #1
 8004af2:	2e14      	cmp	r6, #20
 8004af4:	d1f5      	bne.n	8004ae2 <_swiopen+0xa>
 8004af6:	f000 f94d 	bl	8004d94 <__errno>
 8004afa:	2401      	movs	r4, #1
 8004afc:	2318      	movs	r3, #24
 8004afe:	4264      	negs	r4, r4
 8004b00:	6003      	str	r3, [r0, #0]
 8004b02:	e03f      	b.n	8004b84 <_swiopen+0xac>
 8004b04:	2302      	movs	r3, #2
 8004b06:	03ec      	lsls	r4, r5, #15
 8004b08:	0fe4      	lsrs	r4, r4, #31
 8004b0a:	421d      	tst	r5, r3
 8004b0c:	d000      	beq.n	8004b10 <_swiopen+0x38>
 8004b0e:	431c      	orrs	r4, r3
 8004b10:	4b1f      	ldr	r3, [pc, #124]	; (8004b90 <_swiopen+0xb8>)
 8004b12:	421d      	tst	r5, r3
 8004b14:	d001      	beq.n	8004b1a <_swiopen+0x42>
 8004b16:	2304      	movs	r3, #4
 8004b18:	431c      	orrs	r4, r3
 8004b1a:	2308      	movs	r3, #8
 8004b1c:	421d      	tst	r5, r3
 8004b1e:	d002      	beq.n	8004b26 <_swiopen+0x4e>
 8004b20:	2204      	movs	r2, #4
 8004b22:	4394      	bics	r4, r2
 8004b24:	431c      	orrs	r4, r3
 8004b26:	9b00      	ldr	r3, [sp, #0]
 8004b28:	0018      	movs	r0, r3
 8004b2a:	9302      	str	r3, [sp, #8]
 8004b2c:	f7fb faea 	bl	8000104 <strlen>
 8004b30:	607c      	str	r4, [r7, #4]
 8004b32:	60b8      	str	r0, [r7, #8]
 8004b34:	2401      	movs	r4, #1
 8004b36:	1c20      	adds	r0, r4, #0
 8004b38:	1c39      	adds	r1, r7, #0
 8004b3a:	beab      	bkpt	0x00ab
 8004b3c:	1c04      	adds	r4, r0, #0
 8004b3e:	2c00      	cmp	r4, #0
 8004b40:	db0a      	blt.n	8004b58 <_swiopen+0x80>
 8004b42:	4b12      	ldr	r3, [pc, #72]	; (8004b8c <_swiopen+0xb4>)
 8004b44:	00f2      	lsls	r2, r6, #3
 8004b46:	509c      	str	r4, [r3, r2]
 8004b48:	0013      	movs	r3, r2
 8004b4a:	4a10      	ldr	r2, [pc, #64]	; (8004b8c <_swiopen+0xb4>)
 8004b4c:	0034      	movs	r4, r6
 8004b4e:	4694      	mov	ip, r2
 8004b50:	2200      	movs	r2, #0
 8004b52:	4463      	add	r3, ip
 8004b54:	605a      	str	r2, [r3, #4]
 8004b56:	e015      	b.n	8004b84 <_swiopen+0xac>
 8004b58:	0020      	movs	r0, r4
 8004b5a:	f7ff fe8f 	bl	800487c <error>
 8004b5e:	0004      	movs	r4, r0
 8004b60:	e010      	b.n	8004b84 <_swiopen+0xac>
 8004b62:	23a0      	movs	r3, #160	; 0xa0
 8004b64:	002a      	movs	r2, r5
 8004b66:	011b      	lsls	r3, r3, #4
 8004b68:	401a      	ands	r2, r3
 8004b6a:	af02      	add	r7, sp, #8
 8004b6c:	429a      	cmp	r2, r3
 8004b6e:	d1c9      	bne.n	8004b04 <_swiopen+0x2c>
 8004b70:	0039      	movs	r1, r7
 8004b72:	9800      	ldr	r0, [sp, #0]
 8004b74:	f7ff ff91 	bl	8004a9a <_stat>
 8004b78:	1c43      	adds	r3, r0, #1
 8004b7a:	d0c3      	beq.n	8004b04 <_swiopen+0x2c>
 8004b7c:	f000 f90a 	bl	8004d94 <__errno>
 8004b80:	2311      	movs	r3, #17
 8004b82:	6003      	str	r3, [r0, #0]
 8004b84:	0020      	movs	r0, r4
 8004b86:	b019      	add	sp, #100	; 0x64
 8004b88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004b8a:	46c0      	nop			; (mov r8, r8)
 8004b8c:	2000026c 	.word	0x2000026c
 8004b90:	00000601 	.word	0x00000601

08004b94 <_get_semihosting_exts>:
 8004b94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004b96:	b085      	sub	sp, #20
 8004b98:	9000      	str	r0, [sp, #0]
 8004b9a:	9101      	str	r1, [sp, #4]
 8004b9c:	4827      	ldr	r0, [pc, #156]	; (8004c3c <_get_semihosting_exts+0xa8>)
 8004b9e:	2100      	movs	r1, #0
 8004ba0:	0015      	movs	r5, r2
 8004ba2:	f7ff ff99 	bl	8004ad8 <_swiopen>
 8004ba6:	0004      	movs	r4, r0
 8004ba8:	002a      	movs	r2, r5
 8004baa:	2100      	movs	r1, #0
 8004bac:	9800      	ldr	r0, [sp, #0]
 8004bae:	f000 fa20 	bl	8004ff2 <memset>
 8004bb2:	1c63      	adds	r3, r4, #1
 8004bb4:	d015      	beq.n	8004be2 <_get_semihosting_exts+0x4e>
 8004bb6:	0020      	movs	r0, r4
 8004bb8:	f7ff fe46 	bl	8004848 <findslot>
 8004bbc:	260c      	movs	r6, #12
 8004bbe:	0007      	movs	r7, r0
 8004bc0:	1c30      	adds	r0, r6, #0
 8004bc2:	1c39      	adds	r1, r7, #0
 8004bc4:	beab      	bkpt	0x00ab
 8004bc6:	1c06      	adds	r6, r0, #0
 8004bc8:	0030      	movs	r0, r6
 8004bca:	f7ff fe65 	bl	8004898 <checkerror>
 8004bce:	2803      	cmp	r0, #3
 8004bd0:	dd02      	ble.n	8004bd8 <_get_semihosting_exts+0x44>
 8004bd2:	3803      	subs	r0, #3
 8004bd4:	42a8      	cmp	r0, r5
 8004bd6:	dc07      	bgt.n	8004be8 <_get_semihosting_exts+0x54>
 8004bd8:	0020      	movs	r0, r4
 8004bda:	2401      	movs	r4, #1
 8004bdc:	f7ff ff06 	bl	80049ec <_close>
 8004be0:	4264      	negs	r4, r4
 8004be2:	0020      	movs	r0, r4
 8004be4:	b005      	add	sp, #20
 8004be6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004be8:	ae03      	add	r6, sp, #12
 8004bea:	2204      	movs	r2, #4
 8004bec:	0031      	movs	r1, r6
 8004bee:	0020      	movs	r0, r4
 8004bf0:	f7ff fe68 	bl	80048c4 <_read>
 8004bf4:	2803      	cmp	r0, #3
 8004bf6:	ddef      	ble.n	8004bd8 <_get_semihosting_exts+0x44>
 8004bf8:	7833      	ldrb	r3, [r6, #0]
 8004bfa:	2b53      	cmp	r3, #83	; 0x53
 8004bfc:	d1ec      	bne.n	8004bd8 <_get_semihosting_exts+0x44>
 8004bfe:	7873      	ldrb	r3, [r6, #1]
 8004c00:	2b48      	cmp	r3, #72	; 0x48
 8004c02:	d1e9      	bne.n	8004bd8 <_get_semihosting_exts+0x44>
 8004c04:	78b3      	ldrb	r3, [r6, #2]
 8004c06:	2b46      	cmp	r3, #70	; 0x46
 8004c08:	d1e6      	bne.n	8004bd8 <_get_semihosting_exts+0x44>
 8004c0a:	78f3      	ldrb	r3, [r6, #3]
 8004c0c:	2b42      	cmp	r3, #66	; 0x42
 8004c0e:	d1e3      	bne.n	8004bd8 <_get_semihosting_exts+0x44>
 8004c10:	2201      	movs	r2, #1
 8004c12:	0020      	movs	r0, r4
 8004c14:	9901      	ldr	r1, [sp, #4]
 8004c16:	f7ff fe6f 	bl	80048f8 <_swilseek>
 8004c1a:	2800      	cmp	r0, #0
 8004c1c:	dbdc      	blt.n	8004bd8 <_get_semihosting_exts+0x44>
 8004c1e:	002a      	movs	r2, r5
 8004c20:	9900      	ldr	r1, [sp, #0]
 8004c22:	0020      	movs	r0, r4
 8004c24:	f7ff fe4e 	bl	80048c4 <_read>
 8004c28:	0005      	movs	r5, r0
 8004c2a:	0020      	movs	r0, r4
 8004c2c:	f7ff fede 	bl	80049ec <_close>
 8004c30:	0028      	movs	r0, r5
 8004c32:	f7ff fe31 	bl	8004898 <checkerror>
 8004c36:	0004      	movs	r4, r0
 8004c38:	e7d3      	b.n	8004be2 <_get_semihosting_exts+0x4e>
 8004c3a:	46c0      	nop			; (mov r8, r8)
 8004c3c:	0800616a 	.word	0x0800616a

08004c40 <initialise_semihosting_exts>:
 8004c40:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004c42:	2401      	movs	r4, #1
 8004c44:	2100      	movs	r1, #0
 8004c46:	4e09      	ldr	r6, [pc, #36]	; (8004c6c <initialise_semihosting_exts+0x2c>)
 8004c48:	4d09      	ldr	r5, [pc, #36]	; (8004c70 <initialise_semihosting_exts+0x30>)
 8004c4a:	af01      	add	r7, sp, #4
 8004c4c:	0022      	movs	r2, r4
 8004c4e:	0038      	movs	r0, r7
 8004c50:	6031      	str	r1, [r6, #0]
 8004c52:	602c      	str	r4, [r5, #0]
 8004c54:	f7ff ff9e 	bl	8004b94 <_get_semihosting_exts>
 8004c58:	2800      	cmp	r0, #0
 8004c5a:	dd05      	ble.n	8004c68 <initialise_semihosting_exts+0x28>
 8004c5c:	2202      	movs	r2, #2
 8004c5e:	783b      	ldrb	r3, [r7, #0]
 8004c60:	401c      	ands	r4, r3
 8004c62:	4013      	ands	r3, r2
 8004c64:	6034      	str	r4, [r6, #0]
 8004c66:	602b      	str	r3, [r5, #0]
 8004c68:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8004c6a:	46c0      	nop			; (mov r8, r8)
 8004c6c:	2000000c 	.word	0x2000000c
 8004c70:	20000010 	.word	0x20000010

08004c74 <_has_ext_exit_extended>:
 8004c74:	b510      	push	{r4, lr}
 8004c76:	4c04      	ldr	r4, [pc, #16]	; (8004c88 <_has_ext_exit_extended+0x14>)
 8004c78:	6823      	ldr	r3, [r4, #0]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	da01      	bge.n	8004c82 <_has_ext_exit_extended+0xe>
 8004c7e:	f7ff ffdf 	bl	8004c40 <initialise_semihosting_exts>
 8004c82:	6820      	ldr	r0, [r4, #0]
 8004c84:	bd10      	pop	{r4, pc}
 8004c86:	46c0      	nop			; (mov r8, r8)
 8004c88:	2000000c 	.word	0x2000000c

08004c8c <_has_ext_stdout_stderr>:
 8004c8c:	b510      	push	{r4, lr}
 8004c8e:	4c04      	ldr	r4, [pc, #16]	; (8004ca0 <_has_ext_stdout_stderr+0x14>)
 8004c90:	6823      	ldr	r3, [r4, #0]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	da01      	bge.n	8004c9a <_has_ext_stdout_stderr+0xe>
 8004c96:	f7ff ffd3 	bl	8004c40 <initialise_semihosting_exts>
 8004c9a:	6820      	ldr	r0, [r4, #0]
 8004c9c:	bd10      	pop	{r4, pc}
 8004c9e:	46c0      	nop			; (mov r8, r8)
 8004ca0:	20000010 	.word	0x20000010

08004ca4 <initialise_monitor_handles>:
 8004ca4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004ca6:	4b27      	ldr	r3, [pc, #156]	; (8004d44 <initialise_monitor_handles+0xa0>)
 8004ca8:	b085      	sub	sp, #20
 8004caa:	9301      	str	r3, [sp, #4]
 8004cac:	2500      	movs	r5, #0
 8004cae:	2303      	movs	r3, #3
 8004cb0:	ac01      	add	r4, sp, #4
 8004cb2:	60a3      	str	r3, [r4, #8]
 8004cb4:	2701      	movs	r7, #1
 8004cb6:	6065      	str	r5, [r4, #4]
 8004cb8:	1c38      	adds	r0, r7, #0
 8004cba:	1c21      	adds	r1, r4, #0
 8004cbc:	beab      	bkpt	0x00ab
 8004cbe:	1c07      	adds	r7, r0, #0
 8004cc0:	2101      	movs	r1, #1
 8004cc2:	4b21      	ldr	r3, [pc, #132]	; (8004d48 <initialise_monitor_handles+0xa4>)
 8004cc4:	4249      	negs	r1, r1
 8004cc6:	601f      	str	r7, [r3, #0]
 8004cc8:	002b      	movs	r3, r5
 8004cca:	4d20      	ldr	r5, [pc, #128]	; (8004d4c <initialise_monitor_handles+0xa8>)
 8004ccc:	00da      	lsls	r2, r3, #3
 8004cce:	3301      	adds	r3, #1
 8004cd0:	50a9      	str	r1, [r5, r2]
 8004cd2:	2b14      	cmp	r3, #20
 8004cd4:	d1fa      	bne.n	8004ccc <initialise_monitor_handles+0x28>
 8004cd6:	f7ff ffd9 	bl	8004c8c <_has_ext_stdout_stderr>
 8004cda:	2800      	cmp	r0, #0
 8004cdc:	d018      	beq.n	8004d10 <initialise_monitor_handles+0x6c>
 8004cde:	4b19      	ldr	r3, [pc, #100]	; (8004d44 <initialise_monitor_handles+0xa0>)
 8004ce0:	2701      	movs	r7, #1
 8004ce2:	9301      	str	r3, [sp, #4]
 8004ce4:	2303      	movs	r3, #3
 8004ce6:	60a3      	str	r3, [r4, #8]
 8004ce8:	3301      	adds	r3, #1
 8004cea:	6063      	str	r3, [r4, #4]
 8004cec:	1c38      	adds	r0, r7, #0
 8004cee:	1c21      	adds	r1, r4, #0
 8004cf0:	beab      	bkpt	0x00ab
 8004cf2:	1c06      	adds	r6, r0, #0
 8004cf4:	4b16      	ldr	r3, [pc, #88]	; (8004d50 <initialise_monitor_handles+0xac>)
 8004cf6:	4a13      	ldr	r2, [pc, #76]	; (8004d44 <initialise_monitor_handles+0xa0>)
 8004cf8:	601e      	str	r6, [r3, #0]
 8004cfa:	2303      	movs	r3, #3
 8004cfc:	9201      	str	r2, [sp, #4]
 8004cfe:	60a3      	str	r3, [r4, #8]
 8004d00:	3305      	adds	r3, #5
 8004d02:	6063      	str	r3, [r4, #4]
 8004d04:	1c38      	adds	r0, r7, #0
 8004d06:	1c21      	adds	r1, r4, #0
 8004d08:	beab      	bkpt	0x00ab
 8004d0a:	1c04      	adds	r4, r0, #0
 8004d0c:	4b11      	ldr	r3, [pc, #68]	; (8004d54 <initialise_monitor_handles+0xb0>)
 8004d0e:	601c      	str	r4, [r3, #0]
 8004d10:	4f10      	ldr	r7, [pc, #64]	; (8004d54 <initialise_monitor_handles+0xb0>)
 8004d12:	683b      	ldr	r3, [r7, #0]
 8004d14:	3301      	adds	r3, #1
 8004d16:	d102      	bne.n	8004d1e <initialise_monitor_handles+0x7a>
 8004d18:	4b0d      	ldr	r3, [pc, #52]	; (8004d50 <initialise_monitor_handles+0xac>)
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	603b      	str	r3, [r7, #0]
 8004d1e:	2400      	movs	r4, #0
 8004d20:	4b09      	ldr	r3, [pc, #36]	; (8004d48 <initialise_monitor_handles+0xa4>)
 8004d22:	606c      	str	r4, [r5, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	602b      	str	r3, [r5, #0]
 8004d28:	f7ff ffb0 	bl	8004c8c <_has_ext_stdout_stderr>
 8004d2c:	42a0      	cmp	r0, r4
 8004d2e:	d006      	beq.n	8004d3e <initialise_monitor_handles+0x9a>
 8004d30:	4b07      	ldr	r3, [pc, #28]	; (8004d50 <initialise_monitor_handles+0xac>)
 8004d32:	60ec      	str	r4, [r5, #12]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	616c      	str	r4, [r5, #20]
 8004d38:	60ab      	str	r3, [r5, #8]
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	612b      	str	r3, [r5, #16]
 8004d3e:	b005      	add	sp, #20
 8004d40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004d42:	46c0      	nop			; (mov r8, r8)
 8004d44:	08006180 	.word	0x08006180
 8004d48:	20000264 	.word	0x20000264
 8004d4c:	2000026c 	.word	0x2000026c
 8004d50:	20000268 	.word	0x20000268
 8004d54:	20000260 	.word	0x20000260

08004d58 <_isatty>:
 8004d58:	b570      	push	{r4, r5, r6, lr}
 8004d5a:	f7ff fd75 	bl	8004848 <findslot>
 8004d5e:	2509      	movs	r5, #9
 8004d60:	1e04      	subs	r4, r0, #0
 8004d62:	d104      	bne.n	8004d6e <_isatty+0x16>
 8004d64:	f000 f816 	bl	8004d94 <__errno>
 8004d68:	6005      	str	r5, [r0, #0]
 8004d6a:	0020      	movs	r0, r4
 8004d6c:	bd70      	pop	{r4, r5, r6, pc}
 8004d6e:	1c28      	adds	r0, r5, #0
 8004d70:	1c21      	adds	r1, r4, #0
 8004d72:	beab      	bkpt	0x00ab
 8004d74:	1c04      	adds	r4, r0, #0
 8004d76:	0020      	movs	r0, r4
 8004d78:	2c01      	cmp	r4, #1
 8004d7a:	d0f7      	beq.n	8004d6c <_isatty+0x14>
 8004d7c:	f000 f80a 	bl	8004d94 <__errno>
 8004d80:	2400      	movs	r4, #0
 8004d82:	0005      	movs	r5, r0
 8004d84:	2613      	movs	r6, #19
 8004d86:	1c30      	adds	r0, r6, #0
 8004d88:	1c21      	adds	r1, r4, #0
 8004d8a:	beab      	bkpt	0x00ab
 8004d8c:	1c06      	adds	r6, r0, #0
 8004d8e:	602e      	str	r6, [r5, #0]
 8004d90:	e7eb      	b.n	8004d6a <_isatty+0x12>
	...

08004d94 <__errno>:
 8004d94:	4b01      	ldr	r3, [pc, #4]	; (8004d9c <__errno+0x8>)
 8004d96:	6818      	ldr	r0, [r3, #0]
 8004d98:	4770      	bx	lr
 8004d9a:	46c0      	nop			; (mov r8, r8)
 8004d9c:	20000014 	.word	0x20000014

08004da0 <std>:
 8004da0:	2300      	movs	r3, #0
 8004da2:	b510      	push	{r4, lr}
 8004da4:	0004      	movs	r4, r0
 8004da6:	6003      	str	r3, [r0, #0]
 8004da8:	6043      	str	r3, [r0, #4]
 8004daa:	6083      	str	r3, [r0, #8]
 8004dac:	8181      	strh	r1, [r0, #12]
 8004dae:	6643      	str	r3, [r0, #100]	; 0x64
 8004db0:	0019      	movs	r1, r3
 8004db2:	81c2      	strh	r2, [r0, #14]
 8004db4:	6103      	str	r3, [r0, #16]
 8004db6:	6143      	str	r3, [r0, #20]
 8004db8:	6183      	str	r3, [r0, #24]
 8004dba:	2208      	movs	r2, #8
 8004dbc:	305c      	adds	r0, #92	; 0x5c
 8004dbe:	f000 f918 	bl	8004ff2 <memset>
 8004dc2:	4b05      	ldr	r3, [pc, #20]	; (8004dd8 <std+0x38>)
 8004dc4:	6224      	str	r4, [r4, #32]
 8004dc6:	6263      	str	r3, [r4, #36]	; 0x24
 8004dc8:	4b04      	ldr	r3, [pc, #16]	; (8004ddc <std+0x3c>)
 8004dca:	62a3      	str	r3, [r4, #40]	; 0x28
 8004dcc:	4b04      	ldr	r3, [pc, #16]	; (8004de0 <std+0x40>)
 8004dce:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004dd0:	4b04      	ldr	r3, [pc, #16]	; (8004de4 <std+0x44>)
 8004dd2:	6323      	str	r3, [r4, #48]	; 0x30
 8004dd4:	bd10      	pop	{r4, pc}
 8004dd6:	46c0      	nop			; (mov r8, r8)
 8004dd8:	080052e5 	.word	0x080052e5
 8004ddc:	0800530d 	.word	0x0800530d
 8004de0:	08005345 	.word	0x08005345
 8004de4:	08005371 	.word	0x08005371

08004de8 <_cleanup_r>:
 8004de8:	b510      	push	{r4, lr}
 8004dea:	4902      	ldr	r1, [pc, #8]	; (8004df4 <_cleanup_r+0xc>)
 8004dec:	f000 f8ba 	bl	8004f64 <_fwalk_reent>
 8004df0:	bd10      	pop	{r4, pc}
 8004df2:	46c0      	nop			; (mov r8, r8)
 8004df4:	080056b9 	.word	0x080056b9

08004df8 <__sfmoreglue>:
 8004df8:	b570      	push	{r4, r5, r6, lr}
 8004dfa:	2568      	movs	r5, #104	; 0x68
 8004dfc:	1e4a      	subs	r2, r1, #1
 8004dfe:	4355      	muls	r5, r2
 8004e00:	000e      	movs	r6, r1
 8004e02:	0029      	movs	r1, r5
 8004e04:	3174      	adds	r1, #116	; 0x74
 8004e06:	f000 f91f 	bl	8005048 <_malloc_r>
 8004e0a:	1e04      	subs	r4, r0, #0
 8004e0c:	d008      	beq.n	8004e20 <__sfmoreglue+0x28>
 8004e0e:	2100      	movs	r1, #0
 8004e10:	002a      	movs	r2, r5
 8004e12:	6001      	str	r1, [r0, #0]
 8004e14:	6046      	str	r6, [r0, #4]
 8004e16:	300c      	adds	r0, #12
 8004e18:	60a0      	str	r0, [r4, #8]
 8004e1a:	3268      	adds	r2, #104	; 0x68
 8004e1c:	f000 f8e9 	bl	8004ff2 <memset>
 8004e20:	0020      	movs	r0, r4
 8004e22:	bd70      	pop	{r4, r5, r6, pc}

08004e24 <__sfp_lock_acquire>:
 8004e24:	b510      	push	{r4, lr}
 8004e26:	4802      	ldr	r0, [pc, #8]	; (8004e30 <__sfp_lock_acquire+0xc>)
 8004e28:	f000 f8e1 	bl	8004fee <__retarget_lock_acquire_recursive>
 8004e2c:	bd10      	pop	{r4, pc}
 8004e2e:	46c0      	nop			; (mov r8, r8)
 8004e30:	2000030d 	.word	0x2000030d

08004e34 <__sfp_lock_release>:
 8004e34:	b510      	push	{r4, lr}
 8004e36:	4802      	ldr	r0, [pc, #8]	; (8004e40 <__sfp_lock_release+0xc>)
 8004e38:	f000 f8da 	bl	8004ff0 <__retarget_lock_release_recursive>
 8004e3c:	bd10      	pop	{r4, pc}
 8004e3e:	46c0      	nop			; (mov r8, r8)
 8004e40:	2000030d 	.word	0x2000030d

08004e44 <__sinit_lock_acquire>:
 8004e44:	b510      	push	{r4, lr}
 8004e46:	4802      	ldr	r0, [pc, #8]	; (8004e50 <__sinit_lock_acquire+0xc>)
 8004e48:	f000 f8d1 	bl	8004fee <__retarget_lock_acquire_recursive>
 8004e4c:	bd10      	pop	{r4, pc}
 8004e4e:	46c0      	nop			; (mov r8, r8)
 8004e50:	2000030e 	.word	0x2000030e

08004e54 <__sinit_lock_release>:
 8004e54:	b510      	push	{r4, lr}
 8004e56:	4802      	ldr	r0, [pc, #8]	; (8004e60 <__sinit_lock_release+0xc>)
 8004e58:	f000 f8ca 	bl	8004ff0 <__retarget_lock_release_recursive>
 8004e5c:	bd10      	pop	{r4, pc}
 8004e5e:	46c0      	nop			; (mov r8, r8)
 8004e60:	2000030e 	.word	0x2000030e

08004e64 <__sinit>:
 8004e64:	b513      	push	{r0, r1, r4, lr}
 8004e66:	0004      	movs	r4, r0
 8004e68:	f7ff ffec 	bl	8004e44 <__sinit_lock_acquire>
 8004e6c:	69a3      	ldr	r3, [r4, #24]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d002      	beq.n	8004e78 <__sinit+0x14>
 8004e72:	f7ff ffef 	bl	8004e54 <__sinit_lock_release>
 8004e76:	bd13      	pop	{r0, r1, r4, pc}
 8004e78:	64a3      	str	r3, [r4, #72]	; 0x48
 8004e7a:	64e3      	str	r3, [r4, #76]	; 0x4c
 8004e7c:	6523      	str	r3, [r4, #80]	; 0x50
 8004e7e:	4b13      	ldr	r3, [pc, #76]	; (8004ecc <__sinit+0x68>)
 8004e80:	4a13      	ldr	r2, [pc, #76]	; (8004ed0 <__sinit+0x6c>)
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	62a2      	str	r2, [r4, #40]	; 0x28
 8004e86:	9301      	str	r3, [sp, #4]
 8004e88:	42a3      	cmp	r3, r4
 8004e8a:	d101      	bne.n	8004e90 <__sinit+0x2c>
 8004e8c:	2301      	movs	r3, #1
 8004e8e:	61a3      	str	r3, [r4, #24]
 8004e90:	0020      	movs	r0, r4
 8004e92:	f000 f81f 	bl	8004ed4 <__sfp>
 8004e96:	6060      	str	r0, [r4, #4]
 8004e98:	0020      	movs	r0, r4
 8004e9a:	f000 f81b 	bl	8004ed4 <__sfp>
 8004e9e:	60a0      	str	r0, [r4, #8]
 8004ea0:	0020      	movs	r0, r4
 8004ea2:	f000 f817 	bl	8004ed4 <__sfp>
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	2104      	movs	r1, #4
 8004eaa:	60e0      	str	r0, [r4, #12]
 8004eac:	6860      	ldr	r0, [r4, #4]
 8004eae:	f7ff ff77 	bl	8004da0 <std>
 8004eb2:	2201      	movs	r2, #1
 8004eb4:	2109      	movs	r1, #9
 8004eb6:	68a0      	ldr	r0, [r4, #8]
 8004eb8:	f7ff ff72 	bl	8004da0 <std>
 8004ebc:	2202      	movs	r2, #2
 8004ebe:	2112      	movs	r1, #18
 8004ec0:	68e0      	ldr	r0, [r4, #12]
 8004ec2:	f7ff ff6d 	bl	8004da0 <std>
 8004ec6:	2301      	movs	r3, #1
 8004ec8:	61a3      	str	r3, [r4, #24]
 8004eca:	e7d2      	b.n	8004e72 <__sinit+0xe>
 8004ecc:	080061e4 	.word	0x080061e4
 8004ed0:	08004de9 	.word	0x08004de9

08004ed4 <__sfp>:
 8004ed4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ed6:	0007      	movs	r7, r0
 8004ed8:	f7ff ffa4 	bl	8004e24 <__sfp_lock_acquire>
 8004edc:	4b1f      	ldr	r3, [pc, #124]	; (8004f5c <__sfp+0x88>)
 8004ede:	681e      	ldr	r6, [r3, #0]
 8004ee0:	69b3      	ldr	r3, [r6, #24]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d102      	bne.n	8004eec <__sfp+0x18>
 8004ee6:	0030      	movs	r0, r6
 8004ee8:	f7ff ffbc 	bl	8004e64 <__sinit>
 8004eec:	3648      	adds	r6, #72	; 0x48
 8004eee:	68b4      	ldr	r4, [r6, #8]
 8004ef0:	6873      	ldr	r3, [r6, #4]
 8004ef2:	3b01      	subs	r3, #1
 8004ef4:	d504      	bpl.n	8004f00 <__sfp+0x2c>
 8004ef6:	6833      	ldr	r3, [r6, #0]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d022      	beq.n	8004f42 <__sfp+0x6e>
 8004efc:	6836      	ldr	r6, [r6, #0]
 8004efe:	e7f6      	b.n	8004eee <__sfp+0x1a>
 8004f00:	220c      	movs	r2, #12
 8004f02:	5ea5      	ldrsh	r5, [r4, r2]
 8004f04:	2d00      	cmp	r5, #0
 8004f06:	d11a      	bne.n	8004f3e <__sfp+0x6a>
 8004f08:	0020      	movs	r0, r4
 8004f0a:	4b15      	ldr	r3, [pc, #84]	; (8004f60 <__sfp+0x8c>)
 8004f0c:	3058      	adds	r0, #88	; 0x58
 8004f0e:	60e3      	str	r3, [r4, #12]
 8004f10:	6665      	str	r5, [r4, #100]	; 0x64
 8004f12:	f000 f86b 	bl	8004fec <__retarget_lock_init_recursive>
 8004f16:	f7ff ff8d 	bl	8004e34 <__sfp_lock_release>
 8004f1a:	0020      	movs	r0, r4
 8004f1c:	2208      	movs	r2, #8
 8004f1e:	0029      	movs	r1, r5
 8004f20:	6025      	str	r5, [r4, #0]
 8004f22:	60a5      	str	r5, [r4, #8]
 8004f24:	6065      	str	r5, [r4, #4]
 8004f26:	6125      	str	r5, [r4, #16]
 8004f28:	6165      	str	r5, [r4, #20]
 8004f2a:	61a5      	str	r5, [r4, #24]
 8004f2c:	305c      	adds	r0, #92	; 0x5c
 8004f2e:	f000 f860 	bl	8004ff2 <memset>
 8004f32:	6365      	str	r5, [r4, #52]	; 0x34
 8004f34:	63a5      	str	r5, [r4, #56]	; 0x38
 8004f36:	64a5      	str	r5, [r4, #72]	; 0x48
 8004f38:	64e5      	str	r5, [r4, #76]	; 0x4c
 8004f3a:	0020      	movs	r0, r4
 8004f3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004f3e:	3468      	adds	r4, #104	; 0x68
 8004f40:	e7d7      	b.n	8004ef2 <__sfp+0x1e>
 8004f42:	2104      	movs	r1, #4
 8004f44:	0038      	movs	r0, r7
 8004f46:	f7ff ff57 	bl	8004df8 <__sfmoreglue>
 8004f4a:	1e04      	subs	r4, r0, #0
 8004f4c:	6030      	str	r0, [r6, #0]
 8004f4e:	d1d5      	bne.n	8004efc <__sfp+0x28>
 8004f50:	f7ff ff70 	bl	8004e34 <__sfp_lock_release>
 8004f54:	230c      	movs	r3, #12
 8004f56:	603b      	str	r3, [r7, #0]
 8004f58:	e7ef      	b.n	8004f3a <__sfp+0x66>
 8004f5a:	46c0      	nop			; (mov r8, r8)
 8004f5c:	080061e4 	.word	0x080061e4
 8004f60:	ffff0001 	.word	0xffff0001

08004f64 <_fwalk_reent>:
 8004f64:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004f66:	0004      	movs	r4, r0
 8004f68:	0006      	movs	r6, r0
 8004f6a:	2700      	movs	r7, #0
 8004f6c:	9101      	str	r1, [sp, #4]
 8004f6e:	3448      	adds	r4, #72	; 0x48
 8004f70:	6863      	ldr	r3, [r4, #4]
 8004f72:	68a5      	ldr	r5, [r4, #8]
 8004f74:	9300      	str	r3, [sp, #0]
 8004f76:	9b00      	ldr	r3, [sp, #0]
 8004f78:	3b01      	subs	r3, #1
 8004f7a:	9300      	str	r3, [sp, #0]
 8004f7c:	d504      	bpl.n	8004f88 <_fwalk_reent+0x24>
 8004f7e:	6824      	ldr	r4, [r4, #0]
 8004f80:	2c00      	cmp	r4, #0
 8004f82:	d1f5      	bne.n	8004f70 <_fwalk_reent+0xc>
 8004f84:	0038      	movs	r0, r7
 8004f86:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004f88:	89ab      	ldrh	r3, [r5, #12]
 8004f8a:	2b01      	cmp	r3, #1
 8004f8c:	d908      	bls.n	8004fa0 <_fwalk_reent+0x3c>
 8004f8e:	220e      	movs	r2, #14
 8004f90:	5eab      	ldrsh	r3, [r5, r2]
 8004f92:	3301      	adds	r3, #1
 8004f94:	d004      	beq.n	8004fa0 <_fwalk_reent+0x3c>
 8004f96:	0029      	movs	r1, r5
 8004f98:	0030      	movs	r0, r6
 8004f9a:	9b01      	ldr	r3, [sp, #4]
 8004f9c:	4798      	blx	r3
 8004f9e:	4307      	orrs	r7, r0
 8004fa0:	3568      	adds	r5, #104	; 0x68
 8004fa2:	e7e8      	b.n	8004f76 <_fwalk_reent+0x12>

08004fa4 <__libc_init_array>:
 8004fa4:	b570      	push	{r4, r5, r6, lr}
 8004fa6:	2600      	movs	r6, #0
 8004fa8:	4d0c      	ldr	r5, [pc, #48]	; (8004fdc <__libc_init_array+0x38>)
 8004faa:	4c0d      	ldr	r4, [pc, #52]	; (8004fe0 <__libc_init_array+0x3c>)
 8004fac:	1b64      	subs	r4, r4, r5
 8004fae:	10a4      	asrs	r4, r4, #2
 8004fb0:	42a6      	cmp	r6, r4
 8004fb2:	d109      	bne.n	8004fc8 <__libc_init_array+0x24>
 8004fb4:	2600      	movs	r6, #0
 8004fb6:	f001 f857 	bl	8006068 <_init>
 8004fba:	4d0a      	ldr	r5, [pc, #40]	; (8004fe4 <__libc_init_array+0x40>)
 8004fbc:	4c0a      	ldr	r4, [pc, #40]	; (8004fe8 <__libc_init_array+0x44>)
 8004fbe:	1b64      	subs	r4, r4, r5
 8004fc0:	10a4      	asrs	r4, r4, #2
 8004fc2:	42a6      	cmp	r6, r4
 8004fc4:	d105      	bne.n	8004fd2 <__libc_init_array+0x2e>
 8004fc6:	bd70      	pop	{r4, r5, r6, pc}
 8004fc8:	00b3      	lsls	r3, r6, #2
 8004fca:	58eb      	ldr	r3, [r5, r3]
 8004fcc:	4798      	blx	r3
 8004fce:	3601      	adds	r6, #1
 8004fd0:	e7ee      	b.n	8004fb0 <__libc_init_array+0xc>
 8004fd2:	00b3      	lsls	r3, r6, #2
 8004fd4:	58eb      	ldr	r3, [r5, r3]
 8004fd6:	4798      	blx	r3
 8004fd8:	3601      	adds	r6, #1
 8004fda:	e7f2      	b.n	8004fc2 <__libc_init_array+0x1e>
 8004fdc:	080062d4 	.word	0x080062d4
 8004fe0:	080062d4 	.word	0x080062d4
 8004fe4:	080062d4 	.word	0x080062d4
 8004fe8:	080062d8 	.word	0x080062d8

08004fec <__retarget_lock_init_recursive>:
 8004fec:	4770      	bx	lr

08004fee <__retarget_lock_acquire_recursive>:
 8004fee:	4770      	bx	lr

08004ff0 <__retarget_lock_release_recursive>:
 8004ff0:	4770      	bx	lr

08004ff2 <memset>:
 8004ff2:	0003      	movs	r3, r0
 8004ff4:	1882      	adds	r2, r0, r2
 8004ff6:	4293      	cmp	r3, r2
 8004ff8:	d100      	bne.n	8004ffc <memset+0xa>
 8004ffa:	4770      	bx	lr
 8004ffc:	7019      	strb	r1, [r3, #0]
 8004ffe:	3301      	adds	r3, #1
 8005000:	e7f9      	b.n	8004ff6 <memset+0x4>
	...

08005004 <sbrk_aligned>:
 8005004:	b570      	push	{r4, r5, r6, lr}
 8005006:	4e0f      	ldr	r6, [pc, #60]	; (8005044 <sbrk_aligned+0x40>)
 8005008:	000d      	movs	r5, r1
 800500a:	6831      	ldr	r1, [r6, #0]
 800500c:	0004      	movs	r4, r0
 800500e:	2900      	cmp	r1, #0
 8005010:	d102      	bne.n	8005018 <sbrk_aligned+0x14>
 8005012:	f000 f955 	bl	80052c0 <_sbrk_r>
 8005016:	6030      	str	r0, [r6, #0]
 8005018:	0029      	movs	r1, r5
 800501a:	0020      	movs	r0, r4
 800501c:	f000 f950 	bl	80052c0 <_sbrk_r>
 8005020:	1c43      	adds	r3, r0, #1
 8005022:	d00a      	beq.n	800503a <sbrk_aligned+0x36>
 8005024:	2303      	movs	r3, #3
 8005026:	1cc5      	adds	r5, r0, #3
 8005028:	439d      	bics	r5, r3
 800502a:	42a8      	cmp	r0, r5
 800502c:	d007      	beq.n	800503e <sbrk_aligned+0x3a>
 800502e:	1a29      	subs	r1, r5, r0
 8005030:	0020      	movs	r0, r4
 8005032:	f000 f945 	bl	80052c0 <_sbrk_r>
 8005036:	1c43      	adds	r3, r0, #1
 8005038:	d101      	bne.n	800503e <sbrk_aligned+0x3a>
 800503a:	2501      	movs	r5, #1
 800503c:	426d      	negs	r5, r5
 800503e:	0028      	movs	r0, r5
 8005040:	bd70      	pop	{r4, r5, r6, pc}
 8005042:	46c0      	nop			; (mov r8, r8)
 8005044:	20000314 	.word	0x20000314

08005048 <_malloc_r>:
 8005048:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800504a:	2203      	movs	r2, #3
 800504c:	1ccb      	adds	r3, r1, #3
 800504e:	4393      	bics	r3, r2
 8005050:	3308      	adds	r3, #8
 8005052:	0006      	movs	r6, r0
 8005054:	001f      	movs	r7, r3
 8005056:	2b0c      	cmp	r3, #12
 8005058:	d232      	bcs.n	80050c0 <_malloc_r+0x78>
 800505a:	270c      	movs	r7, #12
 800505c:	42b9      	cmp	r1, r7
 800505e:	d831      	bhi.n	80050c4 <_malloc_r+0x7c>
 8005060:	0030      	movs	r0, r6
 8005062:	f000 fc03 	bl	800586c <__malloc_lock>
 8005066:	4d32      	ldr	r5, [pc, #200]	; (8005130 <_malloc_r+0xe8>)
 8005068:	682b      	ldr	r3, [r5, #0]
 800506a:	001c      	movs	r4, r3
 800506c:	2c00      	cmp	r4, #0
 800506e:	d12e      	bne.n	80050ce <_malloc_r+0x86>
 8005070:	0039      	movs	r1, r7
 8005072:	0030      	movs	r0, r6
 8005074:	f7ff ffc6 	bl	8005004 <sbrk_aligned>
 8005078:	0004      	movs	r4, r0
 800507a:	1c43      	adds	r3, r0, #1
 800507c:	d11e      	bne.n	80050bc <_malloc_r+0x74>
 800507e:	682c      	ldr	r4, [r5, #0]
 8005080:	0025      	movs	r5, r4
 8005082:	2d00      	cmp	r5, #0
 8005084:	d14a      	bne.n	800511c <_malloc_r+0xd4>
 8005086:	6823      	ldr	r3, [r4, #0]
 8005088:	0029      	movs	r1, r5
 800508a:	18e3      	adds	r3, r4, r3
 800508c:	0030      	movs	r0, r6
 800508e:	9301      	str	r3, [sp, #4]
 8005090:	f000 f916 	bl	80052c0 <_sbrk_r>
 8005094:	9b01      	ldr	r3, [sp, #4]
 8005096:	4283      	cmp	r3, r0
 8005098:	d143      	bne.n	8005122 <_malloc_r+0xda>
 800509a:	6823      	ldr	r3, [r4, #0]
 800509c:	3703      	adds	r7, #3
 800509e:	1aff      	subs	r7, r7, r3
 80050a0:	2303      	movs	r3, #3
 80050a2:	439f      	bics	r7, r3
 80050a4:	3708      	adds	r7, #8
 80050a6:	2f0c      	cmp	r7, #12
 80050a8:	d200      	bcs.n	80050ac <_malloc_r+0x64>
 80050aa:	270c      	movs	r7, #12
 80050ac:	0039      	movs	r1, r7
 80050ae:	0030      	movs	r0, r6
 80050b0:	f7ff ffa8 	bl	8005004 <sbrk_aligned>
 80050b4:	1c43      	adds	r3, r0, #1
 80050b6:	d034      	beq.n	8005122 <_malloc_r+0xda>
 80050b8:	6823      	ldr	r3, [r4, #0]
 80050ba:	19df      	adds	r7, r3, r7
 80050bc:	6027      	str	r7, [r4, #0]
 80050be:	e013      	b.n	80050e8 <_malloc_r+0xa0>
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	dacb      	bge.n	800505c <_malloc_r+0x14>
 80050c4:	230c      	movs	r3, #12
 80050c6:	2500      	movs	r5, #0
 80050c8:	6033      	str	r3, [r6, #0]
 80050ca:	0028      	movs	r0, r5
 80050cc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80050ce:	6822      	ldr	r2, [r4, #0]
 80050d0:	1bd1      	subs	r1, r2, r7
 80050d2:	d420      	bmi.n	8005116 <_malloc_r+0xce>
 80050d4:	290b      	cmp	r1, #11
 80050d6:	d917      	bls.n	8005108 <_malloc_r+0xc0>
 80050d8:	19e2      	adds	r2, r4, r7
 80050da:	6027      	str	r7, [r4, #0]
 80050dc:	42a3      	cmp	r3, r4
 80050de:	d111      	bne.n	8005104 <_malloc_r+0xbc>
 80050e0:	602a      	str	r2, [r5, #0]
 80050e2:	6863      	ldr	r3, [r4, #4]
 80050e4:	6011      	str	r1, [r2, #0]
 80050e6:	6053      	str	r3, [r2, #4]
 80050e8:	0030      	movs	r0, r6
 80050ea:	0025      	movs	r5, r4
 80050ec:	f000 fbc6 	bl	800587c <__malloc_unlock>
 80050f0:	2207      	movs	r2, #7
 80050f2:	350b      	adds	r5, #11
 80050f4:	1d23      	adds	r3, r4, #4
 80050f6:	4395      	bics	r5, r2
 80050f8:	1aea      	subs	r2, r5, r3
 80050fa:	429d      	cmp	r5, r3
 80050fc:	d0e5      	beq.n	80050ca <_malloc_r+0x82>
 80050fe:	1b5b      	subs	r3, r3, r5
 8005100:	50a3      	str	r3, [r4, r2]
 8005102:	e7e2      	b.n	80050ca <_malloc_r+0x82>
 8005104:	605a      	str	r2, [r3, #4]
 8005106:	e7ec      	b.n	80050e2 <_malloc_r+0x9a>
 8005108:	6862      	ldr	r2, [r4, #4]
 800510a:	42a3      	cmp	r3, r4
 800510c:	d101      	bne.n	8005112 <_malloc_r+0xca>
 800510e:	602a      	str	r2, [r5, #0]
 8005110:	e7ea      	b.n	80050e8 <_malloc_r+0xa0>
 8005112:	605a      	str	r2, [r3, #4]
 8005114:	e7e8      	b.n	80050e8 <_malloc_r+0xa0>
 8005116:	0023      	movs	r3, r4
 8005118:	6864      	ldr	r4, [r4, #4]
 800511a:	e7a7      	b.n	800506c <_malloc_r+0x24>
 800511c:	002c      	movs	r4, r5
 800511e:	686d      	ldr	r5, [r5, #4]
 8005120:	e7af      	b.n	8005082 <_malloc_r+0x3a>
 8005122:	230c      	movs	r3, #12
 8005124:	0030      	movs	r0, r6
 8005126:	6033      	str	r3, [r6, #0]
 8005128:	f000 fba8 	bl	800587c <__malloc_unlock>
 800512c:	e7cd      	b.n	80050ca <_malloc_r+0x82>
 800512e:	46c0      	nop			; (mov r8, r8)
 8005130:	20000310 	.word	0x20000310

08005134 <iprintf>:
 8005134:	b40f      	push	{r0, r1, r2, r3}
 8005136:	4b0b      	ldr	r3, [pc, #44]	; (8005164 <iprintf+0x30>)
 8005138:	b513      	push	{r0, r1, r4, lr}
 800513a:	681c      	ldr	r4, [r3, #0]
 800513c:	2c00      	cmp	r4, #0
 800513e:	d005      	beq.n	800514c <iprintf+0x18>
 8005140:	69a3      	ldr	r3, [r4, #24]
 8005142:	2b00      	cmp	r3, #0
 8005144:	d102      	bne.n	800514c <iprintf+0x18>
 8005146:	0020      	movs	r0, r4
 8005148:	f7ff fe8c 	bl	8004e64 <__sinit>
 800514c:	ab05      	add	r3, sp, #20
 800514e:	0020      	movs	r0, r4
 8005150:	9a04      	ldr	r2, [sp, #16]
 8005152:	68a1      	ldr	r1, [r4, #8]
 8005154:	9301      	str	r3, [sp, #4]
 8005156:	f000 fc0b 	bl	8005970 <_vfiprintf_r>
 800515a:	bc16      	pop	{r1, r2, r4}
 800515c:	bc08      	pop	{r3}
 800515e:	b004      	add	sp, #16
 8005160:	4718      	bx	r3
 8005162:	46c0      	nop			; (mov r8, r8)
 8005164:	20000014 	.word	0x20000014

08005168 <_puts_r>:
 8005168:	b570      	push	{r4, r5, r6, lr}
 800516a:	0005      	movs	r5, r0
 800516c:	000e      	movs	r6, r1
 800516e:	2800      	cmp	r0, #0
 8005170:	d004      	beq.n	800517c <_puts_r+0x14>
 8005172:	6983      	ldr	r3, [r0, #24]
 8005174:	2b00      	cmp	r3, #0
 8005176:	d101      	bne.n	800517c <_puts_r+0x14>
 8005178:	f7ff fe74 	bl	8004e64 <__sinit>
 800517c:	69ab      	ldr	r3, [r5, #24]
 800517e:	68ac      	ldr	r4, [r5, #8]
 8005180:	2b00      	cmp	r3, #0
 8005182:	d102      	bne.n	800518a <_puts_r+0x22>
 8005184:	0028      	movs	r0, r5
 8005186:	f7ff fe6d 	bl	8004e64 <__sinit>
 800518a:	4b2d      	ldr	r3, [pc, #180]	; (8005240 <_puts_r+0xd8>)
 800518c:	429c      	cmp	r4, r3
 800518e:	d122      	bne.n	80051d6 <_puts_r+0x6e>
 8005190:	686c      	ldr	r4, [r5, #4]
 8005192:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005194:	07db      	lsls	r3, r3, #31
 8005196:	d405      	bmi.n	80051a4 <_puts_r+0x3c>
 8005198:	89a3      	ldrh	r3, [r4, #12]
 800519a:	059b      	lsls	r3, r3, #22
 800519c:	d402      	bmi.n	80051a4 <_puts_r+0x3c>
 800519e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80051a0:	f7ff ff25 	bl	8004fee <__retarget_lock_acquire_recursive>
 80051a4:	89a3      	ldrh	r3, [r4, #12]
 80051a6:	071b      	lsls	r3, r3, #28
 80051a8:	d502      	bpl.n	80051b0 <_puts_r+0x48>
 80051aa:	6923      	ldr	r3, [r4, #16]
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d129      	bne.n	8005204 <_puts_r+0x9c>
 80051b0:	0021      	movs	r1, r4
 80051b2:	0028      	movs	r0, r5
 80051b4:	f000 f94c 	bl	8005450 <__swsetup_r>
 80051b8:	2800      	cmp	r0, #0
 80051ba:	d023      	beq.n	8005204 <_puts_r+0x9c>
 80051bc:	2501      	movs	r5, #1
 80051be:	426d      	negs	r5, r5
 80051c0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80051c2:	07db      	lsls	r3, r3, #31
 80051c4:	d405      	bmi.n	80051d2 <_puts_r+0x6a>
 80051c6:	89a3      	ldrh	r3, [r4, #12]
 80051c8:	059b      	lsls	r3, r3, #22
 80051ca:	d402      	bmi.n	80051d2 <_puts_r+0x6a>
 80051cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80051ce:	f7ff ff0f 	bl	8004ff0 <__retarget_lock_release_recursive>
 80051d2:	0028      	movs	r0, r5
 80051d4:	bd70      	pop	{r4, r5, r6, pc}
 80051d6:	4b1b      	ldr	r3, [pc, #108]	; (8005244 <_puts_r+0xdc>)
 80051d8:	429c      	cmp	r4, r3
 80051da:	d101      	bne.n	80051e0 <_puts_r+0x78>
 80051dc:	68ac      	ldr	r4, [r5, #8]
 80051de:	e7d8      	b.n	8005192 <_puts_r+0x2a>
 80051e0:	4b19      	ldr	r3, [pc, #100]	; (8005248 <_puts_r+0xe0>)
 80051e2:	429c      	cmp	r4, r3
 80051e4:	d1d5      	bne.n	8005192 <_puts_r+0x2a>
 80051e6:	68ec      	ldr	r4, [r5, #12]
 80051e8:	e7d3      	b.n	8005192 <_puts_r+0x2a>
 80051ea:	3601      	adds	r6, #1
 80051ec:	60a3      	str	r3, [r4, #8]
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	da04      	bge.n	80051fc <_puts_r+0x94>
 80051f2:	69a2      	ldr	r2, [r4, #24]
 80051f4:	429a      	cmp	r2, r3
 80051f6:	dc16      	bgt.n	8005226 <_puts_r+0xbe>
 80051f8:	290a      	cmp	r1, #10
 80051fa:	d014      	beq.n	8005226 <_puts_r+0xbe>
 80051fc:	6823      	ldr	r3, [r4, #0]
 80051fe:	1c5a      	adds	r2, r3, #1
 8005200:	6022      	str	r2, [r4, #0]
 8005202:	7019      	strb	r1, [r3, #0]
 8005204:	68a3      	ldr	r3, [r4, #8]
 8005206:	7831      	ldrb	r1, [r6, #0]
 8005208:	3b01      	subs	r3, #1
 800520a:	2900      	cmp	r1, #0
 800520c:	d1ed      	bne.n	80051ea <_puts_r+0x82>
 800520e:	60a3      	str	r3, [r4, #8]
 8005210:	2b00      	cmp	r3, #0
 8005212:	da0f      	bge.n	8005234 <_puts_r+0xcc>
 8005214:	0028      	movs	r0, r5
 8005216:	0022      	movs	r2, r4
 8005218:	310a      	adds	r1, #10
 800521a:	f000 f8af 	bl	800537c <__swbuf_r>
 800521e:	250a      	movs	r5, #10
 8005220:	1c43      	adds	r3, r0, #1
 8005222:	d1cd      	bne.n	80051c0 <_puts_r+0x58>
 8005224:	e7ca      	b.n	80051bc <_puts_r+0x54>
 8005226:	0022      	movs	r2, r4
 8005228:	0028      	movs	r0, r5
 800522a:	f000 f8a7 	bl	800537c <__swbuf_r>
 800522e:	1c43      	adds	r3, r0, #1
 8005230:	d1e8      	bne.n	8005204 <_puts_r+0x9c>
 8005232:	e7c3      	b.n	80051bc <_puts_r+0x54>
 8005234:	250a      	movs	r5, #10
 8005236:	6823      	ldr	r3, [r4, #0]
 8005238:	1c5a      	adds	r2, r3, #1
 800523a:	6022      	str	r2, [r4, #0]
 800523c:	701d      	strb	r5, [r3, #0]
 800523e:	e7bf      	b.n	80051c0 <_puts_r+0x58>
 8005240:	080061a4 	.word	0x080061a4
 8005244:	080061c4 	.word	0x080061c4
 8005248:	08006184 	.word	0x08006184

0800524c <puts>:
 800524c:	b510      	push	{r4, lr}
 800524e:	4b03      	ldr	r3, [pc, #12]	; (800525c <puts+0x10>)
 8005250:	0001      	movs	r1, r0
 8005252:	6818      	ldr	r0, [r3, #0]
 8005254:	f7ff ff88 	bl	8005168 <_puts_r>
 8005258:	bd10      	pop	{r4, pc}
 800525a:	46c0      	nop			; (mov r8, r8)
 800525c:	20000014 	.word	0x20000014

08005260 <srand>:
 8005260:	4b11      	ldr	r3, [pc, #68]	; (80052a8 <srand+0x48>)
 8005262:	b570      	push	{r4, r5, r6, lr}
 8005264:	681d      	ldr	r5, [r3, #0]
 8005266:	0004      	movs	r4, r0
 8005268:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800526a:	2b00      	cmp	r3, #0
 800526c:	d116      	bne.n	800529c <srand+0x3c>
 800526e:	2018      	movs	r0, #24
 8005270:	f000 faf2 	bl	8005858 <malloc>
 8005274:	1e02      	subs	r2, r0, #0
 8005276:	63a8      	str	r0, [r5, #56]	; 0x38
 8005278:	d104      	bne.n	8005284 <srand+0x24>
 800527a:	2142      	movs	r1, #66	; 0x42
 800527c:	4b0b      	ldr	r3, [pc, #44]	; (80052ac <srand+0x4c>)
 800527e:	480c      	ldr	r0, [pc, #48]	; (80052b0 <srand+0x50>)
 8005280:	f000 f95e 	bl	8005540 <__assert_func>
 8005284:	4b0b      	ldr	r3, [pc, #44]	; (80052b4 <srand+0x54>)
 8005286:	2100      	movs	r1, #0
 8005288:	6003      	str	r3, [r0, #0]
 800528a:	4b0b      	ldr	r3, [pc, #44]	; (80052b8 <srand+0x58>)
 800528c:	6043      	str	r3, [r0, #4]
 800528e:	4b0b      	ldr	r3, [pc, #44]	; (80052bc <srand+0x5c>)
 8005290:	6083      	str	r3, [r0, #8]
 8005292:	230b      	movs	r3, #11
 8005294:	8183      	strh	r3, [r0, #12]
 8005296:	2001      	movs	r0, #1
 8005298:	6110      	str	r0, [r2, #16]
 800529a:	6151      	str	r1, [r2, #20]
 800529c:	2200      	movs	r2, #0
 800529e:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80052a0:	611c      	str	r4, [r3, #16]
 80052a2:	615a      	str	r2, [r3, #20]
 80052a4:	bd70      	pop	{r4, r5, r6, pc}
 80052a6:	46c0      	nop			; (mov r8, r8)
 80052a8:	20000014 	.word	0x20000014
 80052ac:	080061e8 	.word	0x080061e8
 80052b0:	080061ff 	.word	0x080061ff
 80052b4:	abcd330e 	.word	0xabcd330e
 80052b8:	e66d1234 	.word	0xe66d1234
 80052bc:	0005deec 	.word	0x0005deec

080052c0 <_sbrk_r>:
 80052c0:	2300      	movs	r3, #0
 80052c2:	b570      	push	{r4, r5, r6, lr}
 80052c4:	4d06      	ldr	r5, [pc, #24]	; (80052e0 <_sbrk_r+0x20>)
 80052c6:	0004      	movs	r4, r0
 80052c8:	0008      	movs	r0, r1
 80052ca:	602b      	str	r3, [r5, #0]
 80052cc:	f7fb fda0 	bl	8000e10 <_sbrk>
 80052d0:	1c43      	adds	r3, r0, #1
 80052d2:	d103      	bne.n	80052dc <_sbrk_r+0x1c>
 80052d4:	682b      	ldr	r3, [r5, #0]
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d000      	beq.n	80052dc <_sbrk_r+0x1c>
 80052da:	6023      	str	r3, [r4, #0]
 80052dc:	bd70      	pop	{r4, r5, r6, pc}
 80052de:	46c0      	nop			; (mov r8, r8)
 80052e0:	20000318 	.word	0x20000318

080052e4 <__sread>:
 80052e4:	b570      	push	{r4, r5, r6, lr}
 80052e6:	000c      	movs	r4, r1
 80052e8:	250e      	movs	r5, #14
 80052ea:	5f49      	ldrsh	r1, [r1, r5]
 80052ec:	f000 fdfc 	bl	8005ee8 <_read_r>
 80052f0:	2800      	cmp	r0, #0
 80052f2:	db03      	blt.n	80052fc <__sread+0x18>
 80052f4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80052f6:	181b      	adds	r3, r3, r0
 80052f8:	6563      	str	r3, [r4, #84]	; 0x54
 80052fa:	bd70      	pop	{r4, r5, r6, pc}
 80052fc:	89a3      	ldrh	r3, [r4, #12]
 80052fe:	4a02      	ldr	r2, [pc, #8]	; (8005308 <__sread+0x24>)
 8005300:	4013      	ands	r3, r2
 8005302:	81a3      	strh	r3, [r4, #12]
 8005304:	e7f9      	b.n	80052fa <__sread+0x16>
 8005306:	46c0      	nop			; (mov r8, r8)
 8005308:	ffffefff 	.word	0xffffefff

0800530c <__swrite>:
 800530c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800530e:	001f      	movs	r7, r3
 8005310:	898b      	ldrh	r3, [r1, #12]
 8005312:	0005      	movs	r5, r0
 8005314:	000c      	movs	r4, r1
 8005316:	0016      	movs	r6, r2
 8005318:	05db      	lsls	r3, r3, #23
 800531a:	d505      	bpl.n	8005328 <__swrite+0x1c>
 800531c:	230e      	movs	r3, #14
 800531e:	5ec9      	ldrsh	r1, [r1, r3]
 8005320:	2200      	movs	r2, #0
 8005322:	2302      	movs	r3, #2
 8005324:	f000 fa18 	bl	8005758 <_lseek_r>
 8005328:	89a3      	ldrh	r3, [r4, #12]
 800532a:	4a05      	ldr	r2, [pc, #20]	; (8005340 <__swrite+0x34>)
 800532c:	0028      	movs	r0, r5
 800532e:	4013      	ands	r3, r2
 8005330:	81a3      	strh	r3, [r4, #12]
 8005332:	0032      	movs	r2, r6
 8005334:	230e      	movs	r3, #14
 8005336:	5ee1      	ldrsh	r1, [r4, r3]
 8005338:	003b      	movs	r3, r7
 800533a:	f000 f875 	bl	8005428 <_write_r>
 800533e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005340:	ffffefff 	.word	0xffffefff

08005344 <__sseek>:
 8005344:	b570      	push	{r4, r5, r6, lr}
 8005346:	000c      	movs	r4, r1
 8005348:	250e      	movs	r5, #14
 800534a:	5f49      	ldrsh	r1, [r1, r5]
 800534c:	f000 fa04 	bl	8005758 <_lseek_r>
 8005350:	89a3      	ldrh	r3, [r4, #12]
 8005352:	1c42      	adds	r2, r0, #1
 8005354:	d103      	bne.n	800535e <__sseek+0x1a>
 8005356:	4a05      	ldr	r2, [pc, #20]	; (800536c <__sseek+0x28>)
 8005358:	4013      	ands	r3, r2
 800535a:	81a3      	strh	r3, [r4, #12]
 800535c:	bd70      	pop	{r4, r5, r6, pc}
 800535e:	2280      	movs	r2, #128	; 0x80
 8005360:	0152      	lsls	r2, r2, #5
 8005362:	4313      	orrs	r3, r2
 8005364:	81a3      	strh	r3, [r4, #12]
 8005366:	6560      	str	r0, [r4, #84]	; 0x54
 8005368:	e7f8      	b.n	800535c <__sseek+0x18>
 800536a:	46c0      	nop			; (mov r8, r8)
 800536c:	ffffefff 	.word	0xffffefff

08005370 <__sclose>:
 8005370:	b510      	push	{r4, lr}
 8005372:	230e      	movs	r3, #14
 8005374:	5ec9      	ldrsh	r1, [r1, r3]
 8005376:	f000 f901 	bl	800557c <_close_r>
 800537a:	bd10      	pop	{r4, pc}

0800537c <__swbuf_r>:
 800537c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800537e:	0005      	movs	r5, r0
 8005380:	000e      	movs	r6, r1
 8005382:	0014      	movs	r4, r2
 8005384:	2800      	cmp	r0, #0
 8005386:	d004      	beq.n	8005392 <__swbuf_r+0x16>
 8005388:	6983      	ldr	r3, [r0, #24]
 800538a:	2b00      	cmp	r3, #0
 800538c:	d101      	bne.n	8005392 <__swbuf_r+0x16>
 800538e:	f7ff fd69 	bl	8004e64 <__sinit>
 8005392:	4b22      	ldr	r3, [pc, #136]	; (800541c <__swbuf_r+0xa0>)
 8005394:	429c      	cmp	r4, r3
 8005396:	d12e      	bne.n	80053f6 <__swbuf_r+0x7a>
 8005398:	686c      	ldr	r4, [r5, #4]
 800539a:	69a3      	ldr	r3, [r4, #24]
 800539c:	60a3      	str	r3, [r4, #8]
 800539e:	89a3      	ldrh	r3, [r4, #12]
 80053a0:	071b      	lsls	r3, r3, #28
 80053a2:	d532      	bpl.n	800540a <__swbuf_r+0x8e>
 80053a4:	6923      	ldr	r3, [r4, #16]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d02f      	beq.n	800540a <__swbuf_r+0x8e>
 80053aa:	6823      	ldr	r3, [r4, #0]
 80053ac:	6922      	ldr	r2, [r4, #16]
 80053ae:	b2f7      	uxtb	r7, r6
 80053b0:	1a98      	subs	r0, r3, r2
 80053b2:	6963      	ldr	r3, [r4, #20]
 80053b4:	b2f6      	uxtb	r6, r6
 80053b6:	4283      	cmp	r3, r0
 80053b8:	dc05      	bgt.n	80053c6 <__swbuf_r+0x4a>
 80053ba:	0021      	movs	r1, r4
 80053bc:	0028      	movs	r0, r5
 80053be:	f000 f97b 	bl	80056b8 <_fflush_r>
 80053c2:	2800      	cmp	r0, #0
 80053c4:	d127      	bne.n	8005416 <__swbuf_r+0x9a>
 80053c6:	68a3      	ldr	r3, [r4, #8]
 80053c8:	3001      	adds	r0, #1
 80053ca:	3b01      	subs	r3, #1
 80053cc:	60a3      	str	r3, [r4, #8]
 80053ce:	6823      	ldr	r3, [r4, #0]
 80053d0:	1c5a      	adds	r2, r3, #1
 80053d2:	6022      	str	r2, [r4, #0]
 80053d4:	701f      	strb	r7, [r3, #0]
 80053d6:	6963      	ldr	r3, [r4, #20]
 80053d8:	4283      	cmp	r3, r0
 80053da:	d004      	beq.n	80053e6 <__swbuf_r+0x6a>
 80053dc:	89a3      	ldrh	r3, [r4, #12]
 80053de:	07db      	lsls	r3, r3, #31
 80053e0:	d507      	bpl.n	80053f2 <__swbuf_r+0x76>
 80053e2:	2e0a      	cmp	r6, #10
 80053e4:	d105      	bne.n	80053f2 <__swbuf_r+0x76>
 80053e6:	0021      	movs	r1, r4
 80053e8:	0028      	movs	r0, r5
 80053ea:	f000 f965 	bl	80056b8 <_fflush_r>
 80053ee:	2800      	cmp	r0, #0
 80053f0:	d111      	bne.n	8005416 <__swbuf_r+0x9a>
 80053f2:	0030      	movs	r0, r6
 80053f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80053f6:	4b0a      	ldr	r3, [pc, #40]	; (8005420 <__swbuf_r+0xa4>)
 80053f8:	429c      	cmp	r4, r3
 80053fa:	d101      	bne.n	8005400 <__swbuf_r+0x84>
 80053fc:	68ac      	ldr	r4, [r5, #8]
 80053fe:	e7cc      	b.n	800539a <__swbuf_r+0x1e>
 8005400:	4b08      	ldr	r3, [pc, #32]	; (8005424 <__swbuf_r+0xa8>)
 8005402:	429c      	cmp	r4, r3
 8005404:	d1c9      	bne.n	800539a <__swbuf_r+0x1e>
 8005406:	68ec      	ldr	r4, [r5, #12]
 8005408:	e7c7      	b.n	800539a <__swbuf_r+0x1e>
 800540a:	0021      	movs	r1, r4
 800540c:	0028      	movs	r0, r5
 800540e:	f000 f81f 	bl	8005450 <__swsetup_r>
 8005412:	2800      	cmp	r0, #0
 8005414:	d0c9      	beq.n	80053aa <__swbuf_r+0x2e>
 8005416:	2601      	movs	r6, #1
 8005418:	4276      	negs	r6, r6
 800541a:	e7ea      	b.n	80053f2 <__swbuf_r+0x76>
 800541c:	080061a4 	.word	0x080061a4
 8005420:	080061c4 	.word	0x080061c4
 8005424:	08006184 	.word	0x08006184

08005428 <_write_r>:
 8005428:	b570      	push	{r4, r5, r6, lr}
 800542a:	0004      	movs	r4, r0
 800542c:	0008      	movs	r0, r1
 800542e:	0011      	movs	r1, r2
 8005430:	001a      	movs	r2, r3
 8005432:	2300      	movs	r3, #0
 8005434:	4d05      	ldr	r5, [pc, #20]	; (800544c <_write_r+0x24>)
 8005436:	602b      	str	r3, [r5, #0]
 8005438:	f7ff faad 	bl	8004996 <_write>
 800543c:	1c43      	adds	r3, r0, #1
 800543e:	d103      	bne.n	8005448 <_write_r+0x20>
 8005440:	682b      	ldr	r3, [r5, #0]
 8005442:	2b00      	cmp	r3, #0
 8005444:	d000      	beq.n	8005448 <_write_r+0x20>
 8005446:	6023      	str	r3, [r4, #0]
 8005448:	bd70      	pop	{r4, r5, r6, pc}
 800544a:	46c0      	nop			; (mov r8, r8)
 800544c:	20000318 	.word	0x20000318

08005450 <__swsetup_r>:
 8005450:	4b37      	ldr	r3, [pc, #220]	; (8005530 <__swsetup_r+0xe0>)
 8005452:	b570      	push	{r4, r5, r6, lr}
 8005454:	681d      	ldr	r5, [r3, #0]
 8005456:	0006      	movs	r6, r0
 8005458:	000c      	movs	r4, r1
 800545a:	2d00      	cmp	r5, #0
 800545c:	d005      	beq.n	800546a <__swsetup_r+0x1a>
 800545e:	69ab      	ldr	r3, [r5, #24]
 8005460:	2b00      	cmp	r3, #0
 8005462:	d102      	bne.n	800546a <__swsetup_r+0x1a>
 8005464:	0028      	movs	r0, r5
 8005466:	f7ff fcfd 	bl	8004e64 <__sinit>
 800546a:	4b32      	ldr	r3, [pc, #200]	; (8005534 <__swsetup_r+0xe4>)
 800546c:	429c      	cmp	r4, r3
 800546e:	d10f      	bne.n	8005490 <__swsetup_r+0x40>
 8005470:	686c      	ldr	r4, [r5, #4]
 8005472:	230c      	movs	r3, #12
 8005474:	5ee2      	ldrsh	r2, [r4, r3]
 8005476:	b293      	uxth	r3, r2
 8005478:	0711      	lsls	r1, r2, #28
 800547a:	d42d      	bmi.n	80054d8 <__swsetup_r+0x88>
 800547c:	06d9      	lsls	r1, r3, #27
 800547e:	d411      	bmi.n	80054a4 <__swsetup_r+0x54>
 8005480:	2309      	movs	r3, #9
 8005482:	2001      	movs	r0, #1
 8005484:	6033      	str	r3, [r6, #0]
 8005486:	3337      	adds	r3, #55	; 0x37
 8005488:	4313      	orrs	r3, r2
 800548a:	81a3      	strh	r3, [r4, #12]
 800548c:	4240      	negs	r0, r0
 800548e:	bd70      	pop	{r4, r5, r6, pc}
 8005490:	4b29      	ldr	r3, [pc, #164]	; (8005538 <__swsetup_r+0xe8>)
 8005492:	429c      	cmp	r4, r3
 8005494:	d101      	bne.n	800549a <__swsetup_r+0x4a>
 8005496:	68ac      	ldr	r4, [r5, #8]
 8005498:	e7eb      	b.n	8005472 <__swsetup_r+0x22>
 800549a:	4b28      	ldr	r3, [pc, #160]	; (800553c <__swsetup_r+0xec>)
 800549c:	429c      	cmp	r4, r3
 800549e:	d1e8      	bne.n	8005472 <__swsetup_r+0x22>
 80054a0:	68ec      	ldr	r4, [r5, #12]
 80054a2:	e7e6      	b.n	8005472 <__swsetup_r+0x22>
 80054a4:	075b      	lsls	r3, r3, #29
 80054a6:	d513      	bpl.n	80054d0 <__swsetup_r+0x80>
 80054a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80054aa:	2900      	cmp	r1, #0
 80054ac:	d008      	beq.n	80054c0 <__swsetup_r+0x70>
 80054ae:	0023      	movs	r3, r4
 80054b0:	3344      	adds	r3, #68	; 0x44
 80054b2:	4299      	cmp	r1, r3
 80054b4:	d002      	beq.n	80054bc <__swsetup_r+0x6c>
 80054b6:	0030      	movs	r0, r6
 80054b8:	f000 f9e8 	bl	800588c <_free_r>
 80054bc:	2300      	movs	r3, #0
 80054be:	6363      	str	r3, [r4, #52]	; 0x34
 80054c0:	2224      	movs	r2, #36	; 0x24
 80054c2:	89a3      	ldrh	r3, [r4, #12]
 80054c4:	4393      	bics	r3, r2
 80054c6:	81a3      	strh	r3, [r4, #12]
 80054c8:	2300      	movs	r3, #0
 80054ca:	6063      	str	r3, [r4, #4]
 80054cc:	6923      	ldr	r3, [r4, #16]
 80054ce:	6023      	str	r3, [r4, #0]
 80054d0:	2308      	movs	r3, #8
 80054d2:	89a2      	ldrh	r2, [r4, #12]
 80054d4:	4313      	orrs	r3, r2
 80054d6:	81a3      	strh	r3, [r4, #12]
 80054d8:	6923      	ldr	r3, [r4, #16]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d10b      	bne.n	80054f6 <__swsetup_r+0xa6>
 80054de:	21a0      	movs	r1, #160	; 0xa0
 80054e0:	2280      	movs	r2, #128	; 0x80
 80054e2:	89a3      	ldrh	r3, [r4, #12]
 80054e4:	0089      	lsls	r1, r1, #2
 80054e6:	0092      	lsls	r2, r2, #2
 80054e8:	400b      	ands	r3, r1
 80054ea:	4293      	cmp	r3, r2
 80054ec:	d003      	beq.n	80054f6 <__swsetup_r+0xa6>
 80054ee:	0021      	movs	r1, r4
 80054f0:	0030      	movs	r0, r6
 80054f2:	f000 f96d 	bl	80057d0 <__smakebuf_r>
 80054f6:	220c      	movs	r2, #12
 80054f8:	5ea3      	ldrsh	r3, [r4, r2]
 80054fa:	2001      	movs	r0, #1
 80054fc:	001a      	movs	r2, r3
 80054fe:	b299      	uxth	r1, r3
 8005500:	4002      	ands	r2, r0
 8005502:	4203      	tst	r3, r0
 8005504:	d00f      	beq.n	8005526 <__swsetup_r+0xd6>
 8005506:	2200      	movs	r2, #0
 8005508:	60a2      	str	r2, [r4, #8]
 800550a:	6962      	ldr	r2, [r4, #20]
 800550c:	4252      	negs	r2, r2
 800550e:	61a2      	str	r2, [r4, #24]
 8005510:	2000      	movs	r0, #0
 8005512:	6922      	ldr	r2, [r4, #16]
 8005514:	4282      	cmp	r2, r0
 8005516:	d1ba      	bne.n	800548e <__swsetup_r+0x3e>
 8005518:	060a      	lsls	r2, r1, #24
 800551a:	d5b8      	bpl.n	800548e <__swsetup_r+0x3e>
 800551c:	2240      	movs	r2, #64	; 0x40
 800551e:	4313      	orrs	r3, r2
 8005520:	81a3      	strh	r3, [r4, #12]
 8005522:	3801      	subs	r0, #1
 8005524:	e7b3      	b.n	800548e <__swsetup_r+0x3e>
 8005526:	0788      	lsls	r0, r1, #30
 8005528:	d400      	bmi.n	800552c <__swsetup_r+0xdc>
 800552a:	6962      	ldr	r2, [r4, #20]
 800552c:	60a2      	str	r2, [r4, #8]
 800552e:	e7ef      	b.n	8005510 <__swsetup_r+0xc0>
 8005530:	20000014 	.word	0x20000014
 8005534:	080061a4 	.word	0x080061a4
 8005538:	080061c4 	.word	0x080061c4
 800553c:	08006184 	.word	0x08006184

08005540 <__assert_func>:
 8005540:	b530      	push	{r4, r5, lr}
 8005542:	0014      	movs	r4, r2
 8005544:	001a      	movs	r2, r3
 8005546:	4b09      	ldr	r3, [pc, #36]	; (800556c <__assert_func+0x2c>)
 8005548:	0005      	movs	r5, r0
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	b085      	sub	sp, #20
 800554e:	68d8      	ldr	r0, [r3, #12]
 8005550:	4b07      	ldr	r3, [pc, #28]	; (8005570 <__assert_func+0x30>)
 8005552:	2c00      	cmp	r4, #0
 8005554:	d101      	bne.n	800555a <__assert_func+0x1a>
 8005556:	4b07      	ldr	r3, [pc, #28]	; (8005574 <__assert_func+0x34>)
 8005558:	001c      	movs	r4, r3
 800555a:	9301      	str	r3, [sp, #4]
 800555c:	9100      	str	r1, [sp, #0]
 800555e:	002b      	movs	r3, r5
 8005560:	4905      	ldr	r1, [pc, #20]	; (8005578 <__assert_func+0x38>)
 8005562:	9402      	str	r4, [sp, #8]
 8005564:	f000 f8e8 	bl	8005738 <fiprintf>
 8005568:	f000 fcd2 	bl	8005f10 <abort>
 800556c:	20000014 	.word	0x20000014
 8005570:	0800625a 	.word	0x0800625a
 8005574:	08006295 	.word	0x08006295
 8005578:	08006267 	.word	0x08006267

0800557c <_close_r>:
 800557c:	2300      	movs	r3, #0
 800557e:	b570      	push	{r4, r5, r6, lr}
 8005580:	4d06      	ldr	r5, [pc, #24]	; (800559c <_close_r+0x20>)
 8005582:	0004      	movs	r4, r0
 8005584:	0008      	movs	r0, r1
 8005586:	602b      	str	r3, [r5, #0]
 8005588:	f7ff fa30 	bl	80049ec <_close>
 800558c:	1c43      	adds	r3, r0, #1
 800558e:	d103      	bne.n	8005598 <_close_r+0x1c>
 8005590:	682b      	ldr	r3, [r5, #0]
 8005592:	2b00      	cmp	r3, #0
 8005594:	d000      	beq.n	8005598 <_close_r+0x1c>
 8005596:	6023      	str	r3, [r4, #0]
 8005598:	bd70      	pop	{r4, r5, r6, pc}
 800559a:	46c0      	nop			; (mov r8, r8)
 800559c:	20000318 	.word	0x20000318

080055a0 <__sflush_r>:
 80055a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80055a2:	898b      	ldrh	r3, [r1, #12]
 80055a4:	0005      	movs	r5, r0
 80055a6:	000c      	movs	r4, r1
 80055a8:	071a      	lsls	r2, r3, #28
 80055aa:	d45f      	bmi.n	800566c <__sflush_r+0xcc>
 80055ac:	684a      	ldr	r2, [r1, #4]
 80055ae:	2a00      	cmp	r2, #0
 80055b0:	dc04      	bgt.n	80055bc <__sflush_r+0x1c>
 80055b2:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 80055b4:	2a00      	cmp	r2, #0
 80055b6:	dc01      	bgt.n	80055bc <__sflush_r+0x1c>
 80055b8:	2000      	movs	r0, #0
 80055ba:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80055bc:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80055be:	2f00      	cmp	r7, #0
 80055c0:	d0fa      	beq.n	80055b8 <__sflush_r+0x18>
 80055c2:	2200      	movs	r2, #0
 80055c4:	2180      	movs	r1, #128	; 0x80
 80055c6:	682e      	ldr	r6, [r5, #0]
 80055c8:	602a      	str	r2, [r5, #0]
 80055ca:	001a      	movs	r2, r3
 80055cc:	0149      	lsls	r1, r1, #5
 80055ce:	400a      	ands	r2, r1
 80055d0:	420b      	tst	r3, r1
 80055d2:	d034      	beq.n	800563e <__sflush_r+0x9e>
 80055d4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80055d6:	89a3      	ldrh	r3, [r4, #12]
 80055d8:	075b      	lsls	r3, r3, #29
 80055da:	d506      	bpl.n	80055ea <__sflush_r+0x4a>
 80055dc:	6863      	ldr	r3, [r4, #4]
 80055de:	1ac0      	subs	r0, r0, r3
 80055e0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d001      	beq.n	80055ea <__sflush_r+0x4a>
 80055e6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80055e8:	1ac0      	subs	r0, r0, r3
 80055ea:	0002      	movs	r2, r0
 80055ec:	6a21      	ldr	r1, [r4, #32]
 80055ee:	2300      	movs	r3, #0
 80055f0:	0028      	movs	r0, r5
 80055f2:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80055f4:	47b8      	blx	r7
 80055f6:	89a1      	ldrh	r1, [r4, #12]
 80055f8:	1c43      	adds	r3, r0, #1
 80055fa:	d106      	bne.n	800560a <__sflush_r+0x6a>
 80055fc:	682b      	ldr	r3, [r5, #0]
 80055fe:	2b1d      	cmp	r3, #29
 8005600:	d831      	bhi.n	8005666 <__sflush_r+0xc6>
 8005602:	4a2c      	ldr	r2, [pc, #176]	; (80056b4 <__sflush_r+0x114>)
 8005604:	40da      	lsrs	r2, r3
 8005606:	07d3      	lsls	r3, r2, #31
 8005608:	d52d      	bpl.n	8005666 <__sflush_r+0xc6>
 800560a:	2300      	movs	r3, #0
 800560c:	6063      	str	r3, [r4, #4]
 800560e:	6923      	ldr	r3, [r4, #16]
 8005610:	6023      	str	r3, [r4, #0]
 8005612:	04cb      	lsls	r3, r1, #19
 8005614:	d505      	bpl.n	8005622 <__sflush_r+0x82>
 8005616:	1c43      	adds	r3, r0, #1
 8005618:	d102      	bne.n	8005620 <__sflush_r+0x80>
 800561a:	682b      	ldr	r3, [r5, #0]
 800561c:	2b00      	cmp	r3, #0
 800561e:	d100      	bne.n	8005622 <__sflush_r+0x82>
 8005620:	6560      	str	r0, [r4, #84]	; 0x54
 8005622:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005624:	602e      	str	r6, [r5, #0]
 8005626:	2900      	cmp	r1, #0
 8005628:	d0c6      	beq.n	80055b8 <__sflush_r+0x18>
 800562a:	0023      	movs	r3, r4
 800562c:	3344      	adds	r3, #68	; 0x44
 800562e:	4299      	cmp	r1, r3
 8005630:	d002      	beq.n	8005638 <__sflush_r+0x98>
 8005632:	0028      	movs	r0, r5
 8005634:	f000 f92a 	bl	800588c <_free_r>
 8005638:	2000      	movs	r0, #0
 800563a:	6360      	str	r0, [r4, #52]	; 0x34
 800563c:	e7bd      	b.n	80055ba <__sflush_r+0x1a>
 800563e:	2301      	movs	r3, #1
 8005640:	0028      	movs	r0, r5
 8005642:	6a21      	ldr	r1, [r4, #32]
 8005644:	47b8      	blx	r7
 8005646:	1c43      	adds	r3, r0, #1
 8005648:	d1c5      	bne.n	80055d6 <__sflush_r+0x36>
 800564a:	682b      	ldr	r3, [r5, #0]
 800564c:	2b00      	cmp	r3, #0
 800564e:	d0c2      	beq.n	80055d6 <__sflush_r+0x36>
 8005650:	2b1d      	cmp	r3, #29
 8005652:	d001      	beq.n	8005658 <__sflush_r+0xb8>
 8005654:	2b16      	cmp	r3, #22
 8005656:	d101      	bne.n	800565c <__sflush_r+0xbc>
 8005658:	602e      	str	r6, [r5, #0]
 800565a:	e7ad      	b.n	80055b8 <__sflush_r+0x18>
 800565c:	2340      	movs	r3, #64	; 0x40
 800565e:	89a2      	ldrh	r2, [r4, #12]
 8005660:	4313      	orrs	r3, r2
 8005662:	81a3      	strh	r3, [r4, #12]
 8005664:	e7a9      	b.n	80055ba <__sflush_r+0x1a>
 8005666:	2340      	movs	r3, #64	; 0x40
 8005668:	430b      	orrs	r3, r1
 800566a:	e7fa      	b.n	8005662 <__sflush_r+0xc2>
 800566c:	690f      	ldr	r7, [r1, #16]
 800566e:	2f00      	cmp	r7, #0
 8005670:	d0a2      	beq.n	80055b8 <__sflush_r+0x18>
 8005672:	680a      	ldr	r2, [r1, #0]
 8005674:	600f      	str	r7, [r1, #0]
 8005676:	1bd2      	subs	r2, r2, r7
 8005678:	9201      	str	r2, [sp, #4]
 800567a:	2200      	movs	r2, #0
 800567c:	079b      	lsls	r3, r3, #30
 800567e:	d100      	bne.n	8005682 <__sflush_r+0xe2>
 8005680:	694a      	ldr	r2, [r1, #20]
 8005682:	60a2      	str	r2, [r4, #8]
 8005684:	9b01      	ldr	r3, [sp, #4]
 8005686:	2b00      	cmp	r3, #0
 8005688:	dc00      	bgt.n	800568c <__sflush_r+0xec>
 800568a:	e795      	b.n	80055b8 <__sflush_r+0x18>
 800568c:	003a      	movs	r2, r7
 800568e:	0028      	movs	r0, r5
 8005690:	9b01      	ldr	r3, [sp, #4]
 8005692:	6a21      	ldr	r1, [r4, #32]
 8005694:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005696:	47b0      	blx	r6
 8005698:	2800      	cmp	r0, #0
 800569a:	dc06      	bgt.n	80056aa <__sflush_r+0x10a>
 800569c:	2340      	movs	r3, #64	; 0x40
 800569e:	2001      	movs	r0, #1
 80056a0:	89a2      	ldrh	r2, [r4, #12]
 80056a2:	4240      	negs	r0, r0
 80056a4:	4313      	orrs	r3, r2
 80056a6:	81a3      	strh	r3, [r4, #12]
 80056a8:	e787      	b.n	80055ba <__sflush_r+0x1a>
 80056aa:	9b01      	ldr	r3, [sp, #4]
 80056ac:	183f      	adds	r7, r7, r0
 80056ae:	1a1b      	subs	r3, r3, r0
 80056b0:	9301      	str	r3, [sp, #4]
 80056b2:	e7e7      	b.n	8005684 <__sflush_r+0xe4>
 80056b4:	20400001 	.word	0x20400001

080056b8 <_fflush_r>:
 80056b8:	690b      	ldr	r3, [r1, #16]
 80056ba:	b570      	push	{r4, r5, r6, lr}
 80056bc:	0005      	movs	r5, r0
 80056be:	000c      	movs	r4, r1
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d102      	bne.n	80056ca <_fflush_r+0x12>
 80056c4:	2500      	movs	r5, #0
 80056c6:	0028      	movs	r0, r5
 80056c8:	bd70      	pop	{r4, r5, r6, pc}
 80056ca:	2800      	cmp	r0, #0
 80056cc:	d004      	beq.n	80056d8 <_fflush_r+0x20>
 80056ce:	6983      	ldr	r3, [r0, #24]
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d101      	bne.n	80056d8 <_fflush_r+0x20>
 80056d4:	f7ff fbc6 	bl	8004e64 <__sinit>
 80056d8:	4b14      	ldr	r3, [pc, #80]	; (800572c <_fflush_r+0x74>)
 80056da:	429c      	cmp	r4, r3
 80056dc:	d11b      	bne.n	8005716 <_fflush_r+0x5e>
 80056de:	686c      	ldr	r4, [r5, #4]
 80056e0:	220c      	movs	r2, #12
 80056e2:	5ea3      	ldrsh	r3, [r4, r2]
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d0ed      	beq.n	80056c4 <_fflush_r+0xc>
 80056e8:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80056ea:	07d2      	lsls	r2, r2, #31
 80056ec:	d404      	bmi.n	80056f8 <_fflush_r+0x40>
 80056ee:	059b      	lsls	r3, r3, #22
 80056f0:	d402      	bmi.n	80056f8 <_fflush_r+0x40>
 80056f2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80056f4:	f7ff fc7b 	bl	8004fee <__retarget_lock_acquire_recursive>
 80056f8:	0028      	movs	r0, r5
 80056fa:	0021      	movs	r1, r4
 80056fc:	f7ff ff50 	bl	80055a0 <__sflush_r>
 8005700:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005702:	0005      	movs	r5, r0
 8005704:	07db      	lsls	r3, r3, #31
 8005706:	d4de      	bmi.n	80056c6 <_fflush_r+0xe>
 8005708:	89a3      	ldrh	r3, [r4, #12]
 800570a:	059b      	lsls	r3, r3, #22
 800570c:	d4db      	bmi.n	80056c6 <_fflush_r+0xe>
 800570e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005710:	f7ff fc6e 	bl	8004ff0 <__retarget_lock_release_recursive>
 8005714:	e7d7      	b.n	80056c6 <_fflush_r+0xe>
 8005716:	4b06      	ldr	r3, [pc, #24]	; (8005730 <_fflush_r+0x78>)
 8005718:	429c      	cmp	r4, r3
 800571a:	d101      	bne.n	8005720 <_fflush_r+0x68>
 800571c:	68ac      	ldr	r4, [r5, #8]
 800571e:	e7df      	b.n	80056e0 <_fflush_r+0x28>
 8005720:	4b04      	ldr	r3, [pc, #16]	; (8005734 <_fflush_r+0x7c>)
 8005722:	429c      	cmp	r4, r3
 8005724:	d1dc      	bne.n	80056e0 <_fflush_r+0x28>
 8005726:	68ec      	ldr	r4, [r5, #12]
 8005728:	e7da      	b.n	80056e0 <_fflush_r+0x28>
 800572a:	46c0      	nop			; (mov r8, r8)
 800572c:	080061a4 	.word	0x080061a4
 8005730:	080061c4 	.word	0x080061c4
 8005734:	08006184 	.word	0x08006184

08005738 <fiprintf>:
 8005738:	b40e      	push	{r1, r2, r3}
 800573a:	b503      	push	{r0, r1, lr}
 800573c:	0001      	movs	r1, r0
 800573e:	ab03      	add	r3, sp, #12
 8005740:	4804      	ldr	r0, [pc, #16]	; (8005754 <fiprintf+0x1c>)
 8005742:	cb04      	ldmia	r3!, {r2}
 8005744:	6800      	ldr	r0, [r0, #0]
 8005746:	9301      	str	r3, [sp, #4]
 8005748:	f000 f912 	bl	8005970 <_vfiprintf_r>
 800574c:	b002      	add	sp, #8
 800574e:	bc08      	pop	{r3}
 8005750:	b003      	add	sp, #12
 8005752:	4718      	bx	r3
 8005754:	20000014 	.word	0x20000014

08005758 <_lseek_r>:
 8005758:	b570      	push	{r4, r5, r6, lr}
 800575a:	0004      	movs	r4, r0
 800575c:	0008      	movs	r0, r1
 800575e:	0011      	movs	r1, r2
 8005760:	001a      	movs	r2, r3
 8005762:	2300      	movs	r3, #0
 8005764:	4d05      	ldr	r5, [pc, #20]	; (800577c <_lseek_r+0x24>)
 8005766:	602b      	str	r3, [r5, #0]
 8005768:	f7ff f901 	bl	800496e <_lseek>
 800576c:	1c43      	adds	r3, r0, #1
 800576e:	d103      	bne.n	8005778 <_lseek_r+0x20>
 8005770:	682b      	ldr	r3, [r5, #0]
 8005772:	2b00      	cmp	r3, #0
 8005774:	d000      	beq.n	8005778 <_lseek_r+0x20>
 8005776:	6023      	str	r3, [r4, #0]
 8005778:	bd70      	pop	{r4, r5, r6, pc}
 800577a:	46c0      	nop			; (mov r8, r8)
 800577c:	20000318 	.word	0x20000318

08005780 <__swhatbuf_r>:
 8005780:	b570      	push	{r4, r5, r6, lr}
 8005782:	000e      	movs	r6, r1
 8005784:	001d      	movs	r5, r3
 8005786:	230e      	movs	r3, #14
 8005788:	5ec9      	ldrsh	r1, [r1, r3]
 800578a:	0014      	movs	r4, r2
 800578c:	b096      	sub	sp, #88	; 0x58
 800578e:	2900      	cmp	r1, #0
 8005790:	da08      	bge.n	80057a4 <__swhatbuf_r+0x24>
 8005792:	220c      	movs	r2, #12
 8005794:	5eb3      	ldrsh	r3, [r6, r2]
 8005796:	2200      	movs	r2, #0
 8005798:	602a      	str	r2, [r5, #0]
 800579a:	061b      	lsls	r3, r3, #24
 800579c:	d411      	bmi.n	80057c2 <__swhatbuf_r+0x42>
 800579e:	2380      	movs	r3, #128	; 0x80
 80057a0:	00db      	lsls	r3, r3, #3
 80057a2:	e00f      	b.n	80057c4 <__swhatbuf_r+0x44>
 80057a4:	466a      	mov	r2, sp
 80057a6:	f000 fbbb 	bl	8005f20 <_fstat_r>
 80057aa:	2800      	cmp	r0, #0
 80057ac:	dbf1      	blt.n	8005792 <__swhatbuf_r+0x12>
 80057ae:	23f0      	movs	r3, #240	; 0xf0
 80057b0:	9901      	ldr	r1, [sp, #4]
 80057b2:	021b      	lsls	r3, r3, #8
 80057b4:	4019      	ands	r1, r3
 80057b6:	4b05      	ldr	r3, [pc, #20]	; (80057cc <__swhatbuf_r+0x4c>)
 80057b8:	18c9      	adds	r1, r1, r3
 80057ba:	424b      	negs	r3, r1
 80057bc:	4159      	adcs	r1, r3
 80057be:	6029      	str	r1, [r5, #0]
 80057c0:	e7ed      	b.n	800579e <__swhatbuf_r+0x1e>
 80057c2:	2340      	movs	r3, #64	; 0x40
 80057c4:	2000      	movs	r0, #0
 80057c6:	6023      	str	r3, [r4, #0]
 80057c8:	b016      	add	sp, #88	; 0x58
 80057ca:	bd70      	pop	{r4, r5, r6, pc}
 80057cc:	ffffe000 	.word	0xffffe000

080057d0 <__smakebuf_r>:
 80057d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80057d2:	2602      	movs	r6, #2
 80057d4:	898b      	ldrh	r3, [r1, #12]
 80057d6:	0005      	movs	r5, r0
 80057d8:	000c      	movs	r4, r1
 80057da:	4233      	tst	r3, r6
 80057dc:	d006      	beq.n	80057ec <__smakebuf_r+0x1c>
 80057de:	0023      	movs	r3, r4
 80057e0:	3347      	adds	r3, #71	; 0x47
 80057e2:	6023      	str	r3, [r4, #0]
 80057e4:	6123      	str	r3, [r4, #16]
 80057e6:	2301      	movs	r3, #1
 80057e8:	6163      	str	r3, [r4, #20]
 80057ea:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 80057ec:	466a      	mov	r2, sp
 80057ee:	ab01      	add	r3, sp, #4
 80057f0:	f7ff ffc6 	bl	8005780 <__swhatbuf_r>
 80057f4:	9900      	ldr	r1, [sp, #0]
 80057f6:	0007      	movs	r7, r0
 80057f8:	0028      	movs	r0, r5
 80057fa:	f7ff fc25 	bl	8005048 <_malloc_r>
 80057fe:	2800      	cmp	r0, #0
 8005800:	d108      	bne.n	8005814 <__smakebuf_r+0x44>
 8005802:	220c      	movs	r2, #12
 8005804:	5ea3      	ldrsh	r3, [r4, r2]
 8005806:	059a      	lsls	r2, r3, #22
 8005808:	d4ef      	bmi.n	80057ea <__smakebuf_r+0x1a>
 800580a:	2203      	movs	r2, #3
 800580c:	4393      	bics	r3, r2
 800580e:	431e      	orrs	r6, r3
 8005810:	81a6      	strh	r6, [r4, #12]
 8005812:	e7e4      	b.n	80057de <__smakebuf_r+0xe>
 8005814:	4b0f      	ldr	r3, [pc, #60]	; (8005854 <__smakebuf_r+0x84>)
 8005816:	62ab      	str	r3, [r5, #40]	; 0x28
 8005818:	2380      	movs	r3, #128	; 0x80
 800581a:	89a2      	ldrh	r2, [r4, #12]
 800581c:	6020      	str	r0, [r4, #0]
 800581e:	4313      	orrs	r3, r2
 8005820:	81a3      	strh	r3, [r4, #12]
 8005822:	9b00      	ldr	r3, [sp, #0]
 8005824:	6120      	str	r0, [r4, #16]
 8005826:	6163      	str	r3, [r4, #20]
 8005828:	9b01      	ldr	r3, [sp, #4]
 800582a:	2b00      	cmp	r3, #0
 800582c:	d00d      	beq.n	800584a <__smakebuf_r+0x7a>
 800582e:	0028      	movs	r0, r5
 8005830:	230e      	movs	r3, #14
 8005832:	5ee1      	ldrsh	r1, [r4, r3]
 8005834:	f000 fb86 	bl	8005f44 <_isatty_r>
 8005838:	2800      	cmp	r0, #0
 800583a:	d006      	beq.n	800584a <__smakebuf_r+0x7a>
 800583c:	2203      	movs	r2, #3
 800583e:	89a3      	ldrh	r3, [r4, #12]
 8005840:	4393      	bics	r3, r2
 8005842:	001a      	movs	r2, r3
 8005844:	2301      	movs	r3, #1
 8005846:	4313      	orrs	r3, r2
 8005848:	81a3      	strh	r3, [r4, #12]
 800584a:	89a0      	ldrh	r0, [r4, #12]
 800584c:	4307      	orrs	r7, r0
 800584e:	81a7      	strh	r7, [r4, #12]
 8005850:	e7cb      	b.n	80057ea <__smakebuf_r+0x1a>
 8005852:	46c0      	nop			; (mov r8, r8)
 8005854:	08004de9 	.word	0x08004de9

08005858 <malloc>:
 8005858:	b510      	push	{r4, lr}
 800585a:	4b03      	ldr	r3, [pc, #12]	; (8005868 <malloc+0x10>)
 800585c:	0001      	movs	r1, r0
 800585e:	6818      	ldr	r0, [r3, #0]
 8005860:	f7ff fbf2 	bl	8005048 <_malloc_r>
 8005864:	bd10      	pop	{r4, pc}
 8005866:	46c0      	nop			; (mov r8, r8)
 8005868:	20000014 	.word	0x20000014

0800586c <__malloc_lock>:
 800586c:	b510      	push	{r4, lr}
 800586e:	4802      	ldr	r0, [pc, #8]	; (8005878 <__malloc_lock+0xc>)
 8005870:	f7ff fbbd 	bl	8004fee <__retarget_lock_acquire_recursive>
 8005874:	bd10      	pop	{r4, pc}
 8005876:	46c0      	nop			; (mov r8, r8)
 8005878:	2000030c 	.word	0x2000030c

0800587c <__malloc_unlock>:
 800587c:	b510      	push	{r4, lr}
 800587e:	4802      	ldr	r0, [pc, #8]	; (8005888 <__malloc_unlock+0xc>)
 8005880:	f7ff fbb6 	bl	8004ff0 <__retarget_lock_release_recursive>
 8005884:	bd10      	pop	{r4, pc}
 8005886:	46c0      	nop			; (mov r8, r8)
 8005888:	2000030c 	.word	0x2000030c

0800588c <_free_r>:
 800588c:	b570      	push	{r4, r5, r6, lr}
 800588e:	0005      	movs	r5, r0
 8005890:	2900      	cmp	r1, #0
 8005892:	d010      	beq.n	80058b6 <_free_r+0x2a>
 8005894:	1f0c      	subs	r4, r1, #4
 8005896:	6823      	ldr	r3, [r4, #0]
 8005898:	2b00      	cmp	r3, #0
 800589a:	da00      	bge.n	800589e <_free_r+0x12>
 800589c:	18e4      	adds	r4, r4, r3
 800589e:	0028      	movs	r0, r5
 80058a0:	f7ff ffe4 	bl	800586c <__malloc_lock>
 80058a4:	4a1d      	ldr	r2, [pc, #116]	; (800591c <_free_r+0x90>)
 80058a6:	6813      	ldr	r3, [r2, #0]
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d105      	bne.n	80058b8 <_free_r+0x2c>
 80058ac:	6063      	str	r3, [r4, #4]
 80058ae:	6014      	str	r4, [r2, #0]
 80058b0:	0028      	movs	r0, r5
 80058b2:	f7ff ffe3 	bl	800587c <__malloc_unlock>
 80058b6:	bd70      	pop	{r4, r5, r6, pc}
 80058b8:	42a3      	cmp	r3, r4
 80058ba:	d908      	bls.n	80058ce <_free_r+0x42>
 80058bc:	6821      	ldr	r1, [r4, #0]
 80058be:	1860      	adds	r0, r4, r1
 80058c0:	4283      	cmp	r3, r0
 80058c2:	d1f3      	bne.n	80058ac <_free_r+0x20>
 80058c4:	6818      	ldr	r0, [r3, #0]
 80058c6:	685b      	ldr	r3, [r3, #4]
 80058c8:	1841      	adds	r1, r0, r1
 80058ca:	6021      	str	r1, [r4, #0]
 80058cc:	e7ee      	b.n	80058ac <_free_r+0x20>
 80058ce:	001a      	movs	r2, r3
 80058d0:	685b      	ldr	r3, [r3, #4]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d001      	beq.n	80058da <_free_r+0x4e>
 80058d6:	42a3      	cmp	r3, r4
 80058d8:	d9f9      	bls.n	80058ce <_free_r+0x42>
 80058da:	6811      	ldr	r1, [r2, #0]
 80058dc:	1850      	adds	r0, r2, r1
 80058de:	42a0      	cmp	r0, r4
 80058e0:	d10b      	bne.n	80058fa <_free_r+0x6e>
 80058e2:	6820      	ldr	r0, [r4, #0]
 80058e4:	1809      	adds	r1, r1, r0
 80058e6:	1850      	adds	r0, r2, r1
 80058e8:	6011      	str	r1, [r2, #0]
 80058ea:	4283      	cmp	r3, r0
 80058ec:	d1e0      	bne.n	80058b0 <_free_r+0x24>
 80058ee:	6818      	ldr	r0, [r3, #0]
 80058f0:	685b      	ldr	r3, [r3, #4]
 80058f2:	1841      	adds	r1, r0, r1
 80058f4:	6011      	str	r1, [r2, #0]
 80058f6:	6053      	str	r3, [r2, #4]
 80058f8:	e7da      	b.n	80058b0 <_free_r+0x24>
 80058fa:	42a0      	cmp	r0, r4
 80058fc:	d902      	bls.n	8005904 <_free_r+0x78>
 80058fe:	230c      	movs	r3, #12
 8005900:	602b      	str	r3, [r5, #0]
 8005902:	e7d5      	b.n	80058b0 <_free_r+0x24>
 8005904:	6821      	ldr	r1, [r4, #0]
 8005906:	1860      	adds	r0, r4, r1
 8005908:	4283      	cmp	r3, r0
 800590a:	d103      	bne.n	8005914 <_free_r+0x88>
 800590c:	6818      	ldr	r0, [r3, #0]
 800590e:	685b      	ldr	r3, [r3, #4]
 8005910:	1841      	adds	r1, r0, r1
 8005912:	6021      	str	r1, [r4, #0]
 8005914:	6063      	str	r3, [r4, #4]
 8005916:	6054      	str	r4, [r2, #4]
 8005918:	e7ca      	b.n	80058b0 <_free_r+0x24>
 800591a:	46c0      	nop			; (mov r8, r8)
 800591c:	20000310 	.word	0x20000310

08005920 <__sfputc_r>:
 8005920:	6893      	ldr	r3, [r2, #8]
 8005922:	b510      	push	{r4, lr}
 8005924:	3b01      	subs	r3, #1
 8005926:	6093      	str	r3, [r2, #8]
 8005928:	2b00      	cmp	r3, #0
 800592a:	da04      	bge.n	8005936 <__sfputc_r+0x16>
 800592c:	6994      	ldr	r4, [r2, #24]
 800592e:	42a3      	cmp	r3, r4
 8005930:	db07      	blt.n	8005942 <__sfputc_r+0x22>
 8005932:	290a      	cmp	r1, #10
 8005934:	d005      	beq.n	8005942 <__sfputc_r+0x22>
 8005936:	6813      	ldr	r3, [r2, #0]
 8005938:	1c58      	adds	r0, r3, #1
 800593a:	6010      	str	r0, [r2, #0]
 800593c:	7019      	strb	r1, [r3, #0]
 800593e:	0008      	movs	r0, r1
 8005940:	bd10      	pop	{r4, pc}
 8005942:	f7ff fd1b 	bl	800537c <__swbuf_r>
 8005946:	0001      	movs	r1, r0
 8005948:	e7f9      	b.n	800593e <__sfputc_r+0x1e>

0800594a <__sfputs_r>:
 800594a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800594c:	0006      	movs	r6, r0
 800594e:	000f      	movs	r7, r1
 8005950:	0014      	movs	r4, r2
 8005952:	18d5      	adds	r5, r2, r3
 8005954:	42ac      	cmp	r4, r5
 8005956:	d101      	bne.n	800595c <__sfputs_r+0x12>
 8005958:	2000      	movs	r0, #0
 800595a:	e007      	b.n	800596c <__sfputs_r+0x22>
 800595c:	7821      	ldrb	r1, [r4, #0]
 800595e:	003a      	movs	r2, r7
 8005960:	0030      	movs	r0, r6
 8005962:	f7ff ffdd 	bl	8005920 <__sfputc_r>
 8005966:	3401      	adds	r4, #1
 8005968:	1c43      	adds	r3, r0, #1
 800596a:	d1f3      	bne.n	8005954 <__sfputs_r+0xa>
 800596c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005970 <_vfiprintf_r>:
 8005970:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005972:	b0a1      	sub	sp, #132	; 0x84
 8005974:	0006      	movs	r6, r0
 8005976:	000c      	movs	r4, r1
 8005978:	001f      	movs	r7, r3
 800597a:	9203      	str	r2, [sp, #12]
 800597c:	2800      	cmp	r0, #0
 800597e:	d004      	beq.n	800598a <_vfiprintf_r+0x1a>
 8005980:	6983      	ldr	r3, [r0, #24]
 8005982:	2b00      	cmp	r3, #0
 8005984:	d101      	bne.n	800598a <_vfiprintf_r+0x1a>
 8005986:	f7ff fa6d 	bl	8004e64 <__sinit>
 800598a:	4b8e      	ldr	r3, [pc, #568]	; (8005bc4 <_vfiprintf_r+0x254>)
 800598c:	429c      	cmp	r4, r3
 800598e:	d11c      	bne.n	80059ca <_vfiprintf_r+0x5a>
 8005990:	6874      	ldr	r4, [r6, #4]
 8005992:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005994:	07db      	lsls	r3, r3, #31
 8005996:	d405      	bmi.n	80059a4 <_vfiprintf_r+0x34>
 8005998:	89a3      	ldrh	r3, [r4, #12]
 800599a:	059b      	lsls	r3, r3, #22
 800599c:	d402      	bmi.n	80059a4 <_vfiprintf_r+0x34>
 800599e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80059a0:	f7ff fb25 	bl	8004fee <__retarget_lock_acquire_recursive>
 80059a4:	89a3      	ldrh	r3, [r4, #12]
 80059a6:	071b      	lsls	r3, r3, #28
 80059a8:	d502      	bpl.n	80059b0 <_vfiprintf_r+0x40>
 80059aa:	6923      	ldr	r3, [r4, #16]
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d11d      	bne.n	80059ec <_vfiprintf_r+0x7c>
 80059b0:	0021      	movs	r1, r4
 80059b2:	0030      	movs	r0, r6
 80059b4:	f7ff fd4c 	bl	8005450 <__swsetup_r>
 80059b8:	2800      	cmp	r0, #0
 80059ba:	d017      	beq.n	80059ec <_vfiprintf_r+0x7c>
 80059bc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80059be:	07db      	lsls	r3, r3, #31
 80059c0:	d50d      	bpl.n	80059de <_vfiprintf_r+0x6e>
 80059c2:	2001      	movs	r0, #1
 80059c4:	4240      	negs	r0, r0
 80059c6:	b021      	add	sp, #132	; 0x84
 80059c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80059ca:	4b7f      	ldr	r3, [pc, #508]	; (8005bc8 <_vfiprintf_r+0x258>)
 80059cc:	429c      	cmp	r4, r3
 80059ce:	d101      	bne.n	80059d4 <_vfiprintf_r+0x64>
 80059d0:	68b4      	ldr	r4, [r6, #8]
 80059d2:	e7de      	b.n	8005992 <_vfiprintf_r+0x22>
 80059d4:	4b7d      	ldr	r3, [pc, #500]	; (8005bcc <_vfiprintf_r+0x25c>)
 80059d6:	429c      	cmp	r4, r3
 80059d8:	d1db      	bne.n	8005992 <_vfiprintf_r+0x22>
 80059da:	68f4      	ldr	r4, [r6, #12]
 80059dc:	e7d9      	b.n	8005992 <_vfiprintf_r+0x22>
 80059de:	89a3      	ldrh	r3, [r4, #12]
 80059e0:	059b      	lsls	r3, r3, #22
 80059e2:	d4ee      	bmi.n	80059c2 <_vfiprintf_r+0x52>
 80059e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80059e6:	f7ff fb03 	bl	8004ff0 <__retarget_lock_release_recursive>
 80059ea:	e7ea      	b.n	80059c2 <_vfiprintf_r+0x52>
 80059ec:	2300      	movs	r3, #0
 80059ee:	ad08      	add	r5, sp, #32
 80059f0:	616b      	str	r3, [r5, #20]
 80059f2:	3320      	adds	r3, #32
 80059f4:	766b      	strb	r3, [r5, #25]
 80059f6:	3310      	adds	r3, #16
 80059f8:	76ab      	strb	r3, [r5, #26]
 80059fa:	9707      	str	r7, [sp, #28]
 80059fc:	9f03      	ldr	r7, [sp, #12]
 80059fe:	783b      	ldrb	r3, [r7, #0]
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d001      	beq.n	8005a08 <_vfiprintf_r+0x98>
 8005a04:	2b25      	cmp	r3, #37	; 0x25
 8005a06:	d14e      	bne.n	8005aa6 <_vfiprintf_r+0x136>
 8005a08:	9b03      	ldr	r3, [sp, #12]
 8005a0a:	1afb      	subs	r3, r7, r3
 8005a0c:	9305      	str	r3, [sp, #20]
 8005a0e:	9b03      	ldr	r3, [sp, #12]
 8005a10:	429f      	cmp	r7, r3
 8005a12:	d00d      	beq.n	8005a30 <_vfiprintf_r+0xc0>
 8005a14:	9b05      	ldr	r3, [sp, #20]
 8005a16:	0021      	movs	r1, r4
 8005a18:	0030      	movs	r0, r6
 8005a1a:	9a03      	ldr	r2, [sp, #12]
 8005a1c:	f7ff ff95 	bl	800594a <__sfputs_r>
 8005a20:	1c43      	adds	r3, r0, #1
 8005a22:	d100      	bne.n	8005a26 <_vfiprintf_r+0xb6>
 8005a24:	e0b5      	b.n	8005b92 <_vfiprintf_r+0x222>
 8005a26:	696a      	ldr	r2, [r5, #20]
 8005a28:	9b05      	ldr	r3, [sp, #20]
 8005a2a:	4694      	mov	ip, r2
 8005a2c:	4463      	add	r3, ip
 8005a2e:	616b      	str	r3, [r5, #20]
 8005a30:	783b      	ldrb	r3, [r7, #0]
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d100      	bne.n	8005a38 <_vfiprintf_r+0xc8>
 8005a36:	e0ac      	b.n	8005b92 <_vfiprintf_r+0x222>
 8005a38:	2201      	movs	r2, #1
 8005a3a:	1c7b      	adds	r3, r7, #1
 8005a3c:	9303      	str	r3, [sp, #12]
 8005a3e:	2300      	movs	r3, #0
 8005a40:	4252      	negs	r2, r2
 8005a42:	606a      	str	r2, [r5, #4]
 8005a44:	a904      	add	r1, sp, #16
 8005a46:	3254      	adds	r2, #84	; 0x54
 8005a48:	1852      	adds	r2, r2, r1
 8005a4a:	602b      	str	r3, [r5, #0]
 8005a4c:	60eb      	str	r3, [r5, #12]
 8005a4e:	60ab      	str	r3, [r5, #8]
 8005a50:	7013      	strb	r3, [r2, #0]
 8005a52:	65ab      	str	r3, [r5, #88]	; 0x58
 8005a54:	9b03      	ldr	r3, [sp, #12]
 8005a56:	2205      	movs	r2, #5
 8005a58:	7819      	ldrb	r1, [r3, #0]
 8005a5a:	485d      	ldr	r0, [pc, #372]	; (8005bd0 <_vfiprintf_r+0x260>)
 8005a5c:	f000 fa84 	bl	8005f68 <memchr>
 8005a60:	9b03      	ldr	r3, [sp, #12]
 8005a62:	1c5f      	adds	r7, r3, #1
 8005a64:	2800      	cmp	r0, #0
 8005a66:	d120      	bne.n	8005aaa <_vfiprintf_r+0x13a>
 8005a68:	682a      	ldr	r2, [r5, #0]
 8005a6a:	06d3      	lsls	r3, r2, #27
 8005a6c:	d504      	bpl.n	8005a78 <_vfiprintf_r+0x108>
 8005a6e:	2353      	movs	r3, #83	; 0x53
 8005a70:	a904      	add	r1, sp, #16
 8005a72:	185b      	adds	r3, r3, r1
 8005a74:	2120      	movs	r1, #32
 8005a76:	7019      	strb	r1, [r3, #0]
 8005a78:	0713      	lsls	r3, r2, #28
 8005a7a:	d504      	bpl.n	8005a86 <_vfiprintf_r+0x116>
 8005a7c:	2353      	movs	r3, #83	; 0x53
 8005a7e:	a904      	add	r1, sp, #16
 8005a80:	185b      	adds	r3, r3, r1
 8005a82:	212b      	movs	r1, #43	; 0x2b
 8005a84:	7019      	strb	r1, [r3, #0]
 8005a86:	9b03      	ldr	r3, [sp, #12]
 8005a88:	781b      	ldrb	r3, [r3, #0]
 8005a8a:	2b2a      	cmp	r3, #42	; 0x2a
 8005a8c:	d016      	beq.n	8005abc <_vfiprintf_r+0x14c>
 8005a8e:	2100      	movs	r1, #0
 8005a90:	68eb      	ldr	r3, [r5, #12]
 8005a92:	9f03      	ldr	r7, [sp, #12]
 8005a94:	783a      	ldrb	r2, [r7, #0]
 8005a96:	1c78      	adds	r0, r7, #1
 8005a98:	3a30      	subs	r2, #48	; 0x30
 8005a9a:	4684      	mov	ip, r0
 8005a9c:	2a09      	cmp	r2, #9
 8005a9e:	d94f      	bls.n	8005b40 <_vfiprintf_r+0x1d0>
 8005aa0:	2900      	cmp	r1, #0
 8005aa2:	d111      	bne.n	8005ac8 <_vfiprintf_r+0x158>
 8005aa4:	e017      	b.n	8005ad6 <_vfiprintf_r+0x166>
 8005aa6:	3701      	adds	r7, #1
 8005aa8:	e7a9      	b.n	80059fe <_vfiprintf_r+0x8e>
 8005aaa:	4b49      	ldr	r3, [pc, #292]	; (8005bd0 <_vfiprintf_r+0x260>)
 8005aac:	682a      	ldr	r2, [r5, #0]
 8005aae:	1ac0      	subs	r0, r0, r3
 8005ab0:	2301      	movs	r3, #1
 8005ab2:	4083      	lsls	r3, r0
 8005ab4:	4313      	orrs	r3, r2
 8005ab6:	602b      	str	r3, [r5, #0]
 8005ab8:	9703      	str	r7, [sp, #12]
 8005aba:	e7cb      	b.n	8005a54 <_vfiprintf_r+0xe4>
 8005abc:	9b07      	ldr	r3, [sp, #28]
 8005abe:	1d19      	adds	r1, r3, #4
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	9107      	str	r1, [sp, #28]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	db01      	blt.n	8005acc <_vfiprintf_r+0x15c>
 8005ac8:	930b      	str	r3, [sp, #44]	; 0x2c
 8005aca:	e004      	b.n	8005ad6 <_vfiprintf_r+0x166>
 8005acc:	425b      	negs	r3, r3
 8005ace:	60eb      	str	r3, [r5, #12]
 8005ad0:	2302      	movs	r3, #2
 8005ad2:	4313      	orrs	r3, r2
 8005ad4:	602b      	str	r3, [r5, #0]
 8005ad6:	783b      	ldrb	r3, [r7, #0]
 8005ad8:	2b2e      	cmp	r3, #46	; 0x2e
 8005ada:	d10a      	bne.n	8005af2 <_vfiprintf_r+0x182>
 8005adc:	787b      	ldrb	r3, [r7, #1]
 8005ade:	2b2a      	cmp	r3, #42	; 0x2a
 8005ae0:	d137      	bne.n	8005b52 <_vfiprintf_r+0x1e2>
 8005ae2:	9b07      	ldr	r3, [sp, #28]
 8005ae4:	3702      	adds	r7, #2
 8005ae6:	1d1a      	adds	r2, r3, #4
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	9207      	str	r2, [sp, #28]
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	db2d      	blt.n	8005b4c <_vfiprintf_r+0x1dc>
 8005af0:	9309      	str	r3, [sp, #36]	; 0x24
 8005af2:	2203      	movs	r2, #3
 8005af4:	7839      	ldrb	r1, [r7, #0]
 8005af6:	4837      	ldr	r0, [pc, #220]	; (8005bd4 <_vfiprintf_r+0x264>)
 8005af8:	f000 fa36 	bl	8005f68 <memchr>
 8005afc:	2800      	cmp	r0, #0
 8005afe:	d007      	beq.n	8005b10 <_vfiprintf_r+0x1a0>
 8005b00:	4b34      	ldr	r3, [pc, #208]	; (8005bd4 <_vfiprintf_r+0x264>)
 8005b02:	682a      	ldr	r2, [r5, #0]
 8005b04:	1ac0      	subs	r0, r0, r3
 8005b06:	2340      	movs	r3, #64	; 0x40
 8005b08:	4083      	lsls	r3, r0
 8005b0a:	4313      	orrs	r3, r2
 8005b0c:	3701      	adds	r7, #1
 8005b0e:	602b      	str	r3, [r5, #0]
 8005b10:	7839      	ldrb	r1, [r7, #0]
 8005b12:	1c7b      	adds	r3, r7, #1
 8005b14:	2206      	movs	r2, #6
 8005b16:	4830      	ldr	r0, [pc, #192]	; (8005bd8 <_vfiprintf_r+0x268>)
 8005b18:	9303      	str	r3, [sp, #12]
 8005b1a:	7629      	strb	r1, [r5, #24]
 8005b1c:	f000 fa24 	bl	8005f68 <memchr>
 8005b20:	2800      	cmp	r0, #0
 8005b22:	d045      	beq.n	8005bb0 <_vfiprintf_r+0x240>
 8005b24:	4b2d      	ldr	r3, [pc, #180]	; (8005bdc <_vfiprintf_r+0x26c>)
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d127      	bne.n	8005b7a <_vfiprintf_r+0x20a>
 8005b2a:	2207      	movs	r2, #7
 8005b2c:	9b07      	ldr	r3, [sp, #28]
 8005b2e:	3307      	adds	r3, #7
 8005b30:	4393      	bics	r3, r2
 8005b32:	3308      	adds	r3, #8
 8005b34:	9307      	str	r3, [sp, #28]
 8005b36:	696b      	ldr	r3, [r5, #20]
 8005b38:	9a04      	ldr	r2, [sp, #16]
 8005b3a:	189b      	adds	r3, r3, r2
 8005b3c:	616b      	str	r3, [r5, #20]
 8005b3e:	e75d      	b.n	80059fc <_vfiprintf_r+0x8c>
 8005b40:	210a      	movs	r1, #10
 8005b42:	434b      	muls	r3, r1
 8005b44:	4667      	mov	r7, ip
 8005b46:	189b      	adds	r3, r3, r2
 8005b48:	3909      	subs	r1, #9
 8005b4a:	e7a3      	b.n	8005a94 <_vfiprintf_r+0x124>
 8005b4c:	2301      	movs	r3, #1
 8005b4e:	425b      	negs	r3, r3
 8005b50:	e7ce      	b.n	8005af0 <_vfiprintf_r+0x180>
 8005b52:	2300      	movs	r3, #0
 8005b54:	001a      	movs	r2, r3
 8005b56:	3701      	adds	r7, #1
 8005b58:	606b      	str	r3, [r5, #4]
 8005b5a:	7839      	ldrb	r1, [r7, #0]
 8005b5c:	1c78      	adds	r0, r7, #1
 8005b5e:	3930      	subs	r1, #48	; 0x30
 8005b60:	4684      	mov	ip, r0
 8005b62:	2909      	cmp	r1, #9
 8005b64:	d903      	bls.n	8005b6e <_vfiprintf_r+0x1fe>
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d0c3      	beq.n	8005af2 <_vfiprintf_r+0x182>
 8005b6a:	9209      	str	r2, [sp, #36]	; 0x24
 8005b6c:	e7c1      	b.n	8005af2 <_vfiprintf_r+0x182>
 8005b6e:	230a      	movs	r3, #10
 8005b70:	435a      	muls	r2, r3
 8005b72:	4667      	mov	r7, ip
 8005b74:	1852      	adds	r2, r2, r1
 8005b76:	3b09      	subs	r3, #9
 8005b78:	e7ef      	b.n	8005b5a <_vfiprintf_r+0x1ea>
 8005b7a:	ab07      	add	r3, sp, #28
 8005b7c:	9300      	str	r3, [sp, #0]
 8005b7e:	0022      	movs	r2, r4
 8005b80:	0029      	movs	r1, r5
 8005b82:	0030      	movs	r0, r6
 8005b84:	4b16      	ldr	r3, [pc, #88]	; (8005be0 <_vfiprintf_r+0x270>)
 8005b86:	e000      	b.n	8005b8a <_vfiprintf_r+0x21a>
 8005b88:	bf00      	nop
 8005b8a:	9004      	str	r0, [sp, #16]
 8005b8c:	9b04      	ldr	r3, [sp, #16]
 8005b8e:	3301      	adds	r3, #1
 8005b90:	d1d1      	bne.n	8005b36 <_vfiprintf_r+0x1c6>
 8005b92:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005b94:	07db      	lsls	r3, r3, #31
 8005b96:	d405      	bmi.n	8005ba4 <_vfiprintf_r+0x234>
 8005b98:	89a3      	ldrh	r3, [r4, #12]
 8005b9a:	059b      	lsls	r3, r3, #22
 8005b9c:	d402      	bmi.n	8005ba4 <_vfiprintf_r+0x234>
 8005b9e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005ba0:	f7ff fa26 	bl	8004ff0 <__retarget_lock_release_recursive>
 8005ba4:	89a3      	ldrh	r3, [r4, #12]
 8005ba6:	065b      	lsls	r3, r3, #25
 8005ba8:	d500      	bpl.n	8005bac <_vfiprintf_r+0x23c>
 8005baa:	e70a      	b.n	80059c2 <_vfiprintf_r+0x52>
 8005bac:	980d      	ldr	r0, [sp, #52]	; 0x34
 8005bae:	e70a      	b.n	80059c6 <_vfiprintf_r+0x56>
 8005bb0:	ab07      	add	r3, sp, #28
 8005bb2:	9300      	str	r3, [sp, #0]
 8005bb4:	0022      	movs	r2, r4
 8005bb6:	0029      	movs	r1, r5
 8005bb8:	0030      	movs	r0, r6
 8005bba:	4b09      	ldr	r3, [pc, #36]	; (8005be0 <_vfiprintf_r+0x270>)
 8005bbc:	f000 f882 	bl	8005cc4 <_printf_i>
 8005bc0:	e7e3      	b.n	8005b8a <_vfiprintf_r+0x21a>
 8005bc2:	46c0      	nop			; (mov r8, r8)
 8005bc4:	080061a4 	.word	0x080061a4
 8005bc8:	080061c4 	.word	0x080061c4
 8005bcc:	08006184 	.word	0x08006184
 8005bd0:	08006296 	.word	0x08006296
 8005bd4:	0800629c 	.word	0x0800629c
 8005bd8:	080062a0 	.word	0x080062a0
 8005bdc:	00000000 	.word	0x00000000
 8005be0:	0800594b 	.word	0x0800594b

08005be4 <_printf_common>:
 8005be4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005be6:	0015      	movs	r5, r2
 8005be8:	9301      	str	r3, [sp, #4]
 8005bea:	688a      	ldr	r2, [r1, #8]
 8005bec:	690b      	ldr	r3, [r1, #16]
 8005bee:	000c      	movs	r4, r1
 8005bf0:	9000      	str	r0, [sp, #0]
 8005bf2:	4293      	cmp	r3, r2
 8005bf4:	da00      	bge.n	8005bf8 <_printf_common+0x14>
 8005bf6:	0013      	movs	r3, r2
 8005bf8:	0022      	movs	r2, r4
 8005bfa:	602b      	str	r3, [r5, #0]
 8005bfc:	3243      	adds	r2, #67	; 0x43
 8005bfe:	7812      	ldrb	r2, [r2, #0]
 8005c00:	2a00      	cmp	r2, #0
 8005c02:	d001      	beq.n	8005c08 <_printf_common+0x24>
 8005c04:	3301      	adds	r3, #1
 8005c06:	602b      	str	r3, [r5, #0]
 8005c08:	6823      	ldr	r3, [r4, #0]
 8005c0a:	069b      	lsls	r3, r3, #26
 8005c0c:	d502      	bpl.n	8005c14 <_printf_common+0x30>
 8005c0e:	682b      	ldr	r3, [r5, #0]
 8005c10:	3302      	adds	r3, #2
 8005c12:	602b      	str	r3, [r5, #0]
 8005c14:	6822      	ldr	r2, [r4, #0]
 8005c16:	2306      	movs	r3, #6
 8005c18:	0017      	movs	r7, r2
 8005c1a:	401f      	ands	r7, r3
 8005c1c:	421a      	tst	r2, r3
 8005c1e:	d027      	beq.n	8005c70 <_printf_common+0x8c>
 8005c20:	0023      	movs	r3, r4
 8005c22:	3343      	adds	r3, #67	; 0x43
 8005c24:	781b      	ldrb	r3, [r3, #0]
 8005c26:	1e5a      	subs	r2, r3, #1
 8005c28:	4193      	sbcs	r3, r2
 8005c2a:	6822      	ldr	r2, [r4, #0]
 8005c2c:	0692      	lsls	r2, r2, #26
 8005c2e:	d430      	bmi.n	8005c92 <_printf_common+0xae>
 8005c30:	0022      	movs	r2, r4
 8005c32:	9901      	ldr	r1, [sp, #4]
 8005c34:	9800      	ldr	r0, [sp, #0]
 8005c36:	9e08      	ldr	r6, [sp, #32]
 8005c38:	3243      	adds	r2, #67	; 0x43
 8005c3a:	47b0      	blx	r6
 8005c3c:	1c43      	adds	r3, r0, #1
 8005c3e:	d025      	beq.n	8005c8c <_printf_common+0xa8>
 8005c40:	2306      	movs	r3, #6
 8005c42:	6820      	ldr	r0, [r4, #0]
 8005c44:	682a      	ldr	r2, [r5, #0]
 8005c46:	68e1      	ldr	r1, [r4, #12]
 8005c48:	2500      	movs	r5, #0
 8005c4a:	4003      	ands	r3, r0
 8005c4c:	2b04      	cmp	r3, #4
 8005c4e:	d103      	bne.n	8005c58 <_printf_common+0x74>
 8005c50:	1a8d      	subs	r5, r1, r2
 8005c52:	43eb      	mvns	r3, r5
 8005c54:	17db      	asrs	r3, r3, #31
 8005c56:	401d      	ands	r5, r3
 8005c58:	68a3      	ldr	r3, [r4, #8]
 8005c5a:	6922      	ldr	r2, [r4, #16]
 8005c5c:	4293      	cmp	r3, r2
 8005c5e:	dd01      	ble.n	8005c64 <_printf_common+0x80>
 8005c60:	1a9b      	subs	r3, r3, r2
 8005c62:	18ed      	adds	r5, r5, r3
 8005c64:	2700      	movs	r7, #0
 8005c66:	42bd      	cmp	r5, r7
 8005c68:	d120      	bne.n	8005cac <_printf_common+0xc8>
 8005c6a:	2000      	movs	r0, #0
 8005c6c:	e010      	b.n	8005c90 <_printf_common+0xac>
 8005c6e:	3701      	adds	r7, #1
 8005c70:	68e3      	ldr	r3, [r4, #12]
 8005c72:	682a      	ldr	r2, [r5, #0]
 8005c74:	1a9b      	subs	r3, r3, r2
 8005c76:	42bb      	cmp	r3, r7
 8005c78:	ddd2      	ble.n	8005c20 <_printf_common+0x3c>
 8005c7a:	0022      	movs	r2, r4
 8005c7c:	2301      	movs	r3, #1
 8005c7e:	9901      	ldr	r1, [sp, #4]
 8005c80:	9800      	ldr	r0, [sp, #0]
 8005c82:	9e08      	ldr	r6, [sp, #32]
 8005c84:	3219      	adds	r2, #25
 8005c86:	47b0      	blx	r6
 8005c88:	1c43      	adds	r3, r0, #1
 8005c8a:	d1f0      	bne.n	8005c6e <_printf_common+0x8a>
 8005c8c:	2001      	movs	r0, #1
 8005c8e:	4240      	negs	r0, r0
 8005c90:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005c92:	2030      	movs	r0, #48	; 0x30
 8005c94:	18e1      	adds	r1, r4, r3
 8005c96:	3143      	adds	r1, #67	; 0x43
 8005c98:	7008      	strb	r0, [r1, #0]
 8005c9a:	0021      	movs	r1, r4
 8005c9c:	1c5a      	adds	r2, r3, #1
 8005c9e:	3145      	adds	r1, #69	; 0x45
 8005ca0:	7809      	ldrb	r1, [r1, #0]
 8005ca2:	18a2      	adds	r2, r4, r2
 8005ca4:	3243      	adds	r2, #67	; 0x43
 8005ca6:	3302      	adds	r3, #2
 8005ca8:	7011      	strb	r1, [r2, #0]
 8005caa:	e7c1      	b.n	8005c30 <_printf_common+0x4c>
 8005cac:	0022      	movs	r2, r4
 8005cae:	2301      	movs	r3, #1
 8005cb0:	9901      	ldr	r1, [sp, #4]
 8005cb2:	9800      	ldr	r0, [sp, #0]
 8005cb4:	9e08      	ldr	r6, [sp, #32]
 8005cb6:	321a      	adds	r2, #26
 8005cb8:	47b0      	blx	r6
 8005cba:	1c43      	adds	r3, r0, #1
 8005cbc:	d0e6      	beq.n	8005c8c <_printf_common+0xa8>
 8005cbe:	3701      	adds	r7, #1
 8005cc0:	e7d1      	b.n	8005c66 <_printf_common+0x82>
	...

08005cc4 <_printf_i>:
 8005cc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005cc6:	b08b      	sub	sp, #44	; 0x2c
 8005cc8:	9206      	str	r2, [sp, #24]
 8005cca:	000a      	movs	r2, r1
 8005ccc:	3243      	adds	r2, #67	; 0x43
 8005cce:	9307      	str	r3, [sp, #28]
 8005cd0:	9005      	str	r0, [sp, #20]
 8005cd2:	9204      	str	r2, [sp, #16]
 8005cd4:	7e0a      	ldrb	r2, [r1, #24]
 8005cd6:	000c      	movs	r4, r1
 8005cd8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005cda:	2a78      	cmp	r2, #120	; 0x78
 8005cdc:	d807      	bhi.n	8005cee <_printf_i+0x2a>
 8005cde:	2a62      	cmp	r2, #98	; 0x62
 8005ce0:	d809      	bhi.n	8005cf6 <_printf_i+0x32>
 8005ce2:	2a00      	cmp	r2, #0
 8005ce4:	d100      	bne.n	8005ce8 <_printf_i+0x24>
 8005ce6:	e0c1      	b.n	8005e6c <_printf_i+0x1a8>
 8005ce8:	2a58      	cmp	r2, #88	; 0x58
 8005cea:	d100      	bne.n	8005cee <_printf_i+0x2a>
 8005cec:	e08c      	b.n	8005e08 <_printf_i+0x144>
 8005cee:	0026      	movs	r6, r4
 8005cf0:	3642      	adds	r6, #66	; 0x42
 8005cf2:	7032      	strb	r2, [r6, #0]
 8005cf4:	e022      	b.n	8005d3c <_printf_i+0x78>
 8005cf6:	0010      	movs	r0, r2
 8005cf8:	3863      	subs	r0, #99	; 0x63
 8005cfa:	2815      	cmp	r0, #21
 8005cfc:	d8f7      	bhi.n	8005cee <_printf_i+0x2a>
 8005cfe:	f7fa fa09 	bl	8000114 <__gnu_thumb1_case_shi>
 8005d02:	0016      	.short	0x0016
 8005d04:	fff6001f 	.word	0xfff6001f
 8005d08:	fff6fff6 	.word	0xfff6fff6
 8005d0c:	001ffff6 	.word	0x001ffff6
 8005d10:	fff6fff6 	.word	0xfff6fff6
 8005d14:	fff6fff6 	.word	0xfff6fff6
 8005d18:	003600a8 	.word	0x003600a8
 8005d1c:	fff6009a 	.word	0xfff6009a
 8005d20:	00b9fff6 	.word	0x00b9fff6
 8005d24:	0036fff6 	.word	0x0036fff6
 8005d28:	fff6fff6 	.word	0xfff6fff6
 8005d2c:	009e      	.short	0x009e
 8005d2e:	0026      	movs	r6, r4
 8005d30:	681a      	ldr	r2, [r3, #0]
 8005d32:	3642      	adds	r6, #66	; 0x42
 8005d34:	1d11      	adds	r1, r2, #4
 8005d36:	6019      	str	r1, [r3, #0]
 8005d38:	6813      	ldr	r3, [r2, #0]
 8005d3a:	7033      	strb	r3, [r6, #0]
 8005d3c:	2301      	movs	r3, #1
 8005d3e:	e0a7      	b.n	8005e90 <_printf_i+0x1cc>
 8005d40:	6808      	ldr	r0, [r1, #0]
 8005d42:	6819      	ldr	r1, [r3, #0]
 8005d44:	1d0a      	adds	r2, r1, #4
 8005d46:	0605      	lsls	r5, r0, #24
 8005d48:	d50b      	bpl.n	8005d62 <_printf_i+0x9e>
 8005d4a:	680d      	ldr	r5, [r1, #0]
 8005d4c:	601a      	str	r2, [r3, #0]
 8005d4e:	2d00      	cmp	r5, #0
 8005d50:	da03      	bge.n	8005d5a <_printf_i+0x96>
 8005d52:	232d      	movs	r3, #45	; 0x2d
 8005d54:	9a04      	ldr	r2, [sp, #16]
 8005d56:	426d      	negs	r5, r5
 8005d58:	7013      	strb	r3, [r2, #0]
 8005d5a:	4b61      	ldr	r3, [pc, #388]	; (8005ee0 <_printf_i+0x21c>)
 8005d5c:	270a      	movs	r7, #10
 8005d5e:	9303      	str	r3, [sp, #12]
 8005d60:	e01b      	b.n	8005d9a <_printf_i+0xd6>
 8005d62:	680d      	ldr	r5, [r1, #0]
 8005d64:	601a      	str	r2, [r3, #0]
 8005d66:	0641      	lsls	r1, r0, #25
 8005d68:	d5f1      	bpl.n	8005d4e <_printf_i+0x8a>
 8005d6a:	b22d      	sxth	r5, r5
 8005d6c:	e7ef      	b.n	8005d4e <_printf_i+0x8a>
 8005d6e:	680d      	ldr	r5, [r1, #0]
 8005d70:	6819      	ldr	r1, [r3, #0]
 8005d72:	1d08      	adds	r0, r1, #4
 8005d74:	6018      	str	r0, [r3, #0]
 8005d76:	062e      	lsls	r6, r5, #24
 8005d78:	d501      	bpl.n	8005d7e <_printf_i+0xba>
 8005d7a:	680d      	ldr	r5, [r1, #0]
 8005d7c:	e003      	b.n	8005d86 <_printf_i+0xc2>
 8005d7e:	066d      	lsls	r5, r5, #25
 8005d80:	d5fb      	bpl.n	8005d7a <_printf_i+0xb6>
 8005d82:	680d      	ldr	r5, [r1, #0]
 8005d84:	b2ad      	uxth	r5, r5
 8005d86:	4b56      	ldr	r3, [pc, #344]	; (8005ee0 <_printf_i+0x21c>)
 8005d88:	2708      	movs	r7, #8
 8005d8a:	9303      	str	r3, [sp, #12]
 8005d8c:	2a6f      	cmp	r2, #111	; 0x6f
 8005d8e:	d000      	beq.n	8005d92 <_printf_i+0xce>
 8005d90:	3702      	adds	r7, #2
 8005d92:	0023      	movs	r3, r4
 8005d94:	2200      	movs	r2, #0
 8005d96:	3343      	adds	r3, #67	; 0x43
 8005d98:	701a      	strb	r2, [r3, #0]
 8005d9a:	6863      	ldr	r3, [r4, #4]
 8005d9c:	60a3      	str	r3, [r4, #8]
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	db03      	blt.n	8005daa <_printf_i+0xe6>
 8005da2:	2204      	movs	r2, #4
 8005da4:	6821      	ldr	r1, [r4, #0]
 8005da6:	4391      	bics	r1, r2
 8005da8:	6021      	str	r1, [r4, #0]
 8005daa:	2d00      	cmp	r5, #0
 8005dac:	d102      	bne.n	8005db4 <_printf_i+0xf0>
 8005dae:	9e04      	ldr	r6, [sp, #16]
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d00c      	beq.n	8005dce <_printf_i+0x10a>
 8005db4:	9e04      	ldr	r6, [sp, #16]
 8005db6:	0028      	movs	r0, r5
 8005db8:	0039      	movs	r1, r7
 8005dba:	f7fa fa3b 	bl	8000234 <__aeabi_uidivmod>
 8005dbe:	9b03      	ldr	r3, [sp, #12]
 8005dc0:	3e01      	subs	r6, #1
 8005dc2:	5c5b      	ldrb	r3, [r3, r1]
 8005dc4:	7033      	strb	r3, [r6, #0]
 8005dc6:	002b      	movs	r3, r5
 8005dc8:	0005      	movs	r5, r0
 8005dca:	429f      	cmp	r7, r3
 8005dcc:	d9f3      	bls.n	8005db6 <_printf_i+0xf2>
 8005dce:	2f08      	cmp	r7, #8
 8005dd0:	d109      	bne.n	8005de6 <_printf_i+0x122>
 8005dd2:	6823      	ldr	r3, [r4, #0]
 8005dd4:	07db      	lsls	r3, r3, #31
 8005dd6:	d506      	bpl.n	8005de6 <_printf_i+0x122>
 8005dd8:	6863      	ldr	r3, [r4, #4]
 8005dda:	6922      	ldr	r2, [r4, #16]
 8005ddc:	4293      	cmp	r3, r2
 8005dde:	dc02      	bgt.n	8005de6 <_printf_i+0x122>
 8005de0:	2330      	movs	r3, #48	; 0x30
 8005de2:	3e01      	subs	r6, #1
 8005de4:	7033      	strb	r3, [r6, #0]
 8005de6:	9b04      	ldr	r3, [sp, #16]
 8005de8:	1b9b      	subs	r3, r3, r6
 8005dea:	6123      	str	r3, [r4, #16]
 8005dec:	9b07      	ldr	r3, [sp, #28]
 8005dee:	0021      	movs	r1, r4
 8005df0:	9300      	str	r3, [sp, #0]
 8005df2:	9805      	ldr	r0, [sp, #20]
 8005df4:	9b06      	ldr	r3, [sp, #24]
 8005df6:	aa09      	add	r2, sp, #36	; 0x24
 8005df8:	f7ff fef4 	bl	8005be4 <_printf_common>
 8005dfc:	1c43      	adds	r3, r0, #1
 8005dfe:	d14c      	bne.n	8005e9a <_printf_i+0x1d6>
 8005e00:	2001      	movs	r0, #1
 8005e02:	4240      	negs	r0, r0
 8005e04:	b00b      	add	sp, #44	; 0x2c
 8005e06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005e08:	3145      	adds	r1, #69	; 0x45
 8005e0a:	700a      	strb	r2, [r1, #0]
 8005e0c:	4a34      	ldr	r2, [pc, #208]	; (8005ee0 <_printf_i+0x21c>)
 8005e0e:	9203      	str	r2, [sp, #12]
 8005e10:	681a      	ldr	r2, [r3, #0]
 8005e12:	6821      	ldr	r1, [r4, #0]
 8005e14:	ca20      	ldmia	r2!, {r5}
 8005e16:	601a      	str	r2, [r3, #0]
 8005e18:	0608      	lsls	r0, r1, #24
 8005e1a:	d516      	bpl.n	8005e4a <_printf_i+0x186>
 8005e1c:	07cb      	lsls	r3, r1, #31
 8005e1e:	d502      	bpl.n	8005e26 <_printf_i+0x162>
 8005e20:	2320      	movs	r3, #32
 8005e22:	4319      	orrs	r1, r3
 8005e24:	6021      	str	r1, [r4, #0]
 8005e26:	2710      	movs	r7, #16
 8005e28:	2d00      	cmp	r5, #0
 8005e2a:	d1b2      	bne.n	8005d92 <_printf_i+0xce>
 8005e2c:	2320      	movs	r3, #32
 8005e2e:	6822      	ldr	r2, [r4, #0]
 8005e30:	439a      	bics	r2, r3
 8005e32:	6022      	str	r2, [r4, #0]
 8005e34:	e7ad      	b.n	8005d92 <_printf_i+0xce>
 8005e36:	2220      	movs	r2, #32
 8005e38:	6809      	ldr	r1, [r1, #0]
 8005e3a:	430a      	orrs	r2, r1
 8005e3c:	6022      	str	r2, [r4, #0]
 8005e3e:	0022      	movs	r2, r4
 8005e40:	2178      	movs	r1, #120	; 0x78
 8005e42:	3245      	adds	r2, #69	; 0x45
 8005e44:	7011      	strb	r1, [r2, #0]
 8005e46:	4a27      	ldr	r2, [pc, #156]	; (8005ee4 <_printf_i+0x220>)
 8005e48:	e7e1      	b.n	8005e0e <_printf_i+0x14a>
 8005e4a:	0648      	lsls	r0, r1, #25
 8005e4c:	d5e6      	bpl.n	8005e1c <_printf_i+0x158>
 8005e4e:	b2ad      	uxth	r5, r5
 8005e50:	e7e4      	b.n	8005e1c <_printf_i+0x158>
 8005e52:	681a      	ldr	r2, [r3, #0]
 8005e54:	680d      	ldr	r5, [r1, #0]
 8005e56:	1d10      	adds	r0, r2, #4
 8005e58:	6949      	ldr	r1, [r1, #20]
 8005e5a:	6018      	str	r0, [r3, #0]
 8005e5c:	6813      	ldr	r3, [r2, #0]
 8005e5e:	062e      	lsls	r6, r5, #24
 8005e60:	d501      	bpl.n	8005e66 <_printf_i+0x1a2>
 8005e62:	6019      	str	r1, [r3, #0]
 8005e64:	e002      	b.n	8005e6c <_printf_i+0x1a8>
 8005e66:	066d      	lsls	r5, r5, #25
 8005e68:	d5fb      	bpl.n	8005e62 <_printf_i+0x19e>
 8005e6a:	8019      	strh	r1, [r3, #0]
 8005e6c:	2300      	movs	r3, #0
 8005e6e:	9e04      	ldr	r6, [sp, #16]
 8005e70:	6123      	str	r3, [r4, #16]
 8005e72:	e7bb      	b.n	8005dec <_printf_i+0x128>
 8005e74:	681a      	ldr	r2, [r3, #0]
 8005e76:	1d11      	adds	r1, r2, #4
 8005e78:	6019      	str	r1, [r3, #0]
 8005e7a:	6816      	ldr	r6, [r2, #0]
 8005e7c:	2100      	movs	r1, #0
 8005e7e:	0030      	movs	r0, r6
 8005e80:	6862      	ldr	r2, [r4, #4]
 8005e82:	f000 f871 	bl	8005f68 <memchr>
 8005e86:	2800      	cmp	r0, #0
 8005e88:	d001      	beq.n	8005e8e <_printf_i+0x1ca>
 8005e8a:	1b80      	subs	r0, r0, r6
 8005e8c:	6060      	str	r0, [r4, #4]
 8005e8e:	6863      	ldr	r3, [r4, #4]
 8005e90:	6123      	str	r3, [r4, #16]
 8005e92:	2300      	movs	r3, #0
 8005e94:	9a04      	ldr	r2, [sp, #16]
 8005e96:	7013      	strb	r3, [r2, #0]
 8005e98:	e7a8      	b.n	8005dec <_printf_i+0x128>
 8005e9a:	6923      	ldr	r3, [r4, #16]
 8005e9c:	0032      	movs	r2, r6
 8005e9e:	9906      	ldr	r1, [sp, #24]
 8005ea0:	9805      	ldr	r0, [sp, #20]
 8005ea2:	9d07      	ldr	r5, [sp, #28]
 8005ea4:	47a8      	blx	r5
 8005ea6:	1c43      	adds	r3, r0, #1
 8005ea8:	d0aa      	beq.n	8005e00 <_printf_i+0x13c>
 8005eaa:	6823      	ldr	r3, [r4, #0]
 8005eac:	079b      	lsls	r3, r3, #30
 8005eae:	d415      	bmi.n	8005edc <_printf_i+0x218>
 8005eb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005eb2:	68e0      	ldr	r0, [r4, #12]
 8005eb4:	4298      	cmp	r0, r3
 8005eb6:	daa5      	bge.n	8005e04 <_printf_i+0x140>
 8005eb8:	0018      	movs	r0, r3
 8005eba:	e7a3      	b.n	8005e04 <_printf_i+0x140>
 8005ebc:	0022      	movs	r2, r4
 8005ebe:	2301      	movs	r3, #1
 8005ec0:	9906      	ldr	r1, [sp, #24]
 8005ec2:	9805      	ldr	r0, [sp, #20]
 8005ec4:	9e07      	ldr	r6, [sp, #28]
 8005ec6:	3219      	adds	r2, #25
 8005ec8:	47b0      	blx	r6
 8005eca:	1c43      	adds	r3, r0, #1
 8005ecc:	d098      	beq.n	8005e00 <_printf_i+0x13c>
 8005ece:	3501      	adds	r5, #1
 8005ed0:	68e3      	ldr	r3, [r4, #12]
 8005ed2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005ed4:	1a9b      	subs	r3, r3, r2
 8005ed6:	42ab      	cmp	r3, r5
 8005ed8:	dcf0      	bgt.n	8005ebc <_printf_i+0x1f8>
 8005eda:	e7e9      	b.n	8005eb0 <_printf_i+0x1ec>
 8005edc:	2500      	movs	r5, #0
 8005ede:	e7f7      	b.n	8005ed0 <_printf_i+0x20c>
 8005ee0:	080062a7 	.word	0x080062a7
 8005ee4:	080062b8 	.word	0x080062b8

08005ee8 <_read_r>:
 8005ee8:	b570      	push	{r4, r5, r6, lr}
 8005eea:	0004      	movs	r4, r0
 8005eec:	0008      	movs	r0, r1
 8005eee:	0011      	movs	r1, r2
 8005ef0:	001a      	movs	r2, r3
 8005ef2:	2300      	movs	r3, #0
 8005ef4:	4d05      	ldr	r5, [pc, #20]	; (8005f0c <_read_r+0x24>)
 8005ef6:	602b      	str	r3, [r5, #0]
 8005ef8:	f7fe fce4 	bl	80048c4 <_read>
 8005efc:	1c43      	adds	r3, r0, #1
 8005efe:	d103      	bne.n	8005f08 <_read_r+0x20>
 8005f00:	682b      	ldr	r3, [r5, #0]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d000      	beq.n	8005f08 <_read_r+0x20>
 8005f06:	6023      	str	r3, [r4, #0]
 8005f08:	bd70      	pop	{r4, r5, r6, pc}
 8005f0a:	46c0      	nop			; (mov r8, r8)
 8005f0c:	20000318 	.word	0x20000318

08005f10 <abort>:
 8005f10:	2006      	movs	r0, #6
 8005f12:	b510      	push	{r4, lr}
 8005f14:	f000 f85e 	bl	8005fd4 <raise>
 8005f18:	2001      	movs	r0, #1
 8005f1a:	f000 f87b 	bl	8006014 <_exit>
	...

08005f20 <_fstat_r>:
 8005f20:	2300      	movs	r3, #0
 8005f22:	b570      	push	{r4, r5, r6, lr}
 8005f24:	4d06      	ldr	r5, [pc, #24]	; (8005f40 <_fstat_r+0x20>)
 8005f26:	0004      	movs	r4, r0
 8005f28:	0008      	movs	r0, r1
 8005f2a:	0011      	movs	r1, r2
 8005f2c:	602b      	str	r3, [r5, #0]
 8005f2e:	f7fe fda7 	bl	8004a80 <_fstat>
 8005f32:	1c43      	adds	r3, r0, #1
 8005f34:	d103      	bne.n	8005f3e <_fstat_r+0x1e>
 8005f36:	682b      	ldr	r3, [r5, #0]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d000      	beq.n	8005f3e <_fstat_r+0x1e>
 8005f3c:	6023      	str	r3, [r4, #0]
 8005f3e:	bd70      	pop	{r4, r5, r6, pc}
 8005f40:	20000318 	.word	0x20000318

08005f44 <_isatty_r>:
 8005f44:	2300      	movs	r3, #0
 8005f46:	b570      	push	{r4, r5, r6, lr}
 8005f48:	4d06      	ldr	r5, [pc, #24]	; (8005f64 <_isatty_r+0x20>)
 8005f4a:	0004      	movs	r4, r0
 8005f4c:	0008      	movs	r0, r1
 8005f4e:	602b      	str	r3, [r5, #0]
 8005f50:	f7fe ff02 	bl	8004d58 <_isatty>
 8005f54:	1c43      	adds	r3, r0, #1
 8005f56:	d103      	bne.n	8005f60 <_isatty_r+0x1c>
 8005f58:	682b      	ldr	r3, [r5, #0]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d000      	beq.n	8005f60 <_isatty_r+0x1c>
 8005f5e:	6023      	str	r3, [r4, #0]
 8005f60:	bd70      	pop	{r4, r5, r6, pc}
 8005f62:	46c0      	nop			; (mov r8, r8)
 8005f64:	20000318 	.word	0x20000318

08005f68 <memchr>:
 8005f68:	b2c9      	uxtb	r1, r1
 8005f6a:	1882      	adds	r2, r0, r2
 8005f6c:	4290      	cmp	r0, r2
 8005f6e:	d101      	bne.n	8005f74 <memchr+0xc>
 8005f70:	2000      	movs	r0, #0
 8005f72:	4770      	bx	lr
 8005f74:	7803      	ldrb	r3, [r0, #0]
 8005f76:	428b      	cmp	r3, r1
 8005f78:	d0fb      	beq.n	8005f72 <memchr+0xa>
 8005f7a:	3001      	adds	r0, #1
 8005f7c:	e7f6      	b.n	8005f6c <memchr+0x4>

08005f7e <_raise_r>:
 8005f7e:	b570      	push	{r4, r5, r6, lr}
 8005f80:	0004      	movs	r4, r0
 8005f82:	000d      	movs	r5, r1
 8005f84:	291f      	cmp	r1, #31
 8005f86:	d904      	bls.n	8005f92 <_raise_r+0x14>
 8005f88:	2316      	movs	r3, #22
 8005f8a:	6003      	str	r3, [r0, #0]
 8005f8c:	2001      	movs	r0, #1
 8005f8e:	4240      	negs	r0, r0
 8005f90:	bd70      	pop	{r4, r5, r6, pc}
 8005f92:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d004      	beq.n	8005fa2 <_raise_r+0x24>
 8005f98:	008a      	lsls	r2, r1, #2
 8005f9a:	189b      	adds	r3, r3, r2
 8005f9c:	681a      	ldr	r2, [r3, #0]
 8005f9e:	2a00      	cmp	r2, #0
 8005fa0:	d108      	bne.n	8005fb4 <_raise_r+0x36>
 8005fa2:	0020      	movs	r0, r4
 8005fa4:	f000 f832 	bl	800600c <_getpid_r>
 8005fa8:	002a      	movs	r2, r5
 8005faa:	0001      	movs	r1, r0
 8005fac:	0020      	movs	r0, r4
 8005fae:	f000 f81b 	bl	8005fe8 <_kill_r>
 8005fb2:	e7ed      	b.n	8005f90 <_raise_r+0x12>
 8005fb4:	2000      	movs	r0, #0
 8005fb6:	2a01      	cmp	r2, #1
 8005fb8:	d0ea      	beq.n	8005f90 <_raise_r+0x12>
 8005fba:	1c51      	adds	r1, r2, #1
 8005fbc:	d103      	bne.n	8005fc6 <_raise_r+0x48>
 8005fbe:	2316      	movs	r3, #22
 8005fc0:	3001      	adds	r0, #1
 8005fc2:	6023      	str	r3, [r4, #0]
 8005fc4:	e7e4      	b.n	8005f90 <_raise_r+0x12>
 8005fc6:	2400      	movs	r4, #0
 8005fc8:	0028      	movs	r0, r5
 8005fca:	601c      	str	r4, [r3, #0]
 8005fcc:	4790      	blx	r2
 8005fce:	0020      	movs	r0, r4
 8005fd0:	e7de      	b.n	8005f90 <_raise_r+0x12>
	...

08005fd4 <raise>:
 8005fd4:	b510      	push	{r4, lr}
 8005fd6:	4b03      	ldr	r3, [pc, #12]	; (8005fe4 <raise+0x10>)
 8005fd8:	0001      	movs	r1, r0
 8005fda:	6818      	ldr	r0, [r3, #0]
 8005fdc:	f7ff ffcf 	bl	8005f7e <_raise_r>
 8005fe0:	bd10      	pop	{r4, pc}
 8005fe2:	46c0      	nop			; (mov r8, r8)
 8005fe4:	20000014 	.word	0x20000014

08005fe8 <_kill_r>:
 8005fe8:	2300      	movs	r3, #0
 8005fea:	b570      	push	{r4, r5, r6, lr}
 8005fec:	4d06      	ldr	r5, [pc, #24]	; (8006008 <_kill_r+0x20>)
 8005fee:	0004      	movs	r4, r0
 8005ff0:	0008      	movs	r0, r1
 8005ff2:	0011      	movs	r1, r2
 8005ff4:	602b      	str	r3, [r5, #0]
 8005ff6:	f000 f82b 	bl	8006050 <_kill>
 8005ffa:	1c43      	adds	r3, r0, #1
 8005ffc:	d103      	bne.n	8006006 <_kill_r+0x1e>
 8005ffe:	682b      	ldr	r3, [r5, #0]
 8006000:	2b00      	cmp	r3, #0
 8006002:	d000      	beq.n	8006006 <_kill_r+0x1e>
 8006004:	6023      	str	r3, [r4, #0]
 8006006:	bd70      	pop	{r4, r5, r6, pc}
 8006008:	20000318 	.word	0x20000318

0800600c <_getpid_r>:
 800600c:	b510      	push	{r4, lr}
 800600e:	f7fe fd13 	bl	8004a38 <_getpid>
 8006012:	bd10      	pop	{r4, pc}

08006014 <_exit>:
 8006014:	0001      	movs	r1, r0
 8006016:	2001      	movs	r0, #1
 8006018:	b510      	push	{r4, lr}
 800601a:	4a02      	ldr	r2, [pc, #8]	; (8006024 <_exit+0x10>)
 800601c:	4240      	negs	r0, r0
 800601e:	f000 f803 	bl	8006028 <_kill_shared>
 8006022:	46c0      	nop			; (mov r8, r8)
 8006024:	00020026 	.word	0x00020026

08006028 <_kill_shared>:
 8006028:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800602a:	466d      	mov	r5, sp
 800602c:	6069      	str	r1, [r5, #4]
 800602e:	9200      	str	r2, [sp, #0]
 8006030:	f7fe fe20 	bl	8004c74 <_has_ext_exit_extended>
 8006034:	2420      	movs	r4, #32
 8006036:	2800      	cmp	r0, #0
 8006038:	d100      	bne.n	800603c <_kill_shared+0x14>
 800603a:	3c08      	subs	r4, #8
 800603c:	f7fe fe1a 	bl	8004c74 <_has_ext_exit_extended>
 8006040:	2800      	cmp	r0, #0
 8006042:	d003      	beq.n	800604c <_kill_shared+0x24>
 8006044:	1c20      	adds	r0, r4, #0
 8006046:	1c29      	adds	r1, r5, #0
 8006048:	beab      	bkpt	0x00ab
 800604a:	1c04      	adds	r4, r0, #0
 800604c:	9d00      	ldr	r5, [sp, #0]
 800604e:	e7f9      	b.n	8006044 <_kill_shared+0x1c>

08006050 <_kill>:
 8006050:	b510      	push	{r4, lr}
 8006052:	2906      	cmp	r1, #6
 8006054:	d102      	bne.n	800605c <_kill+0xc>
 8006056:	4a02      	ldr	r2, [pc, #8]	; (8006060 <_kill+0x10>)
 8006058:	f7ff ffe6 	bl	8006028 <_kill_shared>
 800605c:	4a01      	ldr	r2, [pc, #4]	; (8006064 <_kill+0x14>)
 800605e:	e7fb      	b.n	8006058 <_kill+0x8>
 8006060:	00020023 	.word	0x00020023
 8006064:	00020026 	.word	0x00020026

08006068 <_init>:
 8006068:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800606a:	46c0      	nop			; (mov r8, r8)
 800606c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800606e:	bc08      	pop	{r3}
 8006070:	469e      	mov	lr, r3
 8006072:	4770      	bx	lr

08006074 <_fini>:
 8006074:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006076:	46c0      	nop			; (mov r8, r8)
 8006078:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800607a:	bc08      	pop	{r3}
 800607c:	469e      	mov	lr, r3
 800607e:	4770      	bx	lr
