
snt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000677c  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000244  08006838  08006838  00016838  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006a7c  08006a7c  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08006a7c  08006a7c  00016a7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006a84  08006a84  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006a84  08006a84  00016a84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006a88  08006a88  00016a88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08006a8c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002a4  20000078  08006b04  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000031c  08006b04  0002031c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015e80  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000031d8  00000000  00000000  00035f20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001238  00000000  00000000  000390f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010e0  00000000  00000000  0003a330  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ac2d  00000000  00000000  0003b410  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001702c  00000000  00000000  0005603d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a4d4b  00000000  00000000  0006d069  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00111db4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004f40  00000000  00000000  00111e04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000078 	.word	0x20000078
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08006820 	.word	0x08006820

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	2000007c 	.word	0x2000007c
 8000100:	08006820 	.word	0x08006820

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__gnu_thumb1_case_shi>:
 8000114:	b403      	push	{r0, r1}
 8000116:	4671      	mov	r1, lr
 8000118:	0849      	lsrs	r1, r1, #1
 800011a:	0040      	lsls	r0, r0, #1
 800011c:	0049      	lsls	r1, r1, #1
 800011e:	5e09      	ldrsh	r1, [r1, r0]
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	448e      	add	lr, r1
 8000124:	bc03      	pop	{r0, r1}
 8000126:	4770      	bx	lr

08000128 <__udivsi3>:
 8000128:	2200      	movs	r2, #0
 800012a:	0843      	lsrs	r3, r0, #1
 800012c:	428b      	cmp	r3, r1
 800012e:	d374      	bcc.n	800021a <__udivsi3+0xf2>
 8000130:	0903      	lsrs	r3, r0, #4
 8000132:	428b      	cmp	r3, r1
 8000134:	d35f      	bcc.n	80001f6 <__udivsi3+0xce>
 8000136:	0a03      	lsrs	r3, r0, #8
 8000138:	428b      	cmp	r3, r1
 800013a:	d344      	bcc.n	80001c6 <__udivsi3+0x9e>
 800013c:	0b03      	lsrs	r3, r0, #12
 800013e:	428b      	cmp	r3, r1
 8000140:	d328      	bcc.n	8000194 <__udivsi3+0x6c>
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d30d      	bcc.n	8000164 <__udivsi3+0x3c>
 8000148:	22ff      	movs	r2, #255	; 0xff
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	ba12      	rev	r2, r2
 800014e:	0c03      	lsrs	r3, r0, #16
 8000150:	428b      	cmp	r3, r1
 8000152:	d302      	bcc.n	800015a <__udivsi3+0x32>
 8000154:	1212      	asrs	r2, r2, #8
 8000156:	0209      	lsls	r1, r1, #8
 8000158:	d065      	beq.n	8000226 <__udivsi3+0xfe>
 800015a:	0b03      	lsrs	r3, r0, #12
 800015c:	428b      	cmp	r3, r1
 800015e:	d319      	bcc.n	8000194 <__udivsi3+0x6c>
 8000160:	e000      	b.n	8000164 <__udivsi3+0x3c>
 8000162:	0a09      	lsrs	r1, r1, #8
 8000164:	0bc3      	lsrs	r3, r0, #15
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x46>
 800016a:	03cb      	lsls	r3, r1, #15
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b83      	lsrs	r3, r0, #14
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x52>
 8000176:	038b      	lsls	r3, r1, #14
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b43      	lsrs	r3, r0, #13
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x5e>
 8000182:	034b      	lsls	r3, r1, #13
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b03      	lsrs	r3, r0, #12
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x6a>
 800018e:	030b      	lsls	r3, r1, #12
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0ac3      	lsrs	r3, r0, #11
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x76>
 800019a:	02cb      	lsls	r3, r1, #11
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a83      	lsrs	r3, r0, #10
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x82>
 80001a6:	028b      	lsls	r3, r1, #10
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a43      	lsrs	r3, r0, #9
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x8e>
 80001b2:	024b      	lsls	r3, r1, #9
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a03      	lsrs	r3, r0, #8
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x9a>
 80001be:	020b      	lsls	r3, r1, #8
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	d2cd      	bcs.n	8000162 <__udivsi3+0x3a>
 80001c6:	09c3      	lsrs	r3, r0, #7
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xa8>
 80001cc:	01cb      	lsls	r3, r1, #7
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0983      	lsrs	r3, r0, #6
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xb4>
 80001d8:	018b      	lsls	r3, r1, #6
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0943      	lsrs	r3, r0, #5
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xc0>
 80001e4:	014b      	lsls	r3, r1, #5
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0903      	lsrs	r3, r0, #4
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xcc>
 80001f0:	010b      	lsls	r3, r1, #4
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	08c3      	lsrs	r3, r0, #3
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xd8>
 80001fc:	00cb      	lsls	r3, r1, #3
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0883      	lsrs	r3, r0, #2
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xe4>
 8000208:	008b      	lsls	r3, r1, #2
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	0843      	lsrs	r3, r0, #1
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xf0>
 8000214:	004b      	lsls	r3, r1, #1
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	1a41      	subs	r1, r0, r1
 800021c:	d200      	bcs.n	8000220 <__udivsi3+0xf8>
 800021e:	4601      	mov	r1, r0
 8000220:	4152      	adcs	r2, r2
 8000222:	4610      	mov	r0, r2
 8000224:	4770      	bx	lr
 8000226:	e7ff      	b.n	8000228 <__udivsi3+0x100>
 8000228:	b501      	push	{r0, lr}
 800022a:	2000      	movs	r0, #0
 800022c:	f000 f8f0 	bl	8000410 <__aeabi_idiv0>
 8000230:	bd02      	pop	{r1, pc}
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <__aeabi_uidivmod>:
 8000234:	2900      	cmp	r1, #0
 8000236:	d0f7      	beq.n	8000228 <__udivsi3+0x100>
 8000238:	e776      	b.n	8000128 <__udivsi3>
 800023a:	4770      	bx	lr

0800023c <__divsi3>:
 800023c:	4603      	mov	r3, r0
 800023e:	430b      	orrs	r3, r1
 8000240:	d47f      	bmi.n	8000342 <__divsi3+0x106>
 8000242:	2200      	movs	r2, #0
 8000244:	0843      	lsrs	r3, r0, #1
 8000246:	428b      	cmp	r3, r1
 8000248:	d374      	bcc.n	8000334 <__divsi3+0xf8>
 800024a:	0903      	lsrs	r3, r0, #4
 800024c:	428b      	cmp	r3, r1
 800024e:	d35f      	bcc.n	8000310 <__divsi3+0xd4>
 8000250:	0a03      	lsrs	r3, r0, #8
 8000252:	428b      	cmp	r3, r1
 8000254:	d344      	bcc.n	80002e0 <__divsi3+0xa4>
 8000256:	0b03      	lsrs	r3, r0, #12
 8000258:	428b      	cmp	r3, r1
 800025a:	d328      	bcc.n	80002ae <__divsi3+0x72>
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d30d      	bcc.n	800027e <__divsi3+0x42>
 8000262:	22ff      	movs	r2, #255	; 0xff
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	ba12      	rev	r2, r2
 8000268:	0c03      	lsrs	r3, r0, #16
 800026a:	428b      	cmp	r3, r1
 800026c:	d302      	bcc.n	8000274 <__divsi3+0x38>
 800026e:	1212      	asrs	r2, r2, #8
 8000270:	0209      	lsls	r1, r1, #8
 8000272:	d065      	beq.n	8000340 <__divsi3+0x104>
 8000274:	0b03      	lsrs	r3, r0, #12
 8000276:	428b      	cmp	r3, r1
 8000278:	d319      	bcc.n	80002ae <__divsi3+0x72>
 800027a:	e000      	b.n	800027e <__divsi3+0x42>
 800027c:	0a09      	lsrs	r1, r1, #8
 800027e:	0bc3      	lsrs	r3, r0, #15
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x4c>
 8000284:	03cb      	lsls	r3, r1, #15
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b83      	lsrs	r3, r0, #14
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x58>
 8000290:	038b      	lsls	r3, r1, #14
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b43      	lsrs	r3, r0, #13
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x64>
 800029c:	034b      	lsls	r3, r1, #13
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b03      	lsrs	r3, r0, #12
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x70>
 80002a8:	030b      	lsls	r3, r1, #12
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0ac3      	lsrs	r3, r0, #11
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x7c>
 80002b4:	02cb      	lsls	r3, r1, #11
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a83      	lsrs	r3, r0, #10
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x88>
 80002c0:	028b      	lsls	r3, r1, #10
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a43      	lsrs	r3, r0, #9
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x94>
 80002cc:	024b      	lsls	r3, r1, #9
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a03      	lsrs	r3, r0, #8
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0xa0>
 80002d8:	020b      	lsls	r3, r1, #8
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	d2cd      	bcs.n	800027c <__divsi3+0x40>
 80002e0:	09c3      	lsrs	r3, r0, #7
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xae>
 80002e6:	01cb      	lsls	r3, r1, #7
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0983      	lsrs	r3, r0, #6
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xba>
 80002f2:	018b      	lsls	r3, r1, #6
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0943      	lsrs	r3, r0, #5
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xc6>
 80002fe:	014b      	lsls	r3, r1, #5
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0903      	lsrs	r3, r0, #4
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xd2>
 800030a:	010b      	lsls	r3, r1, #4
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	08c3      	lsrs	r3, r0, #3
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xde>
 8000316:	00cb      	lsls	r3, r1, #3
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0883      	lsrs	r3, r0, #2
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xea>
 8000322:	008b      	lsls	r3, r1, #2
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	0843      	lsrs	r3, r0, #1
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xf6>
 800032e:	004b      	lsls	r3, r1, #1
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	1a41      	subs	r1, r0, r1
 8000336:	d200      	bcs.n	800033a <__divsi3+0xfe>
 8000338:	4601      	mov	r1, r0
 800033a:	4152      	adcs	r2, r2
 800033c:	4610      	mov	r0, r2
 800033e:	4770      	bx	lr
 8000340:	e05d      	b.n	80003fe <__divsi3+0x1c2>
 8000342:	0fca      	lsrs	r2, r1, #31
 8000344:	d000      	beq.n	8000348 <__divsi3+0x10c>
 8000346:	4249      	negs	r1, r1
 8000348:	1003      	asrs	r3, r0, #32
 800034a:	d300      	bcc.n	800034e <__divsi3+0x112>
 800034c:	4240      	negs	r0, r0
 800034e:	4053      	eors	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	469c      	mov	ip, r3
 8000354:	0903      	lsrs	r3, r0, #4
 8000356:	428b      	cmp	r3, r1
 8000358:	d32d      	bcc.n	80003b6 <__divsi3+0x17a>
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d312      	bcc.n	8000386 <__divsi3+0x14a>
 8000360:	22fc      	movs	r2, #252	; 0xfc
 8000362:	0189      	lsls	r1, r1, #6
 8000364:	ba12      	rev	r2, r2
 8000366:	0a03      	lsrs	r3, r0, #8
 8000368:	428b      	cmp	r3, r1
 800036a:	d30c      	bcc.n	8000386 <__divsi3+0x14a>
 800036c:	0189      	lsls	r1, r1, #6
 800036e:	1192      	asrs	r2, r2, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d308      	bcc.n	8000386 <__divsi3+0x14a>
 8000374:	0189      	lsls	r1, r1, #6
 8000376:	1192      	asrs	r2, r2, #6
 8000378:	428b      	cmp	r3, r1
 800037a:	d304      	bcc.n	8000386 <__divsi3+0x14a>
 800037c:	0189      	lsls	r1, r1, #6
 800037e:	d03a      	beq.n	80003f6 <__divsi3+0x1ba>
 8000380:	1192      	asrs	r2, r2, #6
 8000382:	e000      	b.n	8000386 <__divsi3+0x14a>
 8000384:	0989      	lsrs	r1, r1, #6
 8000386:	09c3      	lsrs	r3, r0, #7
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x154>
 800038c:	01cb      	lsls	r3, r1, #7
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0983      	lsrs	r3, r0, #6
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x160>
 8000398:	018b      	lsls	r3, r1, #6
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0943      	lsrs	r3, r0, #5
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x16c>
 80003a4:	014b      	lsls	r3, r1, #5
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0903      	lsrs	r3, r0, #4
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x178>
 80003b0:	010b      	lsls	r3, r1, #4
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	08c3      	lsrs	r3, r0, #3
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x184>
 80003bc:	00cb      	lsls	r3, r1, #3
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0883      	lsrs	r3, r0, #2
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x190>
 80003c8:	008b      	lsls	r3, r1, #2
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	d2d9      	bcs.n	8000384 <__divsi3+0x148>
 80003d0:	0843      	lsrs	r3, r0, #1
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d301      	bcc.n	80003da <__divsi3+0x19e>
 80003d6:	004b      	lsls	r3, r1, #1
 80003d8:	1ac0      	subs	r0, r0, r3
 80003da:	4152      	adcs	r2, r2
 80003dc:	1a41      	subs	r1, r0, r1
 80003de:	d200      	bcs.n	80003e2 <__divsi3+0x1a6>
 80003e0:	4601      	mov	r1, r0
 80003e2:	4663      	mov	r3, ip
 80003e4:	4152      	adcs	r2, r2
 80003e6:	105b      	asrs	r3, r3, #1
 80003e8:	4610      	mov	r0, r2
 80003ea:	d301      	bcc.n	80003f0 <__divsi3+0x1b4>
 80003ec:	4240      	negs	r0, r0
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d500      	bpl.n	80003f4 <__divsi3+0x1b8>
 80003f2:	4249      	negs	r1, r1
 80003f4:	4770      	bx	lr
 80003f6:	4663      	mov	r3, ip
 80003f8:	105b      	asrs	r3, r3, #1
 80003fa:	d300      	bcc.n	80003fe <__divsi3+0x1c2>
 80003fc:	4240      	negs	r0, r0
 80003fe:	b501      	push	{r0, lr}
 8000400:	2000      	movs	r0, #0
 8000402:	f000 f805 	bl	8000410 <__aeabi_idiv0>
 8000406:	bd02      	pop	{r1, pc}

08000408 <__aeabi_idivmod>:
 8000408:	2900      	cmp	r1, #0
 800040a:	d0f8      	beq.n	80003fe <__divsi3+0x1c2>
 800040c:	e716      	b.n	800023c <__divsi3>
 800040e:	4770      	bx	lr

08000410 <__aeabi_idiv0>:
 8000410:	4770      	bx	lr
 8000412:	46c0      	nop			; (mov r8, r8)

08000414 <__aeabi_uldivmod>:
 8000414:	2b00      	cmp	r3, #0
 8000416:	d111      	bne.n	800043c <__aeabi_uldivmod+0x28>
 8000418:	2a00      	cmp	r2, #0
 800041a:	d10f      	bne.n	800043c <__aeabi_uldivmod+0x28>
 800041c:	2900      	cmp	r1, #0
 800041e:	d100      	bne.n	8000422 <__aeabi_uldivmod+0xe>
 8000420:	2800      	cmp	r0, #0
 8000422:	d002      	beq.n	800042a <__aeabi_uldivmod+0x16>
 8000424:	2100      	movs	r1, #0
 8000426:	43c9      	mvns	r1, r1
 8000428:	0008      	movs	r0, r1
 800042a:	b407      	push	{r0, r1, r2}
 800042c:	4802      	ldr	r0, [pc, #8]	; (8000438 <__aeabi_uldivmod+0x24>)
 800042e:	a102      	add	r1, pc, #8	; (adr r1, 8000438 <__aeabi_uldivmod+0x24>)
 8000430:	1840      	adds	r0, r0, r1
 8000432:	9002      	str	r0, [sp, #8]
 8000434:	bd03      	pop	{r0, r1, pc}
 8000436:	46c0      	nop			; (mov r8, r8)
 8000438:	ffffffd9 	.word	0xffffffd9
 800043c:	b403      	push	{r0, r1}
 800043e:	4668      	mov	r0, sp
 8000440:	b501      	push	{r0, lr}
 8000442:	9802      	ldr	r0, [sp, #8]
 8000444:	f000 f806 	bl	8000454 <__udivmoddi4>
 8000448:	9b01      	ldr	r3, [sp, #4]
 800044a:	469e      	mov	lr, r3
 800044c:	b002      	add	sp, #8
 800044e:	bc0c      	pop	{r2, r3}
 8000450:	4770      	bx	lr
 8000452:	46c0      	nop			; (mov r8, r8)

08000454 <__udivmoddi4>:
 8000454:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000456:	4657      	mov	r7, sl
 8000458:	464e      	mov	r6, r9
 800045a:	4645      	mov	r5, r8
 800045c:	46de      	mov	lr, fp
 800045e:	b5e0      	push	{r5, r6, r7, lr}
 8000460:	0004      	movs	r4, r0
 8000462:	000d      	movs	r5, r1
 8000464:	4692      	mov	sl, r2
 8000466:	4699      	mov	r9, r3
 8000468:	b083      	sub	sp, #12
 800046a:	428b      	cmp	r3, r1
 800046c:	d830      	bhi.n	80004d0 <__udivmoddi4+0x7c>
 800046e:	d02d      	beq.n	80004cc <__udivmoddi4+0x78>
 8000470:	4649      	mov	r1, r9
 8000472:	4650      	mov	r0, sl
 8000474:	f000 f8ba 	bl	80005ec <__clzdi2>
 8000478:	0029      	movs	r1, r5
 800047a:	0006      	movs	r6, r0
 800047c:	0020      	movs	r0, r4
 800047e:	f000 f8b5 	bl	80005ec <__clzdi2>
 8000482:	1a33      	subs	r3, r6, r0
 8000484:	4698      	mov	r8, r3
 8000486:	3b20      	subs	r3, #32
 8000488:	469b      	mov	fp, r3
 800048a:	d433      	bmi.n	80004f4 <__udivmoddi4+0xa0>
 800048c:	465a      	mov	r2, fp
 800048e:	4653      	mov	r3, sl
 8000490:	4093      	lsls	r3, r2
 8000492:	4642      	mov	r2, r8
 8000494:	001f      	movs	r7, r3
 8000496:	4653      	mov	r3, sl
 8000498:	4093      	lsls	r3, r2
 800049a:	001e      	movs	r6, r3
 800049c:	42af      	cmp	r7, r5
 800049e:	d83a      	bhi.n	8000516 <__udivmoddi4+0xc2>
 80004a0:	42af      	cmp	r7, r5
 80004a2:	d100      	bne.n	80004a6 <__udivmoddi4+0x52>
 80004a4:	e078      	b.n	8000598 <__udivmoddi4+0x144>
 80004a6:	465b      	mov	r3, fp
 80004a8:	1ba4      	subs	r4, r4, r6
 80004aa:	41bd      	sbcs	r5, r7
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	da00      	bge.n	80004b2 <__udivmoddi4+0x5e>
 80004b0:	e075      	b.n	800059e <__udivmoddi4+0x14a>
 80004b2:	2200      	movs	r2, #0
 80004b4:	2300      	movs	r3, #0
 80004b6:	9200      	str	r2, [sp, #0]
 80004b8:	9301      	str	r3, [sp, #4]
 80004ba:	2301      	movs	r3, #1
 80004bc:	465a      	mov	r2, fp
 80004be:	4093      	lsls	r3, r2
 80004c0:	9301      	str	r3, [sp, #4]
 80004c2:	2301      	movs	r3, #1
 80004c4:	4642      	mov	r2, r8
 80004c6:	4093      	lsls	r3, r2
 80004c8:	9300      	str	r3, [sp, #0]
 80004ca:	e028      	b.n	800051e <__udivmoddi4+0xca>
 80004cc:	4282      	cmp	r2, r0
 80004ce:	d9cf      	bls.n	8000470 <__udivmoddi4+0x1c>
 80004d0:	2200      	movs	r2, #0
 80004d2:	2300      	movs	r3, #0
 80004d4:	9200      	str	r2, [sp, #0]
 80004d6:	9301      	str	r3, [sp, #4]
 80004d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d001      	beq.n	80004e2 <__udivmoddi4+0x8e>
 80004de:	601c      	str	r4, [r3, #0]
 80004e0:	605d      	str	r5, [r3, #4]
 80004e2:	9800      	ldr	r0, [sp, #0]
 80004e4:	9901      	ldr	r1, [sp, #4]
 80004e6:	b003      	add	sp, #12
 80004e8:	bcf0      	pop	{r4, r5, r6, r7}
 80004ea:	46bb      	mov	fp, r7
 80004ec:	46b2      	mov	sl, r6
 80004ee:	46a9      	mov	r9, r5
 80004f0:	46a0      	mov	r8, r4
 80004f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004f4:	4642      	mov	r2, r8
 80004f6:	2320      	movs	r3, #32
 80004f8:	1a9b      	subs	r3, r3, r2
 80004fa:	4652      	mov	r2, sl
 80004fc:	40da      	lsrs	r2, r3
 80004fe:	4641      	mov	r1, r8
 8000500:	0013      	movs	r3, r2
 8000502:	464a      	mov	r2, r9
 8000504:	408a      	lsls	r2, r1
 8000506:	0017      	movs	r7, r2
 8000508:	4642      	mov	r2, r8
 800050a:	431f      	orrs	r7, r3
 800050c:	4653      	mov	r3, sl
 800050e:	4093      	lsls	r3, r2
 8000510:	001e      	movs	r6, r3
 8000512:	42af      	cmp	r7, r5
 8000514:	d9c4      	bls.n	80004a0 <__udivmoddi4+0x4c>
 8000516:	2200      	movs	r2, #0
 8000518:	2300      	movs	r3, #0
 800051a:	9200      	str	r2, [sp, #0]
 800051c:	9301      	str	r3, [sp, #4]
 800051e:	4643      	mov	r3, r8
 8000520:	2b00      	cmp	r3, #0
 8000522:	d0d9      	beq.n	80004d8 <__udivmoddi4+0x84>
 8000524:	07fb      	lsls	r3, r7, #31
 8000526:	0872      	lsrs	r2, r6, #1
 8000528:	431a      	orrs	r2, r3
 800052a:	4646      	mov	r6, r8
 800052c:	087b      	lsrs	r3, r7, #1
 800052e:	e00e      	b.n	800054e <__udivmoddi4+0xfa>
 8000530:	42ab      	cmp	r3, r5
 8000532:	d101      	bne.n	8000538 <__udivmoddi4+0xe4>
 8000534:	42a2      	cmp	r2, r4
 8000536:	d80c      	bhi.n	8000552 <__udivmoddi4+0xfe>
 8000538:	1aa4      	subs	r4, r4, r2
 800053a:	419d      	sbcs	r5, r3
 800053c:	2001      	movs	r0, #1
 800053e:	1924      	adds	r4, r4, r4
 8000540:	416d      	adcs	r5, r5
 8000542:	2100      	movs	r1, #0
 8000544:	3e01      	subs	r6, #1
 8000546:	1824      	adds	r4, r4, r0
 8000548:	414d      	adcs	r5, r1
 800054a:	2e00      	cmp	r6, #0
 800054c:	d006      	beq.n	800055c <__udivmoddi4+0x108>
 800054e:	42ab      	cmp	r3, r5
 8000550:	d9ee      	bls.n	8000530 <__udivmoddi4+0xdc>
 8000552:	3e01      	subs	r6, #1
 8000554:	1924      	adds	r4, r4, r4
 8000556:	416d      	adcs	r5, r5
 8000558:	2e00      	cmp	r6, #0
 800055a:	d1f8      	bne.n	800054e <__udivmoddi4+0xfa>
 800055c:	9800      	ldr	r0, [sp, #0]
 800055e:	9901      	ldr	r1, [sp, #4]
 8000560:	465b      	mov	r3, fp
 8000562:	1900      	adds	r0, r0, r4
 8000564:	4169      	adcs	r1, r5
 8000566:	2b00      	cmp	r3, #0
 8000568:	db24      	blt.n	80005b4 <__udivmoddi4+0x160>
 800056a:	002b      	movs	r3, r5
 800056c:	465a      	mov	r2, fp
 800056e:	4644      	mov	r4, r8
 8000570:	40d3      	lsrs	r3, r2
 8000572:	002a      	movs	r2, r5
 8000574:	40e2      	lsrs	r2, r4
 8000576:	001c      	movs	r4, r3
 8000578:	465b      	mov	r3, fp
 800057a:	0015      	movs	r5, r2
 800057c:	2b00      	cmp	r3, #0
 800057e:	db2a      	blt.n	80005d6 <__udivmoddi4+0x182>
 8000580:	0026      	movs	r6, r4
 8000582:	409e      	lsls	r6, r3
 8000584:	0033      	movs	r3, r6
 8000586:	0026      	movs	r6, r4
 8000588:	4647      	mov	r7, r8
 800058a:	40be      	lsls	r6, r7
 800058c:	0032      	movs	r2, r6
 800058e:	1a80      	subs	r0, r0, r2
 8000590:	4199      	sbcs	r1, r3
 8000592:	9000      	str	r0, [sp, #0]
 8000594:	9101      	str	r1, [sp, #4]
 8000596:	e79f      	b.n	80004d8 <__udivmoddi4+0x84>
 8000598:	42a3      	cmp	r3, r4
 800059a:	d8bc      	bhi.n	8000516 <__udivmoddi4+0xc2>
 800059c:	e783      	b.n	80004a6 <__udivmoddi4+0x52>
 800059e:	4642      	mov	r2, r8
 80005a0:	2320      	movs	r3, #32
 80005a2:	2100      	movs	r1, #0
 80005a4:	1a9b      	subs	r3, r3, r2
 80005a6:	2200      	movs	r2, #0
 80005a8:	9100      	str	r1, [sp, #0]
 80005aa:	9201      	str	r2, [sp, #4]
 80005ac:	2201      	movs	r2, #1
 80005ae:	40da      	lsrs	r2, r3
 80005b0:	9201      	str	r2, [sp, #4]
 80005b2:	e786      	b.n	80004c2 <__udivmoddi4+0x6e>
 80005b4:	4642      	mov	r2, r8
 80005b6:	2320      	movs	r3, #32
 80005b8:	1a9b      	subs	r3, r3, r2
 80005ba:	002a      	movs	r2, r5
 80005bc:	4646      	mov	r6, r8
 80005be:	409a      	lsls	r2, r3
 80005c0:	0023      	movs	r3, r4
 80005c2:	40f3      	lsrs	r3, r6
 80005c4:	4644      	mov	r4, r8
 80005c6:	4313      	orrs	r3, r2
 80005c8:	002a      	movs	r2, r5
 80005ca:	40e2      	lsrs	r2, r4
 80005cc:	001c      	movs	r4, r3
 80005ce:	465b      	mov	r3, fp
 80005d0:	0015      	movs	r5, r2
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	dad4      	bge.n	8000580 <__udivmoddi4+0x12c>
 80005d6:	4642      	mov	r2, r8
 80005d8:	002f      	movs	r7, r5
 80005da:	2320      	movs	r3, #32
 80005dc:	0026      	movs	r6, r4
 80005de:	4097      	lsls	r7, r2
 80005e0:	1a9b      	subs	r3, r3, r2
 80005e2:	40de      	lsrs	r6, r3
 80005e4:	003b      	movs	r3, r7
 80005e6:	4333      	orrs	r3, r6
 80005e8:	e7cd      	b.n	8000586 <__udivmoddi4+0x132>
 80005ea:	46c0      	nop			; (mov r8, r8)

080005ec <__clzdi2>:
 80005ec:	b510      	push	{r4, lr}
 80005ee:	2900      	cmp	r1, #0
 80005f0:	d103      	bne.n	80005fa <__clzdi2+0xe>
 80005f2:	f000 f807 	bl	8000604 <__clzsi2>
 80005f6:	3020      	adds	r0, #32
 80005f8:	e002      	b.n	8000600 <__clzdi2+0x14>
 80005fa:	0008      	movs	r0, r1
 80005fc:	f000 f802 	bl	8000604 <__clzsi2>
 8000600:	bd10      	pop	{r4, pc}
 8000602:	46c0      	nop			; (mov r8, r8)

08000604 <__clzsi2>:
 8000604:	211c      	movs	r1, #28
 8000606:	2301      	movs	r3, #1
 8000608:	041b      	lsls	r3, r3, #16
 800060a:	4298      	cmp	r0, r3
 800060c:	d301      	bcc.n	8000612 <__clzsi2+0xe>
 800060e:	0c00      	lsrs	r0, r0, #16
 8000610:	3910      	subs	r1, #16
 8000612:	0a1b      	lsrs	r3, r3, #8
 8000614:	4298      	cmp	r0, r3
 8000616:	d301      	bcc.n	800061c <__clzsi2+0x18>
 8000618:	0a00      	lsrs	r0, r0, #8
 800061a:	3908      	subs	r1, #8
 800061c:	091b      	lsrs	r3, r3, #4
 800061e:	4298      	cmp	r0, r3
 8000620:	d301      	bcc.n	8000626 <__clzsi2+0x22>
 8000622:	0900      	lsrs	r0, r0, #4
 8000624:	3904      	subs	r1, #4
 8000626:	a202      	add	r2, pc, #8	; (adr r2, 8000630 <__clzsi2+0x2c>)
 8000628:	5c10      	ldrb	r0, [r2, r0]
 800062a:	1840      	adds	r0, r0, r1
 800062c:	4770      	bx	lr
 800062e:	46c0      	nop			; (mov r8, r8)
 8000630:	02020304 	.word	0x02020304
 8000634:	01010101 	.word	0x01010101
	...

08000640 <portInit_shiftreg>:
#include "cd4094.h"
#include "main.h"

//switches connected on encoder - D1, D4, D5, D8, D9, D12, D13, D16, D17, D20, D21, D22
void portInit_shiftreg(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	af00      	add	r7, sp, #0

    //default conditions
//    WDI_TOGGLE();
//    ANDgate_LOW();
//    STROBE_4094_LOW();
	HAL_GPIO_WritePin(STROBE_4094_GPIO_Port, STROBE_4094_Pin, RESET);
 8000644:	2380      	movs	r3, #128	; 0x80
 8000646:	005b      	lsls	r3, r3, #1
 8000648:	480a      	ldr	r0, [pc, #40]	; (8000674 <portInit_shiftreg+0x34>)
 800064a:	2200      	movs	r2, #0
 800064c:	0019      	movs	r1, r3
 800064e:	f001 f8f4 	bl	800183a <HAL_GPIO_WritePin>
//    CLOCK_4094_LOW();
	HAL_GPIO_WritePin(CLK_4094_GPIO_Port, CLK_4094_Pin, RESET);
 8000652:	2380      	movs	r3, #128	; 0x80
 8000654:	009b      	lsls	r3, r3, #2
 8000656:	4807      	ldr	r0, [pc, #28]	; (8000674 <portInit_shiftreg+0x34>)
 8000658:	2200      	movs	r2, #0
 800065a:	0019      	movs	r1, r3
 800065c:	f001 f8ed 	bl	800183a <HAL_GPIO_WritePin>
//    DATA_4094_LOW();
	HAL_GPIO_WritePin(DATA_4094_GPIO_Port, DATA_4094_Pin, RESET);
 8000660:	2380      	movs	r3, #128	; 0x80
 8000662:	005b      	lsls	r3, r3, #1
 8000664:	4804      	ldr	r0, [pc, #16]	; (8000678 <portInit_shiftreg+0x38>)
 8000666:	2200      	movs	r2, #0
 8000668:	0019      	movs	r1, r3
 800066a:	f001 f8e6 	bl	800183a <HAL_GPIO_WritePin>
}
 800066e:	46c0      	nop			; (mov r8, r8)
 8000670:	46bd      	mov	sp, r7
 8000672:	bd80      	pop	{r7, pc}
 8000674:	50000800 	.word	0x50000800
 8000678:	50000400 	.word	0x50000400

0800067c <writeToShiftRegister>:


void writeToShiftRegister(uint32_t value)
{
 800067c:	b590      	push	{r4, r7, lr}
 800067e:	b087      	sub	sp, #28
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]
    uint32_t tempValue = value;
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	617b      	str	r3, [r7, #20]
    if(tempValue > MaxAllowedNum)
 8000688:	697a      	ldr	r2, [r7, #20]
 800068a:	2380      	movs	r3, #128	; 0x80
 800068c:	045b      	lsls	r3, r3, #17
 800068e:	429a      	cmp	r2, r3
 8000690:	d301      	bcc.n	8000696 <writeToShiftRegister+0x1a>
    {
        tempValue = MaxAllowedNum;
 8000692:	4b2a      	ldr	r3, [pc, #168]	; (800073c <writeToShiftRegister+0xc0>)
 8000694:	617b      	str	r3, [r7, #20]
    }
    int j;

//    STROBE_4094_LOW();
	HAL_GPIO_WritePin(STROBE_4094_GPIO_Port, STROBE_4094_Pin, RESET);
 8000696:	2380      	movs	r3, #128	; 0x80
 8000698:	005b      	lsls	r3, r3, #1
 800069a:	4829      	ldr	r0, [pc, #164]	; (8000740 <writeToShiftRegister+0xc4>)
 800069c:	2200      	movs	r2, #0
 800069e:	0019      	movs	r1, r3
 80006a0:	f001 f8cb 	bl	800183a <HAL_GPIO_WritePin>

    for(j = HCF4094_outputs-1; j>=0; j--)
 80006a4:	2317      	movs	r3, #23
 80006a6:	613b      	str	r3, [r7, #16]
 80006a8:	e03a      	b.n	8000720 <writeToShiftRegister+0xa4>
    {
        bool num = 0;
 80006aa:	210f      	movs	r1, #15
 80006ac:	187b      	adds	r3, r7, r1
 80006ae:	2200      	movs	r2, #0
 80006b0:	701a      	strb	r2, [r3, #0]
        uint32_t temp1Val = 0;
 80006b2:	2300      	movs	r3, #0
 80006b4:	60bb      	str	r3, [r7, #8]
        temp1Val = (tempValue >> (j - 1));
 80006b6:	693b      	ldr	r3, [r7, #16]
 80006b8:	3b01      	subs	r3, #1
 80006ba:	697a      	ldr	r2, [r7, #20]
 80006bc:	40da      	lsrs	r2, r3
 80006be:	0013      	movs	r3, r2
 80006c0:	60bb      	str	r3, [r7, #8]
        num = (bool)(temp1Val & 0x01);
 80006c2:	68bb      	ldr	r3, [r7, #8]
 80006c4:	2201      	movs	r2, #1
 80006c6:	401a      	ands	r2, r3
 80006c8:	000c      	movs	r4, r1
 80006ca:	187b      	adds	r3, r7, r1
 80006cc:	1e51      	subs	r1, r2, #1
 80006ce:	418a      	sbcs	r2, r1
 80006d0:	701a      	strb	r2, [r3, #0]

//        CLOCK_4094_LOW();
    	HAL_GPIO_WritePin(CLK_4094_GPIO_Port, CLK_4094_Pin, RESET);
 80006d2:	2380      	movs	r3, #128	; 0x80
 80006d4:	009b      	lsls	r3, r3, #2
 80006d6:	481a      	ldr	r0, [pc, #104]	; (8000740 <writeToShiftRegister+0xc4>)
 80006d8:	2200      	movs	r2, #0
 80006da:	0019      	movs	r1, r3
 80006dc:	f001 f8ad 	bl	800183a <HAL_GPIO_WritePin>

        if(num == 0)
 80006e0:	193b      	adds	r3, r7, r4
 80006e2:	781b      	ldrb	r3, [r3, #0]
 80006e4:	2201      	movs	r2, #1
 80006e6:	4053      	eors	r3, r2
 80006e8:	b2db      	uxtb	r3, r3
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d007      	beq.n	80006fe <writeToShiftRegister+0x82>
        {
//            DATA_4094_HIGH();
        	HAL_GPIO_WritePin(DATA_4094_GPIO_Port, DATA_4094_Pin, SET);
 80006ee:	2380      	movs	r3, #128	; 0x80
 80006f0:	005b      	lsls	r3, r3, #1
 80006f2:	4814      	ldr	r0, [pc, #80]	; (8000744 <writeToShiftRegister+0xc8>)
 80006f4:	2201      	movs	r2, #1
 80006f6:	0019      	movs	r1, r3
 80006f8:	f001 f89f 	bl	800183a <HAL_GPIO_WritePin>
 80006fc:	e006      	b.n	800070c <writeToShiftRegister+0x90>

        }
        else
        {
//            DATA_4094_LOW();
        	HAL_GPIO_WritePin(DATA_4094_GPIO_Port, DATA_4094_Pin, RESET);
 80006fe:	2380      	movs	r3, #128	; 0x80
 8000700:	005b      	lsls	r3, r3, #1
 8000702:	4810      	ldr	r0, [pc, #64]	; (8000744 <writeToShiftRegister+0xc8>)
 8000704:	2200      	movs	r2, #0
 8000706:	0019      	movs	r1, r3
 8000708:	f001 f897 	bl	800183a <HAL_GPIO_WritePin>

        }
//        CLOCK_4094_HIGH();
    	HAL_GPIO_WritePin(CLK_4094_GPIO_Port, CLK_4094_Pin, SET);
 800070c:	2380      	movs	r3, #128	; 0x80
 800070e:	009b      	lsls	r3, r3, #2
 8000710:	480b      	ldr	r0, [pc, #44]	; (8000740 <writeToShiftRegister+0xc4>)
 8000712:	2201      	movs	r2, #1
 8000714:	0019      	movs	r1, r3
 8000716:	f001 f890 	bl	800183a <HAL_GPIO_WritePin>
    for(j = HCF4094_outputs-1; j>=0; j--)
 800071a:	693b      	ldr	r3, [r7, #16]
 800071c:	3b01      	subs	r3, #1
 800071e:	613b      	str	r3, [r7, #16]
 8000720:	693b      	ldr	r3, [r7, #16]
 8000722:	2b00      	cmp	r3, #0
 8000724:	dac1      	bge.n	80006aa <writeToShiftRegister+0x2e>

    }
//    STROBE_4094_HIGH();
	HAL_GPIO_WritePin(STROBE_4094_GPIO_Port, STROBE_4094_Pin, SET);
 8000726:	2380      	movs	r3, #128	; 0x80
 8000728:	005b      	lsls	r3, r3, #1
 800072a:	4805      	ldr	r0, [pc, #20]	; (8000740 <writeToShiftRegister+0xc4>)
 800072c:	2201      	movs	r2, #1
 800072e:	0019      	movs	r1, r3
 8000730:	f001 f883 	bl	800183a <HAL_GPIO_WritePin>

}
 8000734:	46c0      	nop			; (mov r8, r8)
 8000736:	46bd      	mov	sp, r7
 8000738:	b007      	add	sp, #28
 800073a:	bd90      	pop	{r4, r7, pc}
 800073c:	00ffffff 	.word	0x00ffffff
 8000740:	50000800 	.word	0x50000800
 8000744:	50000400 	.word	0x50000400

08000748 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000748:	b590      	push	{r4, r7, lr}
 800074a:	b08b      	sub	sp, #44	; 0x2c
 800074c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800074e:	2414      	movs	r4, #20
 8000750:	193b      	adds	r3, r7, r4
 8000752:	0018      	movs	r0, r3
 8000754:	2314      	movs	r3, #20
 8000756:	001a      	movs	r2, r3
 8000758:	2100      	movs	r1, #0
 800075a:	f005 f826 	bl	80057aa <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800075e:	4b5e      	ldr	r3, [pc, #376]	; (80008d8 <MX_GPIO_Init+0x190>)
 8000760:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000762:	4b5d      	ldr	r3, [pc, #372]	; (80008d8 <MX_GPIO_Init+0x190>)
 8000764:	2104      	movs	r1, #4
 8000766:	430a      	orrs	r2, r1
 8000768:	635a      	str	r2, [r3, #52]	; 0x34
 800076a:	4b5b      	ldr	r3, [pc, #364]	; (80008d8 <MX_GPIO_Init+0x190>)
 800076c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800076e:	2204      	movs	r2, #4
 8000770:	4013      	ands	r3, r2
 8000772:	613b      	str	r3, [r7, #16]
 8000774:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000776:	4b58      	ldr	r3, [pc, #352]	; (80008d8 <MX_GPIO_Init+0x190>)
 8000778:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800077a:	4b57      	ldr	r3, [pc, #348]	; (80008d8 <MX_GPIO_Init+0x190>)
 800077c:	2120      	movs	r1, #32
 800077e:	430a      	orrs	r2, r1
 8000780:	635a      	str	r2, [r3, #52]	; 0x34
 8000782:	4b55      	ldr	r3, [pc, #340]	; (80008d8 <MX_GPIO_Init+0x190>)
 8000784:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000786:	2220      	movs	r2, #32
 8000788:	4013      	ands	r3, r2
 800078a:	60fb      	str	r3, [r7, #12]
 800078c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800078e:	4b52      	ldr	r3, [pc, #328]	; (80008d8 <MX_GPIO_Init+0x190>)
 8000790:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000792:	4b51      	ldr	r3, [pc, #324]	; (80008d8 <MX_GPIO_Init+0x190>)
 8000794:	2101      	movs	r1, #1
 8000796:	430a      	orrs	r2, r1
 8000798:	635a      	str	r2, [r3, #52]	; 0x34
 800079a:	4b4f      	ldr	r3, [pc, #316]	; (80008d8 <MX_GPIO_Init+0x190>)
 800079c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800079e:	2201      	movs	r2, #1
 80007a0:	4013      	ands	r3, r2
 80007a2:	60bb      	str	r3, [r7, #8]
 80007a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007a6:	4b4c      	ldr	r3, [pc, #304]	; (80008d8 <MX_GPIO_Init+0x190>)
 80007a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80007aa:	4b4b      	ldr	r3, [pc, #300]	; (80008d8 <MX_GPIO_Init+0x190>)
 80007ac:	2102      	movs	r1, #2
 80007ae:	430a      	orrs	r2, r1
 80007b0:	635a      	str	r2, [r3, #52]	; 0x34
 80007b2:	4b49      	ldr	r3, [pc, #292]	; (80008d8 <MX_GPIO_Init+0x190>)
 80007b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80007b6:	2202      	movs	r2, #2
 80007b8:	4013      	ands	r3, r2
 80007ba:	607b      	str	r3, [r7, #4]
 80007bc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI_CS_Pin|LED_GREEN_Pin, GPIO_PIN_RESET);
 80007be:	23a0      	movs	r3, #160	; 0xa0
 80007c0:	05db      	lsls	r3, r3, #23
 80007c2:	2200      	movs	r2, #0
 80007c4:	2122      	movs	r1, #34	; 0x22
 80007c6:	0018      	movs	r0, r3
 80007c8:	f001 f837 	bl	800183a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, PWR_Pin|TRX_CE_Pin|TXEN_Pin|DATA_4094_Pin
 80007cc:	23e3      	movs	r3, #227	; 0xe3
 80007ce:	021b      	lsls	r3, r3, #8
 80007d0:	4842      	ldr	r0, [pc, #264]	; (80008dc <MX_GPIO_Init+0x194>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	0019      	movs	r1, r3
 80007d6:	f001 f830 	bl	800183a <HAL_GPIO_WritePin>
                          |RELAY3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, RELAY2_Pin|STROBE_4094_Pin|CLK_4094_Pin, GPIO_PIN_RESET);
 80007da:	23d0      	movs	r3, #208	; 0xd0
 80007dc:	009b      	lsls	r3, r3, #2
 80007de:	4840      	ldr	r0, [pc, #256]	; (80008e0 <MX_GPIO_Init+0x198>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	0019      	movs	r1, r3
 80007e4:	f001 f829 	bl	800183a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI_CS_Pin;
 80007e8:	193b      	adds	r3, r7, r4
 80007ea:	2202      	movs	r2, #2
 80007ec:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ee:	193b      	adds	r3, r7, r4
 80007f0:	2201      	movs	r2, #1
 80007f2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f4:	193b      	adds	r3, r7, r4
 80007f6:	2200      	movs	r2, #0
 80007f8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007fa:	193b      	adds	r3, r7, r4
 80007fc:	2200      	movs	r2, #0
 80007fe:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(SPI_CS_GPIO_Port, &GPIO_InitStruct);
 8000800:	193a      	adds	r2, r7, r4
 8000802:	23a0      	movs	r3, #160	; 0xa0
 8000804:	05db      	lsls	r3, r3, #23
 8000806:	0011      	movs	r1, r2
 8000808:	0018      	movs	r0, r3
 800080a:	f000 fe95 	bl	8001538 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 800080e:	193b      	adds	r3, r7, r4
 8000810:	2220      	movs	r2, #32
 8000812:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000814:	193b      	adds	r3, r7, r4
 8000816:	2201      	movs	r2, #1
 8000818:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081a:	193b      	adds	r3, r7, r4
 800081c:	2200      	movs	r2, #0
 800081e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000820:	193b      	adds	r3, r7, r4
 8000822:	2202      	movs	r2, #2
 8000824:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8000826:	193a      	adds	r2, r7, r4
 8000828:	23a0      	movs	r3, #160	; 0xa0
 800082a:	05db      	lsls	r3, r3, #23
 800082c:	0011      	movs	r1, r2
 800082e:	0018      	movs	r0, r3
 8000830:	f000 fe82 	bl	8001538 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CD_Pin;
 8000834:	0021      	movs	r1, r4
 8000836:	187b      	adds	r3, r7, r1
 8000838:	2280      	movs	r2, #128	; 0x80
 800083a:	0152      	lsls	r2, r2, #5
 800083c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800083e:	000c      	movs	r4, r1
 8000840:	193b      	adds	r3, r7, r4
 8000842:	2200      	movs	r2, #0
 8000844:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000846:	193b      	adds	r3, r7, r4
 8000848:	2200      	movs	r2, #0
 800084a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(CD_GPIO_Port, &GPIO_InitStruct);
 800084c:	193b      	adds	r3, r7, r4
 800084e:	4a23      	ldr	r2, [pc, #140]	; (80008dc <MX_GPIO_Init+0x194>)
 8000850:	0019      	movs	r1, r3
 8000852:	0010      	movs	r0, r2
 8000854:	f000 fe70 	bl	8001538 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = PWR_Pin|TRX_CE_Pin|TXEN_Pin|DATA_4094_Pin
 8000858:	0021      	movs	r1, r4
 800085a:	187b      	adds	r3, r7, r1
 800085c:	22e3      	movs	r2, #227	; 0xe3
 800085e:	0212      	lsls	r2, r2, #8
 8000860:	601a      	str	r2, [r3, #0]
                          |RELAY3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000862:	000c      	movs	r4, r1
 8000864:	193b      	adds	r3, r7, r4
 8000866:	2201      	movs	r2, #1
 8000868:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086a:	193b      	adds	r3, r7, r4
 800086c:	2200      	movs	r2, #0
 800086e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000870:	193b      	adds	r3, r7, r4
 8000872:	2200      	movs	r2, #0
 8000874:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000876:	193b      	adds	r3, r7, r4
 8000878:	4a18      	ldr	r2, [pc, #96]	; (80008dc <MX_GPIO_Init+0x194>)
 800087a:	0019      	movs	r1, r3
 800087c:	0010      	movs	r0, r2
 800087e:	f000 fe5b 	bl	8001538 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RELAY2_Pin|STROBE_4094_Pin|CLK_4094_Pin;
 8000882:	0021      	movs	r1, r4
 8000884:	187b      	adds	r3, r7, r1
 8000886:	22d0      	movs	r2, #208	; 0xd0
 8000888:	0092      	lsls	r2, r2, #2
 800088a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800088c:	000c      	movs	r4, r1
 800088e:	193b      	adds	r3, r7, r4
 8000890:	2201      	movs	r2, #1
 8000892:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000894:	193b      	adds	r3, r7, r4
 8000896:	2200      	movs	r2, #0
 8000898:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800089a:	193b      	adds	r3, r7, r4
 800089c:	2200      	movs	r2, #0
 800089e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008a0:	193b      	adds	r3, r7, r4
 80008a2:	4a0f      	ldr	r2, [pc, #60]	; (80008e0 <MX_GPIO_Init+0x198>)
 80008a4:	0019      	movs	r1, r3
 80008a6:	0010      	movs	r0, r2
 80008a8:	f000 fe46 	bl	8001538 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = AM_Pin|DR_Pin;
 80008ac:	0021      	movs	r1, r4
 80008ae:	187b      	adds	r3, r7, r1
 80008b0:	22c0      	movs	r2, #192	; 0xc0
 80008b2:	0152      	lsls	r2, r2, #5
 80008b4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008b6:	187b      	adds	r3, r7, r1
 80008b8:	2200      	movs	r2, #0
 80008ba:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008bc:	187b      	adds	r3, r7, r1
 80008be:	2200      	movs	r2, #0
 80008c0:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008c2:	187a      	adds	r2, r7, r1
 80008c4:	23a0      	movs	r3, #160	; 0xa0
 80008c6:	05db      	lsls	r3, r3, #23
 80008c8:	0011      	movs	r1, r2
 80008ca:	0018      	movs	r0, r3
 80008cc:	f000 fe34 	bl	8001538 <HAL_GPIO_Init>

}
 80008d0:	46c0      	nop			; (mov r8, r8)
 80008d2:	46bd      	mov	sp, r7
 80008d4:	b00b      	add	sp, #44	; 0x2c
 80008d6:	bd90      	pop	{r4, r7, pc}
 80008d8:	40021000 	.word	0x40021000
 80008dc:	50000400 	.word	0x50000400
 80008e0:	50000800 	.word	0x50000800

080008e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008e4:	b590      	push	{r4, r7, lr}
 80008e6:	b089      	sub	sp, #36	; 0x24
 80008e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	initialise_monitor_handles();
 80008ea:	f004 fdb7 	bl	800545c <initialise_monitor_handles>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008ee:	f000 fc1b 	bl	8001128 <HAL_Init>

  /* USER CODE BEGIN Init */
  portInit_shiftreg();
 80008f2:	f7ff fea5 	bl	8000640 <portInit_shiftreg>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008f6:	f000 f933 	bl	8000b60 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008fa:	f7ff ff25 	bl	8000748 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80008fe:	f000 fb3b 	bl	8000f78 <MX_USART2_UART_Init>
  MX_SPI2_Init();
 8000902:	f000 f989 	bl	8000c18 <MX_SPI2_Init>
  MX_TIM3_Init();
 8000906:	f000 fac3 	bl	8000e90 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  uint32_t uid = 0x00;
 800090a:	2300      	movs	r3, #0
 800090c:	61fb      	str	r3, [r7, #28]
  	for (uint8_t i = 0; i < 3; ++i) {
 800090e:	231b      	movs	r3, #27
 8000910:	18fb      	adds	r3, r7, r3
 8000912:	2200      	movs	r2, #0
 8000914:	701a      	strb	r2, [r3, #0]
 8000916:	e00f      	b.n	8000938 <main+0x54>
  		uid += (uint32_t) (UID_BASE + i * 4);
 8000918:	211b      	movs	r1, #27
 800091a:	187b      	adds	r3, r7, r1
 800091c:	781b      	ldrb	r3, [r3, #0]
 800091e:	009b      	lsls	r3, r3, #2
 8000920:	001a      	movs	r2, r3
 8000922:	69fb      	ldr	r3, [r7, #28]
 8000924:	18d3      	adds	r3, r2, r3
 8000926:	4a7e      	ldr	r2, [pc, #504]	; (8000b20 <main+0x23c>)
 8000928:	4694      	mov	ip, r2
 800092a:	4463      	add	r3, ip
 800092c:	61fb      	str	r3, [r7, #28]
  	for (uint8_t i = 0; i < 3; ++i) {
 800092e:	187b      	adds	r3, r7, r1
 8000930:	187a      	adds	r2, r7, r1
 8000932:	7812      	ldrb	r2, [r2, #0]
 8000934:	3201      	adds	r2, #1
 8000936:	701a      	strb	r2, [r3, #0]
 8000938:	231b      	movs	r3, #27
 800093a:	18fb      	adds	r3, r7, r3
 800093c:	781b      	ldrb	r3, [r3, #0]
 800093e:	2b02      	cmp	r3, #2
 8000940:	d9ea      	bls.n	8000918 <main+0x34>
  	}
  	srand(uid);
 8000942:	69fb      	ldr	r3, [r7, #28]
 8000944:	0018      	movs	r0, r3
 8000946:	f005 f867 	bl	8005a18 <srand>

  	NRF905_hw.gpio[NRF905_HW_GPIO_TXEN].pin = TXEN_Pin;
 800094a:	4b76      	ldr	r3, [pc, #472]	; (8000b24 <main+0x240>)
 800094c:	2280      	movs	r2, #128	; 0x80
 800094e:	0212      	lsls	r2, r2, #8
 8000950:	601a      	str	r2, [r3, #0]
  	NRF905_hw.gpio[NRF905_HW_GPIO_TXEN].port = TXEN_GPIO_Port;
 8000952:	4b74      	ldr	r3, [pc, #464]	; (8000b24 <main+0x240>)
 8000954:	4a74      	ldr	r2, [pc, #464]	; (8000b28 <main+0x244>)
 8000956:	605a      	str	r2, [r3, #4]
  	NRF905_hw.gpio[NRF905_HW_GPIO_TRX_EN].pin = TRX_CE_Pin;
 8000958:	4b72      	ldr	r3, [pc, #456]	; (8000b24 <main+0x240>)
 800095a:	2280      	movs	r2, #128	; 0x80
 800095c:	01d2      	lsls	r2, r2, #7
 800095e:	609a      	str	r2, [r3, #8]
  	NRF905_hw.gpio[NRF905_HW_GPIO_TRX_EN].port = TRX_CE_GPIO_Port;
 8000960:	4b70      	ldr	r3, [pc, #448]	; (8000b24 <main+0x240>)
 8000962:	4a71      	ldr	r2, [pc, #452]	; (8000b28 <main+0x244>)
 8000964:	60da      	str	r2, [r3, #12]
  	NRF905_hw.gpio[NRF905_HW_GPIO_PWR].pin = PWR_Pin;
 8000966:	4b6f      	ldr	r3, [pc, #444]	; (8000b24 <main+0x240>)
 8000968:	2280      	movs	r2, #128	; 0x80
 800096a:	0192      	lsls	r2, r2, #6
 800096c:	611a      	str	r2, [r3, #16]
  	NRF905_hw.gpio[NRF905_HW_GPIO_PWR].port = PWR_GPIO_Port;
 800096e:	4b6d      	ldr	r3, [pc, #436]	; (8000b24 <main+0x240>)
 8000970:	4a6d      	ldr	r2, [pc, #436]	; (8000b28 <main+0x244>)
 8000972:	615a      	str	r2, [r3, #20]

  	NRF905_hw.gpio[NRF905_HW_GPIO_CD].pin = CD_Pin;
 8000974:	4b6b      	ldr	r3, [pc, #428]	; (8000b24 <main+0x240>)
 8000976:	2280      	movs	r2, #128	; 0x80
 8000978:	0152      	lsls	r2, r2, #5
 800097a:	619a      	str	r2, [r3, #24]
  	NRF905_hw.gpio[NRF905_HW_GPIO_CD].port = CD_GPIO_Port;
 800097c:	4b69      	ldr	r3, [pc, #420]	; (8000b24 <main+0x240>)
 800097e:	4a6a      	ldr	r2, [pc, #424]	; (8000b28 <main+0x244>)
 8000980:	61da      	str	r2, [r3, #28]
  	NRF905_hw.gpio[NRF905_HW_GPIO_AM].pin = AM_Pin;
 8000982:	4b68      	ldr	r3, [pc, #416]	; (8000b24 <main+0x240>)
 8000984:	2280      	movs	r2, #128	; 0x80
 8000986:	0112      	lsls	r2, r2, #4
 8000988:	621a      	str	r2, [r3, #32]
  	NRF905_hw.gpio[NRF905_HW_GPIO_AM].port = AM_GPIO_Port;
 800098a:	4b66      	ldr	r3, [pc, #408]	; (8000b24 <main+0x240>)
 800098c:	22a0      	movs	r2, #160	; 0xa0
 800098e:	05d2      	lsls	r2, r2, #23
 8000990:	625a      	str	r2, [r3, #36]	; 0x24
  	NRF905_hw.gpio[NRF905_HW_GPIO_DR].pin = DR_Pin;
 8000992:	4b64      	ldr	r3, [pc, #400]	; (8000b24 <main+0x240>)
 8000994:	2280      	movs	r2, #128	; 0x80
 8000996:	0152      	lsls	r2, r2, #5
 8000998:	629a      	str	r2, [r3, #40]	; 0x28
  	NRF905_hw.gpio[NRF905_HW_GPIO_DR].port = DR_GPIO_Port;
 800099a:	4b62      	ldr	r3, [pc, #392]	; (8000b24 <main+0x240>)
 800099c:	22a0      	movs	r2, #160	; 0xa0
 800099e:	05d2      	lsls	r2, r2, #23
 80009a0:	62da      	str	r2, [r3, #44]	; 0x2c

  	NRF905_hw.gpio[NRF905_HW_GPIO_CS].pin = SPI_CS_Pin;
 80009a2:	4b60      	ldr	r3, [pc, #384]	; (8000b24 <main+0x240>)
 80009a4:	2202      	movs	r2, #2
 80009a6:	631a      	str	r2, [r3, #48]	; 0x30
  	NRF905_hw.gpio[NRF905_HW_GPIO_CS].port = SPI_CS_GPIO_Port;
 80009a8:	4b5e      	ldr	r3, [pc, #376]	; (8000b24 <main+0x240>)
 80009aa:	22a0      	movs	r2, #160	; 0xa0
 80009ac:	05d2      	lsls	r2, r2, #23
 80009ae:	635a      	str	r2, [r3, #52]	; 0x34

  	NRF905_hw.tim = &htim3;
 80009b0:	4b5c      	ldr	r3, [pc, #368]	; (8000b24 <main+0x240>)
 80009b2:	4a5e      	ldr	r2, [pc, #376]	; (8000b2c <main+0x248>)
 80009b4:	63da      	str	r2, [r3, #60]	; 0x3c
  	NRF905_hw.spi = &hspi2;
 80009b6:	4b5b      	ldr	r3, [pc, #364]	; (8000b24 <main+0x240>)
 80009b8:	4a5d      	ldr	r2, [pc, #372]	; (8000b30 <main+0x24c>)
 80009ba:	639a      	str	r2, [r3, #56]	; 0x38

  	master = 0; //HAL_GPIO_ReadPin(MODE_GPIO_Port, MODE_Pin);
 80009bc:	4b5d      	ldr	r3, [pc, #372]	; (8000b34 <main+0x250>)
 80009be:	2200      	movs	r2, #0
 80009c0:	601a      	str	r2, [r3, #0]
  	if (master == 1) {
 80009c2:	4b5c      	ldr	r3, [pc, #368]	; (8000b34 <main+0x250>)
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	2b01      	cmp	r3, #1
 80009c8:	d106      	bne.n	80009d8 <main+0xf4>
  		my_address = ADDRESS_MASTER;
 80009ca:	4b5b      	ldr	r3, [pc, #364]	; (8000b38 <main+0x254>)
 80009cc:	4a5b      	ldr	r2, [pc, #364]	; (8000b3c <main+0x258>)
 80009ce:	601a      	str	r2, [r3, #0]
  		receiver_address = ADDRESS_SLAVE;
 80009d0:	4b5b      	ldr	r3, [pc, #364]	; (8000b40 <main+0x25c>)
 80009d2:	4a5a      	ldr	r2, [pc, #360]	; (8000b3c <main+0x258>)
 80009d4:	601a      	str	r2, [r3, #0]
 80009d6:	e005      	b.n	80009e4 <main+0x100>
  	} else {
  		my_address = ADDRESS_SLAVE;
 80009d8:	4b57      	ldr	r3, [pc, #348]	; (8000b38 <main+0x254>)
 80009da:	4a58      	ldr	r2, [pc, #352]	; (8000b3c <main+0x258>)
 80009dc:	601a      	str	r2, [r3, #0]
  		receiver_address = ADDRESS_MASTER;
 80009de:	4b58      	ldr	r3, [pc, #352]	; (8000b40 <main+0x25c>)
 80009e0:	4a56      	ldr	r2, [pc, #344]	; (8000b3c <main+0x258>)
 80009e2:	601a      	str	r2, [r3, #0]
  	}

  	if (master == 1) {
 80009e4:	4b53      	ldr	r3, [pc, #332]	; (8000b34 <main+0x250>)
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	2b01      	cmp	r3, #1
 80009ea:	d107      	bne.n	80009fc <main+0x118>
  		printf("Mode: Master, TX, %08lX\r\n", my_address);
 80009ec:	4b52      	ldr	r3, [pc, #328]	; (8000b38 <main+0x254>)
 80009ee:	681a      	ldr	r2, [r3, #0]
 80009f0:	4b54      	ldr	r3, [pc, #336]	; (8000b44 <main+0x260>)
 80009f2:	0011      	movs	r1, r2
 80009f4:	0018      	movs	r0, r3
 80009f6:	f004 ff79 	bl	80058ec <iprintf>
 80009fa:	e006      	b.n	8000a0a <main+0x126>
//  		HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
  	} else {
  		printf("Mode: Slave, RX, %08lX\r\n", my_address);
 80009fc:	4b4e      	ldr	r3, [pc, #312]	; (8000b38 <main+0x254>)
 80009fe:	681a      	ldr	r2, [r3, #0]
 8000a00:	4b51      	ldr	r3, [pc, #324]	; (8000b48 <main+0x264>)
 8000a02:	0011      	movs	r1, r2
 8000a04:	0018      	movs	r0, r3
 8000a06:	f004 ff71 	bl	80058ec <iprintf>
//  		HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_SET);
  	}

  	NRF905_init(&NRF905, &NRF905_hw);
 8000a0a:	4a46      	ldr	r2, [pc, #280]	; (8000b24 <main+0x240>)
 8000a0c:	4b4f      	ldr	r3, [pc, #316]	; (8000b4c <main+0x268>)
 8000a0e:	0011      	movs	r1, r2
 8000a10:	0018      	movs	r0, r3
 8000a12:	f004 f8e5 	bl	8004be0 <NRF905_init>
  	NRF905_set_listen_address(&NRF905, receiver_address);
 8000a16:	4b4a      	ldr	r3, [pc, #296]	; (8000b40 <main+0x25c>)
 8000a18:	681a      	ldr	r2, [r3, #0]
 8000a1a:	4b4c      	ldr	r3, [pc, #304]	; (8000b4c <main+0x268>)
 8000a1c:	0011      	movs	r1, r2
 8000a1e:	0018      	movs	r0, r3
 8000a20:	f004 f86c 	bl	8004afc <NRF905_set_listen_address>

  	printf("Reg conf: ");
 8000a24:	4b4a      	ldr	r3, [pc, #296]	; (8000b50 <main+0x26c>)
 8000a26:	0018      	movs	r0, r3
 8000a28:	f004 ff60 	bl	80058ec <iprintf>
  	for (int i = 0; i < 10; ++i) {
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	617b      	str	r3, [r7, #20]
 8000a30:	e013      	b.n	8000a5a <main+0x176>
  		uint8_t d = NRF905_read_config_register(&NRF905, i);
 8000a32:	697b      	ldr	r3, [r7, #20]
 8000a34:	b2da      	uxtb	r2, r3
 8000a36:	1d7c      	adds	r4, r7, #5
 8000a38:	4b44      	ldr	r3, [pc, #272]	; (8000b4c <main+0x268>)
 8000a3a:	0011      	movs	r1, r2
 8000a3c:	0018      	movs	r0, r3
 8000a3e:	f003 ff75 	bl	800492c <NRF905_read_config_register>
 8000a42:	0003      	movs	r3, r0
 8000a44:	7023      	strb	r3, [r4, #0]
  		printf("%02X, ", d);
 8000a46:	1d7b      	adds	r3, r7, #5
 8000a48:	781a      	ldrb	r2, [r3, #0]
 8000a4a:	4b42      	ldr	r3, [pc, #264]	; (8000b54 <main+0x270>)
 8000a4c:	0011      	movs	r1, r2
 8000a4e:	0018      	movs	r0, r3
 8000a50:	f004 ff4c 	bl	80058ec <iprintf>
  	for (int i = 0; i < 10; ++i) {
 8000a54:	697b      	ldr	r3, [r7, #20]
 8000a56:	3301      	adds	r3, #1
 8000a58:	617b      	str	r3, [r7, #20]
 8000a5a:	697b      	ldr	r3, [r7, #20]
 8000a5c:	2b09      	cmp	r3, #9
 8000a5e:	dde8      	ble.n	8000a32 <main+0x14e>
  	}
  	printf("\r\n");
 8000a60:	4b3d      	ldr	r3, [pc, #244]	; (8000b58 <main+0x274>)
 8000a62:	0018      	movs	r0, r3
 8000a64:	f004 ffce 	bl	8005a04 <puts>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  	int c = 0;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	60bb      	str	r3, [r7, #8]
//		printf("ret = %d\r\n", ret);
//		++c;
//		}

//		printf("Switching to RX (%08lX)\r\n", my_address);
		NRF905_rx(&NRF905);
 8000a6c:	4b37      	ldr	r3, [pc, #220]	; (8000b4c <main+0x268>)
 8000a6e:	0018      	movs	r0, r3
 8000a70:	f004 f85a 	bl	8004b28 <NRF905_rx>
//		uint32_t wait = rand() % 21 + 20;
//		printf("Waiting for max %ld ms\r\n", wait * 100);
		uint8_t response_ok = 0;
 8000a74:	2313      	movs	r3, #19
 8000a76:	18fb      	adds	r3, r7, r3
 8000a78:	2200      	movs	r2, #0
 8000a7a:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < 500; ++i) {
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	60fb      	str	r3, [r7, #12]
 8000a80:	e035      	b.n	8000aee <main+0x20a>
			uint8_t state_DR = NRF905_data_ready(&NRF905);
 8000a82:	4b32      	ldr	r3, [pc, #200]	; (8000b4c <main+0x268>)
 8000a84:	0018      	movs	r0, r3
 8000a86:	f003 fff1 	bl	8004a6c <NRF905_data_ready>
 8000a8a:	0002      	movs	r2, r0
 8000a8c:	1dfb      	adds	r3, r7, #7
 8000a8e:	701a      	strb	r2, [r3, #0]
			uint8_t state_AM = NRF905_address_matched(&NRF905);
 8000a90:	4b2e      	ldr	r3, [pc, #184]	; (8000b4c <main+0x268>)
 8000a92:	0018      	movs	r0, r3
 8000a94:	f004 f80e 	bl	8004ab4 <NRF905_address_matched>
 8000a98:	0002      	movs	r2, r0
 8000a9a:	1dbb      	adds	r3, r7, #6
 8000a9c:	701a      	strb	r2, [r3, #0]

			if (state_DR && state_AM) {
 8000a9e:	1dfb      	adds	r3, r7, #7
 8000aa0:	781b      	ldrb	r3, [r3, #0]
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d020      	beq.n	8000ae8 <main+0x204>
 8000aa6:	1dbb      	adds	r3, r7, #6
 8000aa8:	781b      	ldrb	r3, [r3, #0]
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d01c      	beq.n	8000ae8 <main+0x204>
				NRF905_read_it(&NRF905, (uint8_t*)nrf905_payload_buffer, NRF905_MAX_PAYLOAD+1);
 8000aae:	492b      	ldr	r1, [pc, #172]	; (8000b5c <main+0x278>)
 8000ab0:	4b26      	ldr	r3, [pc, #152]	; (8000b4c <main+0x268>)
 8000ab2:	2221      	movs	r2, #33	; 0x21
 8000ab4:	0018      	movs	r0, r3
 8000ab6:	f004 f85b 	bl	8004b70 <NRF905_read_it>
				nrf905_payload_buffer[NRF905_MAX_PAYLOAD] = 0x00;
 8000aba:	4b28      	ldr	r3, [pc, #160]	; (8000b5c <main+0x278>)
 8000abc:	2220      	movs	r2, #32
 8000abe:	2100      	movs	r1, #0
 8000ac0:	5499      	strb	r1, [r3, r2]
//				printf("C: %d\r\n",c);
//				printf("Received0: %d\r\n", nrf905_payload_buffer[0]);
//				printf("Received1: %d\r\n", nrf905_payload_buffer[1]);
//				printf("Received2: %d\r\n", nrf905_payload_buffer[2]);
//				printf("Received3: %d\r\n", nrf905_payload_buffer[3]);
				if(nrf905_payload_buffer[2]==0xD3){
 8000ac2:	4b26      	ldr	r3, [pc, #152]	; (8000b5c <main+0x278>)
 8000ac4:	789b      	ldrb	r3, [r3, #2]
 8000ac6:	2bd3      	cmp	r3, #211	; 0xd3
 8000ac8:	d109      	bne.n	8000ade <main+0x1fa>
					writeToShiftRegister(0x00000000 + RELAY07);
 8000aca:	2080      	movs	r0, #128	; 0x80
 8000acc:	f7ff fdd6 	bl	800067c <writeToShiftRegister>
					HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_SET);
 8000ad0:	23a0      	movs	r3, #160	; 0xa0
 8000ad2:	05db      	lsls	r3, r3, #23
 8000ad4:	2201      	movs	r2, #1
 8000ad6:	2120      	movs	r1, #32
 8000ad8:	0018      	movs	r0, r3
 8000ada:	f000 feae 	bl	800183a <HAL_GPIO_WritePin>
				}


//				printf("Switching to TX (%08lX)\r\n", my_address);
//				HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_SET);
				response_ok = 1;
 8000ade:	2313      	movs	r3, #19
 8000ae0:	18fb      	adds	r3, r7, r3
 8000ae2:	2201      	movs	r2, #1
 8000ae4:	701a      	strb	r2, [r3, #0]
				break;
 8000ae6:	e007      	b.n	8000af8 <main+0x214>
		for (int i = 0; i < 500; ++i) {
 8000ae8:	68fb      	ldr	r3, [r7, #12]
 8000aea:	3301      	adds	r3, #1
 8000aec:	60fb      	str	r3, [r7, #12]
 8000aee:	68fa      	ldr	r2, [r7, #12]
 8000af0:	23fa      	movs	r3, #250	; 0xfa
 8000af2:	005b      	lsls	r3, r3, #1
 8000af4:	429a      	cmp	r2, r3
 8000af6:	dbc4      	blt.n	8000a82 <main+0x19e>
			}

		}
		HAL_Delay(60);
 8000af8:	203c      	movs	r0, #60	; 0x3c
 8000afa:	f000 fb9b 	bl	8001234 <HAL_Delay>

		if (response_ok == 0) {
 8000afe:	2313      	movs	r3, #19
 8000b00:	18fb      	adds	r3, r7, r3
 8000b02:	781b      	ldrb	r3, [r3, #0]
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d1b1      	bne.n	8000a6c <main+0x188>
			HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8000b08:	23a0      	movs	r3, #160	; 0xa0
 8000b0a:	05db      	lsls	r3, r3, #23
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	2120      	movs	r1, #32
 8000b10:	0018      	movs	r0, r3
 8000b12:	f000 fe92 	bl	800183a <HAL_GPIO_WritePin>
			writeToShiftRegister(0x00000000);
 8000b16:	2000      	movs	r0, #0
 8000b18:	f7ff fdb0 	bl	800067c <writeToShiftRegister>
	while (1) {
 8000b1c:	e7a6      	b.n	8000a6c <main+0x188>
 8000b1e:	46c0      	nop			; (mov r8, r8)
 8000b20:	1fff7590 	.word	0x1fff7590
 8000b24:	20000094 	.word	0x20000094
 8000b28:	50000400 	.word	0x50000400
 8000b2c:	20000180 	.word	0x20000180
 8000b30:	20000118 	.word	0x20000118
 8000b34:	200000e8 	.word	0x200000e8
 8000b38:	20000110 	.word	0x20000110
 8000b3c:	a2b5d154 	.word	0xa2b5d154
 8000b40:	20000114 	.word	0x20000114
 8000b44:	08006838 	.word	0x08006838
 8000b48:	08006854 	.word	0x08006854
 8000b4c:	200000d4 	.word	0x200000d4
 8000b50:	08006870 	.word	0x08006870
 8000b54:	0800687c 	.word	0x0800687c
 8000b58:	08006884 	.word	0x08006884
 8000b5c:	200000ec 	.word	0x200000ec

08000b60 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b60:	b590      	push	{r4, r7, lr}
 8000b62:	b093      	sub	sp, #76	; 0x4c
 8000b64:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b66:	2410      	movs	r4, #16
 8000b68:	193b      	adds	r3, r7, r4
 8000b6a:	0018      	movs	r0, r3
 8000b6c:	2338      	movs	r3, #56	; 0x38
 8000b6e:	001a      	movs	r2, r3
 8000b70:	2100      	movs	r1, #0
 8000b72:	f004 fe1a 	bl	80057aa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b76:	003b      	movs	r3, r7
 8000b78:	0018      	movs	r0, r3
 8000b7a:	2310      	movs	r3, #16
 8000b7c:	001a      	movs	r2, r3
 8000b7e:	2100      	movs	r1, #0
 8000b80:	f004 fe13 	bl	80057aa <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b84:	2380      	movs	r3, #128	; 0x80
 8000b86:	009b      	lsls	r3, r3, #2
 8000b88:	0018      	movs	r0, r3
 8000b8a:	f000 fe73 	bl	8001874 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b8e:	193b      	adds	r3, r7, r4
 8000b90:	2202      	movs	r2, #2
 8000b92:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b94:	193b      	adds	r3, r7, r4
 8000b96:	2280      	movs	r2, #128	; 0x80
 8000b98:	0052      	lsls	r2, r2, #1
 8000b9a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000b9c:	193b      	adds	r3, r7, r4
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ba2:	193b      	adds	r3, r7, r4
 8000ba4:	2240      	movs	r2, #64	; 0x40
 8000ba6:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000ba8:	193b      	adds	r3, r7, r4
 8000baa:	2200      	movs	r2, #0
 8000bac:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bae:	193b      	adds	r3, r7, r4
 8000bb0:	0018      	movs	r0, r3
 8000bb2:	f000 feab 	bl	800190c <HAL_RCC_OscConfig>
 8000bb6:	1e03      	subs	r3, r0, #0
 8000bb8:	d001      	beq.n	8000bbe <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000bba:	f000 f827 	bl	8000c0c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bbe:	003b      	movs	r3, r7
 8000bc0:	2207      	movs	r2, #7
 8000bc2:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000bc4:	003b      	movs	r3, r7
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bca:	003b      	movs	r3, r7
 8000bcc:	2200      	movs	r2, #0
 8000bce:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000bd0:	003b      	movs	r3, r7
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000bd6:	003b      	movs	r3, r7
 8000bd8:	2100      	movs	r1, #0
 8000bda:	0018      	movs	r0, r3
 8000bdc:	f001 f9b0 	bl	8001f40 <HAL_RCC_ClockConfig>
 8000be0:	1e03      	subs	r3, r0, #0
 8000be2:	d001      	beq.n	8000be8 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000be4:	f000 f812 	bl	8000c0c <Error_Handler>
  }
}
 8000be8:	46c0      	nop			; (mov r8, r8)
 8000bea:	46bd      	mov	sp, r7
 8000bec:	b013      	add	sp, #76	; 0x4c
 8000bee:	bd90      	pop	{r4, r7, pc}

08000bf0 <HAL_SPI_RxCpltCallback>:

/* USER CODE BEGIN 4 */
int call = 0;
void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi){
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b082      	sub	sp, #8
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]

//	printf("%d\n", call++);
	NRF905_spi_deselect(&NRF905);
 8000bf8:	4b03      	ldr	r3, [pc, #12]	; (8000c08 <HAL_SPI_RxCpltCallback+0x18>)
 8000bfa:	0018      	movs	r0, r3
 8000bfc:	f003 ffe0 	bl	8004bc0 <NRF905_spi_deselect>
//rx_flag = true;

}
 8000c00:	46c0      	nop			; (mov r8, r8)
 8000c02:	46bd      	mov	sp, r7
 8000c04:	b002      	add	sp, #8
 8000c06:	bd80      	pop	{r7, pc}
 8000c08:	200000d4 	.word	0x200000d4

08000c0c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c10:	b672      	cpsid	i
}
 8000c12:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c14:	e7fe      	b.n	8000c14 <Error_Handler+0x8>
	...

08000c18 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8000c1c:	4b1b      	ldr	r3, [pc, #108]	; (8000c8c <MX_SPI2_Init+0x74>)
 8000c1e:	4a1c      	ldr	r2, [pc, #112]	; (8000c90 <MX_SPI2_Init+0x78>)
 8000c20:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000c22:	4b1a      	ldr	r3, [pc, #104]	; (8000c8c <MX_SPI2_Init+0x74>)
 8000c24:	2282      	movs	r2, #130	; 0x82
 8000c26:	0052      	lsls	r2, r2, #1
 8000c28:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000c2a:	4b18      	ldr	r3, [pc, #96]	; (8000c8c <MX_SPI2_Init+0x74>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c30:	4b16      	ldr	r3, [pc, #88]	; (8000c8c <MX_SPI2_Init+0x74>)
 8000c32:	22e0      	movs	r2, #224	; 0xe0
 8000c34:	00d2      	lsls	r2, r2, #3
 8000c36:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c38:	4b14      	ldr	r3, [pc, #80]	; (8000c8c <MX_SPI2_Init+0x74>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c3e:	4b13      	ldr	r3, [pc, #76]	; (8000c8c <MX_SPI2_Init+0x74>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000c44:	4b11      	ldr	r3, [pc, #68]	; (8000c8c <MX_SPI2_Init+0x74>)
 8000c46:	2280      	movs	r2, #128	; 0x80
 8000c48:	0092      	lsls	r2, r2, #2
 8000c4a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000c4c:	4b0f      	ldr	r3, [pc, #60]	; (8000c8c <MX_SPI2_Init+0x74>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c52:	4b0e      	ldr	r3, [pc, #56]	; (8000c8c <MX_SPI2_Init+0x74>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c58:	4b0c      	ldr	r3, [pc, #48]	; (8000c8c <MX_SPI2_Init+0x74>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c5e:	4b0b      	ldr	r3, [pc, #44]	; (8000c8c <MX_SPI2_Init+0x74>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000c64:	4b09      	ldr	r3, [pc, #36]	; (8000c8c <MX_SPI2_Init+0x74>)
 8000c66:	2207      	movs	r2, #7
 8000c68:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000c6a:	4b08      	ldr	r3, [pc, #32]	; (8000c8c <MX_SPI2_Init+0x74>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000c70:	4b06      	ldr	r3, [pc, #24]	; (8000c8c <MX_SPI2_Init+0x74>)
 8000c72:	2208      	movs	r2, #8
 8000c74:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000c76:	4b05      	ldr	r3, [pc, #20]	; (8000c8c <MX_SPI2_Init+0x74>)
 8000c78:	0018      	movs	r0, r3
 8000c7a:	f001 fcc3 	bl	8002604 <HAL_SPI_Init>
 8000c7e:	1e03      	subs	r3, r0, #0
 8000c80:	d001      	beq.n	8000c86 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8000c82:	f7ff ffc3 	bl	8000c0c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000c86:	46c0      	nop			; (mov r8, r8)
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}
 8000c8c:	20000118 	.word	0x20000118
 8000c90:	40003800 	.word	0x40003800

08000c94 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000c94:	b590      	push	{r4, r7, lr}
 8000c96:	b08b      	sub	sp, #44	; 0x2c
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c9c:	2414      	movs	r4, #20
 8000c9e:	193b      	adds	r3, r7, r4
 8000ca0:	0018      	movs	r0, r3
 8000ca2:	2314      	movs	r3, #20
 8000ca4:	001a      	movs	r2, r3
 8000ca6:	2100      	movs	r1, #0
 8000ca8:	f004 fd7f 	bl	80057aa <memset>
  if(spiHandle->Instance==SPI2)
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	4a30      	ldr	r2, [pc, #192]	; (8000d74 <HAL_SPI_MspInit+0xe0>)
 8000cb2:	4293      	cmp	r3, r2
 8000cb4:	d159      	bne.n	8000d6a <HAL_SPI_MspInit+0xd6>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000cb6:	4b30      	ldr	r3, [pc, #192]	; (8000d78 <HAL_SPI_MspInit+0xe4>)
 8000cb8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000cba:	4b2f      	ldr	r3, [pc, #188]	; (8000d78 <HAL_SPI_MspInit+0xe4>)
 8000cbc:	2180      	movs	r1, #128	; 0x80
 8000cbe:	01c9      	lsls	r1, r1, #7
 8000cc0:	430a      	orrs	r2, r1
 8000cc2:	63da      	str	r2, [r3, #60]	; 0x3c
 8000cc4:	4b2c      	ldr	r3, [pc, #176]	; (8000d78 <HAL_SPI_MspInit+0xe4>)
 8000cc6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000cc8:	2380      	movs	r3, #128	; 0x80
 8000cca:	01db      	lsls	r3, r3, #7
 8000ccc:	4013      	ands	r3, r2
 8000cce:	613b      	str	r3, [r7, #16]
 8000cd0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cd2:	4b29      	ldr	r3, [pc, #164]	; (8000d78 <HAL_SPI_MspInit+0xe4>)
 8000cd4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000cd6:	4b28      	ldr	r3, [pc, #160]	; (8000d78 <HAL_SPI_MspInit+0xe4>)
 8000cd8:	2104      	movs	r1, #4
 8000cda:	430a      	orrs	r2, r1
 8000cdc:	635a      	str	r2, [r3, #52]	; 0x34
 8000cde:	4b26      	ldr	r3, [pc, #152]	; (8000d78 <HAL_SPI_MspInit+0xe4>)
 8000ce0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ce2:	2204      	movs	r2, #4
 8000ce4:	4013      	ands	r3, r2
 8000ce6:	60fb      	str	r3, [r7, #12]
 8000ce8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cea:	4b23      	ldr	r3, [pc, #140]	; (8000d78 <HAL_SPI_MspInit+0xe4>)
 8000cec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000cee:	4b22      	ldr	r3, [pc, #136]	; (8000d78 <HAL_SPI_MspInit+0xe4>)
 8000cf0:	2101      	movs	r1, #1
 8000cf2:	430a      	orrs	r2, r1
 8000cf4:	635a      	str	r2, [r3, #52]	; 0x34
 8000cf6:	4b20      	ldr	r3, [pc, #128]	; (8000d78 <HAL_SPI_MspInit+0xe4>)
 8000cf8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000cfa:	2201      	movs	r2, #1
 8000cfc:	4013      	ands	r3, r2
 8000cfe:	60bb      	str	r3, [r7, #8]
 8000d00:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PA0     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000d02:	193b      	adds	r3, r7, r4
 8000d04:	220c      	movs	r2, #12
 8000d06:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d08:	193b      	adds	r3, r7, r4
 8000d0a:	2202      	movs	r2, #2
 8000d0c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0e:	193b      	adds	r3, r7, r4
 8000d10:	2200      	movs	r2, #0
 8000d12:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d14:	193b      	adds	r3, r7, r4
 8000d16:	2200      	movs	r2, #0
 8000d18:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_SPI2;
 8000d1a:	193b      	adds	r3, r7, r4
 8000d1c:	2201      	movs	r2, #1
 8000d1e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d20:	193b      	adds	r3, r7, r4
 8000d22:	4a16      	ldr	r2, [pc, #88]	; (8000d7c <HAL_SPI_MspInit+0xe8>)
 8000d24:	0019      	movs	r1, r3
 8000d26:	0010      	movs	r0, r2
 8000d28:	f000 fc06 	bl	8001538 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000d2c:	0021      	movs	r1, r4
 8000d2e:	187b      	adds	r3, r7, r1
 8000d30:	2201      	movs	r2, #1
 8000d32:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d34:	187b      	adds	r3, r7, r1
 8000d36:	2202      	movs	r2, #2
 8000d38:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3a:	187b      	adds	r3, r7, r1
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d40:	187b      	adds	r3, r7, r1
 8000d42:	2200      	movs	r2, #0
 8000d44:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 8000d46:	187b      	adds	r3, r7, r1
 8000d48:	2200      	movs	r2, #0
 8000d4a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d4c:	187a      	adds	r2, r7, r1
 8000d4e:	23a0      	movs	r3, #160	; 0xa0
 8000d50:	05db      	lsls	r3, r3, #23
 8000d52:	0011      	movs	r1, r2
 8000d54:	0018      	movs	r0, r3
 8000d56:	f000 fbef 	bl	8001538 <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	2100      	movs	r1, #0
 8000d5e:	201a      	movs	r0, #26
 8000d60:	f000 fb4e 	bl	8001400 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8000d64:	201a      	movs	r0, #26
 8000d66:	f000 fb60 	bl	800142a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8000d6a:	46c0      	nop			; (mov r8, r8)
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	b00b      	add	sp, #44	; 0x2c
 8000d70:	bd90      	pop	{r4, r7, pc}
 8000d72:	46c0      	nop			; (mov r8, r8)
 8000d74:	40003800 	.word	0x40003800
 8000d78:	40021000 	.word	0x40021000
 8000d7c:	50000800 	.word	0x50000800

08000d80 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b082      	sub	sp, #8
 8000d84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d86:	4b11      	ldr	r3, [pc, #68]	; (8000dcc <HAL_MspInit+0x4c>)
 8000d88:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d8a:	4b10      	ldr	r3, [pc, #64]	; (8000dcc <HAL_MspInit+0x4c>)
 8000d8c:	2101      	movs	r1, #1
 8000d8e:	430a      	orrs	r2, r1
 8000d90:	641a      	str	r2, [r3, #64]	; 0x40
 8000d92:	4b0e      	ldr	r3, [pc, #56]	; (8000dcc <HAL_MspInit+0x4c>)
 8000d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d96:	2201      	movs	r2, #1
 8000d98:	4013      	ands	r3, r2
 8000d9a:	607b      	str	r3, [r7, #4]
 8000d9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d9e:	4b0b      	ldr	r3, [pc, #44]	; (8000dcc <HAL_MspInit+0x4c>)
 8000da0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000da2:	4b0a      	ldr	r3, [pc, #40]	; (8000dcc <HAL_MspInit+0x4c>)
 8000da4:	2180      	movs	r1, #128	; 0x80
 8000da6:	0549      	lsls	r1, r1, #21
 8000da8:	430a      	orrs	r2, r1
 8000daa:	63da      	str	r2, [r3, #60]	; 0x3c
 8000dac:	4b07      	ldr	r3, [pc, #28]	; (8000dcc <HAL_MspInit+0x4c>)
 8000dae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000db0:	2380      	movs	r3, #128	; 0x80
 8000db2:	055b      	lsls	r3, r3, #21
 8000db4:	4013      	ands	r3, r2
 8000db6:	603b      	str	r3, [r7, #0]
 8000db8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 8000dba:	23c0      	movs	r3, #192	; 0xc0
 8000dbc:	00db      	lsls	r3, r3, #3
 8000dbe:	0018      	movs	r0, r3
 8000dc0:	f000 fa5c 	bl	800127c <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dc4:	46c0      	nop			; (mov r8, r8)
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	b002      	add	sp, #8
 8000dca:	bd80      	pop	{r7, pc}
 8000dcc:	40021000 	.word	0x40021000

08000dd0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000dd4:	e7fe      	b.n	8000dd4 <NMI_Handler+0x4>

08000dd6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dd6:	b580      	push	{r7, lr}
 8000dd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dda:	e7fe      	b.n	8000dda <HardFault_Handler+0x4>

08000ddc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000de0:	46c0      	nop			; (mov r8, r8)
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}

08000de6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000de6:	b580      	push	{r7, lr}
 8000de8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dea:	46c0      	nop			; (mov r8, r8)
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}

08000df0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000df4:	f000 fa02 	bl	80011fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000df8:	46c0      	nop			; (mov r8, r8)
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}
	...

08000e00 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8000e04:	4b03      	ldr	r3, [pc, #12]	; (8000e14 <SPI2_IRQHandler+0x14>)
 8000e06:	0018      	movs	r0, r3
 8000e08:	f002 f814 	bl	8002e34 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8000e0c:	46c0      	nop			; (mov r8, r8)
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	46c0      	nop			; (mov r8, r8)
 8000e14:	20000118 	.word	0x20000118

08000e18 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b086      	sub	sp, #24
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e20:	4a14      	ldr	r2, [pc, #80]	; (8000e74 <_sbrk+0x5c>)
 8000e22:	4b15      	ldr	r3, [pc, #84]	; (8000e78 <_sbrk+0x60>)
 8000e24:	1ad3      	subs	r3, r2, r3
 8000e26:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e28:	697b      	ldr	r3, [r7, #20]
 8000e2a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e2c:	4b13      	ldr	r3, [pc, #76]	; (8000e7c <_sbrk+0x64>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d102      	bne.n	8000e3a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e34:	4b11      	ldr	r3, [pc, #68]	; (8000e7c <_sbrk+0x64>)
 8000e36:	4a12      	ldr	r2, [pc, #72]	; (8000e80 <_sbrk+0x68>)
 8000e38:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e3a:	4b10      	ldr	r3, [pc, #64]	; (8000e7c <_sbrk+0x64>)
 8000e3c:	681a      	ldr	r2, [r3, #0]
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	18d3      	adds	r3, r2, r3
 8000e42:	693a      	ldr	r2, [r7, #16]
 8000e44:	429a      	cmp	r2, r3
 8000e46:	d207      	bcs.n	8000e58 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e48:	f004 fb80 	bl	800554c <__errno>
 8000e4c:	0003      	movs	r3, r0
 8000e4e:	220c      	movs	r2, #12
 8000e50:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e52:	2301      	movs	r3, #1
 8000e54:	425b      	negs	r3, r3
 8000e56:	e009      	b.n	8000e6c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e58:	4b08      	ldr	r3, [pc, #32]	; (8000e7c <_sbrk+0x64>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e5e:	4b07      	ldr	r3, [pc, #28]	; (8000e7c <_sbrk+0x64>)
 8000e60:	681a      	ldr	r2, [r3, #0]
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	18d2      	adds	r2, r2, r3
 8000e66:	4b05      	ldr	r3, [pc, #20]	; (8000e7c <_sbrk+0x64>)
 8000e68:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000e6a:	68fb      	ldr	r3, [r7, #12]
}
 8000e6c:	0018      	movs	r0, r3
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	b006      	add	sp, #24
 8000e72:	bd80      	pop	{r7, pc}
 8000e74:	20009000 	.word	0x20009000
 8000e78:	00000400 	.word	0x00000400
 8000e7c:	2000017c 	.word	0x2000017c
 8000e80:	20000320 	.word	0x20000320

08000e84 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e88:	46c0      	nop			; (mov r8, r8)
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}
	...

08000e90 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b088      	sub	sp, #32
 8000e94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e96:	2310      	movs	r3, #16
 8000e98:	18fb      	adds	r3, r7, r3
 8000e9a:	0018      	movs	r0, r3
 8000e9c:	2310      	movs	r3, #16
 8000e9e:	001a      	movs	r2, r3
 8000ea0:	2100      	movs	r1, #0
 8000ea2:	f004 fc82 	bl	80057aa <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ea6:	1d3b      	adds	r3, r7, #4
 8000ea8:	0018      	movs	r0, r3
 8000eaa:	230c      	movs	r3, #12
 8000eac:	001a      	movs	r2, r3
 8000eae:	2100      	movs	r1, #0
 8000eb0:	f004 fc7b 	bl	80057aa <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000eb4:	4b1e      	ldr	r3, [pc, #120]	; (8000f30 <MX_TIM3_Init+0xa0>)
 8000eb6:	4a1f      	ldr	r2, [pc, #124]	; (8000f34 <MX_TIM3_Init+0xa4>)
 8000eb8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 79;
 8000eba:	4b1d      	ldr	r3, [pc, #116]	; (8000f30 <MX_TIM3_Init+0xa0>)
 8000ebc:	224f      	movs	r2, #79	; 0x4f
 8000ebe:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ec0:	4b1b      	ldr	r3, [pc, #108]	; (8000f30 <MX_TIM3_Init+0xa0>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000ec6:	4b1a      	ldr	r3, [pc, #104]	; (8000f30 <MX_TIM3_Init+0xa0>)
 8000ec8:	4a1b      	ldr	r2, [pc, #108]	; (8000f38 <MX_TIM3_Init+0xa8>)
 8000eca:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ecc:	4b18      	ldr	r3, [pc, #96]	; (8000f30 <MX_TIM3_Init+0xa0>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ed2:	4b17      	ldr	r3, [pc, #92]	; (8000f30 <MX_TIM3_Init+0xa0>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000ed8:	4b15      	ldr	r3, [pc, #84]	; (8000f30 <MX_TIM3_Init+0xa0>)
 8000eda:	0018      	movs	r0, r3
 8000edc:	f002 fc79 	bl	80037d2 <HAL_TIM_Base_Init>
 8000ee0:	1e03      	subs	r3, r0, #0
 8000ee2:	d001      	beq.n	8000ee8 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8000ee4:	f7ff fe92 	bl	8000c0c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ee8:	2110      	movs	r1, #16
 8000eea:	187b      	adds	r3, r7, r1
 8000eec:	2280      	movs	r2, #128	; 0x80
 8000eee:	0152      	lsls	r2, r2, #5
 8000ef0:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000ef2:	187a      	adds	r2, r7, r1
 8000ef4:	4b0e      	ldr	r3, [pc, #56]	; (8000f30 <MX_TIM3_Init+0xa0>)
 8000ef6:	0011      	movs	r1, r2
 8000ef8:	0018      	movs	r0, r3
 8000efa:	f002 fcc3 	bl	8003884 <HAL_TIM_ConfigClockSource>
 8000efe:	1e03      	subs	r3, r0, #0
 8000f00:	d001      	beq.n	8000f06 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8000f02:	f7ff fe83 	bl	8000c0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f06:	1d3b      	adds	r3, r7, #4
 8000f08:	2200      	movs	r2, #0
 8000f0a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f0c:	1d3b      	adds	r3, r7, #4
 8000f0e:	2200      	movs	r2, #0
 8000f10:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000f12:	1d3a      	adds	r2, r7, #4
 8000f14:	4b06      	ldr	r3, [pc, #24]	; (8000f30 <MX_TIM3_Init+0xa0>)
 8000f16:	0011      	movs	r1, r2
 8000f18:	0018      	movs	r0, r3
 8000f1a:	f002 fea5 	bl	8003c68 <HAL_TIMEx_MasterConfigSynchronization>
 8000f1e:	1e03      	subs	r3, r0, #0
 8000f20:	d001      	beq.n	8000f26 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8000f22:	f7ff fe73 	bl	8000c0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000f26:	46c0      	nop			; (mov r8, r8)
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	b008      	add	sp, #32
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	46c0      	nop			; (mov r8, r8)
 8000f30:	20000180 	.word	0x20000180
 8000f34:	40000400 	.word	0x40000400
 8000f38:	0000ffff 	.word	0x0000ffff

08000f3c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b084      	sub	sp, #16
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	4a09      	ldr	r2, [pc, #36]	; (8000f70 <HAL_TIM_Base_MspInit+0x34>)
 8000f4a:	4293      	cmp	r3, r2
 8000f4c:	d10b      	bne.n	8000f66 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000f4e:	4b09      	ldr	r3, [pc, #36]	; (8000f74 <HAL_TIM_Base_MspInit+0x38>)
 8000f50:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000f52:	4b08      	ldr	r3, [pc, #32]	; (8000f74 <HAL_TIM_Base_MspInit+0x38>)
 8000f54:	2102      	movs	r1, #2
 8000f56:	430a      	orrs	r2, r1
 8000f58:	63da      	str	r2, [r3, #60]	; 0x3c
 8000f5a:	4b06      	ldr	r3, [pc, #24]	; (8000f74 <HAL_TIM_Base_MspInit+0x38>)
 8000f5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f5e:	2202      	movs	r2, #2
 8000f60:	4013      	ands	r3, r2
 8000f62:	60fb      	str	r3, [r7, #12]
 8000f64:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8000f66:	46c0      	nop			; (mov r8, r8)
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	b004      	add	sp, #16
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	46c0      	nop			; (mov r8, r8)
 8000f70:	40000400 	.word	0x40000400
 8000f74:	40021000 	.word	0x40021000

08000f78 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000f7c:	4b23      	ldr	r3, [pc, #140]	; (800100c <MX_USART2_UART_Init+0x94>)
 8000f7e:	4a24      	ldr	r2, [pc, #144]	; (8001010 <MX_USART2_UART_Init+0x98>)
 8000f80:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000f82:	4b22      	ldr	r3, [pc, #136]	; (800100c <MX_USART2_UART_Init+0x94>)
 8000f84:	22e1      	movs	r2, #225	; 0xe1
 8000f86:	0252      	lsls	r2, r2, #9
 8000f88:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f8a:	4b20      	ldr	r3, [pc, #128]	; (800100c <MX_USART2_UART_Init+0x94>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f90:	4b1e      	ldr	r3, [pc, #120]	; (800100c <MX_USART2_UART_Init+0x94>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f96:	4b1d      	ldr	r3, [pc, #116]	; (800100c <MX_USART2_UART_Init+0x94>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f9c:	4b1b      	ldr	r3, [pc, #108]	; (800100c <MX_USART2_UART_Init+0x94>)
 8000f9e:	220c      	movs	r2, #12
 8000fa0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fa2:	4b1a      	ldr	r3, [pc, #104]	; (800100c <MX_USART2_UART_Init+0x94>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fa8:	4b18      	ldr	r3, [pc, #96]	; (800100c <MX_USART2_UART_Init+0x94>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000fae:	4b17      	ldr	r3, [pc, #92]	; (800100c <MX_USART2_UART_Init+0x94>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000fb4:	4b15      	ldr	r3, [pc, #84]	; (800100c <MX_USART2_UART_Init+0x94>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000fba:	4b14      	ldr	r3, [pc, #80]	; (800100c <MX_USART2_UART_Init+0x94>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000fc0:	4b12      	ldr	r3, [pc, #72]	; (800100c <MX_USART2_UART_Init+0x94>)
 8000fc2:	0018      	movs	r0, r3
 8000fc4:	f002 febe 	bl	8003d44 <HAL_UART_Init>
 8000fc8:	1e03      	subs	r3, r0, #0
 8000fca:	d001      	beq.n	8000fd0 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000fcc:	f7ff fe1e 	bl	8000c0c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000fd0:	4b0e      	ldr	r3, [pc, #56]	; (800100c <MX_USART2_UART_Init+0x94>)
 8000fd2:	2100      	movs	r1, #0
 8000fd4:	0018      	movs	r0, r3
 8000fd6:	f003 fbc9 	bl	800476c <HAL_UARTEx_SetTxFifoThreshold>
 8000fda:	1e03      	subs	r3, r0, #0
 8000fdc:	d001      	beq.n	8000fe2 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000fde:	f7ff fe15 	bl	8000c0c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000fe2:	4b0a      	ldr	r3, [pc, #40]	; (800100c <MX_USART2_UART_Init+0x94>)
 8000fe4:	2100      	movs	r1, #0
 8000fe6:	0018      	movs	r0, r3
 8000fe8:	f003 fc00 	bl	80047ec <HAL_UARTEx_SetRxFifoThreshold>
 8000fec:	1e03      	subs	r3, r0, #0
 8000fee:	d001      	beq.n	8000ff4 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000ff0:	f7ff fe0c 	bl	8000c0c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000ff4:	4b05      	ldr	r3, [pc, #20]	; (800100c <MX_USART2_UART_Init+0x94>)
 8000ff6:	0018      	movs	r0, r3
 8000ff8:	f003 fb7e 	bl	80046f8 <HAL_UARTEx_DisableFifoMode>
 8000ffc:	1e03      	subs	r3, r0, #0
 8000ffe:	d001      	beq.n	8001004 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001000:	f7ff fe04 	bl	8000c0c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001004:	46c0      	nop			; (mov r8, r8)
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
 800100a:	46c0      	nop			; (mov r8, r8)
 800100c:	200001cc 	.word	0x200001cc
 8001010:	40004400 	.word	0x40004400

08001014 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001014:	b590      	push	{r4, r7, lr}
 8001016:	b097      	sub	sp, #92	; 0x5c
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800101c:	2344      	movs	r3, #68	; 0x44
 800101e:	18fb      	adds	r3, r7, r3
 8001020:	0018      	movs	r0, r3
 8001022:	2314      	movs	r3, #20
 8001024:	001a      	movs	r2, r3
 8001026:	2100      	movs	r1, #0
 8001028:	f004 fbbf 	bl	80057aa <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800102c:	2410      	movs	r4, #16
 800102e:	193b      	adds	r3, r7, r4
 8001030:	0018      	movs	r0, r3
 8001032:	2334      	movs	r3, #52	; 0x34
 8001034:	001a      	movs	r2, r3
 8001036:	2100      	movs	r1, #0
 8001038:	f004 fbb7 	bl	80057aa <memset>
  if(uartHandle->Instance==USART2)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	4a22      	ldr	r2, [pc, #136]	; (80010cc <HAL_UART_MspInit+0xb8>)
 8001042:	4293      	cmp	r3, r2
 8001044:	d13e      	bne.n	80010c4 <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001046:	193b      	adds	r3, r7, r4
 8001048:	2202      	movs	r2, #2
 800104a:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800104c:	193b      	adds	r3, r7, r4
 800104e:	2200      	movs	r2, #0
 8001050:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001052:	193b      	adds	r3, r7, r4
 8001054:	0018      	movs	r0, r3
 8001056:	f001 f91d 	bl	8002294 <HAL_RCCEx_PeriphCLKConfig>
 800105a:	1e03      	subs	r3, r0, #0
 800105c:	d001      	beq.n	8001062 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800105e:	f7ff fdd5 	bl	8000c0c <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001062:	4b1b      	ldr	r3, [pc, #108]	; (80010d0 <HAL_UART_MspInit+0xbc>)
 8001064:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001066:	4b1a      	ldr	r3, [pc, #104]	; (80010d0 <HAL_UART_MspInit+0xbc>)
 8001068:	2180      	movs	r1, #128	; 0x80
 800106a:	0289      	lsls	r1, r1, #10
 800106c:	430a      	orrs	r2, r1
 800106e:	63da      	str	r2, [r3, #60]	; 0x3c
 8001070:	4b17      	ldr	r3, [pc, #92]	; (80010d0 <HAL_UART_MspInit+0xbc>)
 8001072:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001074:	2380      	movs	r3, #128	; 0x80
 8001076:	029b      	lsls	r3, r3, #10
 8001078:	4013      	ands	r3, r2
 800107a:	60fb      	str	r3, [r7, #12]
 800107c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800107e:	4b14      	ldr	r3, [pc, #80]	; (80010d0 <HAL_UART_MspInit+0xbc>)
 8001080:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001082:	4b13      	ldr	r3, [pc, #76]	; (80010d0 <HAL_UART_MspInit+0xbc>)
 8001084:	2101      	movs	r1, #1
 8001086:	430a      	orrs	r2, r1
 8001088:	635a      	str	r2, [r3, #52]	; 0x34
 800108a:	4b11      	ldr	r3, [pc, #68]	; (80010d0 <HAL_UART_MspInit+0xbc>)
 800108c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800108e:	2201      	movs	r2, #1
 8001090:	4013      	ands	r3, r2
 8001092:	60bb      	str	r3, [r7, #8]
 8001094:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8001096:	2144      	movs	r1, #68	; 0x44
 8001098:	187b      	adds	r3, r7, r1
 800109a:	220c      	movs	r2, #12
 800109c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800109e:	187b      	adds	r3, r7, r1
 80010a0:	2202      	movs	r2, #2
 80010a2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010a4:	187b      	adds	r3, r7, r1
 80010a6:	2201      	movs	r2, #1
 80010a8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010aa:	187b      	adds	r3, r7, r1
 80010ac:	2200      	movs	r2, #0
 80010ae:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80010b0:	187b      	adds	r3, r7, r1
 80010b2:	2201      	movs	r2, #1
 80010b4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010b6:	187a      	adds	r2, r7, r1
 80010b8:	23a0      	movs	r3, #160	; 0xa0
 80010ba:	05db      	lsls	r3, r3, #23
 80010bc:	0011      	movs	r1, r2
 80010be:	0018      	movs	r0, r3
 80010c0:	f000 fa3a 	bl	8001538 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80010c4:	46c0      	nop			; (mov r8, r8)
 80010c6:	46bd      	mov	sp, r7
 80010c8:	b017      	add	sp, #92	; 0x5c
 80010ca:	bd90      	pop	{r4, r7, pc}
 80010cc:	40004400 	.word	0x40004400
 80010d0:	40021000 	.word	0x40021000

080010d4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80010d4:	480d      	ldr	r0, [pc, #52]	; (800110c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80010d6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80010d8:	f7ff fed4 	bl	8000e84 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010dc:	480c      	ldr	r0, [pc, #48]	; (8001110 <LoopForever+0x6>)
  ldr r1, =_edata
 80010de:	490d      	ldr	r1, [pc, #52]	; (8001114 <LoopForever+0xa>)
  ldr r2, =_sidata
 80010e0:	4a0d      	ldr	r2, [pc, #52]	; (8001118 <LoopForever+0xe>)
  movs r3, #0
 80010e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010e4:	e002      	b.n	80010ec <LoopCopyDataInit>

080010e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010ea:	3304      	adds	r3, #4

080010ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010f0:	d3f9      	bcc.n	80010e6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010f2:	4a0a      	ldr	r2, [pc, #40]	; (800111c <LoopForever+0x12>)
  ldr r4, =_ebss
 80010f4:	4c0a      	ldr	r4, [pc, #40]	; (8001120 <LoopForever+0x16>)
  movs r3, #0
 80010f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010f8:	e001      	b.n	80010fe <LoopFillZerobss>

080010fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010fc:	3204      	adds	r2, #4

080010fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001100:	d3fb      	bcc.n	80010fa <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001102:	f004 fb2b 	bl	800575c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8001106:	f7ff fbed 	bl	80008e4 <main>

0800110a <LoopForever>:

LoopForever:
  b LoopForever
 800110a:	e7fe      	b.n	800110a <LoopForever>
  ldr   r0, =_estack
 800110c:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8001110:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001114:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8001118:	08006a8c 	.word	0x08006a8c
  ldr r2, =_sbss
 800111c:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8001120:	2000031c 	.word	0x2000031c

08001124 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001124:	e7fe      	b.n	8001124 <ADC1_COMP_IRQHandler>
	...

08001128 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b082      	sub	sp, #8
 800112c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800112e:	1dfb      	adds	r3, r7, #7
 8001130:	2200      	movs	r2, #0
 8001132:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001134:	4b0b      	ldr	r3, [pc, #44]	; (8001164 <HAL_Init+0x3c>)
 8001136:	681a      	ldr	r2, [r3, #0]
 8001138:	4b0a      	ldr	r3, [pc, #40]	; (8001164 <HAL_Init+0x3c>)
 800113a:	2180      	movs	r1, #128	; 0x80
 800113c:	0049      	lsls	r1, r1, #1
 800113e:	430a      	orrs	r2, r1
 8001140:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001142:	2000      	movs	r0, #0
 8001144:	f000 f810 	bl	8001168 <HAL_InitTick>
 8001148:	1e03      	subs	r3, r0, #0
 800114a:	d003      	beq.n	8001154 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 800114c:	1dfb      	adds	r3, r7, #7
 800114e:	2201      	movs	r2, #1
 8001150:	701a      	strb	r2, [r3, #0]
 8001152:	e001      	b.n	8001158 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8001154:	f7ff fe14 	bl	8000d80 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001158:	1dfb      	adds	r3, r7, #7
 800115a:	781b      	ldrb	r3, [r3, #0]
}
 800115c:	0018      	movs	r0, r3
 800115e:	46bd      	mov	sp, r7
 8001160:	b002      	add	sp, #8
 8001162:	bd80      	pop	{r7, pc}
 8001164:	40022000 	.word	0x40022000

08001168 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001168:	b590      	push	{r4, r7, lr}
 800116a:	b085      	sub	sp, #20
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001170:	230f      	movs	r3, #15
 8001172:	18fb      	adds	r3, r7, r3
 8001174:	2200      	movs	r2, #0
 8001176:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8001178:	4b1d      	ldr	r3, [pc, #116]	; (80011f0 <HAL_InitTick+0x88>)
 800117a:	781b      	ldrb	r3, [r3, #0]
 800117c:	2b00      	cmp	r3, #0
 800117e:	d02b      	beq.n	80011d8 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8001180:	4b1c      	ldr	r3, [pc, #112]	; (80011f4 <HAL_InitTick+0x8c>)
 8001182:	681c      	ldr	r4, [r3, #0]
 8001184:	4b1a      	ldr	r3, [pc, #104]	; (80011f0 <HAL_InitTick+0x88>)
 8001186:	781b      	ldrb	r3, [r3, #0]
 8001188:	0019      	movs	r1, r3
 800118a:	23fa      	movs	r3, #250	; 0xfa
 800118c:	0098      	lsls	r0, r3, #2
 800118e:	f7fe ffcb 	bl	8000128 <__udivsi3>
 8001192:	0003      	movs	r3, r0
 8001194:	0019      	movs	r1, r3
 8001196:	0020      	movs	r0, r4
 8001198:	f7fe ffc6 	bl	8000128 <__udivsi3>
 800119c:	0003      	movs	r3, r0
 800119e:	0018      	movs	r0, r3
 80011a0:	f000 f953 	bl	800144a <HAL_SYSTICK_Config>
 80011a4:	1e03      	subs	r3, r0, #0
 80011a6:	d112      	bne.n	80011ce <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	2b03      	cmp	r3, #3
 80011ac:	d80a      	bhi.n	80011c4 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011ae:	6879      	ldr	r1, [r7, #4]
 80011b0:	2301      	movs	r3, #1
 80011b2:	425b      	negs	r3, r3
 80011b4:	2200      	movs	r2, #0
 80011b6:	0018      	movs	r0, r3
 80011b8:	f000 f922 	bl	8001400 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80011bc:	4b0e      	ldr	r3, [pc, #56]	; (80011f8 <HAL_InitTick+0x90>)
 80011be:	687a      	ldr	r2, [r7, #4]
 80011c0:	601a      	str	r2, [r3, #0]
 80011c2:	e00d      	b.n	80011e0 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80011c4:	230f      	movs	r3, #15
 80011c6:	18fb      	adds	r3, r7, r3
 80011c8:	2201      	movs	r2, #1
 80011ca:	701a      	strb	r2, [r3, #0]
 80011cc:	e008      	b.n	80011e0 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80011ce:	230f      	movs	r3, #15
 80011d0:	18fb      	adds	r3, r7, r3
 80011d2:	2201      	movs	r2, #1
 80011d4:	701a      	strb	r2, [r3, #0]
 80011d6:	e003      	b.n	80011e0 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80011d8:	230f      	movs	r3, #15
 80011da:	18fb      	adds	r3, r7, r3
 80011dc:	2201      	movs	r2, #1
 80011de:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80011e0:	230f      	movs	r3, #15
 80011e2:	18fb      	adds	r3, r7, r3
 80011e4:	781b      	ldrb	r3, [r3, #0]
}
 80011e6:	0018      	movs	r0, r3
 80011e8:	46bd      	mov	sp, r7
 80011ea:	b005      	add	sp, #20
 80011ec:	bd90      	pop	{r4, r7, pc}
 80011ee:	46c0      	nop			; (mov r8, r8)
 80011f0:	20000008 	.word	0x20000008
 80011f4:	20000000 	.word	0x20000000
 80011f8:	20000004 	.word	0x20000004

080011fc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001200:	4b05      	ldr	r3, [pc, #20]	; (8001218 <HAL_IncTick+0x1c>)
 8001202:	781b      	ldrb	r3, [r3, #0]
 8001204:	001a      	movs	r2, r3
 8001206:	4b05      	ldr	r3, [pc, #20]	; (800121c <HAL_IncTick+0x20>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	18d2      	adds	r2, r2, r3
 800120c:	4b03      	ldr	r3, [pc, #12]	; (800121c <HAL_IncTick+0x20>)
 800120e:	601a      	str	r2, [r3, #0]
}
 8001210:	46c0      	nop			; (mov r8, r8)
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}
 8001216:	46c0      	nop			; (mov r8, r8)
 8001218:	20000008 	.word	0x20000008
 800121c:	2000025c 	.word	0x2000025c

08001220 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	af00      	add	r7, sp, #0
  return uwTick;
 8001224:	4b02      	ldr	r3, [pc, #8]	; (8001230 <HAL_GetTick+0x10>)
 8001226:	681b      	ldr	r3, [r3, #0]
}
 8001228:	0018      	movs	r0, r3
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}
 800122e:	46c0      	nop			; (mov r8, r8)
 8001230:	2000025c 	.word	0x2000025c

08001234 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b084      	sub	sp, #16
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800123c:	f7ff fff0 	bl	8001220 <HAL_GetTick>
 8001240:	0003      	movs	r3, r0
 8001242:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	3301      	adds	r3, #1
 800124c:	d005      	beq.n	800125a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800124e:	4b0a      	ldr	r3, [pc, #40]	; (8001278 <HAL_Delay+0x44>)
 8001250:	781b      	ldrb	r3, [r3, #0]
 8001252:	001a      	movs	r2, r3
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	189b      	adds	r3, r3, r2
 8001258:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800125a:	46c0      	nop			; (mov r8, r8)
 800125c:	f7ff ffe0 	bl	8001220 <HAL_GetTick>
 8001260:	0002      	movs	r2, r0
 8001262:	68bb      	ldr	r3, [r7, #8]
 8001264:	1ad3      	subs	r3, r2, r3
 8001266:	68fa      	ldr	r2, [r7, #12]
 8001268:	429a      	cmp	r2, r3
 800126a:	d8f7      	bhi.n	800125c <HAL_Delay+0x28>
  {
  }
}
 800126c:	46c0      	nop			; (mov r8, r8)
 800126e:	46c0      	nop			; (mov r8, r8)
 8001270:	46bd      	mov	sp, r7
 8001272:	b004      	add	sp, #16
 8001274:	bd80      	pop	{r7, pc}
 8001276:	46c0      	nop			; (mov r8, r8)
 8001278:	20000008 	.word	0x20000008

0800127c <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b082      	sub	sp, #8
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8001284:	4b06      	ldr	r3, [pc, #24]	; (80012a0 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	4a06      	ldr	r2, [pc, #24]	; (80012a4 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 800128a:	4013      	ands	r3, r2
 800128c:	0019      	movs	r1, r3
 800128e:	4b04      	ldr	r3, [pc, #16]	; (80012a0 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8001290:	687a      	ldr	r2, [r7, #4]
 8001292:	430a      	orrs	r2, r1
 8001294:	601a      	str	r2, [r3, #0]
}
 8001296:	46c0      	nop			; (mov r8, r8)
 8001298:	46bd      	mov	sp, r7
 800129a:	b002      	add	sp, #8
 800129c:	bd80      	pop	{r7, pc}
 800129e:	46c0      	nop			; (mov r8, r8)
 80012a0:	40010000 	.word	0x40010000
 80012a4:	fffff9ff 	.word	0xfffff9ff

080012a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b082      	sub	sp, #8
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	0002      	movs	r2, r0
 80012b0:	1dfb      	adds	r3, r7, #7
 80012b2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80012b4:	1dfb      	adds	r3, r7, #7
 80012b6:	781b      	ldrb	r3, [r3, #0]
 80012b8:	2b7f      	cmp	r3, #127	; 0x7f
 80012ba:	d809      	bhi.n	80012d0 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012bc:	1dfb      	adds	r3, r7, #7
 80012be:	781b      	ldrb	r3, [r3, #0]
 80012c0:	001a      	movs	r2, r3
 80012c2:	231f      	movs	r3, #31
 80012c4:	401a      	ands	r2, r3
 80012c6:	4b04      	ldr	r3, [pc, #16]	; (80012d8 <__NVIC_EnableIRQ+0x30>)
 80012c8:	2101      	movs	r1, #1
 80012ca:	4091      	lsls	r1, r2
 80012cc:	000a      	movs	r2, r1
 80012ce:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 80012d0:	46c0      	nop			; (mov r8, r8)
 80012d2:	46bd      	mov	sp, r7
 80012d4:	b002      	add	sp, #8
 80012d6:	bd80      	pop	{r7, pc}
 80012d8:	e000e100 	.word	0xe000e100

080012dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012dc:	b590      	push	{r4, r7, lr}
 80012de:	b083      	sub	sp, #12
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	0002      	movs	r2, r0
 80012e4:	6039      	str	r1, [r7, #0]
 80012e6:	1dfb      	adds	r3, r7, #7
 80012e8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80012ea:	1dfb      	adds	r3, r7, #7
 80012ec:	781b      	ldrb	r3, [r3, #0]
 80012ee:	2b7f      	cmp	r3, #127	; 0x7f
 80012f0:	d828      	bhi.n	8001344 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80012f2:	4a2f      	ldr	r2, [pc, #188]	; (80013b0 <__NVIC_SetPriority+0xd4>)
 80012f4:	1dfb      	adds	r3, r7, #7
 80012f6:	781b      	ldrb	r3, [r3, #0]
 80012f8:	b25b      	sxtb	r3, r3
 80012fa:	089b      	lsrs	r3, r3, #2
 80012fc:	33c0      	adds	r3, #192	; 0xc0
 80012fe:	009b      	lsls	r3, r3, #2
 8001300:	589b      	ldr	r3, [r3, r2]
 8001302:	1dfa      	adds	r2, r7, #7
 8001304:	7812      	ldrb	r2, [r2, #0]
 8001306:	0011      	movs	r1, r2
 8001308:	2203      	movs	r2, #3
 800130a:	400a      	ands	r2, r1
 800130c:	00d2      	lsls	r2, r2, #3
 800130e:	21ff      	movs	r1, #255	; 0xff
 8001310:	4091      	lsls	r1, r2
 8001312:	000a      	movs	r2, r1
 8001314:	43d2      	mvns	r2, r2
 8001316:	401a      	ands	r2, r3
 8001318:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	019b      	lsls	r3, r3, #6
 800131e:	22ff      	movs	r2, #255	; 0xff
 8001320:	401a      	ands	r2, r3
 8001322:	1dfb      	adds	r3, r7, #7
 8001324:	781b      	ldrb	r3, [r3, #0]
 8001326:	0018      	movs	r0, r3
 8001328:	2303      	movs	r3, #3
 800132a:	4003      	ands	r3, r0
 800132c:	00db      	lsls	r3, r3, #3
 800132e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001330:	481f      	ldr	r0, [pc, #124]	; (80013b0 <__NVIC_SetPriority+0xd4>)
 8001332:	1dfb      	adds	r3, r7, #7
 8001334:	781b      	ldrb	r3, [r3, #0]
 8001336:	b25b      	sxtb	r3, r3
 8001338:	089b      	lsrs	r3, r3, #2
 800133a:	430a      	orrs	r2, r1
 800133c:	33c0      	adds	r3, #192	; 0xc0
 800133e:	009b      	lsls	r3, r3, #2
 8001340:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001342:	e031      	b.n	80013a8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001344:	4a1b      	ldr	r2, [pc, #108]	; (80013b4 <__NVIC_SetPriority+0xd8>)
 8001346:	1dfb      	adds	r3, r7, #7
 8001348:	781b      	ldrb	r3, [r3, #0]
 800134a:	0019      	movs	r1, r3
 800134c:	230f      	movs	r3, #15
 800134e:	400b      	ands	r3, r1
 8001350:	3b08      	subs	r3, #8
 8001352:	089b      	lsrs	r3, r3, #2
 8001354:	3306      	adds	r3, #6
 8001356:	009b      	lsls	r3, r3, #2
 8001358:	18d3      	adds	r3, r2, r3
 800135a:	3304      	adds	r3, #4
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	1dfa      	adds	r2, r7, #7
 8001360:	7812      	ldrb	r2, [r2, #0]
 8001362:	0011      	movs	r1, r2
 8001364:	2203      	movs	r2, #3
 8001366:	400a      	ands	r2, r1
 8001368:	00d2      	lsls	r2, r2, #3
 800136a:	21ff      	movs	r1, #255	; 0xff
 800136c:	4091      	lsls	r1, r2
 800136e:	000a      	movs	r2, r1
 8001370:	43d2      	mvns	r2, r2
 8001372:	401a      	ands	r2, r3
 8001374:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	019b      	lsls	r3, r3, #6
 800137a:	22ff      	movs	r2, #255	; 0xff
 800137c:	401a      	ands	r2, r3
 800137e:	1dfb      	adds	r3, r7, #7
 8001380:	781b      	ldrb	r3, [r3, #0]
 8001382:	0018      	movs	r0, r3
 8001384:	2303      	movs	r3, #3
 8001386:	4003      	ands	r3, r0
 8001388:	00db      	lsls	r3, r3, #3
 800138a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800138c:	4809      	ldr	r0, [pc, #36]	; (80013b4 <__NVIC_SetPriority+0xd8>)
 800138e:	1dfb      	adds	r3, r7, #7
 8001390:	781b      	ldrb	r3, [r3, #0]
 8001392:	001c      	movs	r4, r3
 8001394:	230f      	movs	r3, #15
 8001396:	4023      	ands	r3, r4
 8001398:	3b08      	subs	r3, #8
 800139a:	089b      	lsrs	r3, r3, #2
 800139c:	430a      	orrs	r2, r1
 800139e:	3306      	adds	r3, #6
 80013a0:	009b      	lsls	r3, r3, #2
 80013a2:	18c3      	adds	r3, r0, r3
 80013a4:	3304      	adds	r3, #4
 80013a6:	601a      	str	r2, [r3, #0]
}
 80013a8:	46c0      	nop			; (mov r8, r8)
 80013aa:	46bd      	mov	sp, r7
 80013ac:	b003      	add	sp, #12
 80013ae:	bd90      	pop	{r4, r7, pc}
 80013b0:	e000e100 	.word	0xe000e100
 80013b4:	e000ed00 	.word	0xe000ed00

080013b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b082      	sub	sp, #8
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	1e5a      	subs	r2, r3, #1
 80013c4:	2380      	movs	r3, #128	; 0x80
 80013c6:	045b      	lsls	r3, r3, #17
 80013c8:	429a      	cmp	r2, r3
 80013ca:	d301      	bcc.n	80013d0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013cc:	2301      	movs	r3, #1
 80013ce:	e010      	b.n	80013f2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013d0:	4b0a      	ldr	r3, [pc, #40]	; (80013fc <SysTick_Config+0x44>)
 80013d2:	687a      	ldr	r2, [r7, #4]
 80013d4:	3a01      	subs	r2, #1
 80013d6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013d8:	2301      	movs	r3, #1
 80013da:	425b      	negs	r3, r3
 80013dc:	2103      	movs	r1, #3
 80013de:	0018      	movs	r0, r3
 80013e0:	f7ff ff7c 	bl	80012dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013e4:	4b05      	ldr	r3, [pc, #20]	; (80013fc <SysTick_Config+0x44>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013ea:	4b04      	ldr	r3, [pc, #16]	; (80013fc <SysTick_Config+0x44>)
 80013ec:	2207      	movs	r2, #7
 80013ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013f0:	2300      	movs	r3, #0
}
 80013f2:	0018      	movs	r0, r3
 80013f4:	46bd      	mov	sp, r7
 80013f6:	b002      	add	sp, #8
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	46c0      	nop			; (mov r8, r8)
 80013fc:	e000e010 	.word	0xe000e010

08001400 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b084      	sub	sp, #16
 8001404:	af00      	add	r7, sp, #0
 8001406:	60b9      	str	r1, [r7, #8]
 8001408:	607a      	str	r2, [r7, #4]
 800140a:	210f      	movs	r1, #15
 800140c:	187b      	adds	r3, r7, r1
 800140e:	1c02      	adds	r2, r0, #0
 8001410:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8001412:	68ba      	ldr	r2, [r7, #8]
 8001414:	187b      	adds	r3, r7, r1
 8001416:	781b      	ldrb	r3, [r3, #0]
 8001418:	b25b      	sxtb	r3, r3
 800141a:	0011      	movs	r1, r2
 800141c:	0018      	movs	r0, r3
 800141e:	f7ff ff5d 	bl	80012dc <__NVIC_SetPriority>
}
 8001422:	46c0      	nop			; (mov r8, r8)
 8001424:	46bd      	mov	sp, r7
 8001426:	b004      	add	sp, #16
 8001428:	bd80      	pop	{r7, pc}

0800142a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800142a:	b580      	push	{r7, lr}
 800142c:	b082      	sub	sp, #8
 800142e:	af00      	add	r7, sp, #0
 8001430:	0002      	movs	r2, r0
 8001432:	1dfb      	adds	r3, r7, #7
 8001434:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001436:	1dfb      	adds	r3, r7, #7
 8001438:	781b      	ldrb	r3, [r3, #0]
 800143a:	b25b      	sxtb	r3, r3
 800143c:	0018      	movs	r0, r3
 800143e:	f7ff ff33 	bl	80012a8 <__NVIC_EnableIRQ>
}
 8001442:	46c0      	nop			; (mov r8, r8)
 8001444:	46bd      	mov	sp, r7
 8001446:	b002      	add	sp, #8
 8001448:	bd80      	pop	{r7, pc}

0800144a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800144a:	b580      	push	{r7, lr}
 800144c:	b082      	sub	sp, #8
 800144e:	af00      	add	r7, sp, #0
 8001450:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	0018      	movs	r0, r3
 8001456:	f7ff ffaf 	bl	80013b8 <SysTick_Config>
 800145a:	0003      	movs	r3, r0
}
 800145c:	0018      	movs	r0, r3
 800145e:	46bd      	mov	sp, r7
 8001460:	b002      	add	sp, #8
 8001462:	bd80      	pop	{r7, pc}

08001464 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b084      	sub	sp, #16
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800146c:	210f      	movs	r1, #15
 800146e:	187b      	adds	r3, r7, r1
 8001470:	2200      	movs	r2, #0
 8001472:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	2225      	movs	r2, #37	; 0x25
 8001478:	5c9b      	ldrb	r3, [r3, r2]
 800147a:	b2db      	uxtb	r3, r3
 800147c:	2b02      	cmp	r3, #2
 800147e:	d006      	beq.n	800148e <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	2204      	movs	r2, #4
 8001484:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001486:	187b      	adds	r3, r7, r1
 8001488:	2201      	movs	r2, #1
 800148a:	701a      	strb	r2, [r3, #0]
 800148c:	e049      	b.n	8001522 <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	681a      	ldr	r2, [r3, #0]
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	210e      	movs	r1, #14
 800149a:	438a      	bics	r2, r1
 800149c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	681a      	ldr	r2, [r3, #0]
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	2101      	movs	r1, #1
 80014aa:	438a      	bics	r2, r1
 80014ac:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014b2:	681a      	ldr	r2, [r3, #0]
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014b8:	491d      	ldr	r1, [pc, #116]	; (8001530 <HAL_DMA_Abort_IT+0xcc>)
 80014ba:	400a      	ands	r2, r1
 80014bc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 80014be:	4b1d      	ldr	r3, [pc, #116]	; (8001534 <HAL_DMA_Abort_IT+0xd0>)
 80014c0:	6859      	ldr	r1, [r3, #4]
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014c6:	221c      	movs	r2, #28
 80014c8:	4013      	ands	r3, r2
 80014ca:	2201      	movs	r2, #1
 80014cc:	409a      	lsls	r2, r3
 80014ce:	4b19      	ldr	r3, [pc, #100]	; (8001534 <HAL_DMA_Abort_IT+0xd0>)
 80014d0:	430a      	orrs	r2, r1
 80014d2:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80014d8:	687a      	ldr	r2, [r7, #4]
 80014da:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80014dc:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d00c      	beq.n	8001500 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80014ea:	681a      	ldr	r2, [r3, #0]
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80014f0:	490f      	ldr	r1, [pc, #60]	; (8001530 <HAL_DMA_Abort_IT+0xcc>)
 80014f2:	400a      	ands	r2, r1
 80014f4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014fa:	687a      	ldr	r2, [r7, #4]
 80014fc:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80014fe:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	2225      	movs	r2, #37	; 0x25
 8001504:	2101      	movs	r1, #1
 8001506:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	2224      	movs	r2, #36	; 0x24
 800150c:	2100      	movs	r1, #0
 800150e:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001514:	2b00      	cmp	r3, #0
 8001516:	d004      	beq.n	8001522 <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800151c:	687a      	ldr	r2, [r7, #4]
 800151e:	0010      	movs	r0, r2
 8001520:	4798      	blx	r3
    }
  }
  return status;
 8001522:	230f      	movs	r3, #15
 8001524:	18fb      	adds	r3, r7, r3
 8001526:	781b      	ldrb	r3, [r3, #0]
}
 8001528:	0018      	movs	r0, r3
 800152a:	46bd      	mov	sp, r7
 800152c:	b004      	add	sp, #16
 800152e:	bd80      	pop	{r7, pc}
 8001530:	fffffeff 	.word	0xfffffeff
 8001534:	40020000 	.word	0x40020000

08001538 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b086      	sub	sp, #24
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
 8001540:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001542:	2300      	movs	r3, #0
 8001544:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001546:	e147      	b.n	80017d8 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	2101      	movs	r1, #1
 800154e:	697a      	ldr	r2, [r7, #20]
 8001550:	4091      	lsls	r1, r2
 8001552:	000a      	movs	r2, r1
 8001554:	4013      	ands	r3, r2
 8001556:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	2b00      	cmp	r3, #0
 800155c:	d100      	bne.n	8001560 <HAL_GPIO_Init+0x28>
 800155e:	e138      	b.n	80017d2 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	2203      	movs	r2, #3
 8001566:	4013      	ands	r3, r2
 8001568:	2b01      	cmp	r3, #1
 800156a:	d005      	beq.n	8001578 <HAL_GPIO_Init+0x40>
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	2203      	movs	r2, #3
 8001572:	4013      	ands	r3, r2
 8001574:	2b02      	cmp	r3, #2
 8001576:	d130      	bne.n	80015da <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	689b      	ldr	r3, [r3, #8]
 800157c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800157e:	697b      	ldr	r3, [r7, #20]
 8001580:	005b      	lsls	r3, r3, #1
 8001582:	2203      	movs	r2, #3
 8001584:	409a      	lsls	r2, r3
 8001586:	0013      	movs	r3, r2
 8001588:	43da      	mvns	r2, r3
 800158a:	693b      	ldr	r3, [r7, #16]
 800158c:	4013      	ands	r3, r2
 800158e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	68da      	ldr	r2, [r3, #12]
 8001594:	697b      	ldr	r3, [r7, #20]
 8001596:	005b      	lsls	r3, r3, #1
 8001598:	409a      	lsls	r2, r3
 800159a:	0013      	movs	r3, r2
 800159c:	693a      	ldr	r2, [r7, #16]
 800159e:	4313      	orrs	r3, r2
 80015a0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	693a      	ldr	r2, [r7, #16]
 80015a6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80015ae:	2201      	movs	r2, #1
 80015b0:	697b      	ldr	r3, [r7, #20]
 80015b2:	409a      	lsls	r2, r3
 80015b4:	0013      	movs	r3, r2
 80015b6:	43da      	mvns	r2, r3
 80015b8:	693b      	ldr	r3, [r7, #16]
 80015ba:	4013      	ands	r3, r2
 80015bc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	685b      	ldr	r3, [r3, #4]
 80015c2:	091b      	lsrs	r3, r3, #4
 80015c4:	2201      	movs	r2, #1
 80015c6:	401a      	ands	r2, r3
 80015c8:	697b      	ldr	r3, [r7, #20]
 80015ca:	409a      	lsls	r2, r3
 80015cc:	0013      	movs	r3, r2
 80015ce:	693a      	ldr	r2, [r7, #16]
 80015d0:	4313      	orrs	r3, r2
 80015d2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	693a      	ldr	r2, [r7, #16]
 80015d8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	685b      	ldr	r3, [r3, #4]
 80015de:	2203      	movs	r2, #3
 80015e0:	4013      	ands	r3, r2
 80015e2:	2b03      	cmp	r3, #3
 80015e4:	d017      	beq.n	8001616 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	68db      	ldr	r3, [r3, #12]
 80015ea:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80015ec:	697b      	ldr	r3, [r7, #20]
 80015ee:	005b      	lsls	r3, r3, #1
 80015f0:	2203      	movs	r2, #3
 80015f2:	409a      	lsls	r2, r3
 80015f4:	0013      	movs	r3, r2
 80015f6:	43da      	mvns	r2, r3
 80015f8:	693b      	ldr	r3, [r7, #16]
 80015fa:	4013      	ands	r3, r2
 80015fc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	689a      	ldr	r2, [r3, #8]
 8001602:	697b      	ldr	r3, [r7, #20]
 8001604:	005b      	lsls	r3, r3, #1
 8001606:	409a      	lsls	r2, r3
 8001608:	0013      	movs	r3, r2
 800160a:	693a      	ldr	r2, [r7, #16]
 800160c:	4313      	orrs	r3, r2
 800160e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	693a      	ldr	r2, [r7, #16]
 8001614:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	685b      	ldr	r3, [r3, #4]
 800161a:	2203      	movs	r2, #3
 800161c:	4013      	ands	r3, r2
 800161e:	2b02      	cmp	r3, #2
 8001620:	d123      	bne.n	800166a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001622:	697b      	ldr	r3, [r7, #20]
 8001624:	08da      	lsrs	r2, r3, #3
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	3208      	adds	r2, #8
 800162a:	0092      	lsls	r2, r2, #2
 800162c:	58d3      	ldr	r3, [r2, r3]
 800162e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001630:	697b      	ldr	r3, [r7, #20]
 8001632:	2207      	movs	r2, #7
 8001634:	4013      	ands	r3, r2
 8001636:	009b      	lsls	r3, r3, #2
 8001638:	220f      	movs	r2, #15
 800163a:	409a      	lsls	r2, r3
 800163c:	0013      	movs	r3, r2
 800163e:	43da      	mvns	r2, r3
 8001640:	693b      	ldr	r3, [r7, #16]
 8001642:	4013      	ands	r3, r2
 8001644:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	691a      	ldr	r2, [r3, #16]
 800164a:	697b      	ldr	r3, [r7, #20]
 800164c:	2107      	movs	r1, #7
 800164e:	400b      	ands	r3, r1
 8001650:	009b      	lsls	r3, r3, #2
 8001652:	409a      	lsls	r2, r3
 8001654:	0013      	movs	r3, r2
 8001656:	693a      	ldr	r2, [r7, #16]
 8001658:	4313      	orrs	r3, r2
 800165a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800165c:	697b      	ldr	r3, [r7, #20]
 800165e:	08da      	lsrs	r2, r3, #3
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	3208      	adds	r2, #8
 8001664:	0092      	lsls	r2, r2, #2
 8001666:	6939      	ldr	r1, [r7, #16]
 8001668:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001670:	697b      	ldr	r3, [r7, #20]
 8001672:	005b      	lsls	r3, r3, #1
 8001674:	2203      	movs	r2, #3
 8001676:	409a      	lsls	r2, r3
 8001678:	0013      	movs	r3, r2
 800167a:	43da      	mvns	r2, r3
 800167c:	693b      	ldr	r3, [r7, #16]
 800167e:	4013      	ands	r3, r2
 8001680:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	685b      	ldr	r3, [r3, #4]
 8001686:	2203      	movs	r2, #3
 8001688:	401a      	ands	r2, r3
 800168a:	697b      	ldr	r3, [r7, #20]
 800168c:	005b      	lsls	r3, r3, #1
 800168e:	409a      	lsls	r2, r3
 8001690:	0013      	movs	r3, r2
 8001692:	693a      	ldr	r2, [r7, #16]
 8001694:	4313      	orrs	r3, r2
 8001696:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	693a      	ldr	r2, [r7, #16]
 800169c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	685a      	ldr	r2, [r3, #4]
 80016a2:	23c0      	movs	r3, #192	; 0xc0
 80016a4:	029b      	lsls	r3, r3, #10
 80016a6:	4013      	ands	r3, r2
 80016a8:	d100      	bne.n	80016ac <HAL_GPIO_Init+0x174>
 80016aa:	e092      	b.n	80017d2 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80016ac:	4a50      	ldr	r2, [pc, #320]	; (80017f0 <HAL_GPIO_Init+0x2b8>)
 80016ae:	697b      	ldr	r3, [r7, #20]
 80016b0:	089b      	lsrs	r3, r3, #2
 80016b2:	3318      	adds	r3, #24
 80016b4:	009b      	lsls	r3, r3, #2
 80016b6:	589b      	ldr	r3, [r3, r2]
 80016b8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80016ba:	697b      	ldr	r3, [r7, #20]
 80016bc:	2203      	movs	r2, #3
 80016be:	4013      	ands	r3, r2
 80016c0:	00db      	lsls	r3, r3, #3
 80016c2:	220f      	movs	r2, #15
 80016c4:	409a      	lsls	r2, r3
 80016c6:	0013      	movs	r3, r2
 80016c8:	43da      	mvns	r2, r3
 80016ca:	693b      	ldr	r3, [r7, #16]
 80016cc:	4013      	ands	r3, r2
 80016ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80016d0:	687a      	ldr	r2, [r7, #4]
 80016d2:	23a0      	movs	r3, #160	; 0xa0
 80016d4:	05db      	lsls	r3, r3, #23
 80016d6:	429a      	cmp	r2, r3
 80016d8:	d013      	beq.n	8001702 <HAL_GPIO_Init+0x1ca>
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	4a45      	ldr	r2, [pc, #276]	; (80017f4 <HAL_GPIO_Init+0x2bc>)
 80016de:	4293      	cmp	r3, r2
 80016e0:	d00d      	beq.n	80016fe <HAL_GPIO_Init+0x1c6>
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	4a44      	ldr	r2, [pc, #272]	; (80017f8 <HAL_GPIO_Init+0x2c0>)
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d007      	beq.n	80016fa <HAL_GPIO_Init+0x1c2>
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	4a43      	ldr	r2, [pc, #268]	; (80017fc <HAL_GPIO_Init+0x2c4>)
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d101      	bne.n	80016f6 <HAL_GPIO_Init+0x1be>
 80016f2:	2303      	movs	r3, #3
 80016f4:	e006      	b.n	8001704 <HAL_GPIO_Init+0x1cc>
 80016f6:	2305      	movs	r3, #5
 80016f8:	e004      	b.n	8001704 <HAL_GPIO_Init+0x1cc>
 80016fa:	2302      	movs	r3, #2
 80016fc:	e002      	b.n	8001704 <HAL_GPIO_Init+0x1cc>
 80016fe:	2301      	movs	r3, #1
 8001700:	e000      	b.n	8001704 <HAL_GPIO_Init+0x1cc>
 8001702:	2300      	movs	r3, #0
 8001704:	697a      	ldr	r2, [r7, #20]
 8001706:	2103      	movs	r1, #3
 8001708:	400a      	ands	r2, r1
 800170a:	00d2      	lsls	r2, r2, #3
 800170c:	4093      	lsls	r3, r2
 800170e:	693a      	ldr	r2, [r7, #16]
 8001710:	4313      	orrs	r3, r2
 8001712:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8001714:	4936      	ldr	r1, [pc, #216]	; (80017f0 <HAL_GPIO_Init+0x2b8>)
 8001716:	697b      	ldr	r3, [r7, #20]
 8001718:	089b      	lsrs	r3, r3, #2
 800171a:	3318      	adds	r3, #24
 800171c:	009b      	lsls	r3, r3, #2
 800171e:	693a      	ldr	r2, [r7, #16]
 8001720:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001722:	4b33      	ldr	r3, [pc, #204]	; (80017f0 <HAL_GPIO_Init+0x2b8>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	43da      	mvns	r2, r3
 800172c:	693b      	ldr	r3, [r7, #16]
 800172e:	4013      	ands	r3, r2
 8001730:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	685a      	ldr	r2, [r3, #4]
 8001736:	2380      	movs	r3, #128	; 0x80
 8001738:	035b      	lsls	r3, r3, #13
 800173a:	4013      	ands	r3, r2
 800173c:	d003      	beq.n	8001746 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 800173e:	693a      	ldr	r2, [r7, #16]
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	4313      	orrs	r3, r2
 8001744:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001746:	4b2a      	ldr	r3, [pc, #168]	; (80017f0 <HAL_GPIO_Init+0x2b8>)
 8001748:	693a      	ldr	r2, [r7, #16]
 800174a:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 800174c:	4b28      	ldr	r3, [pc, #160]	; (80017f0 <HAL_GPIO_Init+0x2b8>)
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	43da      	mvns	r2, r3
 8001756:	693b      	ldr	r3, [r7, #16]
 8001758:	4013      	ands	r3, r2
 800175a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	685a      	ldr	r2, [r3, #4]
 8001760:	2380      	movs	r3, #128	; 0x80
 8001762:	039b      	lsls	r3, r3, #14
 8001764:	4013      	ands	r3, r2
 8001766:	d003      	beq.n	8001770 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8001768:	693a      	ldr	r2, [r7, #16]
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	4313      	orrs	r3, r2
 800176e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001770:	4b1f      	ldr	r3, [pc, #124]	; (80017f0 <HAL_GPIO_Init+0x2b8>)
 8001772:	693a      	ldr	r2, [r7, #16]
 8001774:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001776:	4a1e      	ldr	r2, [pc, #120]	; (80017f0 <HAL_GPIO_Init+0x2b8>)
 8001778:	2384      	movs	r3, #132	; 0x84
 800177a:	58d3      	ldr	r3, [r2, r3]
 800177c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	43da      	mvns	r2, r3
 8001782:	693b      	ldr	r3, [r7, #16]
 8001784:	4013      	ands	r3, r2
 8001786:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	685a      	ldr	r2, [r3, #4]
 800178c:	2380      	movs	r3, #128	; 0x80
 800178e:	029b      	lsls	r3, r3, #10
 8001790:	4013      	ands	r3, r2
 8001792:	d003      	beq.n	800179c <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001794:	693a      	ldr	r2, [r7, #16]
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	4313      	orrs	r3, r2
 800179a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800179c:	4914      	ldr	r1, [pc, #80]	; (80017f0 <HAL_GPIO_Init+0x2b8>)
 800179e:	2284      	movs	r2, #132	; 0x84
 80017a0:	693b      	ldr	r3, [r7, #16]
 80017a2:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 80017a4:	4a12      	ldr	r2, [pc, #72]	; (80017f0 <HAL_GPIO_Init+0x2b8>)
 80017a6:	2380      	movs	r3, #128	; 0x80
 80017a8:	58d3      	ldr	r3, [r2, r3]
 80017aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	43da      	mvns	r2, r3
 80017b0:	693b      	ldr	r3, [r7, #16]
 80017b2:	4013      	ands	r3, r2
 80017b4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	685a      	ldr	r2, [r3, #4]
 80017ba:	2380      	movs	r3, #128	; 0x80
 80017bc:	025b      	lsls	r3, r3, #9
 80017be:	4013      	ands	r3, r2
 80017c0:	d003      	beq.n	80017ca <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 80017c2:	693a      	ldr	r2, [r7, #16]
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	4313      	orrs	r3, r2
 80017c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80017ca:	4909      	ldr	r1, [pc, #36]	; (80017f0 <HAL_GPIO_Init+0x2b8>)
 80017cc:	2280      	movs	r2, #128	; 0x80
 80017ce:	693b      	ldr	r3, [r7, #16]
 80017d0:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80017d2:	697b      	ldr	r3, [r7, #20]
 80017d4:	3301      	adds	r3, #1
 80017d6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	681a      	ldr	r2, [r3, #0]
 80017dc:	697b      	ldr	r3, [r7, #20]
 80017de:	40da      	lsrs	r2, r3
 80017e0:	1e13      	subs	r3, r2, #0
 80017e2:	d000      	beq.n	80017e6 <HAL_GPIO_Init+0x2ae>
 80017e4:	e6b0      	b.n	8001548 <HAL_GPIO_Init+0x10>
  }
}
 80017e6:	46c0      	nop			; (mov r8, r8)
 80017e8:	46c0      	nop			; (mov r8, r8)
 80017ea:	46bd      	mov	sp, r7
 80017ec:	b006      	add	sp, #24
 80017ee:	bd80      	pop	{r7, pc}
 80017f0:	40021800 	.word	0x40021800
 80017f4:	50000400 	.word	0x50000400
 80017f8:	50000800 	.word	0x50000800
 80017fc:	50000c00 	.word	0x50000c00

08001800 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b084      	sub	sp, #16
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
 8001808:	000a      	movs	r2, r1
 800180a:	1cbb      	adds	r3, r7, #2
 800180c:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	691b      	ldr	r3, [r3, #16]
 8001812:	1cba      	adds	r2, r7, #2
 8001814:	8812      	ldrh	r2, [r2, #0]
 8001816:	4013      	ands	r3, r2
 8001818:	d004      	beq.n	8001824 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800181a:	230f      	movs	r3, #15
 800181c:	18fb      	adds	r3, r7, r3
 800181e:	2201      	movs	r2, #1
 8001820:	701a      	strb	r2, [r3, #0]
 8001822:	e003      	b.n	800182c <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001824:	230f      	movs	r3, #15
 8001826:	18fb      	adds	r3, r7, r3
 8001828:	2200      	movs	r2, #0
 800182a:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 800182c:	230f      	movs	r3, #15
 800182e:	18fb      	adds	r3, r7, r3
 8001830:	781b      	ldrb	r3, [r3, #0]
}
 8001832:	0018      	movs	r0, r3
 8001834:	46bd      	mov	sp, r7
 8001836:	b004      	add	sp, #16
 8001838:	bd80      	pop	{r7, pc}

0800183a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800183a:	b580      	push	{r7, lr}
 800183c:	b082      	sub	sp, #8
 800183e:	af00      	add	r7, sp, #0
 8001840:	6078      	str	r0, [r7, #4]
 8001842:	0008      	movs	r0, r1
 8001844:	0011      	movs	r1, r2
 8001846:	1cbb      	adds	r3, r7, #2
 8001848:	1c02      	adds	r2, r0, #0
 800184a:	801a      	strh	r2, [r3, #0]
 800184c:	1c7b      	adds	r3, r7, #1
 800184e:	1c0a      	adds	r2, r1, #0
 8001850:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001852:	1c7b      	adds	r3, r7, #1
 8001854:	781b      	ldrb	r3, [r3, #0]
 8001856:	2b00      	cmp	r3, #0
 8001858:	d004      	beq.n	8001864 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800185a:	1cbb      	adds	r3, r7, #2
 800185c:	881a      	ldrh	r2, [r3, #0]
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001862:	e003      	b.n	800186c <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001864:	1cbb      	adds	r3, r7, #2
 8001866:	881a      	ldrh	r2, [r3, #0]
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800186c:	46c0      	nop			; (mov r8, r8)
 800186e:	46bd      	mov	sp, r7
 8001870:	b002      	add	sp, #8
 8001872:	bd80      	pop	{r7, pc}

08001874 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b084      	sub	sp, #16
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 800187c:	4b19      	ldr	r3, [pc, #100]	; (80018e4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4a19      	ldr	r2, [pc, #100]	; (80018e8 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8001882:	4013      	ands	r3, r2
 8001884:	0019      	movs	r1, r3
 8001886:	4b17      	ldr	r3, [pc, #92]	; (80018e4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001888:	687a      	ldr	r2, [r7, #4]
 800188a:	430a      	orrs	r2, r1
 800188c:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800188e:	687a      	ldr	r2, [r7, #4]
 8001890:	2380      	movs	r3, #128	; 0x80
 8001892:	009b      	lsls	r3, r3, #2
 8001894:	429a      	cmp	r2, r3
 8001896:	d11f      	bne.n	80018d8 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8001898:	4b14      	ldr	r3, [pc, #80]	; (80018ec <HAL_PWREx_ControlVoltageScaling+0x78>)
 800189a:	681a      	ldr	r2, [r3, #0]
 800189c:	0013      	movs	r3, r2
 800189e:	005b      	lsls	r3, r3, #1
 80018a0:	189b      	adds	r3, r3, r2
 80018a2:	005b      	lsls	r3, r3, #1
 80018a4:	4912      	ldr	r1, [pc, #72]	; (80018f0 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80018a6:	0018      	movs	r0, r3
 80018a8:	f7fe fc3e 	bl	8000128 <__udivsi3>
 80018ac:	0003      	movs	r3, r0
 80018ae:	3301      	adds	r3, #1
 80018b0:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80018b2:	e008      	b.n	80018c6 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d003      	beq.n	80018c2 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	3b01      	subs	r3, #1
 80018be:	60fb      	str	r3, [r7, #12]
 80018c0:	e001      	b.n	80018c6 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80018c2:	2303      	movs	r3, #3
 80018c4:	e009      	b.n	80018da <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80018c6:	4b07      	ldr	r3, [pc, #28]	; (80018e4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80018c8:	695a      	ldr	r2, [r3, #20]
 80018ca:	2380      	movs	r3, #128	; 0x80
 80018cc:	00db      	lsls	r3, r3, #3
 80018ce:	401a      	ands	r2, r3
 80018d0:	2380      	movs	r3, #128	; 0x80
 80018d2:	00db      	lsls	r3, r3, #3
 80018d4:	429a      	cmp	r2, r3
 80018d6:	d0ed      	beq.n	80018b4 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80018d8:	2300      	movs	r3, #0
}
 80018da:	0018      	movs	r0, r3
 80018dc:	46bd      	mov	sp, r7
 80018de:	b004      	add	sp, #16
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	46c0      	nop			; (mov r8, r8)
 80018e4:	40007000 	.word	0x40007000
 80018e8:	fffff9ff 	.word	0xfffff9ff
 80018ec:	20000000 	.word	0x20000000
 80018f0:	000f4240 	.word	0x000f4240

080018f4 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80018f8:	4b03      	ldr	r3, [pc, #12]	; (8001908 <LL_RCC_GetAPB1Prescaler+0x14>)
 80018fa:	689a      	ldr	r2, [r3, #8]
 80018fc:	23e0      	movs	r3, #224	; 0xe0
 80018fe:	01db      	lsls	r3, r3, #7
 8001900:	4013      	ands	r3, r2
}
 8001902:	0018      	movs	r0, r3
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}
 8001908:	40021000 	.word	0x40021000

0800190c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b088      	sub	sp, #32
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	2b00      	cmp	r3, #0
 8001918:	d101      	bne.n	800191e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800191a:	2301      	movs	r3, #1
 800191c:	e2fe      	b.n	8001f1c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	2201      	movs	r2, #1
 8001924:	4013      	ands	r3, r2
 8001926:	d100      	bne.n	800192a <HAL_RCC_OscConfig+0x1e>
 8001928:	e07c      	b.n	8001a24 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800192a:	4bc3      	ldr	r3, [pc, #780]	; (8001c38 <HAL_RCC_OscConfig+0x32c>)
 800192c:	689b      	ldr	r3, [r3, #8]
 800192e:	2238      	movs	r2, #56	; 0x38
 8001930:	4013      	ands	r3, r2
 8001932:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001934:	4bc0      	ldr	r3, [pc, #768]	; (8001c38 <HAL_RCC_OscConfig+0x32c>)
 8001936:	68db      	ldr	r3, [r3, #12]
 8001938:	2203      	movs	r2, #3
 800193a:	4013      	ands	r3, r2
 800193c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 800193e:	69bb      	ldr	r3, [r7, #24]
 8001940:	2b10      	cmp	r3, #16
 8001942:	d102      	bne.n	800194a <HAL_RCC_OscConfig+0x3e>
 8001944:	697b      	ldr	r3, [r7, #20]
 8001946:	2b03      	cmp	r3, #3
 8001948:	d002      	beq.n	8001950 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800194a:	69bb      	ldr	r3, [r7, #24]
 800194c:	2b08      	cmp	r3, #8
 800194e:	d10b      	bne.n	8001968 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001950:	4bb9      	ldr	r3, [pc, #740]	; (8001c38 <HAL_RCC_OscConfig+0x32c>)
 8001952:	681a      	ldr	r2, [r3, #0]
 8001954:	2380      	movs	r3, #128	; 0x80
 8001956:	029b      	lsls	r3, r3, #10
 8001958:	4013      	ands	r3, r2
 800195a:	d062      	beq.n	8001a22 <HAL_RCC_OscConfig+0x116>
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	2b00      	cmp	r3, #0
 8001962:	d15e      	bne.n	8001a22 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8001964:	2301      	movs	r3, #1
 8001966:	e2d9      	b.n	8001f1c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	685a      	ldr	r2, [r3, #4]
 800196c:	2380      	movs	r3, #128	; 0x80
 800196e:	025b      	lsls	r3, r3, #9
 8001970:	429a      	cmp	r2, r3
 8001972:	d107      	bne.n	8001984 <HAL_RCC_OscConfig+0x78>
 8001974:	4bb0      	ldr	r3, [pc, #704]	; (8001c38 <HAL_RCC_OscConfig+0x32c>)
 8001976:	681a      	ldr	r2, [r3, #0]
 8001978:	4baf      	ldr	r3, [pc, #700]	; (8001c38 <HAL_RCC_OscConfig+0x32c>)
 800197a:	2180      	movs	r1, #128	; 0x80
 800197c:	0249      	lsls	r1, r1, #9
 800197e:	430a      	orrs	r2, r1
 8001980:	601a      	str	r2, [r3, #0]
 8001982:	e020      	b.n	80019c6 <HAL_RCC_OscConfig+0xba>
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	685a      	ldr	r2, [r3, #4]
 8001988:	23a0      	movs	r3, #160	; 0xa0
 800198a:	02db      	lsls	r3, r3, #11
 800198c:	429a      	cmp	r2, r3
 800198e:	d10e      	bne.n	80019ae <HAL_RCC_OscConfig+0xa2>
 8001990:	4ba9      	ldr	r3, [pc, #676]	; (8001c38 <HAL_RCC_OscConfig+0x32c>)
 8001992:	681a      	ldr	r2, [r3, #0]
 8001994:	4ba8      	ldr	r3, [pc, #672]	; (8001c38 <HAL_RCC_OscConfig+0x32c>)
 8001996:	2180      	movs	r1, #128	; 0x80
 8001998:	02c9      	lsls	r1, r1, #11
 800199a:	430a      	orrs	r2, r1
 800199c:	601a      	str	r2, [r3, #0]
 800199e:	4ba6      	ldr	r3, [pc, #664]	; (8001c38 <HAL_RCC_OscConfig+0x32c>)
 80019a0:	681a      	ldr	r2, [r3, #0]
 80019a2:	4ba5      	ldr	r3, [pc, #660]	; (8001c38 <HAL_RCC_OscConfig+0x32c>)
 80019a4:	2180      	movs	r1, #128	; 0x80
 80019a6:	0249      	lsls	r1, r1, #9
 80019a8:	430a      	orrs	r2, r1
 80019aa:	601a      	str	r2, [r3, #0]
 80019ac:	e00b      	b.n	80019c6 <HAL_RCC_OscConfig+0xba>
 80019ae:	4ba2      	ldr	r3, [pc, #648]	; (8001c38 <HAL_RCC_OscConfig+0x32c>)
 80019b0:	681a      	ldr	r2, [r3, #0]
 80019b2:	4ba1      	ldr	r3, [pc, #644]	; (8001c38 <HAL_RCC_OscConfig+0x32c>)
 80019b4:	49a1      	ldr	r1, [pc, #644]	; (8001c3c <HAL_RCC_OscConfig+0x330>)
 80019b6:	400a      	ands	r2, r1
 80019b8:	601a      	str	r2, [r3, #0]
 80019ba:	4b9f      	ldr	r3, [pc, #636]	; (8001c38 <HAL_RCC_OscConfig+0x32c>)
 80019bc:	681a      	ldr	r2, [r3, #0]
 80019be:	4b9e      	ldr	r3, [pc, #632]	; (8001c38 <HAL_RCC_OscConfig+0x32c>)
 80019c0:	499f      	ldr	r1, [pc, #636]	; (8001c40 <HAL_RCC_OscConfig+0x334>)
 80019c2:	400a      	ands	r2, r1
 80019c4:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d014      	beq.n	80019f8 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019ce:	f7ff fc27 	bl	8001220 <HAL_GetTick>
 80019d2:	0003      	movs	r3, r0
 80019d4:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80019d6:	e008      	b.n	80019ea <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019d8:	f7ff fc22 	bl	8001220 <HAL_GetTick>
 80019dc:	0002      	movs	r2, r0
 80019de:	693b      	ldr	r3, [r7, #16]
 80019e0:	1ad3      	subs	r3, r2, r3
 80019e2:	2b64      	cmp	r3, #100	; 0x64
 80019e4:	d901      	bls.n	80019ea <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80019e6:	2303      	movs	r3, #3
 80019e8:	e298      	b.n	8001f1c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80019ea:	4b93      	ldr	r3, [pc, #588]	; (8001c38 <HAL_RCC_OscConfig+0x32c>)
 80019ec:	681a      	ldr	r2, [r3, #0]
 80019ee:	2380      	movs	r3, #128	; 0x80
 80019f0:	029b      	lsls	r3, r3, #10
 80019f2:	4013      	ands	r3, r2
 80019f4:	d0f0      	beq.n	80019d8 <HAL_RCC_OscConfig+0xcc>
 80019f6:	e015      	b.n	8001a24 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019f8:	f7ff fc12 	bl	8001220 <HAL_GetTick>
 80019fc:	0003      	movs	r3, r0
 80019fe:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a00:	e008      	b.n	8001a14 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a02:	f7ff fc0d 	bl	8001220 <HAL_GetTick>
 8001a06:	0002      	movs	r2, r0
 8001a08:	693b      	ldr	r3, [r7, #16]
 8001a0a:	1ad3      	subs	r3, r2, r3
 8001a0c:	2b64      	cmp	r3, #100	; 0x64
 8001a0e:	d901      	bls.n	8001a14 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001a10:	2303      	movs	r3, #3
 8001a12:	e283      	b.n	8001f1c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a14:	4b88      	ldr	r3, [pc, #544]	; (8001c38 <HAL_RCC_OscConfig+0x32c>)
 8001a16:	681a      	ldr	r2, [r3, #0]
 8001a18:	2380      	movs	r3, #128	; 0x80
 8001a1a:	029b      	lsls	r3, r3, #10
 8001a1c:	4013      	ands	r3, r2
 8001a1e:	d1f0      	bne.n	8001a02 <HAL_RCC_OscConfig+0xf6>
 8001a20:	e000      	b.n	8001a24 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a22:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	2202      	movs	r2, #2
 8001a2a:	4013      	ands	r3, r2
 8001a2c:	d100      	bne.n	8001a30 <HAL_RCC_OscConfig+0x124>
 8001a2e:	e099      	b.n	8001b64 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a30:	4b81      	ldr	r3, [pc, #516]	; (8001c38 <HAL_RCC_OscConfig+0x32c>)
 8001a32:	689b      	ldr	r3, [r3, #8]
 8001a34:	2238      	movs	r2, #56	; 0x38
 8001a36:	4013      	ands	r3, r2
 8001a38:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001a3a:	4b7f      	ldr	r3, [pc, #508]	; (8001c38 <HAL_RCC_OscConfig+0x32c>)
 8001a3c:	68db      	ldr	r3, [r3, #12]
 8001a3e:	2203      	movs	r2, #3
 8001a40:	4013      	ands	r3, r2
 8001a42:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8001a44:	69bb      	ldr	r3, [r7, #24]
 8001a46:	2b10      	cmp	r3, #16
 8001a48:	d102      	bne.n	8001a50 <HAL_RCC_OscConfig+0x144>
 8001a4a:	697b      	ldr	r3, [r7, #20]
 8001a4c:	2b02      	cmp	r3, #2
 8001a4e:	d002      	beq.n	8001a56 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8001a50:	69bb      	ldr	r3, [r7, #24]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d135      	bne.n	8001ac2 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a56:	4b78      	ldr	r3, [pc, #480]	; (8001c38 <HAL_RCC_OscConfig+0x32c>)
 8001a58:	681a      	ldr	r2, [r3, #0]
 8001a5a:	2380      	movs	r3, #128	; 0x80
 8001a5c:	00db      	lsls	r3, r3, #3
 8001a5e:	4013      	ands	r3, r2
 8001a60:	d005      	beq.n	8001a6e <HAL_RCC_OscConfig+0x162>
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	68db      	ldr	r3, [r3, #12]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d101      	bne.n	8001a6e <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	e256      	b.n	8001f1c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a6e:	4b72      	ldr	r3, [pc, #456]	; (8001c38 <HAL_RCC_OscConfig+0x32c>)
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	4a74      	ldr	r2, [pc, #464]	; (8001c44 <HAL_RCC_OscConfig+0x338>)
 8001a74:	4013      	ands	r3, r2
 8001a76:	0019      	movs	r1, r3
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	695b      	ldr	r3, [r3, #20]
 8001a7c:	021a      	lsls	r2, r3, #8
 8001a7e:	4b6e      	ldr	r3, [pc, #440]	; (8001c38 <HAL_RCC_OscConfig+0x32c>)
 8001a80:	430a      	orrs	r2, r1
 8001a82:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001a84:	69bb      	ldr	r3, [r7, #24]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d112      	bne.n	8001ab0 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001a8a:	4b6b      	ldr	r3, [pc, #428]	; (8001c38 <HAL_RCC_OscConfig+0x32c>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4a6e      	ldr	r2, [pc, #440]	; (8001c48 <HAL_RCC_OscConfig+0x33c>)
 8001a90:	4013      	ands	r3, r2
 8001a92:	0019      	movs	r1, r3
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	691a      	ldr	r2, [r3, #16]
 8001a98:	4b67      	ldr	r3, [pc, #412]	; (8001c38 <HAL_RCC_OscConfig+0x32c>)
 8001a9a:	430a      	orrs	r2, r1
 8001a9c:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001a9e:	4b66      	ldr	r3, [pc, #408]	; (8001c38 <HAL_RCC_OscConfig+0x32c>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	0adb      	lsrs	r3, r3, #11
 8001aa4:	2207      	movs	r2, #7
 8001aa6:	4013      	ands	r3, r2
 8001aa8:	4a68      	ldr	r2, [pc, #416]	; (8001c4c <HAL_RCC_OscConfig+0x340>)
 8001aaa:	40da      	lsrs	r2, r3
 8001aac:	4b68      	ldr	r3, [pc, #416]	; (8001c50 <HAL_RCC_OscConfig+0x344>)
 8001aae:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001ab0:	4b68      	ldr	r3, [pc, #416]	; (8001c54 <HAL_RCC_OscConfig+0x348>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	0018      	movs	r0, r3
 8001ab6:	f7ff fb57 	bl	8001168 <HAL_InitTick>
 8001aba:	1e03      	subs	r3, r0, #0
 8001abc:	d051      	beq.n	8001b62 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8001abe:	2301      	movs	r3, #1
 8001ac0:	e22c      	b.n	8001f1c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	68db      	ldr	r3, [r3, #12]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d030      	beq.n	8001b2c <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001aca:	4b5b      	ldr	r3, [pc, #364]	; (8001c38 <HAL_RCC_OscConfig+0x32c>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4a5e      	ldr	r2, [pc, #376]	; (8001c48 <HAL_RCC_OscConfig+0x33c>)
 8001ad0:	4013      	ands	r3, r2
 8001ad2:	0019      	movs	r1, r3
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	691a      	ldr	r2, [r3, #16]
 8001ad8:	4b57      	ldr	r3, [pc, #348]	; (8001c38 <HAL_RCC_OscConfig+0x32c>)
 8001ada:	430a      	orrs	r2, r1
 8001adc:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8001ade:	4b56      	ldr	r3, [pc, #344]	; (8001c38 <HAL_RCC_OscConfig+0x32c>)
 8001ae0:	681a      	ldr	r2, [r3, #0]
 8001ae2:	4b55      	ldr	r3, [pc, #340]	; (8001c38 <HAL_RCC_OscConfig+0x32c>)
 8001ae4:	2180      	movs	r1, #128	; 0x80
 8001ae6:	0049      	lsls	r1, r1, #1
 8001ae8:	430a      	orrs	r2, r1
 8001aea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aec:	f7ff fb98 	bl	8001220 <HAL_GetTick>
 8001af0:	0003      	movs	r3, r0
 8001af2:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001af4:	e008      	b.n	8001b08 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001af6:	f7ff fb93 	bl	8001220 <HAL_GetTick>
 8001afa:	0002      	movs	r2, r0
 8001afc:	693b      	ldr	r3, [r7, #16]
 8001afe:	1ad3      	subs	r3, r2, r3
 8001b00:	2b02      	cmp	r3, #2
 8001b02:	d901      	bls.n	8001b08 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8001b04:	2303      	movs	r3, #3
 8001b06:	e209      	b.n	8001f1c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b08:	4b4b      	ldr	r3, [pc, #300]	; (8001c38 <HAL_RCC_OscConfig+0x32c>)
 8001b0a:	681a      	ldr	r2, [r3, #0]
 8001b0c:	2380      	movs	r3, #128	; 0x80
 8001b0e:	00db      	lsls	r3, r3, #3
 8001b10:	4013      	ands	r3, r2
 8001b12:	d0f0      	beq.n	8001af6 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b14:	4b48      	ldr	r3, [pc, #288]	; (8001c38 <HAL_RCC_OscConfig+0x32c>)
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	4a4a      	ldr	r2, [pc, #296]	; (8001c44 <HAL_RCC_OscConfig+0x338>)
 8001b1a:	4013      	ands	r3, r2
 8001b1c:	0019      	movs	r1, r3
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	695b      	ldr	r3, [r3, #20]
 8001b22:	021a      	lsls	r2, r3, #8
 8001b24:	4b44      	ldr	r3, [pc, #272]	; (8001c38 <HAL_RCC_OscConfig+0x32c>)
 8001b26:	430a      	orrs	r2, r1
 8001b28:	605a      	str	r2, [r3, #4]
 8001b2a:	e01b      	b.n	8001b64 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8001b2c:	4b42      	ldr	r3, [pc, #264]	; (8001c38 <HAL_RCC_OscConfig+0x32c>)
 8001b2e:	681a      	ldr	r2, [r3, #0]
 8001b30:	4b41      	ldr	r3, [pc, #260]	; (8001c38 <HAL_RCC_OscConfig+0x32c>)
 8001b32:	4949      	ldr	r1, [pc, #292]	; (8001c58 <HAL_RCC_OscConfig+0x34c>)
 8001b34:	400a      	ands	r2, r1
 8001b36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b38:	f7ff fb72 	bl	8001220 <HAL_GetTick>
 8001b3c:	0003      	movs	r3, r0
 8001b3e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b40:	e008      	b.n	8001b54 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b42:	f7ff fb6d 	bl	8001220 <HAL_GetTick>
 8001b46:	0002      	movs	r2, r0
 8001b48:	693b      	ldr	r3, [r7, #16]
 8001b4a:	1ad3      	subs	r3, r2, r3
 8001b4c:	2b02      	cmp	r3, #2
 8001b4e:	d901      	bls.n	8001b54 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8001b50:	2303      	movs	r3, #3
 8001b52:	e1e3      	b.n	8001f1c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b54:	4b38      	ldr	r3, [pc, #224]	; (8001c38 <HAL_RCC_OscConfig+0x32c>)
 8001b56:	681a      	ldr	r2, [r3, #0]
 8001b58:	2380      	movs	r3, #128	; 0x80
 8001b5a:	00db      	lsls	r3, r3, #3
 8001b5c:	4013      	ands	r3, r2
 8001b5e:	d1f0      	bne.n	8001b42 <HAL_RCC_OscConfig+0x236>
 8001b60:	e000      	b.n	8001b64 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b62:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	2208      	movs	r2, #8
 8001b6a:	4013      	ands	r3, r2
 8001b6c:	d047      	beq.n	8001bfe <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001b6e:	4b32      	ldr	r3, [pc, #200]	; (8001c38 <HAL_RCC_OscConfig+0x32c>)
 8001b70:	689b      	ldr	r3, [r3, #8]
 8001b72:	2238      	movs	r2, #56	; 0x38
 8001b74:	4013      	ands	r3, r2
 8001b76:	2b18      	cmp	r3, #24
 8001b78:	d10a      	bne.n	8001b90 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8001b7a:	4b2f      	ldr	r3, [pc, #188]	; (8001c38 <HAL_RCC_OscConfig+0x32c>)
 8001b7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b7e:	2202      	movs	r2, #2
 8001b80:	4013      	ands	r3, r2
 8001b82:	d03c      	beq.n	8001bfe <HAL_RCC_OscConfig+0x2f2>
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	699b      	ldr	r3, [r3, #24]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d138      	bne.n	8001bfe <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	e1c5      	b.n	8001f1c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	699b      	ldr	r3, [r3, #24]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d019      	beq.n	8001bcc <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001b98:	4b27      	ldr	r3, [pc, #156]	; (8001c38 <HAL_RCC_OscConfig+0x32c>)
 8001b9a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001b9c:	4b26      	ldr	r3, [pc, #152]	; (8001c38 <HAL_RCC_OscConfig+0x32c>)
 8001b9e:	2101      	movs	r1, #1
 8001ba0:	430a      	orrs	r2, r1
 8001ba2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ba4:	f7ff fb3c 	bl	8001220 <HAL_GetTick>
 8001ba8:	0003      	movs	r3, r0
 8001baa:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001bac:	e008      	b.n	8001bc0 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bae:	f7ff fb37 	bl	8001220 <HAL_GetTick>
 8001bb2:	0002      	movs	r2, r0
 8001bb4:	693b      	ldr	r3, [r7, #16]
 8001bb6:	1ad3      	subs	r3, r2, r3
 8001bb8:	2b02      	cmp	r3, #2
 8001bba:	d901      	bls.n	8001bc0 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8001bbc:	2303      	movs	r3, #3
 8001bbe:	e1ad      	b.n	8001f1c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001bc0:	4b1d      	ldr	r3, [pc, #116]	; (8001c38 <HAL_RCC_OscConfig+0x32c>)
 8001bc2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bc4:	2202      	movs	r2, #2
 8001bc6:	4013      	ands	r3, r2
 8001bc8:	d0f1      	beq.n	8001bae <HAL_RCC_OscConfig+0x2a2>
 8001bca:	e018      	b.n	8001bfe <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001bcc:	4b1a      	ldr	r3, [pc, #104]	; (8001c38 <HAL_RCC_OscConfig+0x32c>)
 8001bce:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001bd0:	4b19      	ldr	r3, [pc, #100]	; (8001c38 <HAL_RCC_OscConfig+0x32c>)
 8001bd2:	2101      	movs	r1, #1
 8001bd4:	438a      	bics	r2, r1
 8001bd6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bd8:	f7ff fb22 	bl	8001220 <HAL_GetTick>
 8001bdc:	0003      	movs	r3, r0
 8001bde:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001be0:	e008      	b.n	8001bf4 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001be2:	f7ff fb1d 	bl	8001220 <HAL_GetTick>
 8001be6:	0002      	movs	r2, r0
 8001be8:	693b      	ldr	r3, [r7, #16]
 8001bea:	1ad3      	subs	r3, r2, r3
 8001bec:	2b02      	cmp	r3, #2
 8001bee:	d901      	bls.n	8001bf4 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8001bf0:	2303      	movs	r3, #3
 8001bf2:	e193      	b.n	8001f1c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001bf4:	4b10      	ldr	r3, [pc, #64]	; (8001c38 <HAL_RCC_OscConfig+0x32c>)
 8001bf6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bf8:	2202      	movs	r2, #2
 8001bfa:	4013      	ands	r3, r2
 8001bfc:	d1f1      	bne.n	8001be2 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	2204      	movs	r2, #4
 8001c04:	4013      	ands	r3, r2
 8001c06:	d100      	bne.n	8001c0a <HAL_RCC_OscConfig+0x2fe>
 8001c08:	e0c6      	b.n	8001d98 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c0a:	231f      	movs	r3, #31
 8001c0c:	18fb      	adds	r3, r7, r3
 8001c0e:	2200      	movs	r2, #0
 8001c10:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001c12:	4b09      	ldr	r3, [pc, #36]	; (8001c38 <HAL_RCC_OscConfig+0x32c>)
 8001c14:	689b      	ldr	r3, [r3, #8]
 8001c16:	2238      	movs	r2, #56	; 0x38
 8001c18:	4013      	ands	r3, r2
 8001c1a:	2b20      	cmp	r3, #32
 8001c1c:	d11e      	bne.n	8001c5c <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8001c1e:	4b06      	ldr	r3, [pc, #24]	; (8001c38 <HAL_RCC_OscConfig+0x32c>)
 8001c20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c22:	2202      	movs	r2, #2
 8001c24:	4013      	ands	r3, r2
 8001c26:	d100      	bne.n	8001c2a <HAL_RCC_OscConfig+0x31e>
 8001c28:	e0b6      	b.n	8001d98 <HAL_RCC_OscConfig+0x48c>
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	689b      	ldr	r3, [r3, #8]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d000      	beq.n	8001c34 <HAL_RCC_OscConfig+0x328>
 8001c32:	e0b1      	b.n	8001d98 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8001c34:	2301      	movs	r3, #1
 8001c36:	e171      	b.n	8001f1c <HAL_RCC_OscConfig+0x610>
 8001c38:	40021000 	.word	0x40021000
 8001c3c:	fffeffff 	.word	0xfffeffff
 8001c40:	fffbffff 	.word	0xfffbffff
 8001c44:	ffff80ff 	.word	0xffff80ff
 8001c48:	ffffc7ff 	.word	0xffffc7ff
 8001c4c:	00f42400 	.word	0x00f42400
 8001c50:	20000000 	.word	0x20000000
 8001c54:	20000004 	.word	0x20000004
 8001c58:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001c5c:	4bb1      	ldr	r3, [pc, #708]	; (8001f24 <HAL_RCC_OscConfig+0x618>)
 8001c5e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001c60:	2380      	movs	r3, #128	; 0x80
 8001c62:	055b      	lsls	r3, r3, #21
 8001c64:	4013      	ands	r3, r2
 8001c66:	d101      	bne.n	8001c6c <HAL_RCC_OscConfig+0x360>
 8001c68:	2301      	movs	r3, #1
 8001c6a:	e000      	b.n	8001c6e <HAL_RCC_OscConfig+0x362>
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d011      	beq.n	8001c96 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8001c72:	4bac      	ldr	r3, [pc, #688]	; (8001f24 <HAL_RCC_OscConfig+0x618>)
 8001c74:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001c76:	4bab      	ldr	r3, [pc, #684]	; (8001f24 <HAL_RCC_OscConfig+0x618>)
 8001c78:	2180      	movs	r1, #128	; 0x80
 8001c7a:	0549      	lsls	r1, r1, #21
 8001c7c:	430a      	orrs	r2, r1
 8001c7e:	63da      	str	r2, [r3, #60]	; 0x3c
 8001c80:	4ba8      	ldr	r3, [pc, #672]	; (8001f24 <HAL_RCC_OscConfig+0x618>)
 8001c82:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001c84:	2380      	movs	r3, #128	; 0x80
 8001c86:	055b      	lsls	r3, r3, #21
 8001c88:	4013      	ands	r3, r2
 8001c8a:	60fb      	str	r3, [r7, #12]
 8001c8c:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8001c8e:	231f      	movs	r3, #31
 8001c90:	18fb      	adds	r3, r7, r3
 8001c92:	2201      	movs	r2, #1
 8001c94:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c96:	4ba4      	ldr	r3, [pc, #656]	; (8001f28 <HAL_RCC_OscConfig+0x61c>)
 8001c98:	681a      	ldr	r2, [r3, #0]
 8001c9a:	2380      	movs	r3, #128	; 0x80
 8001c9c:	005b      	lsls	r3, r3, #1
 8001c9e:	4013      	ands	r3, r2
 8001ca0:	d11a      	bne.n	8001cd8 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001ca2:	4ba1      	ldr	r3, [pc, #644]	; (8001f28 <HAL_RCC_OscConfig+0x61c>)
 8001ca4:	681a      	ldr	r2, [r3, #0]
 8001ca6:	4ba0      	ldr	r3, [pc, #640]	; (8001f28 <HAL_RCC_OscConfig+0x61c>)
 8001ca8:	2180      	movs	r1, #128	; 0x80
 8001caa:	0049      	lsls	r1, r1, #1
 8001cac:	430a      	orrs	r2, r1
 8001cae:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8001cb0:	f7ff fab6 	bl	8001220 <HAL_GetTick>
 8001cb4:	0003      	movs	r3, r0
 8001cb6:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001cb8:	e008      	b.n	8001ccc <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cba:	f7ff fab1 	bl	8001220 <HAL_GetTick>
 8001cbe:	0002      	movs	r2, r0
 8001cc0:	693b      	ldr	r3, [r7, #16]
 8001cc2:	1ad3      	subs	r3, r2, r3
 8001cc4:	2b02      	cmp	r3, #2
 8001cc6:	d901      	bls.n	8001ccc <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8001cc8:	2303      	movs	r3, #3
 8001cca:	e127      	b.n	8001f1c <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ccc:	4b96      	ldr	r3, [pc, #600]	; (8001f28 <HAL_RCC_OscConfig+0x61c>)
 8001cce:	681a      	ldr	r2, [r3, #0]
 8001cd0:	2380      	movs	r3, #128	; 0x80
 8001cd2:	005b      	lsls	r3, r3, #1
 8001cd4:	4013      	ands	r3, r2
 8001cd6:	d0f0      	beq.n	8001cba <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	689b      	ldr	r3, [r3, #8]
 8001cdc:	2b01      	cmp	r3, #1
 8001cde:	d106      	bne.n	8001cee <HAL_RCC_OscConfig+0x3e2>
 8001ce0:	4b90      	ldr	r3, [pc, #576]	; (8001f24 <HAL_RCC_OscConfig+0x618>)
 8001ce2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001ce4:	4b8f      	ldr	r3, [pc, #572]	; (8001f24 <HAL_RCC_OscConfig+0x618>)
 8001ce6:	2101      	movs	r1, #1
 8001ce8:	430a      	orrs	r2, r1
 8001cea:	65da      	str	r2, [r3, #92]	; 0x5c
 8001cec:	e01c      	b.n	8001d28 <HAL_RCC_OscConfig+0x41c>
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	689b      	ldr	r3, [r3, #8]
 8001cf2:	2b05      	cmp	r3, #5
 8001cf4:	d10c      	bne.n	8001d10 <HAL_RCC_OscConfig+0x404>
 8001cf6:	4b8b      	ldr	r3, [pc, #556]	; (8001f24 <HAL_RCC_OscConfig+0x618>)
 8001cf8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001cfa:	4b8a      	ldr	r3, [pc, #552]	; (8001f24 <HAL_RCC_OscConfig+0x618>)
 8001cfc:	2104      	movs	r1, #4
 8001cfe:	430a      	orrs	r2, r1
 8001d00:	65da      	str	r2, [r3, #92]	; 0x5c
 8001d02:	4b88      	ldr	r3, [pc, #544]	; (8001f24 <HAL_RCC_OscConfig+0x618>)
 8001d04:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001d06:	4b87      	ldr	r3, [pc, #540]	; (8001f24 <HAL_RCC_OscConfig+0x618>)
 8001d08:	2101      	movs	r1, #1
 8001d0a:	430a      	orrs	r2, r1
 8001d0c:	65da      	str	r2, [r3, #92]	; 0x5c
 8001d0e:	e00b      	b.n	8001d28 <HAL_RCC_OscConfig+0x41c>
 8001d10:	4b84      	ldr	r3, [pc, #528]	; (8001f24 <HAL_RCC_OscConfig+0x618>)
 8001d12:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001d14:	4b83      	ldr	r3, [pc, #524]	; (8001f24 <HAL_RCC_OscConfig+0x618>)
 8001d16:	2101      	movs	r1, #1
 8001d18:	438a      	bics	r2, r1
 8001d1a:	65da      	str	r2, [r3, #92]	; 0x5c
 8001d1c:	4b81      	ldr	r3, [pc, #516]	; (8001f24 <HAL_RCC_OscConfig+0x618>)
 8001d1e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001d20:	4b80      	ldr	r3, [pc, #512]	; (8001f24 <HAL_RCC_OscConfig+0x618>)
 8001d22:	2104      	movs	r1, #4
 8001d24:	438a      	bics	r2, r1
 8001d26:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	689b      	ldr	r3, [r3, #8]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d014      	beq.n	8001d5a <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d30:	f7ff fa76 	bl	8001220 <HAL_GetTick>
 8001d34:	0003      	movs	r3, r0
 8001d36:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d38:	e009      	b.n	8001d4e <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d3a:	f7ff fa71 	bl	8001220 <HAL_GetTick>
 8001d3e:	0002      	movs	r2, r0
 8001d40:	693b      	ldr	r3, [r7, #16]
 8001d42:	1ad3      	subs	r3, r2, r3
 8001d44:	4a79      	ldr	r2, [pc, #484]	; (8001f2c <HAL_RCC_OscConfig+0x620>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d901      	bls.n	8001d4e <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8001d4a:	2303      	movs	r3, #3
 8001d4c:	e0e6      	b.n	8001f1c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d4e:	4b75      	ldr	r3, [pc, #468]	; (8001f24 <HAL_RCC_OscConfig+0x618>)
 8001d50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d52:	2202      	movs	r2, #2
 8001d54:	4013      	ands	r3, r2
 8001d56:	d0f0      	beq.n	8001d3a <HAL_RCC_OscConfig+0x42e>
 8001d58:	e013      	b.n	8001d82 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d5a:	f7ff fa61 	bl	8001220 <HAL_GetTick>
 8001d5e:	0003      	movs	r3, r0
 8001d60:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001d62:	e009      	b.n	8001d78 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d64:	f7ff fa5c 	bl	8001220 <HAL_GetTick>
 8001d68:	0002      	movs	r2, r0
 8001d6a:	693b      	ldr	r3, [r7, #16]
 8001d6c:	1ad3      	subs	r3, r2, r3
 8001d6e:	4a6f      	ldr	r2, [pc, #444]	; (8001f2c <HAL_RCC_OscConfig+0x620>)
 8001d70:	4293      	cmp	r3, r2
 8001d72:	d901      	bls.n	8001d78 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8001d74:	2303      	movs	r3, #3
 8001d76:	e0d1      	b.n	8001f1c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001d78:	4b6a      	ldr	r3, [pc, #424]	; (8001f24 <HAL_RCC_OscConfig+0x618>)
 8001d7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d7c:	2202      	movs	r2, #2
 8001d7e:	4013      	ands	r3, r2
 8001d80:	d1f0      	bne.n	8001d64 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001d82:	231f      	movs	r3, #31
 8001d84:	18fb      	adds	r3, r7, r3
 8001d86:	781b      	ldrb	r3, [r3, #0]
 8001d88:	2b01      	cmp	r3, #1
 8001d8a:	d105      	bne.n	8001d98 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001d8c:	4b65      	ldr	r3, [pc, #404]	; (8001f24 <HAL_RCC_OscConfig+0x618>)
 8001d8e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001d90:	4b64      	ldr	r3, [pc, #400]	; (8001f24 <HAL_RCC_OscConfig+0x618>)
 8001d92:	4967      	ldr	r1, [pc, #412]	; (8001f30 <HAL_RCC_OscConfig+0x624>)
 8001d94:	400a      	ands	r2, r1
 8001d96:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	69db      	ldr	r3, [r3, #28]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d100      	bne.n	8001da2 <HAL_RCC_OscConfig+0x496>
 8001da0:	e0bb      	b.n	8001f1a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001da2:	4b60      	ldr	r3, [pc, #384]	; (8001f24 <HAL_RCC_OscConfig+0x618>)
 8001da4:	689b      	ldr	r3, [r3, #8]
 8001da6:	2238      	movs	r2, #56	; 0x38
 8001da8:	4013      	ands	r3, r2
 8001daa:	2b10      	cmp	r3, #16
 8001dac:	d100      	bne.n	8001db0 <HAL_RCC_OscConfig+0x4a4>
 8001dae:	e07b      	b.n	8001ea8 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	69db      	ldr	r3, [r3, #28]
 8001db4:	2b02      	cmp	r3, #2
 8001db6:	d156      	bne.n	8001e66 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001db8:	4b5a      	ldr	r3, [pc, #360]	; (8001f24 <HAL_RCC_OscConfig+0x618>)
 8001dba:	681a      	ldr	r2, [r3, #0]
 8001dbc:	4b59      	ldr	r3, [pc, #356]	; (8001f24 <HAL_RCC_OscConfig+0x618>)
 8001dbe:	495d      	ldr	r1, [pc, #372]	; (8001f34 <HAL_RCC_OscConfig+0x628>)
 8001dc0:	400a      	ands	r2, r1
 8001dc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dc4:	f7ff fa2c 	bl	8001220 <HAL_GetTick>
 8001dc8:	0003      	movs	r3, r0
 8001dca:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001dcc:	e008      	b.n	8001de0 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dce:	f7ff fa27 	bl	8001220 <HAL_GetTick>
 8001dd2:	0002      	movs	r2, r0
 8001dd4:	693b      	ldr	r3, [r7, #16]
 8001dd6:	1ad3      	subs	r3, r2, r3
 8001dd8:	2b02      	cmp	r3, #2
 8001dda:	d901      	bls.n	8001de0 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8001ddc:	2303      	movs	r3, #3
 8001dde:	e09d      	b.n	8001f1c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001de0:	4b50      	ldr	r3, [pc, #320]	; (8001f24 <HAL_RCC_OscConfig+0x618>)
 8001de2:	681a      	ldr	r2, [r3, #0]
 8001de4:	2380      	movs	r3, #128	; 0x80
 8001de6:	049b      	lsls	r3, r3, #18
 8001de8:	4013      	ands	r3, r2
 8001dea:	d1f0      	bne.n	8001dce <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001dec:	4b4d      	ldr	r3, [pc, #308]	; (8001f24 <HAL_RCC_OscConfig+0x618>)
 8001dee:	68db      	ldr	r3, [r3, #12]
 8001df0:	4a51      	ldr	r2, [pc, #324]	; (8001f38 <HAL_RCC_OscConfig+0x62c>)
 8001df2:	4013      	ands	r3, r2
 8001df4:	0019      	movs	r1, r3
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6a1a      	ldr	r2, [r3, #32]
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dfe:	431a      	orrs	r2, r3
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e04:	021b      	lsls	r3, r3, #8
 8001e06:	431a      	orrs	r2, r3
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e0c:	431a      	orrs	r2, r3
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e12:	431a      	orrs	r2, r3
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e18:	431a      	orrs	r2, r3
 8001e1a:	4b42      	ldr	r3, [pc, #264]	; (8001f24 <HAL_RCC_OscConfig+0x618>)
 8001e1c:	430a      	orrs	r2, r1
 8001e1e:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e20:	4b40      	ldr	r3, [pc, #256]	; (8001f24 <HAL_RCC_OscConfig+0x618>)
 8001e22:	681a      	ldr	r2, [r3, #0]
 8001e24:	4b3f      	ldr	r3, [pc, #252]	; (8001f24 <HAL_RCC_OscConfig+0x618>)
 8001e26:	2180      	movs	r1, #128	; 0x80
 8001e28:	0449      	lsls	r1, r1, #17
 8001e2a:	430a      	orrs	r2, r1
 8001e2c:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001e2e:	4b3d      	ldr	r3, [pc, #244]	; (8001f24 <HAL_RCC_OscConfig+0x618>)
 8001e30:	68da      	ldr	r2, [r3, #12]
 8001e32:	4b3c      	ldr	r3, [pc, #240]	; (8001f24 <HAL_RCC_OscConfig+0x618>)
 8001e34:	2180      	movs	r1, #128	; 0x80
 8001e36:	0549      	lsls	r1, r1, #21
 8001e38:	430a      	orrs	r2, r1
 8001e3a:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e3c:	f7ff f9f0 	bl	8001220 <HAL_GetTick>
 8001e40:	0003      	movs	r3, r0
 8001e42:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e44:	e008      	b.n	8001e58 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e46:	f7ff f9eb 	bl	8001220 <HAL_GetTick>
 8001e4a:	0002      	movs	r2, r0
 8001e4c:	693b      	ldr	r3, [r7, #16]
 8001e4e:	1ad3      	subs	r3, r2, r3
 8001e50:	2b02      	cmp	r3, #2
 8001e52:	d901      	bls.n	8001e58 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8001e54:	2303      	movs	r3, #3
 8001e56:	e061      	b.n	8001f1c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e58:	4b32      	ldr	r3, [pc, #200]	; (8001f24 <HAL_RCC_OscConfig+0x618>)
 8001e5a:	681a      	ldr	r2, [r3, #0]
 8001e5c:	2380      	movs	r3, #128	; 0x80
 8001e5e:	049b      	lsls	r3, r3, #18
 8001e60:	4013      	ands	r3, r2
 8001e62:	d0f0      	beq.n	8001e46 <HAL_RCC_OscConfig+0x53a>
 8001e64:	e059      	b.n	8001f1a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e66:	4b2f      	ldr	r3, [pc, #188]	; (8001f24 <HAL_RCC_OscConfig+0x618>)
 8001e68:	681a      	ldr	r2, [r3, #0]
 8001e6a:	4b2e      	ldr	r3, [pc, #184]	; (8001f24 <HAL_RCC_OscConfig+0x618>)
 8001e6c:	4931      	ldr	r1, [pc, #196]	; (8001f34 <HAL_RCC_OscConfig+0x628>)
 8001e6e:	400a      	ands	r2, r1
 8001e70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e72:	f7ff f9d5 	bl	8001220 <HAL_GetTick>
 8001e76:	0003      	movs	r3, r0
 8001e78:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e7a:	e008      	b.n	8001e8e <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e7c:	f7ff f9d0 	bl	8001220 <HAL_GetTick>
 8001e80:	0002      	movs	r2, r0
 8001e82:	693b      	ldr	r3, [r7, #16]
 8001e84:	1ad3      	subs	r3, r2, r3
 8001e86:	2b02      	cmp	r3, #2
 8001e88:	d901      	bls.n	8001e8e <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8001e8a:	2303      	movs	r3, #3
 8001e8c:	e046      	b.n	8001f1c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e8e:	4b25      	ldr	r3, [pc, #148]	; (8001f24 <HAL_RCC_OscConfig+0x618>)
 8001e90:	681a      	ldr	r2, [r3, #0]
 8001e92:	2380      	movs	r3, #128	; 0x80
 8001e94:	049b      	lsls	r3, r3, #18
 8001e96:	4013      	ands	r3, r2
 8001e98:	d1f0      	bne.n	8001e7c <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8001e9a:	4b22      	ldr	r3, [pc, #136]	; (8001f24 <HAL_RCC_OscConfig+0x618>)
 8001e9c:	68da      	ldr	r2, [r3, #12]
 8001e9e:	4b21      	ldr	r3, [pc, #132]	; (8001f24 <HAL_RCC_OscConfig+0x618>)
 8001ea0:	4926      	ldr	r1, [pc, #152]	; (8001f3c <HAL_RCC_OscConfig+0x630>)
 8001ea2:	400a      	ands	r2, r1
 8001ea4:	60da      	str	r2, [r3, #12]
 8001ea6:	e038      	b.n	8001f1a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	69db      	ldr	r3, [r3, #28]
 8001eac:	2b01      	cmp	r3, #1
 8001eae:	d101      	bne.n	8001eb4 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	e033      	b.n	8001f1c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8001eb4:	4b1b      	ldr	r3, [pc, #108]	; (8001f24 <HAL_RCC_OscConfig+0x618>)
 8001eb6:	68db      	ldr	r3, [r3, #12]
 8001eb8:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001eba:	697b      	ldr	r3, [r7, #20]
 8001ebc:	2203      	movs	r2, #3
 8001ebe:	401a      	ands	r2, r3
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6a1b      	ldr	r3, [r3, #32]
 8001ec4:	429a      	cmp	r2, r3
 8001ec6:	d126      	bne.n	8001f16 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001ec8:	697b      	ldr	r3, [r7, #20]
 8001eca:	2270      	movs	r2, #112	; 0x70
 8001ecc:	401a      	ands	r2, r3
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ed2:	429a      	cmp	r2, r3
 8001ed4:	d11f      	bne.n	8001f16 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ed6:	697a      	ldr	r2, [r7, #20]
 8001ed8:	23fe      	movs	r3, #254	; 0xfe
 8001eda:	01db      	lsls	r3, r3, #7
 8001edc:	401a      	ands	r2, r3
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ee2:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001ee4:	429a      	cmp	r2, r3
 8001ee6:	d116      	bne.n	8001f16 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001ee8:	697a      	ldr	r2, [r7, #20]
 8001eea:	23f8      	movs	r3, #248	; 0xf8
 8001eec:	039b      	lsls	r3, r3, #14
 8001eee:	401a      	ands	r2, r3
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ef4:	429a      	cmp	r2, r3
 8001ef6:	d10e      	bne.n	8001f16 <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001ef8:	697a      	ldr	r2, [r7, #20]
 8001efa:	23e0      	movs	r3, #224	; 0xe0
 8001efc:	051b      	lsls	r3, r3, #20
 8001efe:	401a      	ands	r2, r3
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001f04:	429a      	cmp	r2, r3
 8001f06:	d106      	bne.n	8001f16 <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001f08:	697b      	ldr	r3, [r7, #20]
 8001f0a:	0f5b      	lsrs	r3, r3, #29
 8001f0c:	075a      	lsls	r2, r3, #29
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001f12:	429a      	cmp	r2, r3
 8001f14:	d001      	beq.n	8001f1a <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8001f16:	2301      	movs	r3, #1
 8001f18:	e000      	b.n	8001f1c <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8001f1a:	2300      	movs	r3, #0
}
 8001f1c:	0018      	movs	r0, r3
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	b008      	add	sp, #32
 8001f22:	bd80      	pop	{r7, pc}
 8001f24:	40021000 	.word	0x40021000
 8001f28:	40007000 	.word	0x40007000
 8001f2c:	00001388 	.word	0x00001388
 8001f30:	efffffff 	.word	0xefffffff
 8001f34:	feffffff 	.word	0xfeffffff
 8001f38:	11c1808c 	.word	0x11c1808c
 8001f3c:	eefefffc 	.word	0xeefefffc

08001f40 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b084      	sub	sp, #16
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
 8001f48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d101      	bne.n	8001f54 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f50:	2301      	movs	r3, #1
 8001f52:	e0e9      	b.n	8002128 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f54:	4b76      	ldr	r3, [pc, #472]	; (8002130 <HAL_RCC_ClockConfig+0x1f0>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	2207      	movs	r2, #7
 8001f5a:	4013      	ands	r3, r2
 8001f5c:	683a      	ldr	r2, [r7, #0]
 8001f5e:	429a      	cmp	r2, r3
 8001f60:	d91e      	bls.n	8001fa0 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f62:	4b73      	ldr	r3, [pc, #460]	; (8002130 <HAL_RCC_ClockConfig+0x1f0>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	2207      	movs	r2, #7
 8001f68:	4393      	bics	r3, r2
 8001f6a:	0019      	movs	r1, r3
 8001f6c:	4b70      	ldr	r3, [pc, #448]	; (8002130 <HAL_RCC_ClockConfig+0x1f0>)
 8001f6e:	683a      	ldr	r2, [r7, #0]
 8001f70:	430a      	orrs	r2, r1
 8001f72:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001f74:	f7ff f954 	bl	8001220 <HAL_GetTick>
 8001f78:	0003      	movs	r3, r0
 8001f7a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001f7c:	e009      	b.n	8001f92 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f7e:	f7ff f94f 	bl	8001220 <HAL_GetTick>
 8001f82:	0002      	movs	r2, r0
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	1ad3      	subs	r3, r2, r3
 8001f88:	4a6a      	ldr	r2, [pc, #424]	; (8002134 <HAL_RCC_ClockConfig+0x1f4>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d901      	bls.n	8001f92 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001f8e:	2303      	movs	r3, #3
 8001f90:	e0ca      	b.n	8002128 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001f92:	4b67      	ldr	r3, [pc, #412]	; (8002130 <HAL_RCC_ClockConfig+0x1f0>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	2207      	movs	r2, #7
 8001f98:	4013      	ands	r3, r2
 8001f9a:	683a      	ldr	r2, [r7, #0]
 8001f9c:	429a      	cmp	r2, r3
 8001f9e:	d1ee      	bne.n	8001f7e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	2202      	movs	r2, #2
 8001fa6:	4013      	ands	r3, r2
 8001fa8:	d015      	beq.n	8001fd6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	2204      	movs	r2, #4
 8001fb0:	4013      	ands	r3, r2
 8001fb2:	d006      	beq.n	8001fc2 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001fb4:	4b60      	ldr	r3, [pc, #384]	; (8002138 <HAL_RCC_ClockConfig+0x1f8>)
 8001fb6:	689a      	ldr	r2, [r3, #8]
 8001fb8:	4b5f      	ldr	r3, [pc, #380]	; (8002138 <HAL_RCC_ClockConfig+0x1f8>)
 8001fba:	21e0      	movs	r1, #224	; 0xe0
 8001fbc:	01c9      	lsls	r1, r1, #7
 8001fbe:	430a      	orrs	r2, r1
 8001fc0:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fc2:	4b5d      	ldr	r3, [pc, #372]	; (8002138 <HAL_RCC_ClockConfig+0x1f8>)
 8001fc4:	689b      	ldr	r3, [r3, #8]
 8001fc6:	4a5d      	ldr	r2, [pc, #372]	; (800213c <HAL_RCC_ClockConfig+0x1fc>)
 8001fc8:	4013      	ands	r3, r2
 8001fca:	0019      	movs	r1, r3
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	689a      	ldr	r2, [r3, #8]
 8001fd0:	4b59      	ldr	r3, [pc, #356]	; (8002138 <HAL_RCC_ClockConfig+0x1f8>)
 8001fd2:	430a      	orrs	r2, r1
 8001fd4:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	2201      	movs	r2, #1
 8001fdc:	4013      	ands	r3, r2
 8001fde:	d057      	beq.n	8002090 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	2b01      	cmp	r3, #1
 8001fe6:	d107      	bne.n	8001ff8 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001fe8:	4b53      	ldr	r3, [pc, #332]	; (8002138 <HAL_RCC_ClockConfig+0x1f8>)
 8001fea:	681a      	ldr	r2, [r3, #0]
 8001fec:	2380      	movs	r3, #128	; 0x80
 8001fee:	029b      	lsls	r3, r3, #10
 8001ff0:	4013      	ands	r3, r2
 8001ff2:	d12b      	bne.n	800204c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	e097      	b.n	8002128 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	2b02      	cmp	r3, #2
 8001ffe:	d107      	bne.n	8002010 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002000:	4b4d      	ldr	r3, [pc, #308]	; (8002138 <HAL_RCC_ClockConfig+0x1f8>)
 8002002:	681a      	ldr	r2, [r3, #0]
 8002004:	2380      	movs	r3, #128	; 0x80
 8002006:	049b      	lsls	r3, r3, #18
 8002008:	4013      	ands	r3, r2
 800200a:	d11f      	bne.n	800204c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800200c:	2301      	movs	r3, #1
 800200e:	e08b      	b.n	8002128 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	2b00      	cmp	r3, #0
 8002016:	d107      	bne.n	8002028 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002018:	4b47      	ldr	r3, [pc, #284]	; (8002138 <HAL_RCC_ClockConfig+0x1f8>)
 800201a:	681a      	ldr	r2, [r3, #0]
 800201c:	2380      	movs	r3, #128	; 0x80
 800201e:	00db      	lsls	r3, r3, #3
 8002020:	4013      	ands	r3, r2
 8002022:	d113      	bne.n	800204c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002024:	2301      	movs	r3, #1
 8002026:	e07f      	b.n	8002128 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	2b03      	cmp	r3, #3
 800202e:	d106      	bne.n	800203e <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002030:	4b41      	ldr	r3, [pc, #260]	; (8002138 <HAL_RCC_ClockConfig+0x1f8>)
 8002032:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002034:	2202      	movs	r2, #2
 8002036:	4013      	ands	r3, r2
 8002038:	d108      	bne.n	800204c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800203a:	2301      	movs	r3, #1
 800203c:	e074      	b.n	8002128 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800203e:	4b3e      	ldr	r3, [pc, #248]	; (8002138 <HAL_RCC_ClockConfig+0x1f8>)
 8002040:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002042:	2202      	movs	r2, #2
 8002044:	4013      	ands	r3, r2
 8002046:	d101      	bne.n	800204c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002048:	2301      	movs	r3, #1
 800204a:	e06d      	b.n	8002128 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800204c:	4b3a      	ldr	r3, [pc, #232]	; (8002138 <HAL_RCC_ClockConfig+0x1f8>)
 800204e:	689b      	ldr	r3, [r3, #8]
 8002050:	2207      	movs	r2, #7
 8002052:	4393      	bics	r3, r2
 8002054:	0019      	movs	r1, r3
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	685a      	ldr	r2, [r3, #4]
 800205a:	4b37      	ldr	r3, [pc, #220]	; (8002138 <HAL_RCC_ClockConfig+0x1f8>)
 800205c:	430a      	orrs	r2, r1
 800205e:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002060:	f7ff f8de 	bl	8001220 <HAL_GetTick>
 8002064:	0003      	movs	r3, r0
 8002066:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002068:	e009      	b.n	800207e <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800206a:	f7ff f8d9 	bl	8001220 <HAL_GetTick>
 800206e:	0002      	movs	r2, r0
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	1ad3      	subs	r3, r2, r3
 8002074:	4a2f      	ldr	r2, [pc, #188]	; (8002134 <HAL_RCC_ClockConfig+0x1f4>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d901      	bls.n	800207e <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800207a:	2303      	movs	r3, #3
 800207c:	e054      	b.n	8002128 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800207e:	4b2e      	ldr	r3, [pc, #184]	; (8002138 <HAL_RCC_ClockConfig+0x1f8>)
 8002080:	689b      	ldr	r3, [r3, #8]
 8002082:	2238      	movs	r2, #56	; 0x38
 8002084:	401a      	ands	r2, r3
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	00db      	lsls	r3, r3, #3
 800208c:	429a      	cmp	r2, r3
 800208e:	d1ec      	bne.n	800206a <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002090:	4b27      	ldr	r3, [pc, #156]	; (8002130 <HAL_RCC_ClockConfig+0x1f0>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	2207      	movs	r2, #7
 8002096:	4013      	ands	r3, r2
 8002098:	683a      	ldr	r2, [r7, #0]
 800209a:	429a      	cmp	r2, r3
 800209c:	d21e      	bcs.n	80020dc <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800209e:	4b24      	ldr	r3, [pc, #144]	; (8002130 <HAL_RCC_ClockConfig+0x1f0>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	2207      	movs	r2, #7
 80020a4:	4393      	bics	r3, r2
 80020a6:	0019      	movs	r1, r3
 80020a8:	4b21      	ldr	r3, [pc, #132]	; (8002130 <HAL_RCC_ClockConfig+0x1f0>)
 80020aa:	683a      	ldr	r2, [r7, #0]
 80020ac:	430a      	orrs	r2, r1
 80020ae:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80020b0:	f7ff f8b6 	bl	8001220 <HAL_GetTick>
 80020b4:	0003      	movs	r3, r0
 80020b6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80020b8:	e009      	b.n	80020ce <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020ba:	f7ff f8b1 	bl	8001220 <HAL_GetTick>
 80020be:	0002      	movs	r2, r0
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	1ad3      	subs	r3, r2, r3
 80020c4:	4a1b      	ldr	r2, [pc, #108]	; (8002134 <HAL_RCC_ClockConfig+0x1f4>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d901      	bls.n	80020ce <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80020ca:	2303      	movs	r3, #3
 80020cc:	e02c      	b.n	8002128 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80020ce:	4b18      	ldr	r3, [pc, #96]	; (8002130 <HAL_RCC_ClockConfig+0x1f0>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	2207      	movs	r2, #7
 80020d4:	4013      	ands	r3, r2
 80020d6:	683a      	ldr	r2, [r7, #0]
 80020d8:	429a      	cmp	r2, r3
 80020da:	d1ee      	bne.n	80020ba <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	2204      	movs	r2, #4
 80020e2:	4013      	ands	r3, r2
 80020e4:	d009      	beq.n	80020fa <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80020e6:	4b14      	ldr	r3, [pc, #80]	; (8002138 <HAL_RCC_ClockConfig+0x1f8>)
 80020e8:	689b      	ldr	r3, [r3, #8]
 80020ea:	4a15      	ldr	r2, [pc, #84]	; (8002140 <HAL_RCC_ClockConfig+0x200>)
 80020ec:	4013      	ands	r3, r2
 80020ee:	0019      	movs	r1, r3
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	68da      	ldr	r2, [r3, #12]
 80020f4:	4b10      	ldr	r3, [pc, #64]	; (8002138 <HAL_RCC_ClockConfig+0x1f8>)
 80020f6:	430a      	orrs	r2, r1
 80020f8:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80020fa:	f000 f829 	bl	8002150 <HAL_RCC_GetSysClockFreq>
 80020fe:	0001      	movs	r1, r0
 8002100:	4b0d      	ldr	r3, [pc, #52]	; (8002138 <HAL_RCC_ClockConfig+0x1f8>)
 8002102:	689b      	ldr	r3, [r3, #8]
 8002104:	0a1b      	lsrs	r3, r3, #8
 8002106:	220f      	movs	r2, #15
 8002108:	401a      	ands	r2, r3
 800210a:	4b0e      	ldr	r3, [pc, #56]	; (8002144 <HAL_RCC_ClockConfig+0x204>)
 800210c:	0092      	lsls	r2, r2, #2
 800210e:	58d3      	ldr	r3, [r2, r3]
 8002110:	221f      	movs	r2, #31
 8002112:	4013      	ands	r3, r2
 8002114:	000a      	movs	r2, r1
 8002116:	40da      	lsrs	r2, r3
 8002118:	4b0b      	ldr	r3, [pc, #44]	; (8002148 <HAL_RCC_ClockConfig+0x208>)
 800211a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800211c:	4b0b      	ldr	r3, [pc, #44]	; (800214c <HAL_RCC_ClockConfig+0x20c>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	0018      	movs	r0, r3
 8002122:	f7ff f821 	bl	8001168 <HAL_InitTick>
 8002126:	0003      	movs	r3, r0
}
 8002128:	0018      	movs	r0, r3
 800212a:	46bd      	mov	sp, r7
 800212c:	b004      	add	sp, #16
 800212e:	bd80      	pop	{r7, pc}
 8002130:	40022000 	.word	0x40022000
 8002134:	00001388 	.word	0x00001388
 8002138:	40021000 	.word	0x40021000
 800213c:	fffff0ff 	.word	0xfffff0ff
 8002140:	ffff8fff 	.word	0xffff8fff
 8002144:	08006888 	.word	0x08006888
 8002148:	20000000 	.word	0x20000000
 800214c:	20000004 	.word	0x20000004

08002150 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b086      	sub	sp, #24
 8002154:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002156:	4b3c      	ldr	r3, [pc, #240]	; (8002248 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002158:	689b      	ldr	r3, [r3, #8]
 800215a:	2238      	movs	r2, #56	; 0x38
 800215c:	4013      	ands	r3, r2
 800215e:	d10f      	bne.n	8002180 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002160:	4b39      	ldr	r3, [pc, #228]	; (8002248 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	0adb      	lsrs	r3, r3, #11
 8002166:	2207      	movs	r2, #7
 8002168:	4013      	ands	r3, r2
 800216a:	2201      	movs	r2, #1
 800216c:	409a      	lsls	r2, r3
 800216e:	0013      	movs	r3, r2
 8002170:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8002172:	6839      	ldr	r1, [r7, #0]
 8002174:	4835      	ldr	r0, [pc, #212]	; (800224c <HAL_RCC_GetSysClockFreq+0xfc>)
 8002176:	f7fd ffd7 	bl	8000128 <__udivsi3>
 800217a:	0003      	movs	r3, r0
 800217c:	613b      	str	r3, [r7, #16]
 800217e:	e05d      	b.n	800223c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002180:	4b31      	ldr	r3, [pc, #196]	; (8002248 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002182:	689b      	ldr	r3, [r3, #8]
 8002184:	2238      	movs	r2, #56	; 0x38
 8002186:	4013      	ands	r3, r2
 8002188:	2b08      	cmp	r3, #8
 800218a:	d102      	bne.n	8002192 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800218c:	4b30      	ldr	r3, [pc, #192]	; (8002250 <HAL_RCC_GetSysClockFreq+0x100>)
 800218e:	613b      	str	r3, [r7, #16]
 8002190:	e054      	b.n	800223c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002192:	4b2d      	ldr	r3, [pc, #180]	; (8002248 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002194:	689b      	ldr	r3, [r3, #8]
 8002196:	2238      	movs	r2, #56	; 0x38
 8002198:	4013      	ands	r3, r2
 800219a:	2b10      	cmp	r3, #16
 800219c:	d138      	bne.n	8002210 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800219e:	4b2a      	ldr	r3, [pc, #168]	; (8002248 <HAL_RCC_GetSysClockFreq+0xf8>)
 80021a0:	68db      	ldr	r3, [r3, #12]
 80021a2:	2203      	movs	r2, #3
 80021a4:	4013      	ands	r3, r2
 80021a6:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80021a8:	4b27      	ldr	r3, [pc, #156]	; (8002248 <HAL_RCC_GetSysClockFreq+0xf8>)
 80021aa:	68db      	ldr	r3, [r3, #12]
 80021ac:	091b      	lsrs	r3, r3, #4
 80021ae:	2207      	movs	r2, #7
 80021b0:	4013      	ands	r3, r2
 80021b2:	3301      	adds	r3, #1
 80021b4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	2b03      	cmp	r3, #3
 80021ba:	d10d      	bne.n	80021d8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80021bc:	68b9      	ldr	r1, [r7, #8]
 80021be:	4824      	ldr	r0, [pc, #144]	; (8002250 <HAL_RCC_GetSysClockFreq+0x100>)
 80021c0:	f7fd ffb2 	bl	8000128 <__udivsi3>
 80021c4:	0003      	movs	r3, r0
 80021c6:	0019      	movs	r1, r3
 80021c8:	4b1f      	ldr	r3, [pc, #124]	; (8002248 <HAL_RCC_GetSysClockFreq+0xf8>)
 80021ca:	68db      	ldr	r3, [r3, #12]
 80021cc:	0a1b      	lsrs	r3, r3, #8
 80021ce:	227f      	movs	r2, #127	; 0x7f
 80021d0:	4013      	ands	r3, r2
 80021d2:	434b      	muls	r3, r1
 80021d4:	617b      	str	r3, [r7, #20]
        break;
 80021d6:	e00d      	b.n	80021f4 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80021d8:	68b9      	ldr	r1, [r7, #8]
 80021da:	481c      	ldr	r0, [pc, #112]	; (800224c <HAL_RCC_GetSysClockFreq+0xfc>)
 80021dc:	f7fd ffa4 	bl	8000128 <__udivsi3>
 80021e0:	0003      	movs	r3, r0
 80021e2:	0019      	movs	r1, r3
 80021e4:	4b18      	ldr	r3, [pc, #96]	; (8002248 <HAL_RCC_GetSysClockFreq+0xf8>)
 80021e6:	68db      	ldr	r3, [r3, #12]
 80021e8:	0a1b      	lsrs	r3, r3, #8
 80021ea:	227f      	movs	r2, #127	; 0x7f
 80021ec:	4013      	ands	r3, r2
 80021ee:	434b      	muls	r3, r1
 80021f0:	617b      	str	r3, [r7, #20]
        break;
 80021f2:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80021f4:	4b14      	ldr	r3, [pc, #80]	; (8002248 <HAL_RCC_GetSysClockFreq+0xf8>)
 80021f6:	68db      	ldr	r3, [r3, #12]
 80021f8:	0f5b      	lsrs	r3, r3, #29
 80021fa:	2207      	movs	r2, #7
 80021fc:	4013      	ands	r3, r2
 80021fe:	3301      	adds	r3, #1
 8002200:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8002202:	6879      	ldr	r1, [r7, #4]
 8002204:	6978      	ldr	r0, [r7, #20]
 8002206:	f7fd ff8f 	bl	8000128 <__udivsi3>
 800220a:	0003      	movs	r3, r0
 800220c:	613b      	str	r3, [r7, #16]
 800220e:	e015      	b.n	800223c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002210:	4b0d      	ldr	r3, [pc, #52]	; (8002248 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002212:	689b      	ldr	r3, [r3, #8]
 8002214:	2238      	movs	r2, #56	; 0x38
 8002216:	4013      	ands	r3, r2
 8002218:	2b20      	cmp	r3, #32
 800221a:	d103      	bne.n	8002224 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 800221c:	2380      	movs	r3, #128	; 0x80
 800221e:	021b      	lsls	r3, r3, #8
 8002220:	613b      	str	r3, [r7, #16]
 8002222:	e00b      	b.n	800223c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002224:	4b08      	ldr	r3, [pc, #32]	; (8002248 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002226:	689b      	ldr	r3, [r3, #8]
 8002228:	2238      	movs	r2, #56	; 0x38
 800222a:	4013      	ands	r3, r2
 800222c:	2b18      	cmp	r3, #24
 800222e:	d103      	bne.n	8002238 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002230:	23fa      	movs	r3, #250	; 0xfa
 8002232:	01db      	lsls	r3, r3, #7
 8002234:	613b      	str	r3, [r7, #16]
 8002236:	e001      	b.n	800223c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8002238:	2300      	movs	r3, #0
 800223a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800223c:	693b      	ldr	r3, [r7, #16]
}
 800223e:	0018      	movs	r0, r3
 8002240:	46bd      	mov	sp, r7
 8002242:	b006      	add	sp, #24
 8002244:	bd80      	pop	{r7, pc}
 8002246:	46c0      	nop			; (mov r8, r8)
 8002248:	40021000 	.word	0x40021000
 800224c:	00f42400 	.word	0x00f42400
 8002250:	007a1200 	.word	0x007a1200

08002254 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002258:	4b02      	ldr	r3, [pc, #8]	; (8002264 <HAL_RCC_GetHCLKFreq+0x10>)
 800225a:	681b      	ldr	r3, [r3, #0]
}
 800225c:	0018      	movs	r0, r3
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}
 8002262:	46c0      	nop			; (mov r8, r8)
 8002264:	20000000 	.word	0x20000000

08002268 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002268:	b5b0      	push	{r4, r5, r7, lr}
 800226a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800226c:	f7ff fff2 	bl	8002254 <HAL_RCC_GetHCLKFreq>
 8002270:	0004      	movs	r4, r0
 8002272:	f7ff fb3f 	bl	80018f4 <LL_RCC_GetAPB1Prescaler>
 8002276:	0003      	movs	r3, r0
 8002278:	0b1a      	lsrs	r2, r3, #12
 800227a:	4b05      	ldr	r3, [pc, #20]	; (8002290 <HAL_RCC_GetPCLK1Freq+0x28>)
 800227c:	0092      	lsls	r2, r2, #2
 800227e:	58d3      	ldr	r3, [r2, r3]
 8002280:	221f      	movs	r2, #31
 8002282:	4013      	ands	r3, r2
 8002284:	40dc      	lsrs	r4, r3
 8002286:	0023      	movs	r3, r4
}
 8002288:	0018      	movs	r0, r3
 800228a:	46bd      	mov	sp, r7
 800228c:	bdb0      	pop	{r4, r5, r7, pc}
 800228e:	46c0      	nop			; (mov r8, r8)
 8002290:	080068c8 	.word	0x080068c8

08002294 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b086      	sub	sp, #24
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 800229c:	2313      	movs	r3, #19
 800229e:	18fb      	adds	r3, r7, r3
 80022a0:	2200      	movs	r2, #0
 80022a2:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80022a4:	2312      	movs	r3, #18
 80022a6:	18fb      	adds	r3, r7, r3
 80022a8:	2200      	movs	r2, #0
 80022aa:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681a      	ldr	r2, [r3, #0]
 80022b0:	2380      	movs	r3, #128	; 0x80
 80022b2:	029b      	lsls	r3, r3, #10
 80022b4:	4013      	ands	r3, r2
 80022b6:	d100      	bne.n	80022ba <HAL_RCCEx_PeriphCLKConfig+0x26>
 80022b8:	e0a3      	b.n	8002402 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022ba:	2011      	movs	r0, #17
 80022bc:	183b      	adds	r3, r7, r0
 80022be:	2200      	movs	r2, #0
 80022c0:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022c2:	4bc3      	ldr	r3, [pc, #780]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80022c4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80022c6:	2380      	movs	r3, #128	; 0x80
 80022c8:	055b      	lsls	r3, r3, #21
 80022ca:	4013      	ands	r3, r2
 80022cc:	d110      	bne.n	80022f0 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022ce:	4bc0      	ldr	r3, [pc, #768]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80022d0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80022d2:	4bbf      	ldr	r3, [pc, #764]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80022d4:	2180      	movs	r1, #128	; 0x80
 80022d6:	0549      	lsls	r1, r1, #21
 80022d8:	430a      	orrs	r2, r1
 80022da:	63da      	str	r2, [r3, #60]	; 0x3c
 80022dc:	4bbc      	ldr	r3, [pc, #752]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80022de:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80022e0:	2380      	movs	r3, #128	; 0x80
 80022e2:	055b      	lsls	r3, r3, #21
 80022e4:	4013      	ands	r3, r2
 80022e6:	60bb      	str	r3, [r7, #8]
 80022e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022ea:	183b      	adds	r3, r7, r0
 80022ec:	2201      	movs	r2, #1
 80022ee:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80022f0:	4bb8      	ldr	r3, [pc, #736]	; (80025d4 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80022f2:	681a      	ldr	r2, [r3, #0]
 80022f4:	4bb7      	ldr	r3, [pc, #732]	; (80025d4 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80022f6:	2180      	movs	r1, #128	; 0x80
 80022f8:	0049      	lsls	r1, r1, #1
 80022fa:	430a      	orrs	r2, r1
 80022fc:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80022fe:	f7fe ff8f 	bl	8001220 <HAL_GetTick>
 8002302:	0003      	movs	r3, r0
 8002304:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002306:	e00b      	b.n	8002320 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002308:	f7fe ff8a 	bl	8001220 <HAL_GetTick>
 800230c:	0002      	movs	r2, r0
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	1ad3      	subs	r3, r2, r3
 8002312:	2b02      	cmp	r3, #2
 8002314:	d904      	bls.n	8002320 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8002316:	2313      	movs	r3, #19
 8002318:	18fb      	adds	r3, r7, r3
 800231a:	2203      	movs	r2, #3
 800231c:	701a      	strb	r2, [r3, #0]
        break;
 800231e:	e005      	b.n	800232c <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002320:	4bac      	ldr	r3, [pc, #688]	; (80025d4 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8002322:	681a      	ldr	r2, [r3, #0]
 8002324:	2380      	movs	r3, #128	; 0x80
 8002326:	005b      	lsls	r3, r3, #1
 8002328:	4013      	ands	r3, r2
 800232a:	d0ed      	beq.n	8002308 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 800232c:	2313      	movs	r3, #19
 800232e:	18fb      	adds	r3, r7, r3
 8002330:	781b      	ldrb	r3, [r3, #0]
 8002332:	2b00      	cmp	r3, #0
 8002334:	d154      	bne.n	80023e0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002336:	4ba6      	ldr	r3, [pc, #664]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002338:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800233a:	23c0      	movs	r3, #192	; 0xc0
 800233c:	009b      	lsls	r3, r3, #2
 800233e:	4013      	ands	r3, r2
 8002340:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002342:	697b      	ldr	r3, [r7, #20]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d019      	beq.n	800237c <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800234c:	697a      	ldr	r2, [r7, #20]
 800234e:	429a      	cmp	r2, r3
 8002350:	d014      	beq.n	800237c <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002352:	4b9f      	ldr	r3, [pc, #636]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002354:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002356:	4aa0      	ldr	r2, [pc, #640]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8002358:	4013      	ands	r3, r2
 800235a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800235c:	4b9c      	ldr	r3, [pc, #624]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800235e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002360:	4b9b      	ldr	r3, [pc, #620]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002362:	2180      	movs	r1, #128	; 0x80
 8002364:	0249      	lsls	r1, r1, #9
 8002366:	430a      	orrs	r2, r1
 8002368:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 800236a:	4b99      	ldr	r3, [pc, #612]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800236c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800236e:	4b98      	ldr	r3, [pc, #608]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002370:	499a      	ldr	r1, [pc, #616]	; (80025dc <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8002372:	400a      	ands	r2, r1
 8002374:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002376:	4b96      	ldr	r3, [pc, #600]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002378:	697a      	ldr	r2, [r7, #20]
 800237a:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800237c:	697b      	ldr	r3, [r7, #20]
 800237e:	2201      	movs	r2, #1
 8002380:	4013      	ands	r3, r2
 8002382:	d016      	beq.n	80023b2 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002384:	f7fe ff4c 	bl	8001220 <HAL_GetTick>
 8002388:	0003      	movs	r3, r0
 800238a:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800238c:	e00c      	b.n	80023a8 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800238e:	f7fe ff47 	bl	8001220 <HAL_GetTick>
 8002392:	0002      	movs	r2, r0
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	1ad3      	subs	r3, r2, r3
 8002398:	4a91      	ldr	r2, [pc, #580]	; (80025e0 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d904      	bls.n	80023a8 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 800239e:	2313      	movs	r3, #19
 80023a0:	18fb      	adds	r3, r7, r3
 80023a2:	2203      	movs	r2, #3
 80023a4:	701a      	strb	r2, [r3, #0]
            break;
 80023a6:	e004      	b.n	80023b2 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80023a8:	4b89      	ldr	r3, [pc, #548]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80023aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023ac:	2202      	movs	r2, #2
 80023ae:	4013      	ands	r3, r2
 80023b0:	d0ed      	beq.n	800238e <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 80023b2:	2313      	movs	r3, #19
 80023b4:	18fb      	adds	r3, r7, r3
 80023b6:	781b      	ldrb	r3, [r3, #0]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d10a      	bne.n	80023d2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80023bc:	4b84      	ldr	r3, [pc, #528]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80023be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023c0:	4a85      	ldr	r2, [pc, #532]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80023c2:	4013      	ands	r3, r2
 80023c4:	0019      	movs	r1, r3
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80023ca:	4b81      	ldr	r3, [pc, #516]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80023cc:	430a      	orrs	r2, r1
 80023ce:	65da      	str	r2, [r3, #92]	; 0x5c
 80023d0:	e00c      	b.n	80023ec <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80023d2:	2312      	movs	r3, #18
 80023d4:	18fb      	adds	r3, r7, r3
 80023d6:	2213      	movs	r2, #19
 80023d8:	18ba      	adds	r2, r7, r2
 80023da:	7812      	ldrb	r2, [r2, #0]
 80023dc:	701a      	strb	r2, [r3, #0]
 80023de:	e005      	b.n	80023ec <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80023e0:	2312      	movs	r3, #18
 80023e2:	18fb      	adds	r3, r7, r3
 80023e4:	2213      	movs	r2, #19
 80023e6:	18ba      	adds	r2, r7, r2
 80023e8:	7812      	ldrb	r2, [r2, #0]
 80023ea:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80023ec:	2311      	movs	r3, #17
 80023ee:	18fb      	adds	r3, r7, r3
 80023f0:	781b      	ldrb	r3, [r3, #0]
 80023f2:	2b01      	cmp	r3, #1
 80023f4:	d105      	bne.n	8002402 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023f6:	4b76      	ldr	r3, [pc, #472]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80023f8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80023fa:	4b75      	ldr	r3, [pc, #468]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80023fc:	4979      	ldr	r1, [pc, #484]	; (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 80023fe:	400a      	ands	r2, r1
 8002400:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	2201      	movs	r2, #1
 8002408:	4013      	ands	r3, r2
 800240a:	d009      	beq.n	8002420 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800240c:	4b70      	ldr	r3, [pc, #448]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800240e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002410:	2203      	movs	r2, #3
 8002412:	4393      	bics	r3, r2
 8002414:	0019      	movs	r1, r3
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	685a      	ldr	r2, [r3, #4]
 800241a:	4b6d      	ldr	r3, [pc, #436]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800241c:	430a      	orrs	r2, r1
 800241e:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	2202      	movs	r2, #2
 8002426:	4013      	ands	r3, r2
 8002428:	d009      	beq.n	800243e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800242a:	4b69      	ldr	r3, [pc, #420]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800242c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800242e:	220c      	movs	r2, #12
 8002430:	4393      	bics	r3, r2
 8002432:	0019      	movs	r1, r3
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	689a      	ldr	r2, [r3, #8]
 8002438:	4b65      	ldr	r3, [pc, #404]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800243a:	430a      	orrs	r2, r1
 800243c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	2210      	movs	r2, #16
 8002444:	4013      	ands	r3, r2
 8002446:	d009      	beq.n	800245c <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002448:	4b61      	ldr	r3, [pc, #388]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800244a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800244c:	4a66      	ldr	r2, [pc, #408]	; (80025e8 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 800244e:	4013      	ands	r3, r2
 8002450:	0019      	movs	r1, r3
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	68da      	ldr	r2, [r3, #12]
 8002456:	4b5e      	ldr	r3, [pc, #376]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002458:	430a      	orrs	r2, r1
 800245a:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681a      	ldr	r2, [r3, #0]
 8002460:	2380      	movs	r3, #128	; 0x80
 8002462:	009b      	lsls	r3, r3, #2
 8002464:	4013      	ands	r3, r2
 8002466:	d009      	beq.n	800247c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002468:	4b59      	ldr	r3, [pc, #356]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800246a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800246c:	4a5f      	ldr	r2, [pc, #380]	; (80025ec <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800246e:	4013      	ands	r3, r2
 8002470:	0019      	movs	r1, r3
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	699a      	ldr	r2, [r3, #24]
 8002476:	4b56      	ldr	r3, [pc, #344]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002478:	430a      	orrs	r2, r1
 800247a:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681a      	ldr	r2, [r3, #0]
 8002480:	2380      	movs	r3, #128	; 0x80
 8002482:	00db      	lsls	r3, r3, #3
 8002484:	4013      	ands	r3, r2
 8002486:	d009      	beq.n	800249c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002488:	4b51      	ldr	r3, [pc, #324]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800248a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800248c:	4a58      	ldr	r2, [pc, #352]	; (80025f0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800248e:	4013      	ands	r3, r2
 8002490:	0019      	movs	r1, r3
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	69da      	ldr	r2, [r3, #28]
 8002496:	4b4e      	ldr	r3, [pc, #312]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002498:	430a      	orrs	r2, r1
 800249a:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	2220      	movs	r2, #32
 80024a2:	4013      	ands	r3, r2
 80024a4:	d009      	beq.n	80024ba <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80024a6:	4b4a      	ldr	r3, [pc, #296]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80024a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024aa:	4a52      	ldr	r2, [pc, #328]	; (80025f4 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 80024ac:	4013      	ands	r3, r2
 80024ae:	0019      	movs	r1, r3
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	691a      	ldr	r2, [r3, #16]
 80024b4:	4b46      	ldr	r3, [pc, #280]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80024b6:	430a      	orrs	r2, r1
 80024b8:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681a      	ldr	r2, [r3, #0]
 80024be:	2380      	movs	r3, #128	; 0x80
 80024c0:	01db      	lsls	r3, r3, #7
 80024c2:	4013      	ands	r3, r2
 80024c4:	d015      	beq.n	80024f2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80024c6:	4b42      	ldr	r3, [pc, #264]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80024c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024ca:	009b      	lsls	r3, r3, #2
 80024cc:	0899      	lsrs	r1, r3, #2
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6a1a      	ldr	r2, [r3, #32]
 80024d2:	4b3f      	ldr	r3, [pc, #252]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80024d4:	430a      	orrs	r2, r1
 80024d6:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6a1a      	ldr	r2, [r3, #32]
 80024dc:	2380      	movs	r3, #128	; 0x80
 80024de:	05db      	lsls	r3, r3, #23
 80024e0:	429a      	cmp	r2, r3
 80024e2:	d106      	bne.n	80024f2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80024e4:	4b3a      	ldr	r3, [pc, #232]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80024e6:	68da      	ldr	r2, [r3, #12]
 80024e8:	4b39      	ldr	r3, [pc, #228]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80024ea:	2180      	movs	r1, #128	; 0x80
 80024ec:	0249      	lsls	r1, r1, #9
 80024ee:	430a      	orrs	r2, r1
 80024f0:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681a      	ldr	r2, [r3, #0]
 80024f6:	2380      	movs	r3, #128	; 0x80
 80024f8:	031b      	lsls	r3, r3, #12
 80024fa:	4013      	ands	r3, r2
 80024fc:	d009      	beq.n	8002512 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80024fe:	4b34      	ldr	r3, [pc, #208]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002500:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002502:	2240      	movs	r2, #64	; 0x40
 8002504:	4393      	bics	r3, r2
 8002506:	0019      	movs	r1, r3
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800250c:	4b30      	ldr	r3, [pc, #192]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800250e:	430a      	orrs	r2, r1
 8002510:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681a      	ldr	r2, [r3, #0]
 8002516:	2380      	movs	r3, #128	; 0x80
 8002518:	039b      	lsls	r3, r3, #14
 800251a:	4013      	ands	r3, r2
 800251c:	d016      	beq.n	800254c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800251e:	4b2c      	ldr	r3, [pc, #176]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002520:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002522:	4a35      	ldr	r2, [pc, #212]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8002524:	4013      	ands	r3, r2
 8002526:	0019      	movs	r1, r3
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800252c:	4b28      	ldr	r3, [pc, #160]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800252e:	430a      	orrs	r2, r1
 8002530:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002536:	2380      	movs	r3, #128	; 0x80
 8002538:	03db      	lsls	r3, r3, #15
 800253a:	429a      	cmp	r2, r3
 800253c:	d106      	bne.n	800254c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800253e:	4b24      	ldr	r3, [pc, #144]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002540:	68da      	ldr	r2, [r3, #12]
 8002542:	4b23      	ldr	r3, [pc, #140]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002544:	2180      	movs	r1, #128	; 0x80
 8002546:	0449      	lsls	r1, r1, #17
 8002548:	430a      	orrs	r2, r1
 800254a:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681a      	ldr	r2, [r3, #0]
 8002550:	2380      	movs	r3, #128	; 0x80
 8002552:	03db      	lsls	r3, r3, #15
 8002554:	4013      	ands	r3, r2
 8002556:	d016      	beq.n	8002586 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002558:	4b1d      	ldr	r3, [pc, #116]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800255a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800255c:	4a27      	ldr	r2, [pc, #156]	; (80025fc <HAL_RCCEx_PeriphCLKConfig+0x368>)
 800255e:	4013      	ands	r3, r2
 8002560:	0019      	movs	r1, r3
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002566:	4b1a      	ldr	r3, [pc, #104]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002568:	430a      	orrs	r2, r1
 800256a:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002570:	2380      	movs	r3, #128	; 0x80
 8002572:	045b      	lsls	r3, r3, #17
 8002574:	429a      	cmp	r2, r3
 8002576:	d106      	bne.n	8002586 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002578:	4b15      	ldr	r3, [pc, #84]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800257a:	68da      	ldr	r2, [r3, #12]
 800257c:	4b14      	ldr	r3, [pc, #80]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800257e:	2180      	movs	r1, #128	; 0x80
 8002580:	0449      	lsls	r1, r1, #17
 8002582:	430a      	orrs	r2, r1
 8002584:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681a      	ldr	r2, [r3, #0]
 800258a:	2380      	movs	r3, #128	; 0x80
 800258c:	011b      	lsls	r3, r3, #4
 800258e:	4013      	ands	r3, r2
 8002590:	d016      	beq.n	80025c0 <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8002592:	4b0f      	ldr	r3, [pc, #60]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002594:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002596:	4a1a      	ldr	r2, [pc, #104]	; (8002600 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8002598:	4013      	ands	r3, r2
 800259a:	0019      	movs	r1, r3
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	695a      	ldr	r2, [r3, #20]
 80025a0:	4b0b      	ldr	r3, [pc, #44]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80025a2:	430a      	orrs	r2, r1
 80025a4:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	695a      	ldr	r2, [r3, #20]
 80025aa:	2380      	movs	r3, #128	; 0x80
 80025ac:	01db      	lsls	r3, r3, #7
 80025ae:	429a      	cmp	r2, r3
 80025b0:	d106      	bne.n	80025c0 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80025b2:	4b07      	ldr	r3, [pc, #28]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80025b4:	68da      	ldr	r2, [r3, #12]
 80025b6:	4b06      	ldr	r3, [pc, #24]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80025b8:	2180      	movs	r1, #128	; 0x80
 80025ba:	0249      	lsls	r1, r1, #9
 80025bc:	430a      	orrs	r2, r1
 80025be:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 80025c0:	2312      	movs	r3, #18
 80025c2:	18fb      	adds	r3, r7, r3
 80025c4:	781b      	ldrb	r3, [r3, #0]
}
 80025c6:	0018      	movs	r0, r3
 80025c8:	46bd      	mov	sp, r7
 80025ca:	b006      	add	sp, #24
 80025cc:	bd80      	pop	{r7, pc}
 80025ce:	46c0      	nop			; (mov r8, r8)
 80025d0:	40021000 	.word	0x40021000
 80025d4:	40007000 	.word	0x40007000
 80025d8:	fffffcff 	.word	0xfffffcff
 80025dc:	fffeffff 	.word	0xfffeffff
 80025e0:	00001388 	.word	0x00001388
 80025e4:	efffffff 	.word	0xefffffff
 80025e8:	fffff3ff 	.word	0xfffff3ff
 80025ec:	fff3ffff 	.word	0xfff3ffff
 80025f0:	ffcfffff 	.word	0xffcfffff
 80025f4:	ffffcfff 	.word	0xffffcfff
 80025f8:	ffbfffff 	.word	0xffbfffff
 80025fc:	feffffff 	.word	0xfeffffff
 8002600:	ffff3fff 	.word	0xffff3fff

08002604 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b084      	sub	sp, #16
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d101      	bne.n	8002616 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002612:	2301      	movs	r3, #1
 8002614:	e0a8      	b.n	8002768 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800261a:	2b00      	cmp	r3, #0
 800261c:	d109      	bne.n	8002632 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	685a      	ldr	r2, [r3, #4]
 8002622:	2382      	movs	r3, #130	; 0x82
 8002624:	005b      	lsls	r3, r3, #1
 8002626:	429a      	cmp	r2, r3
 8002628:	d009      	beq.n	800263e <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2200      	movs	r2, #0
 800262e:	61da      	str	r2, [r3, #28]
 8002630:	e005      	b.n	800263e <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2200      	movs	r2, #0
 8002636:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2200      	movs	r2, #0
 800263c:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2200      	movs	r2, #0
 8002642:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	225d      	movs	r2, #93	; 0x5d
 8002648:	5c9b      	ldrb	r3, [r3, r2]
 800264a:	b2db      	uxtb	r3, r3
 800264c:	2b00      	cmp	r3, #0
 800264e:	d107      	bne.n	8002660 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	225c      	movs	r2, #92	; 0x5c
 8002654:	2100      	movs	r1, #0
 8002656:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	0018      	movs	r0, r3
 800265c:	f7fe fb1a 	bl	8000c94 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	225d      	movs	r2, #93	; 0x5d
 8002664:	2102      	movs	r1, #2
 8002666:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	681a      	ldr	r2, [r3, #0]
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	2140      	movs	r1, #64	; 0x40
 8002674:	438a      	bics	r2, r1
 8002676:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	68da      	ldr	r2, [r3, #12]
 800267c:	23e0      	movs	r3, #224	; 0xe0
 800267e:	00db      	lsls	r3, r3, #3
 8002680:	429a      	cmp	r2, r3
 8002682:	d902      	bls.n	800268a <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002684:	2300      	movs	r3, #0
 8002686:	60fb      	str	r3, [r7, #12]
 8002688:	e002      	b.n	8002690 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800268a:	2380      	movs	r3, #128	; 0x80
 800268c:	015b      	lsls	r3, r3, #5
 800268e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	68da      	ldr	r2, [r3, #12]
 8002694:	23f0      	movs	r3, #240	; 0xf0
 8002696:	011b      	lsls	r3, r3, #4
 8002698:	429a      	cmp	r2, r3
 800269a:	d008      	beq.n	80026ae <HAL_SPI_Init+0xaa>
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	68da      	ldr	r2, [r3, #12]
 80026a0:	23e0      	movs	r3, #224	; 0xe0
 80026a2:	00db      	lsls	r3, r3, #3
 80026a4:	429a      	cmp	r2, r3
 80026a6:	d002      	beq.n	80026ae <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2200      	movs	r2, #0
 80026ac:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	685a      	ldr	r2, [r3, #4]
 80026b2:	2382      	movs	r3, #130	; 0x82
 80026b4:	005b      	lsls	r3, r3, #1
 80026b6:	401a      	ands	r2, r3
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6899      	ldr	r1, [r3, #8]
 80026bc:	2384      	movs	r3, #132	; 0x84
 80026be:	021b      	lsls	r3, r3, #8
 80026c0:	400b      	ands	r3, r1
 80026c2:	431a      	orrs	r2, r3
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	691b      	ldr	r3, [r3, #16]
 80026c8:	2102      	movs	r1, #2
 80026ca:	400b      	ands	r3, r1
 80026cc:	431a      	orrs	r2, r3
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	695b      	ldr	r3, [r3, #20]
 80026d2:	2101      	movs	r1, #1
 80026d4:	400b      	ands	r3, r1
 80026d6:	431a      	orrs	r2, r3
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6999      	ldr	r1, [r3, #24]
 80026dc:	2380      	movs	r3, #128	; 0x80
 80026de:	009b      	lsls	r3, r3, #2
 80026e0:	400b      	ands	r3, r1
 80026e2:	431a      	orrs	r2, r3
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	69db      	ldr	r3, [r3, #28]
 80026e8:	2138      	movs	r1, #56	; 0x38
 80026ea:	400b      	ands	r3, r1
 80026ec:	431a      	orrs	r2, r3
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6a1b      	ldr	r3, [r3, #32]
 80026f2:	2180      	movs	r1, #128	; 0x80
 80026f4:	400b      	ands	r3, r1
 80026f6:	431a      	orrs	r2, r3
 80026f8:	0011      	movs	r1, r2
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80026fe:	2380      	movs	r3, #128	; 0x80
 8002700:	019b      	lsls	r3, r3, #6
 8002702:	401a      	ands	r2, r3
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	430a      	orrs	r2, r1
 800270a:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	699b      	ldr	r3, [r3, #24]
 8002710:	0c1b      	lsrs	r3, r3, #16
 8002712:	2204      	movs	r2, #4
 8002714:	401a      	ands	r2, r3
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800271a:	2110      	movs	r1, #16
 800271c:	400b      	ands	r3, r1
 800271e:	431a      	orrs	r2, r3
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002724:	2108      	movs	r1, #8
 8002726:	400b      	ands	r3, r1
 8002728:	431a      	orrs	r2, r3
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	68d9      	ldr	r1, [r3, #12]
 800272e:	23f0      	movs	r3, #240	; 0xf0
 8002730:	011b      	lsls	r3, r3, #4
 8002732:	400b      	ands	r3, r1
 8002734:	431a      	orrs	r2, r3
 8002736:	0011      	movs	r1, r2
 8002738:	68fa      	ldr	r2, [r7, #12]
 800273a:	2380      	movs	r3, #128	; 0x80
 800273c:	015b      	lsls	r3, r3, #5
 800273e:	401a      	ands	r2, r3
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	430a      	orrs	r2, r1
 8002746:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	69da      	ldr	r2, [r3, #28]
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4907      	ldr	r1, [pc, #28]	; (8002770 <HAL_SPI_Init+0x16c>)
 8002754:	400a      	ands	r2, r1
 8002756:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2200      	movs	r2, #0
 800275c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	225d      	movs	r2, #93	; 0x5d
 8002762:	2101      	movs	r1, #1
 8002764:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002766:	2300      	movs	r3, #0
}
 8002768:	0018      	movs	r0, r3
 800276a:	46bd      	mov	sp, r7
 800276c:	b004      	add	sp, #16
 800276e:	bd80      	pop	{r7, pc}
 8002770:	fffff7ff 	.word	0xfffff7ff

08002774 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b08a      	sub	sp, #40	; 0x28
 8002778:	af00      	add	r7, sp, #0
 800277a:	60f8      	str	r0, [r7, #12]
 800277c:	60b9      	str	r1, [r7, #8]
 800277e:	607a      	str	r2, [r7, #4]
 8002780:	001a      	movs	r2, r3
 8002782:	1cbb      	adds	r3, r7, #2
 8002784:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002786:	2301      	movs	r3, #1
 8002788:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800278a:	2323      	movs	r3, #35	; 0x23
 800278c:	18fb      	adds	r3, r7, r3
 800278e:	2200      	movs	r2, #0
 8002790:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	225c      	movs	r2, #92	; 0x5c
 8002796:	5c9b      	ldrb	r3, [r3, r2]
 8002798:	2b01      	cmp	r3, #1
 800279a:	d101      	bne.n	80027a0 <HAL_SPI_TransmitReceive+0x2c>
 800279c:	2302      	movs	r3, #2
 800279e:	e1b5      	b.n	8002b0c <HAL_SPI_TransmitReceive+0x398>
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	225c      	movs	r2, #92	; 0x5c
 80027a4:	2101      	movs	r1, #1
 80027a6:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80027a8:	f7fe fd3a 	bl	8001220 <HAL_GetTick>
 80027ac:	0003      	movs	r3, r0
 80027ae:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80027b0:	201b      	movs	r0, #27
 80027b2:	183b      	adds	r3, r7, r0
 80027b4:	68fa      	ldr	r2, [r7, #12]
 80027b6:	215d      	movs	r1, #93	; 0x5d
 80027b8:	5c52      	ldrb	r2, [r2, r1]
 80027ba:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80027c2:	2312      	movs	r3, #18
 80027c4:	18fb      	adds	r3, r7, r3
 80027c6:	1cba      	adds	r2, r7, #2
 80027c8:	8812      	ldrh	r2, [r2, #0]
 80027ca:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80027cc:	183b      	adds	r3, r7, r0
 80027ce:	781b      	ldrb	r3, [r3, #0]
 80027d0:	2b01      	cmp	r3, #1
 80027d2:	d011      	beq.n	80027f8 <HAL_SPI_TransmitReceive+0x84>
 80027d4:	697a      	ldr	r2, [r7, #20]
 80027d6:	2382      	movs	r3, #130	; 0x82
 80027d8:	005b      	lsls	r3, r3, #1
 80027da:	429a      	cmp	r2, r3
 80027dc:	d107      	bne.n	80027ee <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	689b      	ldr	r3, [r3, #8]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d103      	bne.n	80027ee <HAL_SPI_TransmitReceive+0x7a>
 80027e6:	183b      	adds	r3, r7, r0
 80027e8:	781b      	ldrb	r3, [r3, #0]
 80027ea:	2b04      	cmp	r3, #4
 80027ec:	d004      	beq.n	80027f8 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 80027ee:	2323      	movs	r3, #35	; 0x23
 80027f0:	18fb      	adds	r3, r7, r3
 80027f2:	2202      	movs	r2, #2
 80027f4:	701a      	strb	r2, [r3, #0]
    goto error;
 80027f6:	e17e      	b.n	8002af6 <HAL_SPI_TransmitReceive+0x382>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80027f8:	68bb      	ldr	r3, [r7, #8]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d006      	beq.n	800280c <HAL_SPI_TransmitReceive+0x98>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d003      	beq.n	800280c <HAL_SPI_TransmitReceive+0x98>
 8002804:	1cbb      	adds	r3, r7, #2
 8002806:	881b      	ldrh	r3, [r3, #0]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d104      	bne.n	8002816 <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 800280c:	2323      	movs	r3, #35	; 0x23
 800280e:	18fb      	adds	r3, r7, r3
 8002810:	2201      	movs	r2, #1
 8002812:	701a      	strb	r2, [r3, #0]
    goto error;
 8002814:	e16f      	b.n	8002af6 <HAL_SPI_TransmitReceive+0x382>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	225d      	movs	r2, #93	; 0x5d
 800281a:	5c9b      	ldrb	r3, [r3, r2]
 800281c:	b2db      	uxtb	r3, r3
 800281e:	2b04      	cmp	r3, #4
 8002820:	d003      	beq.n	800282a <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	225d      	movs	r2, #93	; 0x5d
 8002826:	2105      	movs	r1, #5
 8002828:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	2200      	movs	r2, #0
 800282e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	687a      	ldr	r2, [r7, #4]
 8002834:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	1cba      	adds	r2, r7, #2
 800283a:	2146      	movs	r1, #70	; 0x46
 800283c:	8812      	ldrh	r2, [r2, #0]
 800283e:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	1cba      	adds	r2, r7, #2
 8002844:	2144      	movs	r1, #68	; 0x44
 8002846:	8812      	ldrh	r2, [r2, #0]
 8002848:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	68ba      	ldr	r2, [r7, #8]
 800284e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	1cba      	adds	r2, r7, #2
 8002854:	8812      	ldrh	r2, [r2, #0]
 8002856:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	1cba      	adds	r2, r7, #2
 800285c:	8812      	ldrh	r2, [r2, #0]
 800285e:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	2200      	movs	r2, #0
 8002864:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	2200      	movs	r2, #0
 800286a:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	68da      	ldr	r2, [r3, #12]
 8002870:	23e0      	movs	r3, #224	; 0xe0
 8002872:	00db      	lsls	r3, r3, #3
 8002874:	429a      	cmp	r2, r3
 8002876:	d908      	bls.n	800288a <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	685a      	ldr	r2, [r3, #4]
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	49a4      	ldr	r1, [pc, #656]	; (8002b14 <HAL_SPI_TransmitReceive+0x3a0>)
 8002884:	400a      	ands	r2, r1
 8002886:	605a      	str	r2, [r3, #4]
 8002888:	e008      	b.n	800289c <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	685a      	ldr	r2, [r3, #4]
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	2180      	movs	r1, #128	; 0x80
 8002896:	0149      	lsls	r1, r1, #5
 8002898:	430a      	orrs	r2, r1
 800289a:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	2240      	movs	r2, #64	; 0x40
 80028a4:	4013      	ands	r3, r2
 80028a6:	2b40      	cmp	r3, #64	; 0x40
 80028a8:	d007      	beq.n	80028ba <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	681a      	ldr	r2, [r3, #0]
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	2140      	movs	r1, #64	; 0x40
 80028b6:	430a      	orrs	r2, r1
 80028b8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	68da      	ldr	r2, [r3, #12]
 80028be:	23e0      	movs	r3, #224	; 0xe0
 80028c0:	00db      	lsls	r3, r3, #3
 80028c2:	429a      	cmp	r2, r3
 80028c4:	d800      	bhi.n	80028c8 <HAL_SPI_TransmitReceive+0x154>
 80028c6:	e07f      	b.n	80029c8 <HAL_SPI_TransmitReceive+0x254>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d005      	beq.n	80028dc <HAL_SPI_TransmitReceive+0x168>
 80028d0:	2312      	movs	r3, #18
 80028d2:	18fb      	adds	r3, r7, r3
 80028d4:	881b      	ldrh	r3, [r3, #0]
 80028d6:	2b01      	cmp	r3, #1
 80028d8:	d000      	beq.n	80028dc <HAL_SPI_TransmitReceive+0x168>
 80028da:	e069      	b.n	80029b0 <HAL_SPI_TransmitReceive+0x23c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028e0:	881a      	ldrh	r2, [r3, #0]
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028ec:	1c9a      	adds	r2, r3, #2
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80028f6:	b29b      	uxth	r3, r3
 80028f8:	3b01      	subs	r3, #1
 80028fa:	b29a      	uxth	r2, r3
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002900:	e056      	b.n	80029b0 <HAL_SPI_TransmitReceive+0x23c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	689b      	ldr	r3, [r3, #8]
 8002908:	2202      	movs	r2, #2
 800290a:	4013      	ands	r3, r2
 800290c:	2b02      	cmp	r3, #2
 800290e:	d11b      	bne.n	8002948 <HAL_SPI_TransmitReceive+0x1d4>
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002914:	b29b      	uxth	r3, r3
 8002916:	2b00      	cmp	r3, #0
 8002918:	d016      	beq.n	8002948 <HAL_SPI_TransmitReceive+0x1d4>
 800291a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800291c:	2b01      	cmp	r3, #1
 800291e:	d113      	bne.n	8002948 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002924:	881a      	ldrh	r2, [r3, #0]
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002930:	1c9a      	adds	r2, r3, #2
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800293a:	b29b      	uxth	r3, r3
 800293c:	3b01      	subs	r3, #1
 800293e:	b29a      	uxth	r2, r3
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002944:	2300      	movs	r3, #0
 8002946:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	689b      	ldr	r3, [r3, #8]
 800294e:	2201      	movs	r2, #1
 8002950:	4013      	ands	r3, r2
 8002952:	2b01      	cmp	r3, #1
 8002954:	d11c      	bne.n	8002990 <HAL_SPI_TransmitReceive+0x21c>
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	2246      	movs	r2, #70	; 0x46
 800295a:	5a9b      	ldrh	r3, [r3, r2]
 800295c:	b29b      	uxth	r3, r3
 800295e:	2b00      	cmp	r3, #0
 8002960:	d016      	beq.n	8002990 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	68da      	ldr	r2, [r3, #12]
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800296c:	b292      	uxth	r2, r2
 800296e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002974:	1c9a      	adds	r2, r3, #2
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	2246      	movs	r2, #70	; 0x46
 800297e:	5a9b      	ldrh	r3, [r3, r2]
 8002980:	b29b      	uxth	r3, r3
 8002982:	3b01      	subs	r3, #1
 8002984:	b299      	uxth	r1, r3
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	2246      	movs	r2, #70	; 0x46
 800298a:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800298c:	2301      	movs	r3, #1
 800298e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002990:	f7fe fc46 	bl	8001220 <HAL_GetTick>
 8002994:	0002      	movs	r2, r0
 8002996:	69fb      	ldr	r3, [r7, #28]
 8002998:	1ad3      	subs	r3, r2, r3
 800299a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800299c:	429a      	cmp	r2, r3
 800299e:	d807      	bhi.n	80029b0 <HAL_SPI_TransmitReceive+0x23c>
 80029a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029a2:	3301      	adds	r3, #1
 80029a4:	d004      	beq.n	80029b0 <HAL_SPI_TransmitReceive+0x23c>
      {
        errorcode = HAL_TIMEOUT;
 80029a6:	2323      	movs	r3, #35	; 0x23
 80029a8:	18fb      	adds	r3, r7, r3
 80029aa:	2203      	movs	r2, #3
 80029ac:	701a      	strb	r2, [r3, #0]
        goto error;
 80029ae:	e0a2      	b.n	8002af6 <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80029b4:	b29b      	uxth	r3, r3
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d1a3      	bne.n	8002902 <HAL_SPI_TransmitReceive+0x18e>
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	2246      	movs	r2, #70	; 0x46
 80029be:	5a9b      	ldrh	r3, [r3, r2]
 80029c0:	b29b      	uxth	r3, r3
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d19d      	bne.n	8002902 <HAL_SPI_TransmitReceive+0x18e>
 80029c6:	e085      	b.n	8002ad4 <HAL_SPI_TransmitReceive+0x360>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d005      	beq.n	80029dc <HAL_SPI_TransmitReceive+0x268>
 80029d0:	2312      	movs	r3, #18
 80029d2:	18fb      	adds	r3, r7, r3
 80029d4:	881b      	ldrh	r3, [r3, #0]
 80029d6:	2b01      	cmp	r3, #1
 80029d8:	d000      	beq.n	80029dc <HAL_SPI_TransmitReceive+0x268>
 80029da:	e070      	b.n	8002abe <HAL_SPI_TransmitReceive+0x34a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	330c      	adds	r3, #12
 80029e6:	7812      	ldrb	r2, [r2, #0]
 80029e8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029ee:	1c5a      	adds	r2, r3, #1
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80029f8:	b29b      	uxth	r3, r3
 80029fa:	3b01      	subs	r3, #1
 80029fc:	b29a      	uxth	r2, r3
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002a02:	e05c      	b.n	8002abe <HAL_SPI_TransmitReceive+0x34a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	689b      	ldr	r3, [r3, #8]
 8002a0a:	2202      	movs	r2, #2
 8002a0c:	4013      	ands	r3, r2
 8002a0e:	2b02      	cmp	r3, #2
 8002a10:	d11c      	bne.n	8002a4c <HAL_SPI_TransmitReceive+0x2d8>
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a16:	b29b      	uxth	r3, r3
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d017      	beq.n	8002a4c <HAL_SPI_TransmitReceive+0x2d8>
 8002a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a1e:	2b01      	cmp	r3, #1
 8002a20:	d114      	bne.n	8002a4c <HAL_SPI_TransmitReceive+0x2d8>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	330c      	adds	r3, #12
 8002a2c:	7812      	ldrb	r2, [r2, #0]
 8002a2e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a34:	1c5a      	adds	r2, r3, #1
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a3e:	b29b      	uxth	r3, r3
 8002a40:	3b01      	subs	r3, #1
 8002a42:	b29a      	uxth	r2, r3
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002a48:	2300      	movs	r3, #0
 8002a4a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	689b      	ldr	r3, [r3, #8]
 8002a52:	2201      	movs	r2, #1
 8002a54:	4013      	ands	r3, r2
 8002a56:	2b01      	cmp	r3, #1
 8002a58:	d11e      	bne.n	8002a98 <HAL_SPI_TransmitReceive+0x324>
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	2246      	movs	r2, #70	; 0x46
 8002a5e:	5a9b      	ldrh	r3, [r3, r2]
 8002a60:	b29b      	uxth	r3, r3
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d018      	beq.n	8002a98 <HAL_SPI_TransmitReceive+0x324>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	330c      	adds	r3, #12
 8002a6c:	001a      	movs	r2, r3
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a72:	7812      	ldrb	r2, [r2, #0]
 8002a74:	b2d2      	uxtb	r2, r2
 8002a76:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a7c:	1c5a      	adds	r2, r3, #1
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	2246      	movs	r2, #70	; 0x46
 8002a86:	5a9b      	ldrh	r3, [r3, r2]
 8002a88:	b29b      	uxth	r3, r3
 8002a8a:	3b01      	subs	r3, #1
 8002a8c:	b299      	uxth	r1, r3
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	2246      	movs	r2, #70	; 0x46
 8002a92:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002a94:	2301      	movs	r3, #1
 8002a96:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002a98:	f7fe fbc2 	bl	8001220 <HAL_GetTick>
 8002a9c:	0002      	movs	r2, r0
 8002a9e:	69fb      	ldr	r3, [r7, #28]
 8002aa0:	1ad3      	subs	r3, r2, r3
 8002aa2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002aa4:	429a      	cmp	r2, r3
 8002aa6:	d802      	bhi.n	8002aae <HAL_SPI_TransmitReceive+0x33a>
 8002aa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002aaa:	3301      	adds	r3, #1
 8002aac:	d102      	bne.n	8002ab4 <HAL_SPI_TransmitReceive+0x340>
 8002aae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d104      	bne.n	8002abe <HAL_SPI_TransmitReceive+0x34a>
      {
        errorcode = HAL_TIMEOUT;
 8002ab4:	2323      	movs	r3, #35	; 0x23
 8002ab6:	18fb      	adds	r3, r7, r3
 8002ab8:	2203      	movs	r2, #3
 8002aba:	701a      	strb	r2, [r3, #0]
        goto error;
 8002abc:	e01b      	b.n	8002af6 <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ac2:	b29b      	uxth	r3, r3
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d19d      	bne.n	8002a04 <HAL_SPI_TransmitReceive+0x290>
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	2246      	movs	r2, #70	; 0x46
 8002acc:	5a9b      	ldrh	r3, [r3, r2]
 8002ace:	b29b      	uxth	r3, r3
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d197      	bne.n	8002a04 <HAL_SPI_TransmitReceive+0x290>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002ad4:	69fa      	ldr	r2, [r7, #28]
 8002ad6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	0018      	movs	r0, r3
 8002adc:	f000 fdbc 	bl	8003658 <SPI_EndRxTxTransaction>
 8002ae0:	1e03      	subs	r3, r0, #0
 8002ae2:	d007      	beq.n	8002af4 <HAL_SPI_TransmitReceive+0x380>
  {
    errorcode = HAL_ERROR;
 8002ae4:	2323      	movs	r3, #35	; 0x23
 8002ae6:	18fb      	adds	r3, r7, r3
 8002ae8:	2201      	movs	r2, #1
 8002aea:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	2220      	movs	r2, #32
 8002af0:	661a      	str	r2, [r3, #96]	; 0x60
 8002af2:	e000      	b.n	8002af6 <HAL_SPI_TransmitReceive+0x382>
  }

error :
 8002af4:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	225d      	movs	r2, #93	; 0x5d
 8002afa:	2101      	movs	r1, #1
 8002afc:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	225c      	movs	r2, #92	; 0x5c
 8002b02:	2100      	movs	r1, #0
 8002b04:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8002b06:	2323      	movs	r3, #35	; 0x23
 8002b08:	18fb      	adds	r3, r7, r3
 8002b0a:	781b      	ldrb	r3, [r3, #0]
}
 8002b0c:	0018      	movs	r0, r3
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	b00a      	add	sp, #40	; 0x28
 8002b12:	bd80      	pop	{r7, pc}
 8002b14:	ffffefff 	.word	0xffffefff

08002b18 <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b086      	sub	sp, #24
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	60f8      	str	r0, [r7, #12]
 8002b20:	60b9      	str	r1, [r7, #8]
 8002b22:	1dbb      	adds	r3, r7, #6
 8002b24:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002b26:	2317      	movs	r3, #23
 8002b28:	18fb      	adds	r3, r7, r3
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	701a      	strb	r2, [r3, #0]

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	689b      	ldr	r3, [r3, #8]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d112      	bne.n	8002b5c <HAL_SPI_Receive_IT+0x44>
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	685a      	ldr	r2, [r3, #4]
 8002b3a:	2382      	movs	r3, #130	; 0x82
 8002b3c:	005b      	lsls	r3, r3, #1
 8002b3e:	429a      	cmp	r2, r3
 8002b40:	d10c      	bne.n	8002b5c <HAL_SPI_Receive_IT+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	225d      	movs	r2, #93	; 0x5d
 8002b46:	2104      	movs	r1, #4
 8002b48:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 8002b4a:	1dbb      	adds	r3, r7, #6
 8002b4c:	881b      	ldrh	r3, [r3, #0]
 8002b4e:	68ba      	ldr	r2, [r7, #8]
 8002b50:	68b9      	ldr	r1, [r7, #8]
 8002b52:	68f8      	ldr	r0, [r7, #12]
 8002b54:	f000 f8a4 	bl	8002ca0 <HAL_SPI_TransmitReceive_IT>
 8002b58:	0003      	movs	r3, r0
 8002b5a:	e095      	b.n	8002c88 <HAL_SPI_Receive_IT+0x170>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	225c      	movs	r2, #92	; 0x5c
 8002b60:	5c9b      	ldrb	r3, [r3, r2]
 8002b62:	2b01      	cmp	r3, #1
 8002b64:	d101      	bne.n	8002b6a <HAL_SPI_Receive_IT+0x52>
 8002b66:	2302      	movs	r3, #2
 8002b68:	e08e      	b.n	8002c88 <HAL_SPI_Receive_IT+0x170>
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	225c      	movs	r2, #92	; 0x5c
 8002b6e:	2101      	movs	r1, #1
 8002b70:	5499      	strb	r1, [r3, r2]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	225d      	movs	r2, #93	; 0x5d
 8002b76:	5c9b      	ldrb	r3, [r3, r2]
 8002b78:	b2db      	uxtb	r3, r3
 8002b7a:	2b01      	cmp	r3, #1
 8002b7c:	d004      	beq.n	8002b88 <HAL_SPI_Receive_IT+0x70>
  {
    errorcode = HAL_BUSY;
 8002b7e:	2317      	movs	r3, #23
 8002b80:	18fb      	adds	r3, r7, r3
 8002b82:	2202      	movs	r2, #2
 8002b84:	701a      	strb	r2, [r3, #0]
    goto error;
 8002b86:	e078      	b.n	8002c7a <HAL_SPI_Receive_IT+0x162>
  }

  if ((pData == NULL) || (Size == 0U))
 8002b88:	68bb      	ldr	r3, [r7, #8]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d003      	beq.n	8002b96 <HAL_SPI_Receive_IT+0x7e>
 8002b8e:	1dbb      	adds	r3, r7, #6
 8002b90:	881b      	ldrh	r3, [r3, #0]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d104      	bne.n	8002ba0 <HAL_SPI_Receive_IT+0x88>
  {
    errorcode = HAL_ERROR;
 8002b96:	2317      	movs	r3, #23
 8002b98:	18fb      	adds	r3, r7, r3
 8002b9a:	2201      	movs	r2, #1
 8002b9c:	701a      	strb	r2, [r3, #0]
    goto error;
 8002b9e:	e06c      	b.n	8002c7a <HAL_SPI_Receive_IT+0x162>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	225d      	movs	r2, #93	; 0x5d
 8002ba4:	2104      	movs	r1, #4
 8002ba6:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	2200      	movs	r2, #0
 8002bac:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	68ba      	ldr	r2, [r7, #8]
 8002bb2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	1dba      	adds	r2, r7, #6
 8002bb8:	2144      	movs	r1, #68	; 0x44
 8002bba:	8812      	ldrh	r2, [r2, #0]
 8002bbc:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	1dba      	adds	r2, r7, #6
 8002bc2:	2146      	movs	r1, #70	; 0x46
 8002bc4:	8812      	ldrh	r2, [r2, #0]
 8002bc6:	525a      	strh	r2, [r3, r1]

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	2200      	movs	r2, #0
 8002bcc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	2200      	movs	r2, #0
 8002bde:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check the data size to adapt Rx threshold and the set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	68da      	ldr	r2, [r3, #12]
 8002be4:	23e0      	movs	r3, #224	; 0xe0
 8002be6:	00db      	lsls	r3, r3, #3
 8002be8:	429a      	cmp	r2, r3
 8002bea:	d90b      	bls.n	8002c04 <HAL_SPI_Receive_IT+0xec>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	685a      	ldr	r2, [r3, #4]
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4926      	ldr	r1, [pc, #152]	; (8002c90 <HAL_SPI_Receive_IT+0x178>)
 8002bf8:	400a      	ands	r2, r1
 8002bfa:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_16BIT;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	4a25      	ldr	r2, [pc, #148]	; (8002c94 <HAL_SPI_Receive_IT+0x17c>)
 8002c00:	64da      	str	r2, [r3, #76]	; 0x4c
 8002c02:	e00b      	b.n	8002c1c <HAL_SPI_Receive_IT+0x104>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	685a      	ldr	r2, [r3, #4]
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	2180      	movs	r1, #128	; 0x80
 8002c10:	0149      	lsls	r1, r1, #5
 8002c12:	430a      	orrs	r2, r1
 8002c14:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_8BIT;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	4a1f      	ldr	r2, [pc, #124]	; (8002c98 <HAL_SPI_Receive_IT+0x180>)
 8002c1a:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	689a      	ldr	r2, [r3, #8]
 8002c20:	2380      	movs	r3, #128	; 0x80
 8002c22:	021b      	lsls	r3, r3, #8
 8002c24:	429a      	cmp	r2, r3
 8002c26:	d10f      	bne.n	8002c48 <HAL_SPI_Receive_IT+0x130>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	681a      	ldr	r2, [r3, #0]
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	2140      	movs	r1, #64	; 0x40
 8002c34:	438a      	bics	r2, r1
 8002c36:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	681a      	ldr	r2, [r3, #0]
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4916      	ldr	r1, [pc, #88]	; (8002c9c <HAL_SPI_Receive_IT+0x184>)
 8002c44:	400a      	ands	r2, r1
 8002c46:	601a      	str	r2, [r3, #0]
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	685a      	ldr	r2, [r3, #4]
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	2160      	movs	r1, #96	; 0x60
 8002c54:	430a      	orrs	r2, r1
 8002c56:	605a      	str	r2, [r3, #4]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	2240      	movs	r2, #64	; 0x40
 8002c60:	4013      	ands	r3, r2
 8002c62:	2b40      	cmp	r3, #64	; 0x40
 8002c64:	d008      	beq.n	8002c78 <HAL_SPI_Receive_IT+0x160>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	681a      	ldr	r2, [r3, #0]
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	2140      	movs	r1, #64	; 0x40
 8002c72:	430a      	orrs	r2, r1
 8002c74:	601a      	str	r2, [r3, #0]
 8002c76:	e000      	b.n	8002c7a <HAL_SPI_Receive_IT+0x162>
  }

error :
 8002c78:	46c0      	nop			; (mov r8, r8)
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	225c      	movs	r2, #92	; 0x5c
 8002c7e:	2100      	movs	r1, #0
 8002c80:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8002c82:	2317      	movs	r3, #23
 8002c84:	18fb      	adds	r3, r7, r3
 8002c86:	781b      	ldrb	r3, [r3, #0]
}
 8002c88:	0018      	movs	r0, r3
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	b006      	add	sp, #24
 8002c8e:	bd80      	pop	{r7, pc}
 8002c90:	ffffefff 	.word	0xffffefff
 8002c94:	080032ef 	.word	0x080032ef
 8002c98:	0800329d 	.word	0x0800329d
 8002c9c:	ffffbfff 	.word	0xffffbfff

08002ca0 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b086      	sub	sp, #24
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	60f8      	str	r0, [r7, #12]
 8002ca8:	60b9      	str	r1, [r7, #8]
 8002caa:	607a      	str	r2, [r7, #4]
 8002cac:	001a      	movs	r2, r3
 8002cae:	1cbb      	adds	r3, r7, #2
 8002cb0:	801a      	strh	r2, [r3, #0]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002cb2:	2317      	movs	r3, #23
 8002cb4:	18fb      	adds	r3, r7, r3
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	225c      	movs	r2, #92	; 0x5c
 8002cbe:	5c9b      	ldrb	r3, [r3, r2]
 8002cc0:	2b01      	cmp	r3, #1
 8002cc2:	d101      	bne.n	8002cc8 <HAL_SPI_TransmitReceive_IT+0x28>
 8002cc4:	2302      	movs	r3, #2
 8002cc6:	e0a6      	b.n	8002e16 <HAL_SPI_TransmitReceive_IT+0x176>
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	225c      	movs	r2, #92	; 0x5c
 8002ccc:	2101      	movs	r1, #1
 8002cce:	5499      	strb	r1, [r3, r2]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002cd0:	2016      	movs	r0, #22
 8002cd2:	183b      	adds	r3, r7, r0
 8002cd4:	68fa      	ldr	r2, [r7, #12]
 8002cd6:	215d      	movs	r1, #93	; 0x5d
 8002cd8:	5c52      	ldrb	r2, [r2, r1]
 8002cda:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002ce2:	0001      	movs	r1, r0
 8002ce4:	187b      	adds	r3, r7, r1
 8002ce6:	781b      	ldrb	r3, [r3, #0]
 8002ce8:	2b01      	cmp	r3, #1
 8002cea:	d011      	beq.n	8002d10 <HAL_SPI_TransmitReceive_IT+0x70>
 8002cec:	693a      	ldr	r2, [r7, #16]
 8002cee:	2382      	movs	r3, #130	; 0x82
 8002cf0:	005b      	lsls	r3, r3, #1
 8002cf2:	429a      	cmp	r2, r3
 8002cf4:	d107      	bne.n	8002d06 <HAL_SPI_TransmitReceive_IT+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	689b      	ldr	r3, [r3, #8]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d103      	bne.n	8002d06 <HAL_SPI_TransmitReceive_IT+0x66>
 8002cfe:	187b      	adds	r3, r7, r1
 8002d00:	781b      	ldrb	r3, [r3, #0]
 8002d02:	2b04      	cmp	r3, #4
 8002d04:	d004      	beq.n	8002d10 <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_BUSY;
 8002d06:	2317      	movs	r3, #23
 8002d08:	18fb      	adds	r3, r7, r3
 8002d0a:	2202      	movs	r2, #2
 8002d0c:	701a      	strb	r2, [r3, #0]
    goto error;
 8002d0e:	e07b      	b.n	8002e08 <HAL_SPI_TransmitReceive_IT+0x168>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002d10:	68bb      	ldr	r3, [r7, #8]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d006      	beq.n	8002d24 <HAL_SPI_TransmitReceive_IT+0x84>
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d003      	beq.n	8002d24 <HAL_SPI_TransmitReceive_IT+0x84>
 8002d1c:	1cbb      	adds	r3, r7, #2
 8002d1e:	881b      	ldrh	r3, [r3, #0]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d104      	bne.n	8002d2e <HAL_SPI_TransmitReceive_IT+0x8e>
  {
    errorcode = HAL_ERROR;
 8002d24:	2317      	movs	r3, #23
 8002d26:	18fb      	adds	r3, r7, r3
 8002d28:	2201      	movs	r2, #1
 8002d2a:	701a      	strb	r2, [r3, #0]
    goto error;
 8002d2c:	e06c      	b.n	8002e08 <HAL_SPI_TransmitReceive_IT+0x168>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	225d      	movs	r2, #93	; 0x5d
 8002d32:	5c9b      	ldrb	r3, [r3, r2]
 8002d34:	b2db      	uxtb	r3, r3
 8002d36:	2b04      	cmp	r3, #4
 8002d38:	d003      	beq.n	8002d42 <HAL_SPI_TransmitReceive_IT+0xa2>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	225d      	movs	r2, #93	; 0x5d
 8002d3e:	2105      	movs	r1, #5
 8002d40:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	2200      	movs	r2, #0
 8002d46:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	68ba      	ldr	r2, [r7, #8]
 8002d4c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	1cba      	adds	r2, r7, #2
 8002d52:	8812      	ldrh	r2, [r2, #0]
 8002d54:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	1cba      	adds	r2, r7, #2
 8002d5a:	8812      	ldrh	r2, [r2, #0]
 8002d5c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	687a      	ldr	r2, [r7, #4]
 8002d62:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	1cba      	adds	r2, r7, #2
 8002d68:	2144      	movs	r1, #68	; 0x44
 8002d6a:	8812      	ldrh	r2, [r2, #0]
 8002d6c:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	1cba      	adds	r2, r7, #2
 8002d72:	2146      	movs	r1, #70	; 0x46
 8002d74:	8812      	ldrh	r2, [r2, #0]
 8002d76:	525a      	strh	r2, [r3, r1]

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	68da      	ldr	r2, [r3, #12]
 8002d7c:	23e0      	movs	r3, #224	; 0xe0
 8002d7e:	00db      	lsls	r3, r3, #3
 8002d80:	429a      	cmp	r2, r3
 8002d82:	d906      	bls.n	8002d92 <HAL_SPI_TransmitReceive_IT+0xf2>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	4a26      	ldr	r2, [pc, #152]	; (8002e20 <HAL_SPI_TransmitReceive_IT+0x180>)
 8002d88:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	4a25      	ldr	r2, [pc, #148]	; (8002e24 <HAL_SPI_TransmitReceive_IT+0x184>)
 8002d8e:	651a      	str	r2, [r3, #80]	; 0x50
 8002d90:	e005      	b.n	8002d9e <HAL_SPI_TransmitReceive_IT+0xfe>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	4a24      	ldr	r2, [pc, #144]	; (8002e28 <HAL_SPI_TransmitReceive_IT+0x188>)
 8002d96:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	4a24      	ldr	r2, [pc, #144]	; (8002e2c <HAL_SPI_TransmitReceive_IT+0x18c>)
 8002d9c:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Check if packing mode is enabled and if there is more than 2 data to receive */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	68da      	ldr	r2, [r3, #12]
 8002da2:	23e0      	movs	r3, #224	; 0xe0
 8002da4:	00db      	lsls	r3, r3, #3
 8002da6:	429a      	cmp	r2, r3
 8002da8:	d803      	bhi.n	8002db2 <HAL_SPI_TransmitReceive_IT+0x112>
 8002daa:	1cbb      	adds	r3, r7, #2
 8002dac:	881b      	ldrh	r3, [r3, #0]
 8002dae:	2b01      	cmp	r3, #1
 8002db0:	d908      	bls.n	8002dc4 <HAL_SPI_TransmitReceive_IT+0x124>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	685a      	ldr	r2, [r3, #4]
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	491c      	ldr	r1, [pc, #112]	; (8002e30 <HAL_SPI_TransmitReceive_IT+0x190>)
 8002dbe:	400a      	ands	r2, r1
 8002dc0:	605a      	str	r2, [r3, #4]
 8002dc2:	e008      	b.n	8002dd6 <HAL_SPI_TransmitReceive_IT+0x136>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	685a      	ldr	r2, [r3, #4]
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	2180      	movs	r1, #128	; 0x80
 8002dd0:	0149      	lsls	r1, r1, #5
 8002dd2:	430a      	orrs	r2, r1
 8002dd4:	605a      	str	r2, [r3, #4]
  }

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	685a      	ldr	r2, [r3, #4]
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	21e0      	movs	r1, #224	; 0xe0
 8002de2:	430a      	orrs	r2, r1
 8002de4:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	2240      	movs	r2, #64	; 0x40
 8002dee:	4013      	ands	r3, r2
 8002df0:	2b40      	cmp	r3, #64	; 0x40
 8002df2:	d008      	beq.n	8002e06 <HAL_SPI_TransmitReceive_IT+0x166>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	681a      	ldr	r2, [r3, #0]
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	2140      	movs	r1, #64	; 0x40
 8002e00:	430a      	orrs	r2, r1
 8002e02:	601a      	str	r2, [r3, #0]
 8002e04:	e000      	b.n	8002e08 <HAL_SPI_TransmitReceive_IT+0x168>
  }

error :
 8002e06:	46c0      	nop			; (mov r8, r8)
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	225c      	movs	r2, #92	; 0x5c
 8002e0c:	2100      	movs	r1, #0
 8002e0e:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8002e10:	2317      	movs	r3, #23
 8002e12:	18fb      	adds	r3, r7, r3
 8002e14:	781b      	ldrb	r3, [r3, #0]
}
 8002e16:	0018      	movs	r0, r3
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	b006      	add	sp, #24
 8002e1c:	bd80      	pop	{r7, pc}
 8002e1e:	46c0      	nop			; (mov r8, r8)
 8002e20:	080031d3 	.word	0x080031d3
 8002e24:	0800323b 	.word	0x0800323b
 8002e28:	0800307d 	.word	0x0800307d
 8002e2c:	0800313f 	.word	0x0800313f
 8002e30:	ffffefff 	.word	0xffffefff

08002e34 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b088      	sub	sp, #32
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	689b      	ldr	r3, [r3, #8]
 8002e4a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002e4c:	69bb      	ldr	r3, [r7, #24]
 8002e4e:	099b      	lsrs	r3, r3, #6
 8002e50:	001a      	movs	r2, r3
 8002e52:	2301      	movs	r3, #1
 8002e54:	4013      	ands	r3, r2
 8002e56:	d10f      	bne.n	8002e78 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002e58:	69bb      	ldr	r3, [r7, #24]
 8002e5a:	2201      	movs	r2, #1
 8002e5c:	4013      	ands	r3, r2
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002e5e:	d00b      	beq.n	8002e78 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002e60:	69fb      	ldr	r3, [r7, #28]
 8002e62:	099b      	lsrs	r3, r3, #6
 8002e64:	001a      	movs	r2, r3
 8002e66:	2301      	movs	r3, #1
 8002e68:	4013      	ands	r3, r2
 8002e6a:	d005      	beq.n	8002e78 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e70:	687a      	ldr	r2, [r7, #4]
 8002e72:	0010      	movs	r0, r2
 8002e74:	4798      	blx	r3
    return;
 8002e76:	e0d5      	b.n	8003024 <HAL_SPI_IRQHandler+0x1f0>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8002e78:	69bb      	ldr	r3, [r7, #24]
 8002e7a:	085b      	lsrs	r3, r3, #1
 8002e7c:	001a      	movs	r2, r3
 8002e7e:	2301      	movs	r3, #1
 8002e80:	4013      	ands	r3, r2
 8002e82:	d00b      	beq.n	8002e9c <HAL_SPI_IRQHandler+0x68>
 8002e84:	69fb      	ldr	r3, [r7, #28]
 8002e86:	09db      	lsrs	r3, r3, #7
 8002e88:	001a      	movs	r2, r3
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	4013      	ands	r3, r2
 8002e8e:	d005      	beq.n	8002e9c <HAL_SPI_IRQHandler+0x68>
  {
    hspi->TxISR(hspi);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e94:	687a      	ldr	r2, [r7, #4]
 8002e96:	0010      	movs	r0, r2
 8002e98:	4798      	blx	r3
    return;
 8002e9a:	e0c3      	b.n	8003024 <HAL_SPI_IRQHandler+0x1f0>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002e9c:	69bb      	ldr	r3, [r7, #24]
 8002e9e:	095b      	lsrs	r3, r3, #5
 8002ea0:	001a      	movs	r2, r3
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	4013      	ands	r3, r2
 8002ea6:	d10c      	bne.n	8002ec2 <HAL_SPI_IRQHandler+0x8e>
 8002ea8:	69bb      	ldr	r3, [r7, #24]
 8002eaa:	099b      	lsrs	r3, r3, #6
 8002eac:	001a      	movs	r2, r3
 8002eae:	2301      	movs	r3, #1
 8002eb0:	4013      	ands	r3, r2
 8002eb2:	d106      	bne.n	8002ec2 <HAL_SPI_IRQHandler+0x8e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8002eb4:	69bb      	ldr	r3, [r7, #24]
 8002eb6:	0a1b      	lsrs	r3, r3, #8
 8002eb8:	001a      	movs	r2, r3
 8002eba:	2301      	movs	r3, #1
 8002ebc:	4013      	ands	r3, r2
 8002ebe:	d100      	bne.n	8002ec2 <HAL_SPI_IRQHandler+0x8e>
 8002ec0:	e0b0      	b.n	8003024 <HAL_SPI_IRQHandler+0x1f0>
 8002ec2:	69fb      	ldr	r3, [r7, #28]
 8002ec4:	095b      	lsrs	r3, r3, #5
 8002ec6:	001a      	movs	r2, r3
 8002ec8:	2301      	movs	r3, #1
 8002eca:	4013      	ands	r3, r2
 8002ecc:	d100      	bne.n	8002ed0 <HAL_SPI_IRQHandler+0x9c>
 8002ece:	e0a9      	b.n	8003024 <HAL_SPI_IRQHandler+0x1f0>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002ed0:	69bb      	ldr	r3, [r7, #24]
 8002ed2:	099b      	lsrs	r3, r3, #6
 8002ed4:	001a      	movs	r2, r3
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	4013      	ands	r3, r2
 8002eda:	d023      	beq.n	8002f24 <HAL_SPI_IRQHandler+0xf0>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	225d      	movs	r2, #93	; 0x5d
 8002ee0:	5c9b      	ldrb	r3, [r3, r2]
 8002ee2:	b2db      	uxtb	r3, r3
 8002ee4:	2b03      	cmp	r3, #3
 8002ee6:	d011      	beq.n	8002f0c <HAL_SPI_IRQHandler+0xd8>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002eec:	2204      	movs	r2, #4
 8002eee:	431a      	orrs	r2, r3
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	617b      	str	r3, [r7, #20]
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	68db      	ldr	r3, [r3, #12]
 8002efe:	617b      	str	r3, [r7, #20]
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	689b      	ldr	r3, [r3, #8]
 8002f06:	617b      	str	r3, [r7, #20]
 8002f08:	697b      	ldr	r3, [r7, #20]
 8002f0a:	e00b      	b.n	8002f24 <HAL_SPI_IRQHandler+0xf0>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	613b      	str	r3, [r7, #16]
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	68db      	ldr	r3, [r3, #12]
 8002f16:	613b      	str	r3, [r7, #16]
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	689b      	ldr	r3, [r3, #8]
 8002f1e:	613b      	str	r3, [r7, #16]
 8002f20:	693b      	ldr	r3, [r7, #16]
        return;
 8002f22:	e07f      	b.n	8003024 <HAL_SPI_IRQHandler+0x1f0>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8002f24:	69bb      	ldr	r3, [r7, #24]
 8002f26:	095b      	lsrs	r3, r3, #5
 8002f28:	001a      	movs	r2, r3
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	4013      	ands	r3, r2
 8002f2e:	d014      	beq.n	8002f5a <HAL_SPI_IRQHandler+0x126>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f34:	2201      	movs	r2, #1
 8002f36:	431a      	orrs	r2, r3
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	60fb      	str	r3, [r7, #12]
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	689b      	ldr	r3, [r3, #8]
 8002f46:	60fb      	str	r3, [r7, #12]
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	681a      	ldr	r2, [r3, #0]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	2140      	movs	r1, #64	; 0x40
 8002f54:	438a      	bics	r2, r1
 8002f56:	601a      	str	r2, [r3, #0]
 8002f58:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8002f5a:	69bb      	ldr	r3, [r7, #24]
 8002f5c:	0a1b      	lsrs	r3, r3, #8
 8002f5e:	001a      	movs	r2, r3
 8002f60:	2301      	movs	r3, #1
 8002f62:	4013      	ands	r3, r2
 8002f64:	d00c      	beq.n	8002f80 <HAL_SPI_IRQHandler+0x14c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f6a:	2208      	movs	r2, #8
 8002f6c:	431a      	orrs	r2, r3
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8002f72:	2300      	movs	r3, #0
 8002f74:	60bb      	str	r3, [r7, #8]
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	689b      	ldr	r3, [r3, #8]
 8002f7c:	60bb      	str	r3, [r7, #8]
 8002f7e:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d04c      	beq.n	8003022 <HAL_SPI_IRQHandler+0x1ee>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	685a      	ldr	r2, [r3, #4]
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	21e0      	movs	r1, #224	; 0xe0
 8002f94:	438a      	bics	r2, r1
 8002f96:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	225d      	movs	r2, #93	; 0x5d
 8002f9c:	2101      	movs	r1, #1
 8002f9e:	5499      	strb	r1, [r3, r2]
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8002fa0:	69fb      	ldr	r3, [r7, #28]
 8002fa2:	2202      	movs	r2, #2
 8002fa4:	4013      	ands	r3, r2
 8002fa6:	d103      	bne.n	8002fb0 <HAL_SPI_IRQHandler+0x17c>
 8002fa8:	69fb      	ldr	r3, [r7, #28]
 8002faa:	2201      	movs	r2, #1
 8002fac:	4013      	ands	r3, r2
 8002fae:	d032      	beq.n	8003016 <HAL_SPI_IRQHandler+0x1e2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	685a      	ldr	r2, [r3, #4]
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	2103      	movs	r1, #3
 8002fbc:	438a      	bics	r2, r1
 8002fbe:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d010      	beq.n	8002fea <HAL_SPI_IRQHandler+0x1b6>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fcc:	4a17      	ldr	r2, [pc, #92]	; (800302c <HAL_SPI_IRQHandler+0x1f8>)
 8002fce:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fd4:	0018      	movs	r0, r3
 8002fd6:	f7fe fa45 	bl	8001464 <HAL_DMA_Abort_IT>
 8002fda:	1e03      	subs	r3, r0, #0
 8002fdc:	d005      	beq.n	8002fea <HAL_SPI_IRQHandler+0x1b6>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fe2:	2240      	movs	r2, #64	; 0x40
 8002fe4:	431a      	orrs	r2, r3
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d016      	beq.n	8003020 <HAL_SPI_IRQHandler+0x1ec>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ff6:	4a0d      	ldr	r2, [pc, #52]	; (800302c <HAL_SPI_IRQHandler+0x1f8>)
 8002ff8:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ffe:	0018      	movs	r0, r3
 8003000:	f7fe fa30 	bl	8001464 <HAL_DMA_Abort_IT>
 8003004:	1e03      	subs	r3, r0, #0
 8003006:	d00b      	beq.n	8003020 <HAL_SPI_IRQHandler+0x1ec>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800300c:	2240      	movs	r2, #64	; 0x40
 800300e:	431a      	orrs	r2, r3
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8003014:	e004      	b.n	8003020 <HAL_SPI_IRQHandler+0x1ec>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	0018      	movs	r0, r3
 800301a:	f000 f811 	bl	8003040 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800301e:	e000      	b.n	8003022 <HAL_SPI_IRQHandler+0x1ee>
        if (hspi->hdmatx != NULL)
 8003020:	46c0      	nop			; (mov r8, r8)
    return;
 8003022:	46c0      	nop			; (mov r8, r8)
  }
}
 8003024:	46bd      	mov	sp, r7
 8003026:	b008      	add	sp, #32
 8003028:	bd80      	pop	{r7, pc}
 800302a:	46c0      	nop			; (mov r8, r8)
 800302c:	08003051 	.word	0x08003051

08003030 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b082      	sub	sp, #8
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8003038:	46c0      	nop			; (mov r8, r8)
 800303a:	46bd      	mov	sp, r7
 800303c:	b002      	add	sp, #8
 800303e:	bd80      	pop	{r7, pc}

08003040 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b082      	sub	sp, #8
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8003048:	46c0      	nop			; (mov r8, r8)
 800304a:	46bd      	mov	sp, r7
 800304c:	b002      	add	sp, #8
 800304e:	bd80      	pop	{r7, pc}

08003050 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b084      	sub	sp, #16
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800305c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	2246      	movs	r2, #70	; 0x46
 8003062:	2100      	movs	r1, #0
 8003064:	5299      	strh	r1, [r3, r2]
  hspi->TxXferCount = 0U;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	2200      	movs	r2, #0
 800306a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	0018      	movs	r0, r3
 8003070:	f7ff ffe6 	bl	8003040 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003074:	46c0      	nop			; (mov r8, r8)
 8003076:	46bd      	mov	sp, r7
 8003078:	b004      	add	sp, #16
 800307a:	bd80      	pop	{r7, pc}

0800307c <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b082      	sub	sp, #8
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
  /* Receive data in packing mode */
  if (hspi->RxXferCount > 1U)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2246      	movs	r2, #70	; 0x46
 8003088:	5a9b      	ldrh	r3, [r3, r2]
 800308a:	b29b      	uxth	r3, r3
 800308c:	2b01      	cmp	r3, #1
 800308e:	d924      	bls.n	80030da <SPI_2linesRxISR_8BIT+0x5e>
  {
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	68da      	ldr	r2, [r3, #12]
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800309a:	b292      	uxth	r2, r2
 800309c:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030a2:	1c9a      	adds	r2, r3, #2
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount -= 2U;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2246      	movs	r2, #70	; 0x46
 80030ac:	5a9b      	ldrh	r3, [r3, r2]
 80030ae:	b29b      	uxth	r3, r3
 80030b0:	3b02      	subs	r3, #2
 80030b2:	b299      	uxth	r1, r3
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2246      	movs	r2, #70	; 0x46
 80030b8:	5299      	strh	r1, [r3, r2]
    if (hspi->RxXferCount == 1U)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2246      	movs	r2, #70	; 0x46
 80030be:	5a9b      	ldrh	r3, [r3, r2]
 80030c0:	b29b      	uxth	r3, r3
 80030c2:	2b01      	cmp	r3, #1
 80030c4:	d120      	bne.n	8003108 <SPI_2linesRxISR_8BIT+0x8c>
    {
      /* Set RX Fifo threshold according the reception data length: 8bit */
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	685a      	ldr	r2, [r3, #4]
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	2180      	movs	r1, #128	; 0x80
 80030d2:	0149      	lsls	r1, r1, #5
 80030d4:	430a      	orrs	r2, r1
 80030d6:	605a      	str	r2, [r3, #4]
 80030d8:	e016      	b.n	8003108 <SPI_2linesRxISR_8BIT+0x8c>
    }
  }
  /* Receive data in 8 Bit mode */
  else
  {
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	330c      	adds	r3, #12
 80030e0:	001a      	movs	r2, r3
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030e6:	7812      	ldrb	r2, [r2, #0]
 80030e8:	b2d2      	uxtb	r2, r2
 80030ea:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030f0:	1c5a      	adds	r2, r3, #1
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount--;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2246      	movs	r2, #70	; 0x46
 80030fa:	5a9b      	ldrh	r3, [r3, r2]
 80030fc:	b29b      	uxth	r3, r3
 80030fe:	3b01      	subs	r3, #1
 8003100:	b299      	uxth	r1, r3
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2246      	movs	r2, #70	; 0x46
 8003106:	5299      	strh	r1, [r3, r2]
  }

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2246      	movs	r2, #70	; 0x46
 800310c:	5a9b      	ldrh	r3, [r3, r2]
 800310e:	b29b      	uxth	r3, r3
 8003110:	2b00      	cmp	r3, #0
 8003112:	d110      	bne.n	8003136 <SPI_2linesRxISR_8BIT+0xba>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	685a      	ldr	r2, [r3, #4]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	2160      	movs	r1, #96	; 0x60
 8003120:	438a      	bics	r2, r1
 8003122:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003128:	b29b      	uxth	r3, r3
 800312a:	2b00      	cmp	r3, #0
 800312c:	d103      	bne.n	8003136 <SPI_2linesRxISR_8BIT+0xba>
    {
      SPI_CloseRxTx_ISR(hspi);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	0018      	movs	r0, r3
 8003132:	f000 fad7 	bl	80036e4 <SPI_CloseRxTx_ISR>
    }
  }
}
 8003136:	46c0      	nop			; (mov r8, r8)
 8003138:	46bd      	mov	sp, r7
 800313a:	b002      	add	sp, #8
 800313c:	bd80      	pop	{r7, pc}

0800313e <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800313e:	b580      	push	{r7, lr}
 8003140:	b082      	sub	sp, #8
 8003142:	af00      	add	r7, sp, #0
 8003144:	6078      	str	r0, [r7, #4]
  /* Transmit data in packing Bit mode */
  if (hspi->TxXferCount >= 2U)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800314a:	b29b      	uxth	r3, r3
 800314c:	2b01      	cmp	r3, #1
 800314e:	d912      	bls.n	8003176 <SPI_2linesTxISR_8BIT+0x38>
  {
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003154:	881a      	ldrh	r2, [r3, #0]
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003160:	1c9a      	adds	r2, r3, #2
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount -= 2U;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800316a:	b29b      	uxth	r3, r3
 800316c:	3b02      	subs	r3, #2
 800316e:	b29a      	uxth	r2, r3
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003174:	e012      	b.n	800319c <SPI_2linesTxISR_8BIT+0x5e>
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	330c      	adds	r3, #12
 8003180:	7812      	ldrb	r2, [r2, #0]
 8003182:	701a      	strb	r2, [r3, #0]
    hspi->pTxBuffPtr++;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003188:	1c5a      	adds	r2, r3, #1
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount--;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003192:	b29b      	uxth	r3, r3
 8003194:	3b01      	subs	r3, #1
 8003196:	b29a      	uxth	r2, r3
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	87da      	strh	r2, [r3, #62]	; 0x3e
  }

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80031a0:	b29b      	uxth	r3, r3
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d111      	bne.n	80031ca <SPI_2linesTxISR_8BIT+0x8c>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	685a      	ldr	r2, [r3, #4]
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	2180      	movs	r1, #128	; 0x80
 80031b2:	438a      	bics	r2, r1
 80031b4:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2246      	movs	r2, #70	; 0x46
 80031ba:	5a9b      	ldrh	r3, [r3, r2]
 80031bc:	b29b      	uxth	r3, r3
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d103      	bne.n	80031ca <SPI_2linesTxISR_8BIT+0x8c>
    {
      SPI_CloseRxTx_ISR(hspi);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	0018      	movs	r0, r3
 80031c6:	f000 fa8d 	bl	80036e4 <SPI_CloseRxTx_ISR>
    }
  }
}
 80031ca:	46c0      	nop			; (mov r8, r8)
 80031cc:	46bd      	mov	sp, r7
 80031ce:	b002      	add	sp, #8
 80031d0:	bd80      	pop	{r7, pc}

080031d2 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80031d2:	b580      	push	{r7, lr}
 80031d4:	b082      	sub	sp, #8
 80031d6:	af00      	add	r7, sp, #0
 80031d8:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	68da      	ldr	r2, [r3, #12]
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031e4:	b292      	uxth	r2, r2
 80031e6:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ec:	1c9a      	adds	r2, r3, #2
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2246      	movs	r2, #70	; 0x46
 80031f6:	5a9b      	ldrh	r3, [r3, r2]
 80031f8:	b29b      	uxth	r3, r3
 80031fa:	3b01      	subs	r3, #1
 80031fc:	b299      	uxth	r1, r3
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2246      	movs	r2, #70	; 0x46
 8003202:	5299      	strh	r1, [r3, r2]

  if (hspi->RxXferCount == 0U)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2246      	movs	r2, #70	; 0x46
 8003208:	5a9b      	ldrh	r3, [r3, r2]
 800320a:	b29b      	uxth	r3, r3
 800320c:	2b00      	cmp	r3, #0
 800320e:	d110      	bne.n	8003232 <SPI_2linesRxISR_16BIT+0x60>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	685a      	ldr	r2, [r3, #4]
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	2140      	movs	r1, #64	; 0x40
 800321c:	438a      	bics	r2, r1
 800321e:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003224:	b29b      	uxth	r3, r3
 8003226:	2b00      	cmp	r3, #0
 8003228:	d103      	bne.n	8003232 <SPI_2linesRxISR_16BIT+0x60>
    {
      SPI_CloseRxTx_ISR(hspi);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	0018      	movs	r0, r3
 800322e:	f000 fa59 	bl	80036e4 <SPI_CloseRxTx_ISR>
    }
  }
}
 8003232:	46c0      	nop			; (mov r8, r8)
 8003234:	46bd      	mov	sp, r7
 8003236:	b002      	add	sp, #8
 8003238:	bd80      	pop	{r7, pc}

0800323a <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800323a:	b580      	push	{r7, lr}
 800323c:	b082      	sub	sp, #8
 800323e:	af00      	add	r7, sp, #0
 8003240:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003246:	881a      	ldrh	r2, [r3, #0]
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003252:	1c9a      	adds	r2, r3, #2
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800325c:	b29b      	uxth	r3, r3
 800325e:	3b01      	subs	r3, #1
 8003260:	b29a      	uxth	r2, r3
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800326a:	b29b      	uxth	r3, r3
 800326c:	2b00      	cmp	r3, #0
 800326e:	d111      	bne.n	8003294 <SPI_2linesTxISR_16BIT+0x5a>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	685a      	ldr	r2, [r3, #4]
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	2180      	movs	r1, #128	; 0x80
 800327c:	438a      	bics	r2, r1
 800327e:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2246      	movs	r2, #70	; 0x46
 8003284:	5a9b      	ldrh	r3, [r3, r2]
 8003286:	b29b      	uxth	r3, r3
 8003288:	2b00      	cmp	r3, #0
 800328a:	d103      	bne.n	8003294 <SPI_2linesTxISR_16BIT+0x5a>
    {
      SPI_CloseRxTx_ISR(hspi);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	0018      	movs	r0, r3
 8003290:	f000 fa28 	bl	80036e4 <SPI_CloseRxTx_ISR>
    }
  }
}
 8003294:	46c0      	nop			; (mov r8, r8)
 8003296:	46bd      	mov	sp, r7
 8003298:	b002      	add	sp, #8
 800329a:	bd80      	pop	{r7, pc}

0800329c <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b082      	sub	sp, #8
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	330c      	adds	r3, #12
 80032aa:	001a      	movs	r2, r3
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032b0:	7812      	ldrb	r2, [r2, #0]
 80032b2:	b2d2      	uxtb	r2, r2
 80032b4:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ba:	1c5a      	adds	r2, r3, #1
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2246      	movs	r2, #70	; 0x46
 80032c4:	5a9b      	ldrh	r3, [r3, r2]
 80032c6:	b29b      	uxth	r3, r3
 80032c8:	3b01      	subs	r3, #1
 80032ca:	b299      	uxth	r1, r3
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2246      	movs	r2, #70	; 0x46
 80032d0:	5299      	strh	r1, [r3, r2]
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2246      	movs	r2, #70	; 0x46
 80032d6:	5a9b      	ldrh	r3, [r3, r2]
 80032d8:	b29b      	uxth	r3, r3
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d103      	bne.n	80032e6 <SPI_RxISR_8BIT+0x4a>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	0018      	movs	r0, r3
 80032e2:	f000 fa45 	bl	8003770 <SPI_CloseRx_ISR>
  }
}
 80032e6:	46c0      	nop			; (mov r8, r8)
 80032e8:	46bd      	mov	sp, r7
 80032ea:	b002      	add	sp, #8
 80032ec:	bd80      	pop	{r7, pc}

080032ee <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80032ee:	b580      	push	{r7, lr}
 80032f0:	b082      	sub	sp, #8
 80032f2:	af00      	add	r7, sp, #0
 80032f4:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	68da      	ldr	r2, [r3, #12]
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003300:	b292      	uxth	r2, r2
 8003302:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003308:	1c9a      	adds	r2, r3, #2
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2246      	movs	r2, #70	; 0x46
 8003312:	5a9b      	ldrh	r3, [r3, r2]
 8003314:	b29b      	uxth	r3, r3
 8003316:	3b01      	subs	r3, #1
 8003318:	b299      	uxth	r1, r3
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	2246      	movs	r2, #70	; 0x46
 800331e:	5299      	strh	r1, [r3, r2]
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2246      	movs	r2, #70	; 0x46
 8003324:	5a9b      	ldrh	r3, [r3, r2]
 8003326:	b29b      	uxth	r3, r3
 8003328:	2b00      	cmp	r3, #0
 800332a:	d103      	bne.n	8003334 <SPI_RxISR_16BIT+0x46>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	0018      	movs	r0, r3
 8003330:	f000 fa1e 	bl	8003770 <SPI_CloseRx_ISR>
  }
}
 8003334:	46c0      	nop			; (mov r8, r8)
 8003336:	46bd      	mov	sp, r7
 8003338:	b002      	add	sp, #8
 800333a:	bd80      	pop	{r7, pc}

0800333c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b088      	sub	sp, #32
 8003340:	af00      	add	r7, sp, #0
 8003342:	60f8      	str	r0, [r7, #12]
 8003344:	60b9      	str	r1, [r7, #8]
 8003346:	603b      	str	r3, [r7, #0]
 8003348:	1dfb      	adds	r3, r7, #7
 800334a:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800334c:	f7fd ff68 	bl	8001220 <HAL_GetTick>
 8003350:	0002      	movs	r2, r0
 8003352:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003354:	1a9b      	subs	r3, r3, r2
 8003356:	683a      	ldr	r2, [r7, #0]
 8003358:	18d3      	adds	r3, r2, r3
 800335a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800335c:	f7fd ff60 	bl	8001220 <HAL_GetTick>
 8003360:	0003      	movs	r3, r0
 8003362:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003364:	4b3a      	ldr	r3, [pc, #232]	; (8003450 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	015b      	lsls	r3, r3, #5
 800336a:	0d1b      	lsrs	r3, r3, #20
 800336c:	69fa      	ldr	r2, [r7, #28]
 800336e:	4353      	muls	r3, r2
 8003370:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003372:	e058      	b.n	8003426 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	3301      	adds	r3, #1
 8003378:	d055      	beq.n	8003426 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800337a:	f7fd ff51 	bl	8001220 <HAL_GetTick>
 800337e:	0002      	movs	r2, r0
 8003380:	69bb      	ldr	r3, [r7, #24]
 8003382:	1ad3      	subs	r3, r2, r3
 8003384:	69fa      	ldr	r2, [r7, #28]
 8003386:	429a      	cmp	r2, r3
 8003388:	d902      	bls.n	8003390 <SPI_WaitFlagStateUntilTimeout+0x54>
 800338a:	69fb      	ldr	r3, [r7, #28]
 800338c:	2b00      	cmp	r3, #0
 800338e:	d142      	bne.n	8003416 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	685a      	ldr	r2, [r3, #4]
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	21e0      	movs	r1, #224	; 0xe0
 800339c:	438a      	bics	r2, r1
 800339e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	685a      	ldr	r2, [r3, #4]
 80033a4:	2382      	movs	r3, #130	; 0x82
 80033a6:	005b      	lsls	r3, r3, #1
 80033a8:	429a      	cmp	r2, r3
 80033aa:	d113      	bne.n	80033d4 <SPI_WaitFlagStateUntilTimeout+0x98>
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	689a      	ldr	r2, [r3, #8]
 80033b0:	2380      	movs	r3, #128	; 0x80
 80033b2:	021b      	lsls	r3, r3, #8
 80033b4:	429a      	cmp	r2, r3
 80033b6:	d005      	beq.n	80033c4 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	689a      	ldr	r2, [r3, #8]
 80033bc:	2380      	movs	r3, #128	; 0x80
 80033be:	00db      	lsls	r3, r3, #3
 80033c0:	429a      	cmp	r2, r3
 80033c2:	d107      	bne.n	80033d4 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	681a      	ldr	r2, [r3, #0]
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	2140      	movs	r1, #64	; 0x40
 80033d0:	438a      	bics	r2, r1
 80033d2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80033d8:	2380      	movs	r3, #128	; 0x80
 80033da:	019b      	lsls	r3, r3, #6
 80033dc:	429a      	cmp	r2, r3
 80033de:	d110      	bne.n	8003402 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	681a      	ldr	r2, [r3, #0]
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	491a      	ldr	r1, [pc, #104]	; (8003454 <SPI_WaitFlagStateUntilTimeout+0x118>)
 80033ec:	400a      	ands	r2, r1
 80033ee:	601a      	str	r2, [r3, #0]
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	681a      	ldr	r2, [r3, #0]
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	2180      	movs	r1, #128	; 0x80
 80033fc:	0189      	lsls	r1, r1, #6
 80033fe:	430a      	orrs	r2, r1
 8003400:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	225d      	movs	r2, #93	; 0x5d
 8003406:	2101      	movs	r1, #1
 8003408:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	225c      	movs	r2, #92	; 0x5c
 800340e:	2100      	movs	r1, #0
 8003410:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003412:	2303      	movs	r3, #3
 8003414:	e017      	b.n	8003446 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003416:	697b      	ldr	r3, [r7, #20]
 8003418:	2b00      	cmp	r3, #0
 800341a:	d101      	bne.n	8003420 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 800341c:	2300      	movs	r3, #0
 800341e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003420:	697b      	ldr	r3, [r7, #20]
 8003422:	3b01      	subs	r3, #1
 8003424:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	689b      	ldr	r3, [r3, #8]
 800342c:	68ba      	ldr	r2, [r7, #8]
 800342e:	4013      	ands	r3, r2
 8003430:	68ba      	ldr	r2, [r7, #8]
 8003432:	1ad3      	subs	r3, r2, r3
 8003434:	425a      	negs	r2, r3
 8003436:	4153      	adcs	r3, r2
 8003438:	b2db      	uxtb	r3, r3
 800343a:	001a      	movs	r2, r3
 800343c:	1dfb      	adds	r3, r7, #7
 800343e:	781b      	ldrb	r3, [r3, #0]
 8003440:	429a      	cmp	r2, r3
 8003442:	d197      	bne.n	8003374 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003444:	2300      	movs	r3, #0
}
 8003446:	0018      	movs	r0, r3
 8003448:	46bd      	mov	sp, r7
 800344a:	b008      	add	sp, #32
 800344c:	bd80      	pop	{r7, pc}
 800344e:	46c0      	nop			; (mov r8, r8)
 8003450:	20000000 	.word	0x20000000
 8003454:	ffffdfff 	.word	0xffffdfff

08003458 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b08a      	sub	sp, #40	; 0x28
 800345c:	af00      	add	r7, sp, #0
 800345e:	60f8      	str	r0, [r7, #12]
 8003460:	60b9      	str	r1, [r7, #8]
 8003462:	607a      	str	r2, [r7, #4]
 8003464:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003466:	2317      	movs	r3, #23
 8003468:	18fb      	adds	r3, r7, r3
 800346a:	2200      	movs	r2, #0
 800346c:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800346e:	f7fd fed7 	bl	8001220 <HAL_GetTick>
 8003472:	0002      	movs	r2, r0
 8003474:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003476:	1a9b      	subs	r3, r3, r2
 8003478:	683a      	ldr	r2, [r7, #0]
 800347a:	18d3      	adds	r3, r2, r3
 800347c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800347e:	f7fd fecf 	bl	8001220 <HAL_GetTick>
 8003482:	0003      	movs	r3, r0
 8003484:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	330c      	adds	r3, #12
 800348c:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800348e:	4b41      	ldr	r3, [pc, #260]	; (8003594 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8003490:	681a      	ldr	r2, [r3, #0]
 8003492:	0013      	movs	r3, r2
 8003494:	009b      	lsls	r3, r3, #2
 8003496:	189b      	adds	r3, r3, r2
 8003498:	00da      	lsls	r2, r3, #3
 800349a:	1ad3      	subs	r3, r2, r3
 800349c:	0d1b      	lsrs	r3, r3, #20
 800349e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034a0:	4353      	muls	r3, r2
 80034a2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80034a4:	e068      	b.n	8003578 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80034a6:	68ba      	ldr	r2, [r7, #8]
 80034a8:	23c0      	movs	r3, #192	; 0xc0
 80034aa:	00db      	lsls	r3, r3, #3
 80034ac:	429a      	cmp	r2, r3
 80034ae:	d10a      	bne.n	80034c6 <SPI_WaitFifoStateUntilTimeout+0x6e>
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d107      	bne.n	80034c6 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80034b6:	69fb      	ldr	r3, [r7, #28]
 80034b8:	781b      	ldrb	r3, [r3, #0]
 80034ba:	b2da      	uxtb	r2, r3
 80034bc:	2117      	movs	r1, #23
 80034be:	187b      	adds	r3, r7, r1
 80034c0:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80034c2:	187b      	adds	r3, r7, r1
 80034c4:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	3301      	adds	r3, #1
 80034ca:	d055      	beq.n	8003578 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80034cc:	f7fd fea8 	bl	8001220 <HAL_GetTick>
 80034d0:	0002      	movs	r2, r0
 80034d2:	6a3b      	ldr	r3, [r7, #32]
 80034d4:	1ad3      	subs	r3, r2, r3
 80034d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034d8:	429a      	cmp	r2, r3
 80034da:	d902      	bls.n	80034e2 <SPI_WaitFifoStateUntilTimeout+0x8a>
 80034dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d142      	bne.n	8003568 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	685a      	ldr	r2, [r3, #4]
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	21e0      	movs	r1, #224	; 0xe0
 80034ee:	438a      	bics	r2, r1
 80034f0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	685a      	ldr	r2, [r3, #4]
 80034f6:	2382      	movs	r3, #130	; 0x82
 80034f8:	005b      	lsls	r3, r3, #1
 80034fa:	429a      	cmp	r2, r3
 80034fc:	d113      	bne.n	8003526 <SPI_WaitFifoStateUntilTimeout+0xce>
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	689a      	ldr	r2, [r3, #8]
 8003502:	2380      	movs	r3, #128	; 0x80
 8003504:	021b      	lsls	r3, r3, #8
 8003506:	429a      	cmp	r2, r3
 8003508:	d005      	beq.n	8003516 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	689a      	ldr	r2, [r3, #8]
 800350e:	2380      	movs	r3, #128	; 0x80
 8003510:	00db      	lsls	r3, r3, #3
 8003512:	429a      	cmp	r2, r3
 8003514:	d107      	bne.n	8003526 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	681a      	ldr	r2, [r3, #0]
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	2140      	movs	r1, #64	; 0x40
 8003522:	438a      	bics	r2, r1
 8003524:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800352a:	2380      	movs	r3, #128	; 0x80
 800352c:	019b      	lsls	r3, r3, #6
 800352e:	429a      	cmp	r2, r3
 8003530:	d110      	bne.n	8003554 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	681a      	ldr	r2, [r3, #0]
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4916      	ldr	r1, [pc, #88]	; (8003598 <SPI_WaitFifoStateUntilTimeout+0x140>)
 800353e:	400a      	ands	r2, r1
 8003540:	601a      	str	r2, [r3, #0]
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	681a      	ldr	r2, [r3, #0]
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	2180      	movs	r1, #128	; 0x80
 800354e:	0189      	lsls	r1, r1, #6
 8003550:	430a      	orrs	r2, r1
 8003552:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	225d      	movs	r2, #93	; 0x5d
 8003558:	2101      	movs	r1, #1
 800355a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	225c      	movs	r2, #92	; 0x5c
 8003560:	2100      	movs	r1, #0
 8003562:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003564:	2303      	movs	r3, #3
 8003566:	e010      	b.n	800358a <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003568:	69bb      	ldr	r3, [r7, #24]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d101      	bne.n	8003572 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 800356e:	2300      	movs	r3, #0
 8003570:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8003572:	69bb      	ldr	r3, [r7, #24]
 8003574:	3b01      	subs	r3, #1
 8003576:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	689b      	ldr	r3, [r3, #8]
 800357e:	68ba      	ldr	r2, [r7, #8]
 8003580:	4013      	ands	r3, r2
 8003582:	687a      	ldr	r2, [r7, #4]
 8003584:	429a      	cmp	r2, r3
 8003586:	d18e      	bne.n	80034a6 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8003588:	2300      	movs	r3, #0
}
 800358a:	0018      	movs	r0, r3
 800358c:	46bd      	mov	sp, r7
 800358e:	b00a      	add	sp, #40	; 0x28
 8003590:	bd80      	pop	{r7, pc}
 8003592:	46c0      	nop			; (mov r8, r8)
 8003594:	20000000 	.word	0x20000000
 8003598:	ffffdfff 	.word	0xffffdfff

0800359c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b086      	sub	sp, #24
 80035a0:	af02      	add	r7, sp, #8
 80035a2:	60f8      	str	r0, [r7, #12]
 80035a4:	60b9      	str	r1, [r7, #8]
 80035a6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	685a      	ldr	r2, [r3, #4]
 80035ac:	2382      	movs	r3, #130	; 0x82
 80035ae:	005b      	lsls	r3, r3, #1
 80035b0:	429a      	cmp	r2, r3
 80035b2:	d113      	bne.n	80035dc <SPI_EndRxTransaction+0x40>
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	689a      	ldr	r2, [r3, #8]
 80035b8:	2380      	movs	r3, #128	; 0x80
 80035ba:	021b      	lsls	r3, r3, #8
 80035bc:	429a      	cmp	r2, r3
 80035be:	d005      	beq.n	80035cc <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	689a      	ldr	r2, [r3, #8]
 80035c4:	2380      	movs	r3, #128	; 0x80
 80035c6:	00db      	lsls	r3, r3, #3
 80035c8:	429a      	cmp	r2, r3
 80035ca:	d107      	bne.n	80035dc <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	681a      	ldr	r2, [r3, #0]
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	2140      	movs	r1, #64	; 0x40
 80035d8:	438a      	bics	r2, r1
 80035da:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80035dc:	68ba      	ldr	r2, [r7, #8]
 80035de:	68f8      	ldr	r0, [r7, #12]
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	9300      	str	r3, [sp, #0]
 80035e4:	0013      	movs	r3, r2
 80035e6:	2200      	movs	r2, #0
 80035e8:	2180      	movs	r1, #128	; 0x80
 80035ea:	f7ff fea7 	bl	800333c <SPI_WaitFlagStateUntilTimeout>
 80035ee:	1e03      	subs	r3, r0, #0
 80035f0:	d007      	beq.n	8003602 <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035f6:	2220      	movs	r2, #32
 80035f8:	431a      	orrs	r2, r3
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80035fe:	2303      	movs	r3, #3
 8003600:	e026      	b.n	8003650 <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	685a      	ldr	r2, [r3, #4]
 8003606:	2382      	movs	r3, #130	; 0x82
 8003608:	005b      	lsls	r3, r3, #1
 800360a:	429a      	cmp	r2, r3
 800360c:	d11f      	bne.n	800364e <SPI_EndRxTransaction+0xb2>
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	689a      	ldr	r2, [r3, #8]
 8003612:	2380      	movs	r3, #128	; 0x80
 8003614:	021b      	lsls	r3, r3, #8
 8003616:	429a      	cmp	r2, r3
 8003618:	d005      	beq.n	8003626 <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	689a      	ldr	r2, [r3, #8]
 800361e:	2380      	movs	r3, #128	; 0x80
 8003620:	00db      	lsls	r3, r3, #3
 8003622:	429a      	cmp	r2, r3
 8003624:	d113      	bne.n	800364e <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003626:	68ba      	ldr	r2, [r7, #8]
 8003628:	23c0      	movs	r3, #192	; 0xc0
 800362a:	00d9      	lsls	r1, r3, #3
 800362c:	68f8      	ldr	r0, [r7, #12]
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	9300      	str	r3, [sp, #0]
 8003632:	0013      	movs	r3, r2
 8003634:	2200      	movs	r2, #0
 8003636:	f7ff ff0f 	bl	8003458 <SPI_WaitFifoStateUntilTimeout>
 800363a:	1e03      	subs	r3, r0, #0
 800363c:	d007      	beq.n	800364e <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003642:	2220      	movs	r2, #32
 8003644:	431a      	orrs	r2, r3
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800364a:	2303      	movs	r3, #3
 800364c:	e000      	b.n	8003650 <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 800364e:	2300      	movs	r3, #0
}
 8003650:	0018      	movs	r0, r3
 8003652:	46bd      	mov	sp, r7
 8003654:	b004      	add	sp, #16
 8003656:	bd80      	pop	{r7, pc}

08003658 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b086      	sub	sp, #24
 800365c:	af02      	add	r7, sp, #8
 800365e:	60f8      	str	r0, [r7, #12]
 8003660:	60b9      	str	r1, [r7, #8]
 8003662:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003664:	68ba      	ldr	r2, [r7, #8]
 8003666:	23c0      	movs	r3, #192	; 0xc0
 8003668:	0159      	lsls	r1, r3, #5
 800366a:	68f8      	ldr	r0, [r7, #12]
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	9300      	str	r3, [sp, #0]
 8003670:	0013      	movs	r3, r2
 8003672:	2200      	movs	r2, #0
 8003674:	f7ff fef0 	bl	8003458 <SPI_WaitFifoStateUntilTimeout>
 8003678:	1e03      	subs	r3, r0, #0
 800367a:	d007      	beq.n	800368c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003680:	2220      	movs	r2, #32
 8003682:	431a      	orrs	r2, r3
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003688:	2303      	movs	r3, #3
 800368a:	e027      	b.n	80036dc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800368c:	68ba      	ldr	r2, [r7, #8]
 800368e:	68f8      	ldr	r0, [r7, #12]
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	9300      	str	r3, [sp, #0]
 8003694:	0013      	movs	r3, r2
 8003696:	2200      	movs	r2, #0
 8003698:	2180      	movs	r1, #128	; 0x80
 800369a:	f7ff fe4f 	bl	800333c <SPI_WaitFlagStateUntilTimeout>
 800369e:	1e03      	subs	r3, r0, #0
 80036a0:	d007      	beq.n	80036b2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036a6:	2220      	movs	r2, #32
 80036a8:	431a      	orrs	r2, r3
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80036ae:	2303      	movs	r3, #3
 80036b0:	e014      	b.n	80036dc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80036b2:	68ba      	ldr	r2, [r7, #8]
 80036b4:	23c0      	movs	r3, #192	; 0xc0
 80036b6:	00d9      	lsls	r1, r3, #3
 80036b8:	68f8      	ldr	r0, [r7, #12]
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	9300      	str	r3, [sp, #0]
 80036be:	0013      	movs	r3, r2
 80036c0:	2200      	movs	r2, #0
 80036c2:	f7ff fec9 	bl	8003458 <SPI_WaitFifoStateUntilTimeout>
 80036c6:	1e03      	subs	r3, r0, #0
 80036c8:	d007      	beq.n	80036da <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036ce:	2220      	movs	r2, #32
 80036d0:	431a      	orrs	r2, r3
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80036d6:	2303      	movs	r3, #3
 80036d8:	e000      	b.n	80036dc <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80036da:	2300      	movs	r3, #0
}
 80036dc:	0018      	movs	r0, r3
 80036de:	46bd      	mov	sp, r7
 80036e0:	b004      	add	sp, #16
 80036e2:	bd80      	pop	{r7, pc}

080036e4 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b084      	sub	sp, #16
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80036ec:	f7fd fd98 	bl	8001220 <HAL_GetTick>
 80036f0:	0003      	movs	r3, r0
 80036f2:	60fb      	str	r3, [r7, #12]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	685a      	ldr	r2, [r3, #4]
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	2120      	movs	r1, #32
 8003700:	438a      	bics	r2, r1
 8003702:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8003704:	68fa      	ldr	r2, [r7, #12]
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2164      	movs	r1, #100	; 0x64
 800370a:	0018      	movs	r0, r3
 800370c:	f7ff ffa4 	bl	8003658 <SPI_EndRxTxTransaction>
 8003710:	1e03      	subs	r3, r0, #0
 8003712:	d005      	beq.n	8003720 <SPI_CloseRxTx_ISR+0x3c>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003718:	2220      	movs	r2, #32
 800371a:	431a      	orrs	r2, r3
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	661a      	str	r2, [r3, #96]	; 0x60
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003724:	2b00      	cmp	r3, #0
 8003726:	d117      	bne.n	8003758 <SPI_CloseRxTx_ISR+0x74>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	225d      	movs	r2, #93	; 0x5d
 800372c:	5c9b      	ldrb	r3, [r3, r2]
 800372e:	b2db      	uxtb	r3, r3
 8003730:	2b04      	cmp	r3, #4
 8003732:	d108      	bne.n	8003746 <SPI_CloseRxTx_ISR+0x62>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	225d      	movs	r2, #93	; 0x5d
 8003738:	2101      	movs	r1, #1
 800373a:	5499      	strb	r1, [r3, r2]
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	0018      	movs	r0, r3
 8003740:	f7fd fa56 	bl	8000bf0 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8003744:	e010      	b.n	8003768 <SPI_CloseRxTx_ISR+0x84>
        hspi->State = HAL_SPI_STATE_READY;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	225d      	movs	r2, #93	; 0x5d
 800374a:	2101      	movs	r1, #1
 800374c:	5499      	strb	r1, [r3, r2]
        HAL_SPI_TxRxCpltCallback(hspi);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	0018      	movs	r0, r3
 8003752:	f7ff fc6d 	bl	8003030 <HAL_SPI_TxRxCpltCallback>
}
 8003756:	e007      	b.n	8003768 <SPI_CloseRxTx_ISR+0x84>
      hspi->State = HAL_SPI_STATE_READY;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	225d      	movs	r2, #93	; 0x5d
 800375c:	2101      	movs	r1, #1
 800375e:	5499      	strb	r1, [r3, r2]
      HAL_SPI_ErrorCallback(hspi);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	0018      	movs	r0, r3
 8003764:	f7ff fc6c 	bl	8003040 <HAL_SPI_ErrorCallback>
}
 8003768:	46c0      	nop			; (mov r8, r8)
 800376a:	46bd      	mov	sp, r7
 800376c:	b004      	add	sp, #16
 800376e:	bd80      	pop	{r7, pc}

08003770 <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b082      	sub	sp, #8
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	685a      	ldr	r2, [r3, #4]
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	2160      	movs	r1, #96	; 0x60
 8003784:	438a      	bics	r2, r1
 8003786:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 8003788:	f7fd fd4a 	bl	8001220 <HAL_GetTick>
 800378c:	0002      	movs	r2, r0
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2164      	movs	r1, #100	; 0x64
 8003792:	0018      	movs	r0, r3
 8003794:	f7ff ff02 	bl	800359c <SPI_EndRxTransaction>
 8003798:	1e03      	subs	r3, r0, #0
 800379a:	d005      	beq.n	80037a8 <SPI_CloseRx_ISR+0x38>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037a0:	2220      	movs	r2, #32
 80037a2:	431a      	orrs	r2, r3
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	661a      	str	r2, [r3, #96]	; 0x60
  }
  hspi->State = HAL_SPI_STATE_READY;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	225d      	movs	r2, #93	; 0x5d
 80037ac:	2101      	movs	r1, #1
 80037ae:	5499      	strb	r1, [r3, r2]
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d104      	bne.n	80037c2 <SPI_CloseRx_ISR+0x52>
    {
      /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	0018      	movs	r0, r3
 80037bc:	f7fd fa18 	bl	8000bf0 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 80037c0:	e003      	b.n	80037ca <SPI_CloseRx_ISR+0x5a>
      HAL_SPI_ErrorCallback(hspi);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	0018      	movs	r0, r3
 80037c6:	f7ff fc3b 	bl	8003040 <HAL_SPI_ErrorCallback>
}
 80037ca:	46c0      	nop			; (mov r8, r8)
 80037cc:	46bd      	mov	sp, r7
 80037ce:	b002      	add	sp, #8
 80037d0:	bd80      	pop	{r7, pc}

080037d2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80037d2:	b580      	push	{r7, lr}
 80037d4:	b082      	sub	sp, #8
 80037d6:	af00      	add	r7, sp, #0
 80037d8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d101      	bne.n	80037e4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80037e0:	2301      	movs	r3, #1
 80037e2:	e04a      	b.n	800387a <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	223d      	movs	r2, #61	; 0x3d
 80037e8:	5c9b      	ldrb	r3, [r3, r2]
 80037ea:	b2db      	uxtb	r3, r3
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d107      	bne.n	8003800 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	223c      	movs	r2, #60	; 0x3c
 80037f4:	2100      	movs	r1, #0
 80037f6:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	0018      	movs	r0, r3
 80037fc:	f7fd fb9e 	bl	8000f3c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	223d      	movs	r2, #61	; 0x3d
 8003804:	2102      	movs	r1, #2
 8003806:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681a      	ldr	r2, [r3, #0]
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	3304      	adds	r3, #4
 8003810:	0019      	movs	r1, r3
 8003812:	0010      	movs	r0, r2
 8003814:	f000 f90c 	bl	8003a30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2248      	movs	r2, #72	; 0x48
 800381c:	2101      	movs	r1, #1
 800381e:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	223e      	movs	r2, #62	; 0x3e
 8003824:	2101      	movs	r1, #1
 8003826:	5499      	strb	r1, [r3, r2]
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	223f      	movs	r2, #63	; 0x3f
 800382c:	2101      	movs	r1, #1
 800382e:	5499      	strb	r1, [r3, r2]
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2240      	movs	r2, #64	; 0x40
 8003834:	2101      	movs	r1, #1
 8003836:	5499      	strb	r1, [r3, r2]
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2241      	movs	r2, #65	; 0x41
 800383c:	2101      	movs	r1, #1
 800383e:	5499      	strb	r1, [r3, r2]
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2242      	movs	r2, #66	; 0x42
 8003844:	2101      	movs	r1, #1
 8003846:	5499      	strb	r1, [r3, r2]
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2243      	movs	r2, #67	; 0x43
 800384c:	2101      	movs	r1, #1
 800384e:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2244      	movs	r2, #68	; 0x44
 8003854:	2101      	movs	r1, #1
 8003856:	5499      	strb	r1, [r3, r2]
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2245      	movs	r2, #69	; 0x45
 800385c:	2101      	movs	r1, #1
 800385e:	5499      	strb	r1, [r3, r2]
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2246      	movs	r2, #70	; 0x46
 8003864:	2101      	movs	r1, #1
 8003866:	5499      	strb	r1, [r3, r2]
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2247      	movs	r2, #71	; 0x47
 800386c:	2101      	movs	r1, #1
 800386e:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	223d      	movs	r2, #61	; 0x3d
 8003874:	2101      	movs	r1, #1
 8003876:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003878:	2300      	movs	r3, #0
}
 800387a:	0018      	movs	r0, r3
 800387c:	46bd      	mov	sp, r7
 800387e:	b002      	add	sp, #8
 8003880:	bd80      	pop	{r7, pc}
	...

08003884 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b084      	sub	sp, #16
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
 800388c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800388e:	230f      	movs	r3, #15
 8003890:	18fb      	adds	r3, r7, r3
 8003892:	2200      	movs	r2, #0
 8003894:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	223c      	movs	r2, #60	; 0x3c
 800389a:	5c9b      	ldrb	r3, [r3, r2]
 800389c:	2b01      	cmp	r3, #1
 800389e:	d101      	bne.n	80038a4 <HAL_TIM_ConfigClockSource+0x20>
 80038a0:	2302      	movs	r3, #2
 80038a2:	e0bc      	b.n	8003a1e <HAL_TIM_ConfigClockSource+0x19a>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	223c      	movs	r2, #60	; 0x3c
 80038a8:	2101      	movs	r1, #1
 80038aa:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	223d      	movs	r2, #61	; 0x3d
 80038b0:	2102      	movs	r1, #2
 80038b2:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	689b      	ldr	r3, [r3, #8]
 80038ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80038bc:	68bb      	ldr	r3, [r7, #8]
 80038be:	4a5a      	ldr	r2, [pc, #360]	; (8003a28 <HAL_TIM_ConfigClockSource+0x1a4>)
 80038c0:	4013      	ands	r3, r2
 80038c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80038c4:	68bb      	ldr	r3, [r7, #8]
 80038c6:	4a59      	ldr	r2, [pc, #356]	; (8003a2c <HAL_TIM_ConfigClockSource+0x1a8>)
 80038c8:	4013      	ands	r3, r2
 80038ca:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	68ba      	ldr	r2, [r7, #8]
 80038d2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	2280      	movs	r2, #128	; 0x80
 80038da:	0192      	lsls	r2, r2, #6
 80038dc:	4293      	cmp	r3, r2
 80038de:	d040      	beq.n	8003962 <HAL_TIM_ConfigClockSource+0xde>
 80038e0:	2280      	movs	r2, #128	; 0x80
 80038e2:	0192      	lsls	r2, r2, #6
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d900      	bls.n	80038ea <HAL_TIM_ConfigClockSource+0x66>
 80038e8:	e088      	b.n	80039fc <HAL_TIM_ConfigClockSource+0x178>
 80038ea:	2280      	movs	r2, #128	; 0x80
 80038ec:	0152      	lsls	r2, r2, #5
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d100      	bne.n	80038f4 <HAL_TIM_ConfigClockSource+0x70>
 80038f2:	e088      	b.n	8003a06 <HAL_TIM_ConfigClockSource+0x182>
 80038f4:	2280      	movs	r2, #128	; 0x80
 80038f6:	0152      	lsls	r2, r2, #5
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d900      	bls.n	80038fe <HAL_TIM_ConfigClockSource+0x7a>
 80038fc:	e07e      	b.n	80039fc <HAL_TIM_ConfigClockSource+0x178>
 80038fe:	2b70      	cmp	r3, #112	; 0x70
 8003900:	d018      	beq.n	8003934 <HAL_TIM_ConfigClockSource+0xb0>
 8003902:	d900      	bls.n	8003906 <HAL_TIM_ConfigClockSource+0x82>
 8003904:	e07a      	b.n	80039fc <HAL_TIM_ConfigClockSource+0x178>
 8003906:	2b60      	cmp	r3, #96	; 0x60
 8003908:	d04f      	beq.n	80039aa <HAL_TIM_ConfigClockSource+0x126>
 800390a:	d900      	bls.n	800390e <HAL_TIM_ConfigClockSource+0x8a>
 800390c:	e076      	b.n	80039fc <HAL_TIM_ConfigClockSource+0x178>
 800390e:	2b50      	cmp	r3, #80	; 0x50
 8003910:	d03b      	beq.n	800398a <HAL_TIM_ConfigClockSource+0x106>
 8003912:	d900      	bls.n	8003916 <HAL_TIM_ConfigClockSource+0x92>
 8003914:	e072      	b.n	80039fc <HAL_TIM_ConfigClockSource+0x178>
 8003916:	2b40      	cmp	r3, #64	; 0x40
 8003918:	d057      	beq.n	80039ca <HAL_TIM_ConfigClockSource+0x146>
 800391a:	d900      	bls.n	800391e <HAL_TIM_ConfigClockSource+0x9a>
 800391c:	e06e      	b.n	80039fc <HAL_TIM_ConfigClockSource+0x178>
 800391e:	2b30      	cmp	r3, #48	; 0x30
 8003920:	d063      	beq.n	80039ea <HAL_TIM_ConfigClockSource+0x166>
 8003922:	d86b      	bhi.n	80039fc <HAL_TIM_ConfigClockSource+0x178>
 8003924:	2b20      	cmp	r3, #32
 8003926:	d060      	beq.n	80039ea <HAL_TIM_ConfigClockSource+0x166>
 8003928:	d868      	bhi.n	80039fc <HAL_TIM_ConfigClockSource+0x178>
 800392a:	2b00      	cmp	r3, #0
 800392c:	d05d      	beq.n	80039ea <HAL_TIM_ConfigClockSource+0x166>
 800392e:	2b10      	cmp	r3, #16
 8003930:	d05b      	beq.n	80039ea <HAL_TIM_ConfigClockSource+0x166>
 8003932:	e063      	b.n	80039fc <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6818      	ldr	r0, [r3, #0]
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	6899      	ldr	r1, [r3, #8]
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	685a      	ldr	r2, [r3, #4]
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	68db      	ldr	r3, [r3, #12]
 8003944:	f000 f970 	bl	8003c28 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	689b      	ldr	r3, [r3, #8]
 800394e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003950:	68bb      	ldr	r3, [r7, #8]
 8003952:	2277      	movs	r2, #119	; 0x77
 8003954:	4313      	orrs	r3, r2
 8003956:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	68ba      	ldr	r2, [r7, #8]
 800395e:	609a      	str	r2, [r3, #8]
      break;
 8003960:	e052      	b.n	8003a08 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6818      	ldr	r0, [r3, #0]
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	6899      	ldr	r1, [r3, #8]
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	685a      	ldr	r2, [r3, #4]
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	68db      	ldr	r3, [r3, #12]
 8003972:	f000 f959 	bl	8003c28 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	689a      	ldr	r2, [r3, #8]
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	2180      	movs	r1, #128	; 0x80
 8003982:	01c9      	lsls	r1, r1, #7
 8003984:	430a      	orrs	r2, r1
 8003986:	609a      	str	r2, [r3, #8]
      break;
 8003988:	e03e      	b.n	8003a08 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6818      	ldr	r0, [r3, #0]
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	6859      	ldr	r1, [r3, #4]
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	68db      	ldr	r3, [r3, #12]
 8003996:	001a      	movs	r2, r3
 8003998:	f000 f8ca 	bl	8003b30 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	2150      	movs	r1, #80	; 0x50
 80039a2:	0018      	movs	r0, r3
 80039a4:	f000 f924 	bl	8003bf0 <TIM_ITRx_SetConfig>
      break;
 80039a8:	e02e      	b.n	8003a08 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6818      	ldr	r0, [r3, #0]
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	6859      	ldr	r1, [r3, #4]
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	68db      	ldr	r3, [r3, #12]
 80039b6:	001a      	movs	r2, r3
 80039b8:	f000 f8e8 	bl	8003b8c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	2160      	movs	r1, #96	; 0x60
 80039c2:	0018      	movs	r0, r3
 80039c4:	f000 f914 	bl	8003bf0 <TIM_ITRx_SetConfig>
      break;
 80039c8:	e01e      	b.n	8003a08 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6818      	ldr	r0, [r3, #0]
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	6859      	ldr	r1, [r3, #4]
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	68db      	ldr	r3, [r3, #12]
 80039d6:	001a      	movs	r2, r3
 80039d8:	f000 f8aa 	bl	8003b30 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	2140      	movs	r1, #64	; 0x40
 80039e2:	0018      	movs	r0, r3
 80039e4:	f000 f904 	bl	8003bf0 <TIM_ITRx_SetConfig>
      break;
 80039e8:	e00e      	b.n	8003a08 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681a      	ldr	r2, [r3, #0]
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	0019      	movs	r1, r3
 80039f4:	0010      	movs	r0, r2
 80039f6:	f000 f8fb 	bl	8003bf0 <TIM_ITRx_SetConfig>
      break;
 80039fa:	e005      	b.n	8003a08 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 80039fc:	230f      	movs	r3, #15
 80039fe:	18fb      	adds	r3, r7, r3
 8003a00:	2201      	movs	r2, #1
 8003a02:	701a      	strb	r2, [r3, #0]
      break;
 8003a04:	e000      	b.n	8003a08 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8003a06:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	223d      	movs	r2, #61	; 0x3d
 8003a0c:	2101      	movs	r1, #1
 8003a0e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	223c      	movs	r2, #60	; 0x3c
 8003a14:	2100      	movs	r1, #0
 8003a16:	5499      	strb	r1, [r3, r2]

  return status;
 8003a18:	230f      	movs	r3, #15
 8003a1a:	18fb      	adds	r3, r7, r3
 8003a1c:	781b      	ldrb	r3, [r3, #0]
}
 8003a1e:	0018      	movs	r0, r3
 8003a20:	46bd      	mov	sp, r7
 8003a22:	b004      	add	sp, #16
 8003a24:	bd80      	pop	{r7, pc}
 8003a26:	46c0      	nop			; (mov r8, r8)
 8003a28:	ffceff88 	.word	0xffceff88
 8003a2c:	ffff00ff 	.word	0xffff00ff

08003a30 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b084      	sub	sp, #16
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
 8003a38:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	4a34      	ldr	r2, [pc, #208]	; (8003b14 <TIM_Base_SetConfig+0xe4>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d008      	beq.n	8003a5a <TIM_Base_SetConfig+0x2a>
 8003a48:	687a      	ldr	r2, [r7, #4]
 8003a4a:	2380      	movs	r3, #128	; 0x80
 8003a4c:	05db      	lsls	r3, r3, #23
 8003a4e:	429a      	cmp	r2, r3
 8003a50:	d003      	beq.n	8003a5a <TIM_Base_SetConfig+0x2a>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	4a30      	ldr	r2, [pc, #192]	; (8003b18 <TIM_Base_SetConfig+0xe8>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d108      	bne.n	8003a6c <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	2270      	movs	r2, #112	; 0x70
 8003a5e:	4393      	bics	r3, r2
 8003a60:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	685b      	ldr	r3, [r3, #4]
 8003a66:	68fa      	ldr	r2, [r7, #12]
 8003a68:	4313      	orrs	r3, r2
 8003a6a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	4a29      	ldr	r2, [pc, #164]	; (8003b14 <TIM_Base_SetConfig+0xe4>)
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d018      	beq.n	8003aa6 <TIM_Base_SetConfig+0x76>
 8003a74:	687a      	ldr	r2, [r7, #4]
 8003a76:	2380      	movs	r3, #128	; 0x80
 8003a78:	05db      	lsls	r3, r3, #23
 8003a7a:	429a      	cmp	r2, r3
 8003a7c:	d013      	beq.n	8003aa6 <TIM_Base_SetConfig+0x76>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	4a25      	ldr	r2, [pc, #148]	; (8003b18 <TIM_Base_SetConfig+0xe8>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d00f      	beq.n	8003aa6 <TIM_Base_SetConfig+0x76>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	4a24      	ldr	r2, [pc, #144]	; (8003b1c <TIM_Base_SetConfig+0xec>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d00b      	beq.n	8003aa6 <TIM_Base_SetConfig+0x76>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	4a23      	ldr	r2, [pc, #140]	; (8003b20 <TIM_Base_SetConfig+0xf0>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d007      	beq.n	8003aa6 <TIM_Base_SetConfig+0x76>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	4a22      	ldr	r2, [pc, #136]	; (8003b24 <TIM_Base_SetConfig+0xf4>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d003      	beq.n	8003aa6 <TIM_Base_SetConfig+0x76>
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	4a21      	ldr	r2, [pc, #132]	; (8003b28 <TIM_Base_SetConfig+0xf8>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d108      	bne.n	8003ab8 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	4a20      	ldr	r2, [pc, #128]	; (8003b2c <TIM_Base_SetConfig+0xfc>)
 8003aaa:	4013      	ands	r3, r2
 8003aac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	68db      	ldr	r3, [r3, #12]
 8003ab2:	68fa      	ldr	r2, [r7, #12]
 8003ab4:	4313      	orrs	r3, r2
 8003ab6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	2280      	movs	r2, #128	; 0x80
 8003abc:	4393      	bics	r3, r2
 8003abe:	001a      	movs	r2, r3
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	695b      	ldr	r3, [r3, #20]
 8003ac4:	4313      	orrs	r3, r2
 8003ac6:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	68fa      	ldr	r2, [r7, #12]
 8003acc:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	689a      	ldr	r2, [r3, #8]
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	681a      	ldr	r2, [r3, #0]
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	4a0c      	ldr	r2, [pc, #48]	; (8003b14 <TIM_Base_SetConfig+0xe4>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d00b      	beq.n	8003afe <TIM_Base_SetConfig+0xce>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	4a0d      	ldr	r2, [pc, #52]	; (8003b20 <TIM_Base_SetConfig+0xf0>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d007      	beq.n	8003afe <TIM_Base_SetConfig+0xce>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	4a0c      	ldr	r2, [pc, #48]	; (8003b24 <TIM_Base_SetConfig+0xf4>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d003      	beq.n	8003afe <TIM_Base_SetConfig+0xce>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	4a0b      	ldr	r2, [pc, #44]	; (8003b28 <TIM_Base_SetConfig+0xf8>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d103      	bne.n	8003b06 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	691a      	ldr	r2, [r3, #16]
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2201      	movs	r2, #1
 8003b0a:	615a      	str	r2, [r3, #20]
}
 8003b0c:	46c0      	nop			; (mov r8, r8)
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	b004      	add	sp, #16
 8003b12:	bd80      	pop	{r7, pc}
 8003b14:	40012c00 	.word	0x40012c00
 8003b18:	40000400 	.word	0x40000400
 8003b1c:	40002000 	.word	0x40002000
 8003b20:	40014000 	.word	0x40014000
 8003b24:	40014400 	.word	0x40014400
 8003b28:	40014800 	.word	0x40014800
 8003b2c:	fffffcff 	.word	0xfffffcff

08003b30 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b086      	sub	sp, #24
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	60f8      	str	r0, [r7, #12]
 8003b38:	60b9      	str	r1, [r7, #8]
 8003b3a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	6a1b      	ldr	r3, [r3, #32]
 8003b40:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	6a1b      	ldr	r3, [r3, #32]
 8003b46:	2201      	movs	r2, #1
 8003b48:	4393      	bics	r3, r2
 8003b4a:	001a      	movs	r2, r3
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	699b      	ldr	r3, [r3, #24]
 8003b54:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003b56:	693b      	ldr	r3, [r7, #16]
 8003b58:	22f0      	movs	r2, #240	; 0xf0
 8003b5a:	4393      	bics	r3, r2
 8003b5c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	011b      	lsls	r3, r3, #4
 8003b62:	693a      	ldr	r2, [r7, #16]
 8003b64:	4313      	orrs	r3, r2
 8003b66:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003b68:	697b      	ldr	r3, [r7, #20]
 8003b6a:	220a      	movs	r2, #10
 8003b6c:	4393      	bics	r3, r2
 8003b6e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003b70:	697a      	ldr	r2, [r7, #20]
 8003b72:	68bb      	ldr	r3, [r7, #8]
 8003b74:	4313      	orrs	r3, r2
 8003b76:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	693a      	ldr	r2, [r7, #16]
 8003b7c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	697a      	ldr	r2, [r7, #20]
 8003b82:	621a      	str	r2, [r3, #32]
}
 8003b84:	46c0      	nop			; (mov r8, r8)
 8003b86:	46bd      	mov	sp, r7
 8003b88:	b006      	add	sp, #24
 8003b8a:	bd80      	pop	{r7, pc}

08003b8c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	b086      	sub	sp, #24
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	60f8      	str	r0, [r7, #12]
 8003b94:	60b9      	str	r1, [r7, #8]
 8003b96:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	6a1b      	ldr	r3, [r3, #32]
 8003b9c:	2210      	movs	r2, #16
 8003b9e:	4393      	bics	r3, r2
 8003ba0:	001a      	movs	r2, r3
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	699b      	ldr	r3, [r3, #24]
 8003baa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	6a1b      	ldr	r3, [r3, #32]
 8003bb0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003bb2:	697b      	ldr	r3, [r7, #20]
 8003bb4:	4a0d      	ldr	r2, [pc, #52]	; (8003bec <TIM_TI2_ConfigInputStage+0x60>)
 8003bb6:	4013      	ands	r3, r2
 8003bb8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	031b      	lsls	r3, r3, #12
 8003bbe:	697a      	ldr	r2, [r7, #20]
 8003bc0:	4313      	orrs	r3, r2
 8003bc2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003bc4:	693b      	ldr	r3, [r7, #16]
 8003bc6:	22a0      	movs	r2, #160	; 0xa0
 8003bc8:	4393      	bics	r3, r2
 8003bca:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003bcc:	68bb      	ldr	r3, [r7, #8]
 8003bce:	011b      	lsls	r3, r3, #4
 8003bd0:	693a      	ldr	r2, [r7, #16]
 8003bd2:	4313      	orrs	r3, r2
 8003bd4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	697a      	ldr	r2, [r7, #20]
 8003bda:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	693a      	ldr	r2, [r7, #16]
 8003be0:	621a      	str	r2, [r3, #32]
}
 8003be2:	46c0      	nop			; (mov r8, r8)
 8003be4:	46bd      	mov	sp, r7
 8003be6:	b006      	add	sp, #24
 8003be8:	bd80      	pop	{r7, pc}
 8003bea:	46c0      	nop			; (mov r8, r8)
 8003bec:	ffff0fff 	.word	0xffff0fff

08003bf0 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b084      	sub	sp, #16
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
 8003bf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	689b      	ldr	r3, [r3, #8]
 8003bfe:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	4a08      	ldr	r2, [pc, #32]	; (8003c24 <TIM_ITRx_SetConfig+0x34>)
 8003c04:	4013      	ands	r3, r2
 8003c06:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003c08:	683a      	ldr	r2, [r7, #0]
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	4313      	orrs	r3, r2
 8003c0e:	2207      	movs	r2, #7
 8003c10:	4313      	orrs	r3, r2
 8003c12:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	68fa      	ldr	r2, [r7, #12]
 8003c18:	609a      	str	r2, [r3, #8]
}
 8003c1a:	46c0      	nop			; (mov r8, r8)
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	b004      	add	sp, #16
 8003c20:	bd80      	pop	{r7, pc}
 8003c22:	46c0      	nop			; (mov r8, r8)
 8003c24:	ffcfff8f 	.word	0xffcfff8f

08003c28 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b086      	sub	sp, #24
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	60f8      	str	r0, [r7, #12]
 8003c30:	60b9      	str	r1, [r7, #8]
 8003c32:	607a      	str	r2, [r7, #4]
 8003c34:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	689b      	ldr	r3, [r3, #8]
 8003c3a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c3c:	697b      	ldr	r3, [r7, #20]
 8003c3e:	4a09      	ldr	r2, [pc, #36]	; (8003c64 <TIM_ETR_SetConfig+0x3c>)
 8003c40:	4013      	ands	r3, r2
 8003c42:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	021a      	lsls	r2, r3, #8
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	431a      	orrs	r2, r3
 8003c4c:	68bb      	ldr	r3, [r7, #8]
 8003c4e:	4313      	orrs	r3, r2
 8003c50:	697a      	ldr	r2, [r7, #20]
 8003c52:	4313      	orrs	r3, r2
 8003c54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	697a      	ldr	r2, [r7, #20]
 8003c5a:	609a      	str	r2, [r3, #8]
}
 8003c5c:	46c0      	nop			; (mov r8, r8)
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	b006      	add	sp, #24
 8003c62:	bd80      	pop	{r7, pc}
 8003c64:	ffff00ff 	.word	0xffff00ff

08003c68 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b084      	sub	sp, #16
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
 8003c70:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	223c      	movs	r2, #60	; 0x3c
 8003c76:	5c9b      	ldrb	r3, [r3, r2]
 8003c78:	2b01      	cmp	r3, #1
 8003c7a:	d101      	bne.n	8003c80 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003c7c:	2302      	movs	r3, #2
 8003c7e:	e055      	b.n	8003d2c <HAL_TIMEx_MasterConfigSynchronization+0xc4>
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	223c      	movs	r2, #60	; 0x3c
 8003c84:	2101      	movs	r1, #1
 8003c86:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	223d      	movs	r2, #61	; 0x3d
 8003c8c:	2102      	movs	r1, #2
 8003c8e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	685b      	ldr	r3, [r3, #4]
 8003c96:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	689b      	ldr	r3, [r3, #8]
 8003c9e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4a23      	ldr	r2, [pc, #140]	; (8003d34 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d108      	bne.n	8003cbc <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	4a22      	ldr	r2, [pc, #136]	; (8003d38 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003cae:	4013      	ands	r3, r2
 8003cb0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	685b      	ldr	r3, [r3, #4]
 8003cb6:	68fa      	ldr	r2, [r7, #12]
 8003cb8:	4313      	orrs	r3, r2
 8003cba:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	2270      	movs	r2, #112	; 0x70
 8003cc0:	4393      	bics	r3, r2
 8003cc2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	68fa      	ldr	r2, [r7, #12]
 8003cca:	4313      	orrs	r3, r2
 8003ccc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	68fa      	ldr	r2, [r7, #12]
 8003cd4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	4a16      	ldr	r2, [pc, #88]	; (8003d34 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	d00f      	beq.n	8003d00 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681a      	ldr	r2, [r3, #0]
 8003ce4:	2380      	movs	r3, #128	; 0x80
 8003ce6:	05db      	lsls	r3, r3, #23
 8003ce8:	429a      	cmp	r2, r3
 8003cea:	d009      	beq.n	8003d00 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	4a12      	ldr	r2, [pc, #72]	; (8003d3c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d004      	beq.n	8003d00 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	4a11      	ldr	r2, [pc, #68]	; (8003d40 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d10c      	bne.n	8003d1a <HAL_TIMEx_MasterConfigSynchronization+0xb2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003d00:	68bb      	ldr	r3, [r7, #8]
 8003d02:	2280      	movs	r2, #128	; 0x80
 8003d04:	4393      	bics	r3, r2
 8003d06:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	689b      	ldr	r3, [r3, #8]
 8003d0c:	68ba      	ldr	r2, [r7, #8]
 8003d0e:	4313      	orrs	r3, r2
 8003d10:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	68ba      	ldr	r2, [r7, #8]
 8003d18:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	223d      	movs	r2, #61	; 0x3d
 8003d1e:	2101      	movs	r1, #1
 8003d20:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	223c      	movs	r2, #60	; 0x3c
 8003d26:	2100      	movs	r1, #0
 8003d28:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003d2a:	2300      	movs	r3, #0
}
 8003d2c:	0018      	movs	r0, r3
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	b004      	add	sp, #16
 8003d32:	bd80      	pop	{r7, pc}
 8003d34:	40012c00 	.word	0x40012c00
 8003d38:	ff0fffff 	.word	0xff0fffff
 8003d3c:	40000400 	.word	0x40000400
 8003d40:	40014000 	.word	0x40014000

08003d44 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b082      	sub	sp, #8
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d101      	bne.n	8003d56 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003d52:	2301      	movs	r3, #1
 8003d54:	e046      	b.n	8003de4 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2284      	movs	r2, #132	; 0x84
 8003d5a:	589b      	ldr	r3, [r3, r2]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d107      	bne.n	8003d70 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2280      	movs	r2, #128	; 0x80
 8003d64:	2100      	movs	r1, #0
 8003d66:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	0018      	movs	r0, r3
 8003d6c:	f7fd f952 	bl	8001014 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2284      	movs	r2, #132	; 0x84
 8003d74:	2124      	movs	r1, #36	; 0x24
 8003d76:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	681a      	ldr	r2, [r3, #0]
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	2101      	movs	r1, #1
 8003d84:	438a      	bics	r2, r1
 8003d86:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	0018      	movs	r0, r3
 8003d8c:	f000 f830 	bl	8003df0 <UART_SetConfig>
 8003d90:	0003      	movs	r3, r0
 8003d92:	2b01      	cmp	r3, #1
 8003d94:	d101      	bne.n	8003d9a <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8003d96:	2301      	movs	r3, #1
 8003d98:	e024      	b.n	8003de4 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d003      	beq.n	8003daa <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	0018      	movs	r0, r3
 8003da6:	f000 fae1 	bl	800436c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	685a      	ldr	r2, [r3, #4]
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	490d      	ldr	r1, [pc, #52]	; (8003dec <HAL_UART_Init+0xa8>)
 8003db6:	400a      	ands	r2, r1
 8003db8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	689a      	ldr	r2, [r3, #8]
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	212a      	movs	r1, #42	; 0x2a
 8003dc6:	438a      	bics	r2, r1
 8003dc8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	681a      	ldr	r2, [r3, #0]
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	2101      	movs	r1, #1
 8003dd6:	430a      	orrs	r2, r1
 8003dd8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	0018      	movs	r0, r3
 8003dde:	f000 fb79 	bl	80044d4 <UART_CheckIdleState>
 8003de2:	0003      	movs	r3, r0
}
 8003de4:	0018      	movs	r0, r3
 8003de6:	46bd      	mov	sp, r7
 8003de8:	b002      	add	sp, #8
 8003dea:	bd80      	pop	{r7, pc}
 8003dec:	ffffb7ff 	.word	0xffffb7ff

08003df0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003df0:	b5b0      	push	{r4, r5, r7, lr}
 8003df2:	b090      	sub	sp, #64	; 0x40
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003df8:	231a      	movs	r3, #26
 8003dfa:	2220      	movs	r2, #32
 8003dfc:	189b      	adds	r3, r3, r2
 8003dfe:	19db      	adds	r3, r3, r7
 8003e00:	2200      	movs	r2, #0
 8003e02:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e06:	689a      	ldr	r2, [r3, #8]
 8003e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e0a:	691b      	ldr	r3, [r3, #16]
 8003e0c:	431a      	orrs	r2, r3
 8003e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e10:	695b      	ldr	r3, [r3, #20]
 8003e12:	431a      	orrs	r2, r3
 8003e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e16:	69db      	ldr	r3, [r3, #28]
 8003e18:	4313      	orrs	r3, r2
 8003e1a:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	4aaf      	ldr	r2, [pc, #700]	; (80040e0 <UART_SetConfig+0x2f0>)
 8003e24:	4013      	ands	r3, r2
 8003e26:	0019      	movs	r1, r3
 8003e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e2a:	681a      	ldr	r2, [r3, #0]
 8003e2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e2e:	430b      	orrs	r3, r1
 8003e30:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	685b      	ldr	r3, [r3, #4]
 8003e38:	4aaa      	ldr	r2, [pc, #680]	; (80040e4 <UART_SetConfig+0x2f4>)
 8003e3a:	4013      	ands	r3, r2
 8003e3c:	0018      	movs	r0, r3
 8003e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e40:	68d9      	ldr	r1, [r3, #12]
 8003e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e44:	681a      	ldr	r2, [r3, #0]
 8003e46:	0003      	movs	r3, r0
 8003e48:	430b      	orrs	r3, r1
 8003e4a:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e4e:	699b      	ldr	r3, [r3, #24]
 8003e50:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	4aa4      	ldr	r2, [pc, #656]	; (80040e8 <UART_SetConfig+0x2f8>)
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d004      	beq.n	8003e66 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e5e:	6a1b      	ldr	r3, [r3, #32]
 8003e60:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003e62:	4313      	orrs	r3, r2
 8003e64:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	689b      	ldr	r3, [r3, #8]
 8003e6c:	4a9f      	ldr	r2, [pc, #636]	; (80040ec <UART_SetConfig+0x2fc>)
 8003e6e:	4013      	ands	r3, r2
 8003e70:	0019      	movs	r1, r3
 8003e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e74:	681a      	ldr	r2, [r3, #0]
 8003e76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e78:	430b      	orrs	r3, r1
 8003e7a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e82:	220f      	movs	r2, #15
 8003e84:	4393      	bics	r3, r2
 8003e86:	0018      	movs	r0, r3
 8003e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e8a:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e8e:	681a      	ldr	r2, [r3, #0]
 8003e90:	0003      	movs	r3, r0
 8003e92:	430b      	orrs	r3, r1
 8003e94:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4a95      	ldr	r2, [pc, #596]	; (80040f0 <UART_SetConfig+0x300>)
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d131      	bne.n	8003f04 <UART_SetConfig+0x114>
 8003ea0:	4b94      	ldr	r3, [pc, #592]	; (80040f4 <UART_SetConfig+0x304>)
 8003ea2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ea4:	2203      	movs	r2, #3
 8003ea6:	4013      	ands	r3, r2
 8003ea8:	2b03      	cmp	r3, #3
 8003eaa:	d01d      	beq.n	8003ee8 <UART_SetConfig+0xf8>
 8003eac:	d823      	bhi.n	8003ef6 <UART_SetConfig+0x106>
 8003eae:	2b02      	cmp	r3, #2
 8003eb0:	d00c      	beq.n	8003ecc <UART_SetConfig+0xdc>
 8003eb2:	d820      	bhi.n	8003ef6 <UART_SetConfig+0x106>
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d002      	beq.n	8003ebe <UART_SetConfig+0xce>
 8003eb8:	2b01      	cmp	r3, #1
 8003eba:	d00e      	beq.n	8003eda <UART_SetConfig+0xea>
 8003ebc:	e01b      	b.n	8003ef6 <UART_SetConfig+0x106>
 8003ebe:	231b      	movs	r3, #27
 8003ec0:	2220      	movs	r2, #32
 8003ec2:	189b      	adds	r3, r3, r2
 8003ec4:	19db      	adds	r3, r3, r7
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	701a      	strb	r2, [r3, #0]
 8003eca:	e0b4      	b.n	8004036 <UART_SetConfig+0x246>
 8003ecc:	231b      	movs	r3, #27
 8003ece:	2220      	movs	r2, #32
 8003ed0:	189b      	adds	r3, r3, r2
 8003ed2:	19db      	adds	r3, r3, r7
 8003ed4:	2202      	movs	r2, #2
 8003ed6:	701a      	strb	r2, [r3, #0]
 8003ed8:	e0ad      	b.n	8004036 <UART_SetConfig+0x246>
 8003eda:	231b      	movs	r3, #27
 8003edc:	2220      	movs	r2, #32
 8003ede:	189b      	adds	r3, r3, r2
 8003ee0:	19db      	adds	r3, r3, r7
 8003ee2:	2204      	movs	r2, #4
 8003ee4:	701a      	strb	r2, [r3, #0]
 8003ee6:	e0a6      	b.n	8004036 <UART_SetConfig+0x246>
 8003ee8:	231b      	movs	r3, #27
 8003eea:	2220      	movs	r2, #32
 8003eec:	189b      	adds	r3, r3, r2
 8003eee:	19db      	adds	r3, r3, r7
 8003ef0:	2208      	movs	r2, #8
 8003ef2:	701a      	strb	r2, [r3, #0]
 8003ef4:	e09f      	b.n	8004036 <UART_SetConfig+0x246>
 8003ef6:	231b      	movs	r3, #27
 8003ef8:	2220      	movs	r2, #32
 8003efa:	189b      	adds	r3, r3, r2
 8003efc:	19db      	adds	r3, r3, r7
 8003efe:	2210      	movs	r2, #16
 8003f00:	701a      	strb	r2, [r3, #0]
 8003f02:	e098      	b.n	8004036 <UART_SetConfig+0x246>
 8003f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	4a7b      	ldr	r2, [pc, #492]	; (80040f8 <UART_SetConfig+0x308>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d131      	bne.n	8003f72 <UART_SetConfig+0x182>
 8003f0e:	4b79      	ldr	r3, [pc, #484]	; (80040f4 <UART_SetConfig+0x304>)
 8003f10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f12:	220c      	movs	r2, #12
 8003f14:	4013      	ands	r3, r2
 8003f16:	2b0c      	cmp	r3, #12
 8003f18:	d01d      	beq.n	8003f56 <UART_SetConfig+0x166>
 8003f1a:	d823      	bhi.n	8003f64 <UART_SetConfig+0x174>
 8003f1c:	2b08      	cmp	r3, #8
 8003f1e:	d00c      	beq.n	8003f3a <UART_SetConfig+0x14a>
 8003f20:	d820      	bhi.n	8003f64 <UART_SetConfig+0x174>
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d002      	beq.n	8003f2c <UART_SetConfig+0x13c>
 8003f26:	2b04      	cmp	r3, #4
 8003f28:	d00e      	beq.n	8003f48 <UART_SetConfig+0x158>
 8003f2a:	e01b      	b.n	8003f64 <UART_SetConfig+0x174>
 8003f2c:	231b      	movs	r3, #27
 8003f2e:	2220      	movs	r2, #32
 8003f30:	189b      	adds	r3, r3, r2
 8003f32:	19db      	adds	r3, r3, r7
 8003f34:	2200      	movs	r2, #0
 8003f36:	701a      	strb	r2, [r3, #0]
 8003f38:	e07d      	b.n	8004036 <UART_SetConfig+0x246>
 8003f3a:	231b      	movs	r3, #27
 8003f3c:	2220      	movs	r2, #32
 8003f3e:	189b      	adds	r3, r3, r2
 8003f40:	19db      	adds	r3, r3, r7
 8003f42:	2202      	movs	r2, #2
 8003f44:	701a      	strb	r2, [r3, #0]
 8003f46:	e076      	b.n	8004036 <UART_SetConfig+0x246>
 8003f48:	231b      	movs	r3, #27
 8003f4a:	2220      	movs	r2, #32
 8003f4c:	189b      	adds	r3, r3, r2
 8003f4e:	19db      	adds	r3, r3, r7
 8003f50:	2204      	movs	r2, #4
 8003f52:	701a      	strb	r2, [r3, #0]
 8003f54:	e06f      	b.n	8004036 <UART_SetConfig+0x246>
 8003f56:	231b      	movs	r3, #27
 8003f58:	2220      	movs	r2, #32
 8003f5a:	189b      	adds	r3, r3, r2
 8003f5c:	19db      	adds	r3, r3, r7
 8003f5e:	2208      	movs	r2, #8
 8003f60:	701a      	strb	r2, [r3, #0]
 8003f62:	e068      	b.n	8004036 <UART_SetConfig+0x246>
 8003f64:	231b      	movs	r3, #27
 8003f66:	2220      	movs	r2, #32
 8003f68:	189b      	adds	r3, r3, r2
 8003f6a:	19db      	adds	r3, r3, r7
 8003f6c:	2210      	movs	r2, #16
 8003f6e:	701a      	strb	r2, [r3, #0]
 8003f70:	e061      	b.n	8004036 <UART_SetConfig+0x246>
 8003f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	4a61      	ldr	r2, [pc, #388]	; (80040fc <UART_SetConfig+0x30c>)
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d106      	bne.n	8003f8a <UART_SetConfig+0x19a>
 8003f7c:	231b      	movs	r3, #27
 8003f7e:	2220      	movs	r2, #32
 8003f80:	189b      	adds	r3, r3, r2
 8003f82:	19db      	adds	r3, r3, r7
 8003f84:	2200      	movs	r2, #0
 8003f86:	701a      	strb	r2, [r3, #0]
 8003f88:	e055      	b.n	8004036 <UART_SetConfig+0x246>
 8003f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	4a5c      	ldr	r2, [pc, #368]	; (8004100 <UART_SetConfig+0x310>)
 8003f90:	4293      	cmp	r3, r2
 8003f92:	d106      	bne.n	8003fa2 <UART_SetConfig+0x1b2>
 8003f94:	231b      	movs	r3, #27
 8003f96:	2220      	movs	r2, #32
 8003f98:	189b      	adds	r3, r3, r2
 8003f9a:	19db      	adds	r3, r3, r7
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	701a      	strb	r2, [r3, #0]
 8003fa0:	e049      	b.n	8004036 <UART_SetConfig+0x246>
 8003fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	4a50      	ldr	r2, [pc, #320]	; (80040e8 <UART_SetConfig+0x2f8>)
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d13e      	bne.n	800402a <UART_SetConfig+0x23a>
 8003fac:	4b51      	ldr	r3, [pc, #324]	; (80040f4 <UART_SetConfig+0x304>)
 8003fae:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003fb0:	23c0      	movs	r3, #192	; 0xc0
 8003fb2:	011b      	lsls	r3, r3, #4
 8003fb4:	4013      	ands	r3, r2
 8003fb6:	22c0      	movs	r2, #192	; 0xc0
 8003fb8:	0112      	lsls	r2, r2, #4
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d027      	beq.n	800400e <UART_SetConfig+0x21e>
 8003fbe:	22c0      	movs	r2, #192	; 0xc0
 8003fc0:	0112      	lsls	r2, r2, #4
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	d82a      	bhi.n	800401c <UART_SetConfig+0x22c>
 8003fc6:	2280      	movs	r2, #128	; 0x80
 8003fc8:	0112      	lsls	r2, r2, #4
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d011      	beq.n	8003ff2 <UART_SetConfig+0x202>
 8003fce:	2280      	movs	r2, #128	; 0x80
 8003fd0:	0112      	lsls	r2, r2, #4
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d822      	bhi.n	800401c <UART_SetConfig+0x22c>
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d004      	beq.n	8003fe4 <UART_SetConfig+0x1f4>
 8003fda:	2280      	movs	r2, #128	; 0x80
 8003fdc:	00d2      	lsls	r2, r2, #3
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d00e      	beq.n	8004000 <UART_SetConfig+0x210>
 8003fe2:	e01b      	b.n	800401c <UART_SetConfig+0x22c>
 8003fe4:	231b      	movs	r3, #27
 8003fe6:	2220      	movs	r2, #32
 8003fe8:	189b      	adds	r3, r3, r2
 8003fea:	19db      	adds	r3, r3, r7
 8003fec:	2200      	movs	r2, #0
 8003fee:	701a      	strb	r2, [r3, #0]
 8003ff0:	e021      	b.n	8004036 <UART_SetConfig+0x246>
 8003ff2:	231b      	movs	r3, #27
 8003ff4:	2220      	movs	r2, #32
 8003ff6:	189b      	adds	r3, r3, r2
 8003ff8:	19db      	adds	r3, r3, r7
 8003ffa:	2202      	movs	r2, #2
 8003ffc:	701a      	strb	r2, [r3, #0]
 8003ffe:	e01a      	b.n	8004036 <UART_SetConfig+0x246>
 8004000:	231b      	movs	r3, #27
 8004002:	2220      	movs	r2, #32
 8004004:	189b      	adds	r3, r3, r2
 8004006:	19db      	adds	r3, r3, r7
 8004008:	2204      	movs	r2, #4
 800400a:	701a      	strb	r2, [r3, #0]
 800400c:	e013      	b.n	8004036 <UART_SetConfig+0x246>
 800400e:	231b      	movs	r3, #27
 8004010:	2220      	movs	r2, #32
 8004012:	189b      	adds	r3, r3, r2
 8004014:	19db      	adds	r3, r3, r7
 8004016:	2208      	movs	r2, #8
 8004018:	701a      	strb	r2, [r3, #0]
 800401a:	e00c      	b.n	8004036 <UART_SetConfig+0x246>
 800401c:	231b      	movs	r3, #27
 800401e:	2220      	movs	r2, #32
 8004020:	189b      	adds	r3, r3, r2
 8004022:	19db      	adds	r3, r3, r7
 8004024:	2210      	movs	r2, #16
 8004026:	701a      	strb	r2, [r3, #0]
 8004028:	e005      	b.n	8004036 <UART_SetConfig+0x246>
 800402a:	231b      	movs	r3, #27
 800402c:	2220      	movs	r2, #32
 800402e:	189b      	adds	r3, r3, r2
 8004030:	19db      	adds	r3, r3, r7
 8004032:	2210      	movs	r2, #16
 8004034:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	4a2b      	ldr	r2, [pc, #172]	; (80040e8 <UART_SetConfig+0x2f8>)
 800403c:	4293      	cmp	r3, r2
 800403e:	d000      	beq.n	8004042 <UART_SetConfig+0x252>
 8004040:	e0a9      	b.n	8004196 <UART_SetConfig+0x3a6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004042:	231b      	movs	r3, #27
 8004044:	2220      	movs	r2, #32
 8004046:	189b      	adds	r3, r3, r2
 8004048:	19db      	adds	r3, r3, r7
 800404a:	781b      	ldrb	r3, [r3, #0]
 800404c:	2b08      	cmp	r3, #8
 800404e:	d015      	beq.n	800407c <UART_SetConfig+0x28c>
 8004050:	dc18      	bgt.n	8004084 <UART_SetConfig+0x294>
 8004052:	2b04      	cmp	r3, #4
 8004054:	d00d      	beq.n	8004072 <UART_SetConfig+0x282>
 8004056:	dc15      	bgt.n	8004084 <UART_SetConfig+0x294>
 8004058:	2b00      	cmp	r3, #0
 800405a:	d002      	beq.n	8004062 <UART_SetConfig+0x272>
 800405c:	2b02      	cmp	r3, #2
 800405e:	d005      	beq.n	800406c <UART_SetConfig+0x27c>
 8004060:	e010      	b.n	8004084 <UART_SetConfig+0x294>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004062:	f7fe f901 	bl	8002268 <HAL_RCC_GetPCLK1Freq>
 8004066:	0003      	movs	r3, r0
 8004068:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800406a:	e014      	b.n	8004096 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800406c:	4b25      	ldr	r3, [pc, #148]	; (8004104 <UART_SetConfig+0x314>)
 800406e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004070:	e011      	b.n	8004096 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004072:	f7fe f86d 	bl	8002150 <HAL_RCC_GetSysClockFreq>
 8004076:	0003      	movs	r3, r0
 8004078:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800407a:	e00c      	b.n	8004096 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800407c:	2380      	movs	r3, #128	; 0x80
 800407e:	021b      	lsls	r3, r3, #8
 8004080:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004082:	e008      	b.n	8004096 <UART_SetConfig+0x2a6>
      default:
        pclk = 0U;
 8004084:	2300      	movs	r3, #0
 8004086:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8004088:	231a      	movs	r3, #26
 800408a:	2220      	movs	r2, #32
 800408c:	189b      	adds	r3, r3, r2
 800408e:	19db      	adds	r3, r3, r7
 8004090:	2201      	movs	r2, #1
 8004092:	701a      	strb	r2, [r3, #0]
        break;
 8004094:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004096:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004098:	2b00      	cmp	r3, #0
 800409a:	d100      	bne.n	800409e <UART_SetConfig+0x2ae>
 800409c:	e14b      	b.n	8004336 <UART_SetConfig+0x546>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800409e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80040a2:	4b19      	ldr	r3, [pc, #100]	; (8004108 <UART_SetConfig+0x318>)
 80040a4:	0052      	lsls	r2, r2, #1
 80040a6:	5ad3      	ldrh	r3, [r2, r3]
 80040a8:	0019      	movs	r1, r3
 80040aa:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80040ac:	f7fc f83c 	bl	8000128 <__udivsi3>
 80040b0:	0003      	movs	r3, r0
 80040b2:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80040b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040b6:	685a      	ldr	r2, [r3, #4]
 80040b8:	0013      	movs	r3, r2
 80040ba:	005b      	lsls	r3, r3, #1
 80040bc:	189b      	adds	r3, r3, r2
 80040be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80040c0:	429a      	cmp	r2, r3
 80040c2:	d305      	bcc.n	80040d0 <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80040c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040c6:	685b      	ldr	r3, [r3, #4]
 80040c8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80040ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80040cc:	429a      	cmp	r2, r3
 80040ce:	d91d      	bls.n	800410c <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 80040d0:	231a      	movs	r3, #26
 80040d2:	2220      	movs	r2, #32
 80040d4:	189b      	adds	r3, r3, r2
 80040d6:	19db      	adds	r3, r3, r7
 80040d8:	2201      	movs	r2, #1
 80040da:	701a      	strb	r2, [r3, #0]
 80040dc:	e12b      	b.n	8004336 <UART_SetConfig+0x546>
 80040de:	46c0      	nop			; (mov r8, r8)
 80040e0:	cfff69f3 	.word	0xcfff69f3
 80040e4:	ffffcfff 	.word	0xffffcfff
 80040e8:	40008000 	.word	0x40008000
 80040ec:	11fff4ff 	.word	0x11fff4ff
 80040f0:	40013800 	.word	0x40013800
 80040f4:	40021000 	.word	0x40021000
 80040f8:	40004400 	.word	0x40004400
 80040fc:	40004800 	.word	0x40004800
 8004100:	40004c00 	.word	0x40004c00
 8004104:	00f42400 	.word	0x00f42400
 8004108:	080068e8 	.word	0x080068e8
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800410c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800410e:	61bb      	str	r3, [r7, #24]
 8004110:	2300      	movs	r3, #0
 8004112:	61fb      	str	r3, [r7, #28]
 8004114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004116:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004118:	4b92      	ldr	r3, [pc, #584]	; (8004364 <UART_SetConfig+0x574>)
 800411a:	0052      	lsls	r2, r2, #1
 800411c:	5ad3      	ldrh	r3, [r2, r3]
 800411e:	613b      	str	r3, [r7, #16]
 8004120:	2300      	movs	r3, #0
 8004122:	617b      	str	r3, [r7, #20]
 8004124:	693a      	ldr	r2, [r7, #16]
 8004126:	697b      	ldr	r3, [r7, #20]
 8004128:	69b8      	ldr	r0, [r7, #24]
 800412a:	69f9      	ldr	r1, [r7, #28]
 800412c:	f7fc f972 	bl	8000414 <__aeabi_uldivmod>
 8004130:	0002      	movs	r2, r0
 8004132:	000b      	movs	r3, r1
 8004134:	0e11      	lsrs	r1, r2, #24
 8004136:	021d      	lsls	r5, r3, #8
 8004138:	430d      	orrs	r5, r1
 800413a:	0214      	lsls	r4, r2, #8
 800413c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800413e:	685b      	ldr	r3, [r3, #4]
 8004140:	085b      	lsrs	r3, r3, #1
 8004142:	60bb      	str	r3, [r7, #8]
 8004144:	2300      	movs	r3, #0
 8004146:	60fb      	str	r3, [r7, #12]
 8004148:	68b8      	ldr	r0, [r7, #8]
 800414a:	68f9      	ldr	r1, [r7, #12]
 800414c:	1900      	adds	r0, r0, r4
 800414e:	4169      	adcs	r1, r5
 8004150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004152:	685b      	ldr	r3, [r3, #4]
 8004154:	603b      	str	r3, [r7, #0]
 8004156:	2300      	movs	r3, #0
 8004158:	607b      	str	r3, [r7, #4]
 800415a:	683a      	ldr	r2, [r7, #0]
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	f7fc f959 	bl	8000414 <__aeabi_uldivmod>
 8004162:	0002      	movs	r2, r0
 8004164:	000b      	movs	r3, r1
 8004166:	0013      	movs	r3, r2
 8004168:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800416a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800416c:	23c0      	movs	r3, #192	; 0xc0
 800416e:	009b      	lsls	r3, r3, #2
 8004170:	429a      	cmp	r2, r3
 8004172:	d309      	bcc.n	8004188 <UART_SetConfig+0x398>
 8004174:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004176:	2380      	movs	r3, #128	; 0x80
 8004178:	035b      	lsls	r3, r3, #13
 800417a:	429a      	cmp	r2, r3
 800417c:	d204      	bcs.n	8004188 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 800417e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004184:	60da      	str	r2, [r3, #12]
 8004186:	e0d6      	b.n	8004336 <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 8004188:	231a      	movs	r3, #26
 800418a:	2220      	movs	r2, #32
 800418c:	189b      	adds	r3, r3, r2
 800418e:	19db      	adds	r3, r3, r7
 8004190:	2201      	movs	r2, #1
 8004192:	701a      	strb	r2, [r3, #0]
 8004194:	e0cf      	b.n	8004336 <UART_SetConfig+0x546>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004198:	69da      	ldr	r2, [r3, #28]
 800419a:	2380      	movs	r3, #128	; 0x80
 800419c:	021b      	lsls	r3, r3, #8
 800419e:	429a      	cmp	r2, r3
 80041a0:	d000      	beq.n	80041a4 <UART_SetConfig+0x3b4>
 80041a2:	e070      	b.n	8004286 <UART_SetConfig+0x496>
  {
    switch (clocksource)
 80041a4:	231b      	movs	r3, #27
 80041a6:	2220      	movs	r2, #32
 80041a8:	189b      	adds	r3, r3, r2
 80041aa:	19db      	adds	r3, r3, r7
 80041ac:	781b      	ldrb	r3, [r3, #0]
 80041ae:	2b08      	cmp	r3, #8
 80041b0:	d015      	beq.n	80041de <UART_SetConfig+0x3ee>
 80041b2:	dc18      	bgt.n	80041e6 <UART_SetConfig+0x3f6>
 80041b4:	2b04      	cmp	r3, #4
 80041b6:	d00d      	beq.n	80041d4 <UART_SetConfig+0x3e4>
 80041b8:	dc15      	bgt.n	80041e6 <UART_SetConfig+0x3f6>
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d002      	beq.n	80041c4 <UART_SetConfig+0x3d4>
 80041be:	2b02      	cmp	r3, #2
 80041c0:	d005      	beq.n	80041ce <UART_SetConfig+0x3de>
 80041c2:	e010      	b.n	80041e6 <UART_SetConfig+0x3f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80041c4:	f7fe f850 	bl	8002268 <HAL_RCC_GetPCLK1Freq>
 80041c8:	0003      	movs	r3, r0
 80041ca:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80041cc:	e014      	b.n	80041f8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80041ce:	4b66      	ldr	r3, [pc, #408]	; (8004368 <UART_SetConfig+0x578>)
 80041d0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80041d2:	e011      	b.n	80041f8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80041d4:	f7fd ffbc 	bl	8002150 <HAL_RCC_GetSysClockFreq>
 80041d8:	0003      	movs	r3, r0
 80041da:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80041dc:	e00c      	b.n	80041f8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80041de:	2380      	movs	r3, #128	; 0x80
 80041e0:	021b      	lsls	r3, r3, #8
 80041e2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80041e4:	e008      	b.n	80041f8 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 80041e6:	2300      	movs	r3, #0
 80041e8:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80041ea:	231a      	movs	r3, #26
 80041ec:	2220      	movs	r2, #32
 80041ee:	189b      	adds	r3, r3, r2
 80041f0:	19db      	adds	r3, r3, r7
 80041f2:	2201      	movs	r2, #1
 80041f4:	701a      	strb	r2, [r3, #0]
        break;
 80041f6:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80041f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d100      	bne.n	8004200 <UART_SetConfig+0x410>
 80041fe:	e09a      	b.n	8004336 <UART_SetConfig+0x546>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004202:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004204:	4b57      	ldr	r3, [pc, #348]	; (8004364 <UART_SetConfig+0x574>)
 8004206:	0052      	lsls	r2, r2, #1
 8004208:	5ad3      	ldrh	r3, [r2, r3]
 800420a:	0019      	movs	r1, r3
 800420c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800420e:	f7fb ff8b 	bl	8000128 <__udivsi3>
 8004212:	0003      	movs	r3, r0
 8004214:	005a      	lsls	r2, r3, #1
 8004216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004218:	685b      	ldr	r3, [r3, #4]
 800421a:	085b      	lsrs	r3, r3, #1
 800421c:	18d2      	adds	r2, r2, r3
 800421e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004220:	685b      	ldr	r3, [r3, #4]
 8004222:	0019      	movs	r1, r3
 8004224:	0010      	movs	r0, r2
 8004226:	f7fb ff7f 	bl	8000128 <__udivsi3>
 800422a:	0003      	movs	r3, r0
 800422c:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800422e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004230:	2b0f      	cmp	r3, #15
 8004232:	d921      	bls.n	8004278 <UART_SetConfig+0x488>
 8004234:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004236:	2380      	movs	r3, #128	; 0x80
 8004238:	025b      	lsls	r3, r3, #9
 800423a:	429a      	cmp	r2, r3
 800423c:	d21c      	bcs.n	8004278 <UART_SetConfig+0x488>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800423e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004240:	b29a      	uxth	r2, r3
 8004242:	200e      	movs	r0, #14
 8004244:	2420      	movs	r4, #32
 8004246:	1903      	adds	r3, r0, r4
 8004248:	19db      	adds	r3, r3, r7
 800424a:	210f      	movs	r1, #15
 800424c:	438a      	bics	r2, r1
 800424e:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004250:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004252:	085b      	lsrs	r3, r3, #1
 8004254:	b29b      	uxth	r3, r3
 8004256:	2207      	movs	r2, #7
 8004258:	4013      	ands	r3, r2
 800425a:	b299      	uxth	r1, r3
 800425c:	1903      	adds	r3, r0, r4
 800425e:	19db      	adds	r3, r3, r7
 8004260:	1902      	adds	r2, r0, r4
 8004262:	19d2      	adds	r2, r2, r7
 8004264:	8812      	ldrh	r2, [r2, #0]
 8004266:	430a      	orrs	r2, r1
 8004268:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800426a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	1902      	adds	r2, r0, r4
 8004270:	19d2      	adds	r2, r2, r7
 8004272:	8812      	ldrh	r2, [r2, #0]
 8004274:	60da      	str	r2, [r3, #12]
 8004276:	e05e      	b.n	8004336 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8004278:	231a      	movs	r3, #26
 800427a:	2220      	movs	r2, #32
 800427c:	189b      	adds	r3, r3, r2
 800427e:	19db      	adds	r3, r3, r7
 8004280:	2201      	movs	r2, #1
 8004282:	701a      	strb	r2, [r3, #0]
 8004284:	e057      	b.n	8004336 <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004286:	231b      	movs	r3, #27
 8004288:	2220      	movs	r2, #32
 800428a:	189b      	adds	r3, r3, r2
 800428c:	19db      	adds	r3, r3, r7
 800428e:	781b      	ldrb	r3, [r3, #0]
 8004290:	2b08      	cmp	r3, #8
 8004292:	d015      	beq.n	80042c0 <UART_SetConfig+0x4d0>
 8004294:	dc18      	bgt.n	80042c8 <UART_SetConfig+0x4d8>
 8004296:	2b04      	cmp	r3, #4
 8004298:	d00d      	beq.n	80042b6 <UART_SetConfig+0x4c6>
 800429a:	dc15      	bgt.n	80042c8 <UART_SetConfig+0x4d8>
 800429c:	2b00      	cmp	r3, #0
 800429e:	d002      	beq.n	80042a6 <UART_SetConfig+0x4b6>
 80042a0:	2b02      	cmp	r3, #2
 80042a2:	d005      	beq.n	80042b0 <UART_SetConfig+0x4c0>
 80042a4:	e010      	b.n	80042c8 <UART_SetConfig+0x4d8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80042a6:	f7fd ffdf 	bl	8002268 <HAL_RCC_GetPCLK1Freq>
 80042aa:	0003      	movs	r3, r0
 80042ac:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80042ae:	e014      	b.n	80042da <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80042b0:	4b2d      	ldr	r3, [pc, #180]	; (8004368 <UART_SetConfig+0x578>)
 80042b2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80042b4:	e011      	b.n	80042da <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80042b6:	f7fd ff4b 	bl	8002150 <HAL_RCC_GetSysClockFreq>
 80042ba:	0003      	movs	r3, r0
 80042bc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80042be:	e00c      	b.n	80042da <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80042c0:	2380      	movs	r3, #128	; 0x80
 80042c2:	021b      	lsls	r3, r3, #8
 80042c4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80042c6:	e008      	b.n	80042da <UART_SetConfig+0x4ea>
      default:
        pclk = 0U;
 80042c8:	2300      	movs	r3, #0
 80042ca:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80042cc:	231a      	movs	r3, #26
 80042ce:	2220      	movs	r2, #32
 80042d0:	189b      	adds	r3, r3, r2
 80042d2:	19db      	adds	r3, r3, r7
 80042d4:	2201      	movs	r2, #1
 80042d6:	701a      	strb	r2, [r3, #0]
        break;
 80042d8:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80042da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d02a      	beq.n	8004336 <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80042e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042e2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80042e4:	4b1f      	ldr	r3, [pc, #124]	; (8004364 <UART_SetConfig+0x574>)
 80042e6:	0052      	lsls	r2, r2, #1
 80042e8:	5ad3      	ldrh	r3, [r2, r3]
 80042ea:	0019      	movs	r1, r3
 80042ec:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80042ee:	f7fb ff1b 	bl	8000128 <__udivsi3>
 80042f2:	0003      	movs	r3, r0
 80042f4:	001a      	movs	r2, r3
 80042f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042f8:	685b      	ldr	r3, [r3, #4]
 80042fa:	085b      	lsrs	r3, r3, #1
 80042fc:	18d2      	adds	r2, r2, r3
 80042fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004300:	685b      	ldr	r3, [r3, #4]
 8004302:	0019      	movs	r1, r3
 8004304:	0010      	movs	r0, r2
 8004306:	f7fb ff0f 	bl	8000128 <__udivsi3>
 800430a:	0003      	movs	r3, r0
 800430c:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800430e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004310:	2b0f      	cmp	r3, #15
 8004312:	d90a      	bls.n	800432a <UART_SetConfig+0x53a>
 8004314:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004316:	2380      	movs	r3, #128	; 0x80
 8004318:	025b      	lsls	r3, r3, #9
 800431a:	429a      	cmp	r2, r3
 800431c:	d205      	bcs.n	800432a <UART_SetConfig+0x53a>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800431e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004320:	b29a      	uxth	r2, r3
 8004322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	60da      	str	r2, [r3, #12]
 8004328:	e005      	b.n	8004336 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 800432a:	231a      	movs	r3, #26
 800432c:	2220      	movs	r2, #32
 800432e:	189b      	adds	r3, r3, r2
 8004330:	19db      	adds	r3, r3, r7
 8004332:	2201      	movs	r2, #1
 8004334:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004338:	226a      	movs	r2, #106	; 0x6a
 800433a:	2101      	movs	r1, #1
 800433c:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 800433e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004340:	2268      	movs	r2, #104	; 0x68
 8004342:	2101      	movs	r1, #1
 8004344:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004348:	2200      	movs	r2, #0
 800434a:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800434c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800434e:	2200      	movs	r2, #0
 8004350:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8004352:	231a      	movs	r3, #26
 8004354:	2220      	movs	r2, #32
 8004356:	189b      	adds	r3, r3, r2
 8004358:	19db      	adds	r3, r3, r7
 800435a:	781b      	ldrb	r3, [r3, #0]
}
 800435c:	0018      	movs	r0, r3
 800435e:	46bd      	mov	sp, r7
 8004360:	b010      	add	sp, #64	; 0x40
 8004362:	bdb0      	pop	{r4, r5, r7, pc}
 8004364:	080068e8 	.word	0x080068e8
 8004368:	00f42400 	.word	0x00f42400

0800436c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800436c:	b580      	push	{r7, lr}
 800436e:	b082      	sub	sp, #8
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004378:	2201      	movs	r2, #1
 800437a:	4013      	ands	r3, r2
 800437c:	d00b      	beq.n	8004396 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	685b      	ldr	r3, [r3, #4]
 8004384:	4a4a      	ldr	r2, [pc, #296]	; (80044b0 <UART_AdvFeatureConfig+0x144>)
 8004386:	4013      	ands	r3, r2
 8004388:	0019      	movs	r1, r3
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	430a      	orrs	r2, r1
 8004394:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800439a:	2202      	movs	r2, #2
 800439c:	4013      	ands	r3, r2
 800439e:	d00b      	beq.n	80043b8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	685b      	ldr	r3, [r3, #4]
 80043a6:	4a43      	ldr	r2, [pc, #268]	; (80044b4 <UART_AdvFeatureConfig+0x148>)
 80043a8:	4013      	ands	r3, r2
 80043aa:	0019      	movs	r1, r3
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	430a      	orrs	r2, r1
 80043b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043bc:	2204      	movs	r2, #4
 80043be:	4013      	ands	r3, r2
 80043c0:	d00b      	beq.n	80043da <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	685b      	ldr	r3, [r3, #4]
 80043c8:	4a3b      	ldr	r2, [pc, #236]	; (80044b8 <UART_AdvFeatureConfig+0x14c>)
 80043ca:	4013      	ands	r3, r2
 80043cc:	0019      	movs	r1, r3
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	430a      	orrs	r2, r1
 80043d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043de:	2208      	movs	r2, #8
 80043e0:	4013      	ands	r3, r2
 80043e2:	d00b      	beq.n	80043fc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	685b      	ldr	r3, [r3, #4]
 80043ea:	4a34      	ldr	r2, [pc, #208]	; (80044bc <UART_AdvFeatureConfig+0x150>)
 80043ec:	4013      	ands	r3, r2
 80043ee:	0019      	movs	r1, r3
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	430a      	orrs	r2, r1
 80043fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004400:	2210      	movs	r2, #16
 8004402:	4013      	ands	r3, r2
 8004404:	d00b      	beq.n	800441e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	689b      	ldr	r3, [r3, #8]
 800440c:	4a2c      	ldr	r2, [pc, #176]	; (80044c0 <UART_AdvFeatureConfig+0x154>)
 800440e:	4013      	ands	r3, r2
 8004410:	0019      	movs	r1, r3
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	430a      	orrs	r2, r1
 800441c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004422:	2220      	movs	r2, #32
 8004424:	4013      	ands	r3, r2
 8004426:	d00b      	beq.n	8004440 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	689b      	ldr	r3, [r3, #8]
 800442e:	4a25      	ldr	r2, [pc, #148]	; (80044c4 <UART_AdvFeatureConfig+0x158>)
 8004430:	4013      	ands	r3, r2
 8004432:	0019      	movs	r1, r3
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	430a      	orrs	r2, r1
 800443e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004444:	2240      	movs	r2, #64	; 0x40
 8004446:	4013      	ands	r3, r2
 8004448:	d01d      	beq.n	8004486 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	685b      	ldr	r3, [r3, #4]
 8004450:	4a1d      	ldr	r2, [pc, #116]	; (80044c8 <UART_AdvFeatureConfig+0x15c>)
 8004452:	4013      	ands	r3, r2
 8004454:	0019      	movs	r1, r3
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	430a      	orrs	r2, r1
 8004460:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004466:	2380      	movs	r3, #128	; 0x80
 8004468:	035b      	lsls	r3, r3, #13
 800446a:	429a      	cmp	r2, r3
 800446c:	d10b      	bne.n	8004486 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	685b      	ldr	r3, [r3, #4]
 8004474:	4a15      	ldr	r2, [pc, #84]	; (80044cc <UART_AdvFeatureConfig+0x160>)
 8004476:	4013      	ands	r3, r2
 8004478:	0019      	movs	r1, r3
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	430a      	orrs	r2, r1
 8004484:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800448a:	2280      	movs	r2, #128	; 0x80
 800448c:	4013      	ands	r3, r2
 800448e:	d00b      	beq.n	80044a8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	685b      	ldr	r3, [r3, #4]
 8004496:	4a0e      	ldr	r2, [pc, #56]	; (80044d0 <UART_AdvFeatureConfig+0x164>)
 8004498:	4013      	ands	r3, r2
 800449a:	0019      	movs	r1, r3
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	430a      	orrs	r2, r1
 80044a6:	605a      	str	r2, [r3, #4]
  }
}
 80044a8:	46c0      	nop			; (mov r8, r8)
 80044aa:	46bd      	mov	sp, r7
 80044ac:	b002      	add	sp, #8
 80044ae:	bd80      	pop	{r7, pc}
 80044b0:	fffdffff 	.word	0xfffdffff
 80044b4:	fffeffff 	.word	0xfffeffff
 80044b8:	fffbffff 	.word	0xfffbffff
 80044bc:	ffff7fff 	.word	0xffff7fff
 80044c0:	ffffefff 	.word	0xffffefff
 80044c4:	ffffdfff 	.word	0xffffdfff
 80044c8:	ffefffff 	.word	0xffefffff
 80044cc:	ff9fffff 	.word	0xff9fffff
 80044d0:	fff7ffff 	.word	0xfff7ffff

080044d4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b086      	sub	sp, #24
 80044d8:	af02      	add	r7, sp, #8
 80044da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	228c      	movs	r2, #140	; 0x8c
 80044e0:	2100      	movs	r1, #0
 80044e2:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80044e4:	f7fc fe9c 	bl	8001220 <HAL_GetTick>
 80044e8:	0003      	movs	r3, r0
 80044ea:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	2208      	movs	r2, #8
 80044f4:	4013      	ands	r3, r2
 80044f6:	2b08      	cmp	r3, #8
 80044f8:	d10c      	bne.n	8004514 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	2280      	movs	r2, #128	; 0x80
 80044fe:	0391      	lsls	r1, r2, #14
 8004500:	6878      	ldr	r0, [r7, #4]
 8004502:	4a18      	ldr	r2, [pc, #96]	; (8004564 <UART_CheckIdleState+0x90>)
 8004504:	9200      	str	r2, [sp, #0]
 8004506:	2200      	movs	r2, #0
 8004508:	f000 f82e 	bl	8004568 <UART_WaitOnFlagUntilTimeout>
 800450c:	1e03      	subs	r3, r0, #0
 800450e:	d001      	beq.n	8004514 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004510:	2303      	movs	r3, #3
 8004512:	e023      	b.n	800455c <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	2204      	movs	r2, #4
 800451c:	4013      	ands	r3, r2
 800451e:	2b04      	cmp	r3, #4
 8004520:	d10c      	bne.n	800453c <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	2280      	movs	r2, #128	; 0x80
 8004526:	03d1      	lsls	r1, r2, #15
 8004528:	6878      	ldr	r0, [r7, #4]
 800452a:	4a0e      	ldr	r2, [pc, #56]	; (8004564 <UART_CheckIdleState+0x90>)
 800452c:	9200      	str	r2, [sp, #0]
 800452e:	2200      	movs	r2, #0
 8004530:	f000 f81a 	bl	8004568 <UART_WaitOnFlagUntilTimeout>
 8004534:	1e03      	subs	r3, r0, #0
 8004536:	d001      	beq.n	800453c <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004538:	2303      	movs	r3, #3
 800453a:	e00f      	b.n	800455c <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2284      	movs	r2, #132	; 0x84
 8004540:	2120      	movs	r1, #32
 8004542:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2288      	movs	r2, #136	; 0x88
 8004548:	2120      	movs	r1, #32
 800454a:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2200      	movs	r2, #0
 8004550:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2280      	movs	r2, #128	; 0x80
 8004556:	2100      	movs	r1, #0
 8004558:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800455a:	2300      	movs	r3, #0
}
 800455c:	0018      	movs	r0, r3
 800455e:	46bd      	mov	sp, r7
 8004560:	b004      	add	sp, #16
 8004562:	bd80      	pop	{r7, pc}
 8004564:	01ffffff 	.word	0x01ffffff

08004568 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004568:	b580      	push	{r7, lr}
 800456a:	b094      	sub	sp, #80	; 0x50
 800456c:	af00      	add	r7, sp, #0
 800456e:	60f8      	str	r0, [r7, #12]
 8004570:	60b9      	str	r1, [r7, #8]
 8004572:	603b      	str	r3, [r7, #0]
 8004574:	1dfb      	adds	r3, r7, #7
 8004576:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004578:	e0a7      	b.n	80046ca <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800457a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800457c:	3301      	adds	r3, #1
 800457e:	d100      	bne.n	8004582 <UART_WaitOnFlagUntilTimeout+0x1a>
 8004580:	e0a3      	b.n	80046ca <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004582:	f7fc fe4d 	bl	8001220 <HAL_GetTick>
 8004586:	0002      	movs	r2, r0
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	1ad3      	subs	r3, r2, r3
 800458c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800458e:	429a      	cmp	r2, r3
 8004590:	d302      	bcc.n	8004598 <UART_WaitOnFlagUntilTimeout+0x30>
 8004592:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004594:	2b00      	cmp	r3, #0
 8004596:	d13f      	bne.n	8004618 <UART_WaitOnFlagUntilTimeout+0xb0>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004598:	f3ef 8310 	mrs	r3, PRIMASK
 800459c:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800459e:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80045a0:	647b      	str	r3, [r7, #68]	; 0x44
 80045a2:	2301      	movs	r3, #1
 80045a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045a8:	f383 8810 	msr	PRIMASK, r3
}
 80045ac:	46c0      	nop			; (mov r8, r8)
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	681a      	ldr	r2, [r3, #0]
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	494e      	ldr	r1, [pc, #312]	; (80046f4 <UART_WaitOnFlagUntilTimeout+0x18c>)
 80045ba:	400a      	ands	r2, r1
 80045bc:	601a      	str	r2, [r3, #0]
 80045be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80045c0:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045c4:	f383 8810 	msr	PRIMASK, r3
}
 80045c8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80045ca:	f3ef 8310 	mrs	r3, PRIMASK
 80045ce:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80045d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045d2:	643b      	str	r3, [r7, #64]	; 0x40
 80045d4:	2301      	movs	r3, #1
 80045d6:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045da:	f383 8810 	msr	PRIMASK, r3
}
 80045de:	46c0      	nop			; (mov r8, r8)
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	689a      	ldr	r2, [r3, #8]
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	2101      	movs	r1, #1
 80045ec:	438a      	bics	r2, r1
 80045ee:	609a      	str	r2, [r3, #8]
 80045f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80045f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80045f6:	f383 8810 	msr	PRIMASK, r3
}
 80045fa:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	2284      	movs	r2, #132	; 0x84
 8004600:	2120      	movs	r1, #32
 8004602:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	2288      	movs	r2, #136	; 0x88
 8004608:	2120      	movs	r1, #32
 800460a:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	2280      	movs	r2, #128	; 0x80
 8004610:	2100      	movs	r1, #0
 8004612:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004614:	2303      	movs	r3, #3
 8004616:	e069      	b.n	80046ec <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	2204      	movs	r2, #4
 8004620:	4013      	ands	r3, r2
 8004622:	d052      	beq.n	80046ca <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	69da      	ldr	r2, [r3, #28]
 800462a:	2380      	movs	r3, #128	; 0x80
 800462c:	011b      	lsls	r3, r3, #4
 800462e:	401a      	ands	r2, r3
 8004630:	2380      	movs	r3, #128	; 0x80
 8004632:	011b      	lsls	r3, r3, #4
 8004634:	429a      	cmp	r2, r3
 8004636:	d148      	bne.n	80046ca <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	2280      	movs	r2, #128	; 0x80
 800463e:	0112      	lsls	r2, r2, #4
 8004640:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004642:	f3ef 8310 	mrs	r3, PRIMASK
 8004646:	613b      	str	r3, [r7, #16]
  return(result);
 8004648:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800464a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800464c:	2301      	movs	r3, #1
 800464e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004650:	697b      	ldr	r3, [r7, #20]
 8004652:	f383 8810 	msr	PRIMASK, r3
}
 8004656:	46c0      	nop			; (mov r8, r8)
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	681a      	ldr	r2, [r3, #0]
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	4924      	ldr	r1, [pc, #144]	; (80046f4 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8004664:	400a      	ands	r2, r1
 8004666:	601a      	str	r2, [r3, #0]
 8004668:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800466a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800466c:	69bb      	ldr	r3, [r7, #24]
 800466e:	f383 8810 	msr	PRIMASK, r3
}
 8004672:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004674:	f3ef 8310 	mrs	r3, PRIMASK
 8004678:	61fb      	str	r3, [r7, #28]
  return(result);
 800467a:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800467c:	64bb      	str	r3, [r7, #72]	; 0x48
 800467e:	2301      	movs	r3, #1
 8004680:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004682:	6a3b      	ldr	r3, [r7, #32]
 8004684:	f383 8810 	msr	PRIMASK, r3
}
 8004688:	46c0      	nop			; (mov r8, r8)
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	689a      	ldr	r2, [r3, #8]
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	2101      	movs	r1, #1
 8004696:	438a      	bics	r2, r1
 8004698:	609a      	str	r2, [r3, #8]
 800469a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800469c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800469e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046a0:	f383 8810 	msr	PRIMASK, r3
}
 80046a4:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	2284      	movs	r2, #132	; 0x84
 80046aa:	2120      	movs	r1, #32
 80046ac:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	2288      	movs	r2, #136	; 0x88
 80046b2:	2120      	movs	r1, #32
 80046b4:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	228c      	movs	r2, #140	; 0x8c
 80046ba:	2120      	movs	r1, #32
 80046bc:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	2280      	movs	r2, #128	; 0x80
 80046c2:	2100      	movs	r1, #0
 80046c4:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80046c6:	2303      	movs	r3, #3
 80046c8:	e010      	b.n	80046ec <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	69db      	ldr	r3, [r3, #28]
 80046d0:	68ba      	ldr	r2, [r7, #8]
 80046d2:	4013      	ands	r3, r2
 80046d4:	68ba      	ldr	r2, [r7, #8]
 80046d6:	1ad3      	subs	r3, r2, r3
 80046d8:	425a      	negs	r2, r3
 80046da:	4153      	adcs	r3, r2
 80046dc:	b2db      	uxtb	r3, r3
 80046de:	001a      	movs	r2, r3
 80046e0:	1dfb      	adds	r3, r7, #7
 80046e2:	781b      	ldrb	r3, [r3, #0]
 80046e4:	429a      	cmp	r2, r3
 80046e6:	d100      	bne.n	80046ea <UART_WaitOnFlagUntilTimeout+0x182>
 80046e8:	e747      	b.n	800457a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80046ea:	2300      	movs	r3, #0
}
 80046ec:	0018      	movs	r0, r3
 80046ee:	46bd      	mov	sp, r7
 80046f0:	b014      	add	sp, #80	; 0x50
 80046f2:	bd80      	pop	{r7, pc}
 80046f4:	fffffe5f 	.word	0xfffffe5f

080046f8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b084      	sub	sp, #16
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2280      	movs	r2, #128	; 0x80
 8004704:	5c9b      	ldrb	r3, [r3, r2]
 8004706:	2b01      	cmp	r3, #1
 8004708:	d101      	bne.n	800470e <HAL_UARTEx_DisableFifoMode+0x16>
 800470a:	2302      	movs	r3, #2
 800470c:	e027      	b.n	800475e <HAL_UARTEx_DisableFifoMode+0x66>
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2280      	movs	r2, #128	; 0x80
 8004712:	2101      	movs	r1, #1
 8004714:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2284      	movs	r2, #132	; 0x84
 800471a:	2124      	movs	r1, #36	; 0x24
 800471c:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	681a      	ldr	r2, [r3, #0]
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	2101      	movs	r1, #1
 8004732:	438a      	bics	r2, r1
 8004734:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	4a0b      	ldr	r2, [pc, #44]	; (8004768 <HAL_UARTEx_DisableFifoMode+0x70>)
 800473a:	4013      	ands	r3, r2
 800473c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	2200      	movs	r2, #0
 8004742:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	68fa      	ldr	r2, [r7, #12]
 800474a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2284      	movs	r2, #132	; 0x84
 8004750:	2120      	movs	r1, #32
 8004752:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2280      	movs	r2, #128	; 0x80
 8004758:	2100      	movs	r1, #0
 800475a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800475c:	2300      	movs	r3, #0
}
 800475e:	0018      	movs	r0, r3
 8004760:	46bd      	mov	sp, r7
 8004762:	b004      	add	sp, #16
 8004764:	bd80      	pop	{r7, pc}
 8004766:	46c0      	nop			; (mov r8, r8)
 8004768:	dfffffff 	.word	0xdfffffff

0800476c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800476c:	b580      	push	{r7, lr}
 800476e:	b084      	sub	sp, #16
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
 8004774:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	2280      	movs	r2, #128	; 0x80
 800477a:	5c9b      	ldrb	r3, [r3, r2]
 800477c:	2b01      	cmp	r3, #1
 800477e:	d101      	bne.n	8004784 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004780:	2302      	movs	r3, #2
 8004782:	e02e      	b.n	80047e2 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2280      	movs	r2, #128	; 0x80
 8004788:	2101      	movs	r1, #1
 800478a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2284      	movs	r2, #132	; 0x84
 8004790:	2124      	movs	r1, #36	; 0x24
 8004792:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	681a      	ldr	r2, [r3, #0]
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	2101      	movs	r1, #1
 80047a8:	438a      	bics	r2, r1
 80047aa:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	689b      	ldr	r3, [r3, #8]
 80047b2:	00db      	lsls	r3, r3, #3
 80047b4:	08d9      	lsrs	r1, r3, #3
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	683a      	ldr	r2, [r7, #0]
 80047bc:	430a      	orrs	r2, r1
 80047be:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	0018      	movs	r0, r3
 80047c4:	f000 f854 	bl	8004870 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	68fa      	ldr	r2, [r7, #12]
 80047ce:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2284      	movs	r2, #132	; 0x84
 80047d4:	2120      	movs	r1, #32
 80047d6:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2280      	movs	r2, #128	; 0x80
 80047dc:	2100      	movs	r1, #0
 80047de:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80047e0:	2300      	movs	r3, #0
}
 80047e2:	0018      	movs	r0, r3
 80047e4:	46bd      	mov	sp, r7
 80047e6:	b004      	add	sp, #16
 80047e8:	bd80      	pop	{r7, pc}
	...

080047ec <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b084      	sub	sp, #16
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
 80047f4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2280      	movs	r2, #128	; 0x80
 80047fa:	5c9b      	ldrb	r3, [r3, r2]
 80047fc:	2b01      	cmp	r3, #1
 80047fe:	d101      	bne.n	8004804 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004800:	2302      	movs	r3, #2
 8004802:	e02f      	b.n	8004864 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2280      	movs	r2, #128	; 0x80
 8004808:	2101      	movs	r1, #1
 800480a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2284      	movs	r2, #132	; 0x84
 8004810:	2124      	movs	r1, #36	; 0x24
 8004812:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	681a      	ldr	r2, [r3, #0]
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	2101      	movs	r1, #1
 8004828:	438a      	bics	r2, r1
 800482a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	689b      	ldr	r3, [r3, #8]
 8004832:	4a0e      	ldr	r2, [pc, #56]	; (800486c <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8004834:	4013      	ands	r3, r2
 8004836:	0019      	movs	r1, r3
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	683a      	ldr	r2, [r7, #0]
 800483e:	430a      	orrs	r2, r1
 8004840:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	0018      	movs	r0, r3
 8004846:	f000 f813 	bl	8004870 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	68fa      	ldr	r2, [r7, #12]
 8004850:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2284      	movs	r2, #132	; 0x84
 8004856:	2120      	movs	r1, #32
 8004858:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	2280      	movs	r2, #128	; 0x80
 800485e:	2100      	movs	r1, #0
 8004860:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004862:	2300      	movs	r3, #0
}
 8004864:	0018      	movs	r0, r3
 8004866:	46bd      	mov	sp, r7
 8004868:	b004      	add	sp, #16
 800486a:	bd80      	pop	{r7, pc}
 800486c:	f1ffffff 	.word	0xf1ffffff

08004870 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004870:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004872:	b085      	sub	sp, #20
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800487c:	2b00      	cmp	r3, #0
 800487e:	d108      	bne.n	8004892 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	226a      	movs	r2, #106	; 0x6a
 8004884:	2101      	movs	r1, #1
 8004886:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2268      	movs	r2, #104	; 0x68
 800488c:	2101      	movs	r1, #1
 800488e:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004890:	e043      	b.n	800491a <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004892:	260f      	movs	r6, #15
 8004894:	19bb      	adds	r3, r7, r6
 8004896:	2208      	movs	r2, #8
 8004898:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800489a:	200e      	movs	r0, #14
 800489c:	183b      	adds	r3, r7, r0
 800489e:	2208      	movs	r2, #8
 80048a0:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	689b      	ldr	r3, [r3, #8]
 80048a8:	0e5b      	lsrs	r3, r3, #25
 80048aa:	b2da      	uxtb	r2, r3
 80048ac:	240d      	movs	r4, #13
 80048ae:	193b      	adds	r3, r7, r4
 80048b0:	2107      	movs	r1, #7
 80048b2:	400a      	ands	r2, r1
 80048b4:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	689b      	ldr	r3, [r3, #8]
 80048bc:	0f5b      	lsrs	r3, r3, #29
 80048be:	b2da      	uxtb	r2, r3
 80048c0:	250c      	movs	r5, #12
 80048c2:	197b      	adds	r3, r7, r5
 80048c4:	2107      	movs	r1, #7
 80048c6:	400a      	ands	r2, r1
 80048c8:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80048ca:	183b      	adds	r3, r7, r0
 80048cc:	781b      	ldrb	r3, [r3, #0]
 80048ce:	197a      	adds	r2, r7, r5
 80048d0:	7812      	ldrb	r2, [r2, #0]
 80048d2:	4914      	ldr	r1, [pc, #80]	; (8004924 <UARTEx_SetNbDataToProcess+0xb4>)
 80048d4:	5c8a      	ldrb	r2, [r1, r2]
 80048d6:	435a      	muls	r2, r3
 80048d8:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 80048da:	197b      	adds	r3, r7, r5
 80048dc:	781b      	ldrb	r3, [r3, #0]
 80048de:	4a12      	ldr	r2, [pc, #72]	; (8004928 <UARTEx_SetNbDataToProcess+0xb8>)
 80048e0:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80048e2:	0019      	movs	r1, r3
 80048e4:	f7fb fcaa 	bl	800023c <__divsi3>
 80048e8:	0003      	movs	r3, r0
 80048ea:	b299      	uxth	r1, r3
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	226a      	movs	r2, #106	; 0x6a
 80048f0:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80048f2:	19bb      	adds	r3, r7, r6
 80048f4:	781b      	ldrb	r3, [r3, #0]
 80048f6:	193a      	adds	r2, r7, r4
 80048f8:	7812      	ldrb	r2, [r2, #0]
 80048fa:	490a      	ldr	r1, [pc, #40]	; (8004924 <UARTEx_SetNbDataToProcess+0xb4>)
 80048fc:	5c8a      	ldrb	r2, [r1, r2]
 80048fe:	435a      	muls	r2, r3
 8004900:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8004902:	193b      	adds	r3, r7, r4
 8004904:	781b      	ldrb	r3, [r3, #0]
 8004906:	4a08      	ldr	r2, [pc, #32]	; (8004928 <UARTEx_SetNbDataToProcess+0xb8>)
 8004908:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800490a:	0019      	movs	r1, r3
 800490c:	f7fb fc96 	bl	800023c <__divsi3>
 8004910:	0003      	movs	r3, r0
 8004912:	b299      	uxth	r1, r3
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2268      	movs	r2, #104	; 0x68
 8004918:	5299      	strh	r1, [r3, r2]
}
 800491a:	46c0      	nop			; (mov r8, r8)
 800491c:	46bd      	mov	sp, r7
 800491e:	b005      	add	sp, #20
 8004920:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004922:	46c0      	nop			; (mov r8, r8)
 8004924:	08006900 	.word	0x08006900
 8004928:	08006908 	.word	0x08006908

0800492c <NRF905_read_config_register>:
NRF905_PAYLOAD_SIZE, // RX payload size
		NRF905_PAYLOAD_SIZE, // TX payload size
		0xE7, 0xE7, 0xE7, 0xE7, // Default receive address
		NRF905_CRC | NRF905_CLK_FREQ | NRF905_OUTCLK };

uint8_t NRF905_read_config_register(NRF905_t *dev, uint8_t reg) {
 800492c:	b590      	push	{r4, r7, lr}
 800492e:	b085      	sub	sp, #20
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
 8004934:	000a      	movs	r2, r1
 8004936:	1cfb      	adds	r3, r7, #3
 8004938:	701a      	strb	r2, [r3, #0]
	if (dev == NULL) {
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	2b00      	cmp	r3, #0
 800493e:	d101      	bne.n	8004944 <NRF905_read_config_register+0x18>
		return -1;
 8004940:	23ff      	movs	r3, #255	; 0xff
 8004942:	e025      	b.n	8004990 <NRF905_read_config_register+0x64>
	}
	uint8_t val = 0;
 8004944:	240f      	movs	r4, #15
 8004946:	193b      	adds	r3, r7, r4
 8004948:	2200      	movs	r2, #0
 800494a:	701a      	strb	r2, [r3, #0]
	NRF905_HW_SPI_SELECT(dev->hw);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	2200      	movs	r2, #0
 8004952:	2106      	movs	r1, #6
 8004954:	0018      	movs	r0, r3
 8004956:	f000 fa62 	bl	8004e1e <NRF905_hw_gpio_set>
	NRF905_hw_spi_transfer(dev->hw, NRF905_CMD_R_CONFIG | reg, NULL);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6818      	ldr	r0, [r3, #0]
 800495e:	1cfb      	adds	r3, r7, #3
 8004960:	781b      	ldrb	r3, [r3, #0]
 8004962:	2210      	movs	r2, #16
 8004964:	4313      	orrs	r3, r2
 8004966:	b2db      	uxtb	r3, r3
 8004968:	2200      	movs	r2, #0
 800496a:	0019      	movs	r1, r3
 800496c:	f000 fb04 	bl	8004f78 <NRF905_hw_spi_transfer>
	NRF905_hw_spi_transfer(dev->hw, NRF905_CMD_NOP, &val);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	193a      	adds	r2, r7, r4
 8004976:	21ff      	movs	r1, #255	; 0xff
 8004978:	0018      	movs	r0, r3
 800497a:	f000 fafd 	bl	8004f78 <NRF905_hw_spi_transfer>
	NRF905_HW_SPI_DESELECT(dev->hw);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	2201      	movs	r2, #1
 8004984:	2106      	movs	r1, #6
 8004986:	0018      	movs	r0, r3
 8004988:	f000 fa49 	bl	8004e1e <NRF905_hw_gpio_set>
	return val;
 800498c:	193b      	adds	r3, r7, r4
 800498e:	781b      	ldrb	r3, [r3, #0]
}
 8004990:	0018      	movs	r0, r3
 8004992:	46bd      	mov	sp, r7
 8004994:	b005      	add	sp, #20
 8004996:	bd90      	pop	{r4, r7, pc}

08004998 <NRF905_setAddress>:
					| val);

	return 0;
}

int NRF905_setAddress(NRF905_t *dev, uint32_t address, uint8_t cmd) {
 8004998:	b590      	push	{r4, r7, lr}
 800499a:	b087      	sub	sp, #28
 800499c:	af00      	add	r7, sp, #0
 800499e:	60f8      	str	r0, [r7, #12]
 80049a0:	60b9      	str	r1, [r7, #8]
 80049a2:	1dfb      	adds	r3, r7, #7
 80049a4:	701a      	strb	r2, [r3, #0]
	if (dev == NULL) {
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d102      	bne.n	80049b2 <NRF905_setAddress+0x1a>
		return -1;
 80049ac:	2301      	movs	r3, #1
 80049ae:	425b      	negs	r3, r3
 80049b0:	e033      	b.n	8004a1a <NRF905_setAddress+0x82>
	}
	uint8_t i;
	NRF905_HW_SPI_SELECT(dev->hw);
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	2200      	movs	r2, #0
 80049b8:	2106      	movs	r1, #6
 80049ba:	0018      	movs	r0, r3
 80049bc:	f000 fa2f 	bl	8004e1e <NRF905_hw_gpio_set>
	NRF905_hw_spi_transfer(dev->hw, cmd, NULL);
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	6818      	ldr	r0, [r3, #0]
 80049c4:	1dfb      	adds	r3, r7, #7
 80049c6:	781b      	ldrb	r3, [r3, #0]
 80049c8:	2200      	movs	r2, #0
 80049ca:	0019      	movs	r1, r3
 80049cc:	f000 fad4 	bl	8004f78 <NRF905_hw_spi_transfer>
	for (i = 0; i < 4; i++) {
 80049d0:	2317      	movs	r3, #23
 80049d2:	18fb      	adds	r3, r7, r3
 80049d4:	2200      	movs	r2, #0
 80049d6:	701a      	strb	r2, [r3, #0]
 80049d8:	e012      	b.n	8004a00 <NRF905_setAddress+0x68>
		NRF905_hw_spi_transfer(dev->hw, address >> (8 * i), NULL);
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	6818      	ldr	r0, [r3, #0]
 80049de:	2417      	movs	r4, #23
 80049e0:	193b      	adds	r3, r7, r4
 80049e2:	781b      	ldrb	r3, [r3, #0]
 80049e4:	00db      	lsls	r3, r3, #3
 80049e6:	68ba      	ldr	r2, [r7, #8]
 80049e8:	40da      	lsrs	r2, r3
 80049ea:	0013      	movs	r3, r2
 80049ec:	b2db      	uxtb	r3, r3
 80049ee:	2200      	movs	r2, #0
 80049f0:	0019      	movs	r1, r3
 80049f2:	f000 fac1 	bl	8004f78 <NRF905_hw_spi_transfer>
	for (i = 0; i < 4; i++) {
 80049f6:	193b      	adds	r3, r7, r4
 80049f8:	781a      	ldrb	r2, [r3, #0]
 80049fa:	193b      	adds	r3, r7, r4
 80049fc:	3201      	adds	r2, #1
 80049fe:	701a      	strb	r2, [r3, #0]
 8004a00:	2317      	movs	r3, #23
 8004a02:	18fb      	adds	r3, r7, r3
 8004a04:	781b      	ldrb	r3, [r3, #0]
 8004a06:	2b03      	cmp	r3, #3
 8004a08:	d9e7      	bls.n	80049da <NRF905_setAddress+0x42>
	}
	NRF905_HW_SPI_DESELECT(dev->hw);
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	2201      	movs	r2, #1
 8004a10:	2106      	movs	r1, #6
 8004a12:	0018      	movs	r0, r3
 8004a14:	f000 fa03 	bl	8004e1e <NRF905_hw_gpio_set>

	return 0;
 8004a18:	2300      	movs	r3, #0
}
 8004a1a:	0018      	movs	r0, r3
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	b007      	add	sp, #28
 8004a20:	bd90      	pop	{r4, r7, pc}

08004a22 <NRF905_read_status>:

uint8_t NRF905_read_status(NRF905_t *dev) {
 8004a22:	b590      	push	{r4, r7, lr}
 8004a24:	b085      	sub	sp, #20
 8004a26:	af00      	add	r7, sp, #0
 8004a28:	6078      	str	r0, [r7, #4]
	if (dev == NULL) {
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d101      	bne.n	8004a34 <NRF905_read_status+0x12>
		return -1;
 8004a30:	23ff      	movs	r3, #255	; 0xff
 8004a32:	e017      	b.n	8004a64 <NRF905_read_status+0x42>
	}
	uint8_t status;

	NRF905_HW_SPI_SELECT(dev->hw);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	2200      	movs	r2, #0
 8004a3a:	2106      	movs	r1, #6
 8004a3c:	0018      	movs	r0, r3
 8004a3e:	f000 f9ee 	bl	8004e1e <NRF905_hw_gpio_set>
	NRF905_hw_spi_transfer(dev->hw, NRF905_CMD_NOP, &status);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	240f      	movs	r4, #15
 8004a48:	193a      	adds	r2, r7, r4
 8004a4a:	21ff      	movs	r1, #255	; 0xff
 8004a4c:	0018      	movs	r0, r3
 8004a4e:	f000 fa93 	bl	8004f78 <NRF905_hw_spi_transfer>
	NRF905_HW_SPI_DESELECT(dev->hw);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	2201      	movs	r2, #1
 8004a58:	2106      	movs	r1, #6
 8004a5a:	0018      	movs	r0, r3
 8004a5c:	f000 f9df 	bl	8004e1e <NRF905_hw_gpio_set>

	return status;
 8004a60:	193b      	adds	r3, r7, r4
 8004a62:	781b      	ldrb	r3, [r3, #0]
}
 8004a64:	0018      	movs	r0, r3
 8004a66:	46bd      	mov	sp, r7
 8004a68:	b005      	add	sp, #20
 8004a6a:	bd90      	pop	{r4, r7, pc}

08004a6c <NRF905_data_ready>:

// Hardware: Data ready pin high
// Software: Data ready status bit set

int NRF905_data_ready(NRF905_t *dev) {
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	b082      	sub	sp, #8
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
	if (dev == NULL) {
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d102      	bne.n	8004a80 <NRF905_data_ready+0x14>
		return -1;
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	425b      	negs	r3, r3
 8004a7e:	e015      	b.n	8004aac <NRF905_data_ready+0x40>
	}

	//use software check for data ready
	if (dev->software_pin_configuration & NRF905_USE_SOFTWARE_DATA_READY) {
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	7c1b      	ldrb	r3, [r3, #16]
 8004a84:	001a      	movs	r2, r3
 8004a86:	2301      	movs	r3, #1
 8004a88:	4013      	ands	r3, r2
 8004a8a:	d008      	beq.n	8004a9e <NRF905_data_ready+0x32>
		return (NRF905_read_status(dev) & (1 << NRF905_STATUS_DR));
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	0018      	movs	r0, r3
 8004a90:	f7ff ffc7 	bl	8004a22 <NRF905_read_status>
 8004a94:	0003      	movs	r3, r0
 8004a96:	001a      	movs	r2, r3
 8004a98:	2320      	movs	r3, #32
 8004a9a:	4013      	ands	r3, r2
 8004a9c:	e006      	b.n	8004aac <NRF905_data_ready+0x40>
	}

	//use hardware data ready
	return NRF905_hw_gpio_get(dev->hw, NRF905_HW_GPIO_DR);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	2105      	movs	r1, #5
 8004aa4:	0018      	movs	r0, r3
 8004aa6:	f000 f985 	bl	8004db4 <NRF905_hw_gpio_get>
 8004aaa:	0003      	movs	r3, r0
}
 8004aac:	0018      	movs	r0, r3
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	b002      	add	sp, #8
 8004ab2:	bd80      	pop	{r7, pc}

08004ab4 <NRF905_address_matched>:

// Hardware: Address match pin high
// Software: Address match status bit set
int NRF905_address_matched(NRF905_t *dev) {
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b082      	sub	sp, #8
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
	if (dev == NULL) {
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d102      	bne.n	8004ac8 <NRF905_address_matched+0x14>
		return -1;
 8004ac2:	2301      	movs	r3, #1
 8004ac4:	425b      	negs	r3, r3
 8004ac6:	e015      	b.n	8004af4 <NRF905_address_matched+0x40>
	}

	//use software check for data ready
	if (dev->software_pin_configuration & NRF905_USE_SOFTWARE_ADDRESS_MATCH) {
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	7c1b      	ldrb	r3, [r3, #16]
 8004acc:	001a      	movs	r2, r3
 8004ace:	2302      	movs	r3, #2
 8004ad0:	4013      	ands	r3, r2
 8004ad2:	d008      	beq.n	8004ae6 <NRF905_address_matched+0x32>
		return (NRF905_read_status(dev) & (1 << NRF905_STATUS_AM));
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	0018      	movs	r0, r3
 8004ad8:	f7ff ffa3 	bl	8004a22 <NRF905_read_status>
 8004adc:	0003      	movs	r3, r0
 8004ade:	001a      	movs	r2, r3
 8004ae0:	2380      	movs	r3, #128	; 0x80
 8004ae2:	4013      	ands	r3, r2
 8004ae4:	e006      	b.n	8004af4 <NRF905_address_matched+0x40>
	}
	//use hardware address match
	return NRF905_hw_gpio_get(dev->hw, NRF905_HW_GPIO_AM);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	2104      	movs	r1, #4
 8004aec:	0018      	movs	r0, r3
 8004aee:	f000 f961 	bl	8004db4 <NRF905_hw_gpio_get>
 8004af2:	0003      	movs	r3, r0
}
 8004af4:	0018      	movs	r0, r3
 8004af6:	46bd      	mov	sp, r7
 8004af8:	b002      	add	sp, #8
 8004afa:	bd80      	pop	{r7, pc}

08004afc <NRF905_set_listen_address>:
	}

	return NRF905_hw_gpio_get(dev->hw, NRF905_HW_GPIO_CD);
}

int NRF905_set_listen_address(NRF905_t *dev, uint32_t address) {
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b082      	sub	sp, #8
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
 8004b04:	6039      	str	r1, [r7, #0]
	if (dev == NULL) {
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d102      	bne.n	8004b12 <NRF905_set_listen_address+0x16>
		return -1;
 8004b0c:	2301      	movs	r3, #1
 8004b0e:	425b      	negs	r3, r3
 8004b10:	e006      	b.n	8004b20 <NRF905_set_listen_address+0x24>
	}
	NRF905_setAddress(dev, address,
 8004b12:	6839      	ldr	r1, [r7, #0]
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2205      	movs	r2, #5
 8004b18:	0018      	movs	r0, r3
 8004b1a:	f7ff ff3d 	bl	8004998 <NRF905_setAddress>
	NRF905_CMD_W_CONFIG | NRF905_REG_RX_ADDRESS);
	return 0;
 8004b1e:	2300      	movs	r3, #0
}
 8004b20:	0018      	movs	r0, r3
 8004b22:	46bd      	mov	sp, r7
 8004b24:	b002      	add	sp, #8
 8004b26:	bd80      	pop	{r7, pc}

08004b28 <NRF905_rx>:
	// else NRF905_NEXTMODE_TX

	return 1;
}

int NRF905_rx(NRF905_t *dev) {
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b082      	sub	sp, #8
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
	if (dev == NULL) {
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d102      	bne.n	8004b3c <NRF905_rx+0x14>
		return -1;
 8004b36:	2301      	movs	r3, #1
 8004b38:	425b      	negs	r3, r3
 8004b3a:	e015      	b.n	8004b68 <NRF905_rx+0x40>
	}
	NRF905_HW_MODE_RX(dev->hw);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	2200      	movs	r2, #0
 8004b42:	2100      	movs	r1, #0
 8004b44:	0018      	movs	r0, r3
 8004b46:	f000 f96a 	bl	8004e1e <NRF905_hw_gpio_set>
	NRF905_HW_STANDBY_LEAVE(dev->hw);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	2201      	movs	r2, #1
 8004b50:	2101      	movs	r1, #1
 8004b52:	0018      	movs	r0, r3
 8004b54:	f000 f963 	bl	8004e1e <NRF905_hw_gpio_set>
	NRF905_HW_POWER_UP(dev->hw);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	2201      	movs	r2, #1
 8004b5e:	2102      	movs	r1, #2
 8004b60:	0018      	movs	r0, r3
 8004b62:	f000 f95c 	bl	8004e1e <NRF905_hw_gpio_set>
	return 0;
 8004b66:	2300      	movs	r3, #0
}
 8004b68:	0018      	movs	r0, r3
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	b002      	add	sp, #8
 8004b6e:	bd80      	pop	{r7, pc}

08004b70 <NRF905_read_it>:
	NRF905_HW_SPI_DESELECT(dev->hw);

	return 0;
}

int NRF905_read_it(NRF905_t *dev, void *data, uint8_t len) {
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b084      	sub	sp, #16
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	60f8      	str	r0, [r7, #12]
 8004b78:	60b9      	str	r1, [r7, #8]
 8004b7a:	1dfb      	adds	r3, r7, #7
 8004b7c:	701a      	strb	r2, [r3, #0]
	if (dev == NULL) {
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d102      	bne.n	8004b8a <NRF905_read_it+0x1a>
		return -1;
 8004b84:	2301      	movs	r3, #1
 8004b86:	425b      	negs	r3, r3
 8004b88:	e016      	b.n	8004bb8 <NRF905_read_it+0x48>
	}

	NRF905_HW_SPI_SELECT(dev->hw);
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	2200      	movs	r2, #0
 8004b90:	2106      	movs	r1, #6
 8004b92:	0018      	movs	r0, r3
 8004b94:	f000 f943 	bl	8004e1e <NRF905_hw_gpio_set>
	NRF905_hw_spi_transfer(dev->hw, NRF905_CMD_R_RX_PAYLOAD, NULL);
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	2124      	movs	r1, #36	; 0x24
 8004ba0:	0018      	movs	r0, r3
 8004ba2:	f000 f9e9 	bl	8004f78 <NRF905_hw_spi_transfer>

	// Get received payload

	NRF905_hw_spi_receive_it(dev->hw, NRF905_CMD_NOP, (uint8_t*) data,len);
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	6818      	ldr	r0, [r3, #0]
 8004baa:	1dfb      	adds	r3, r7, #7
 8004bac:	781b      	ldrb	r3, [r3, #0]
 8004bae:	68ba      	ldr	r2, [r7, #8]
 8004bb0:	21ff      	movs	r1, #255	; 0xff
 8004bb2:	f000 fa07 	bl	8004fc4 <NRF905_hw_spi_receive_it>



	return 0;
 8004bb6:	2300      	movs	r3, #0
}
 8004bb8:	0018      	movs	r0, r3
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	b004      	add	sp, #16
 8004bbe:	bd80      	pop	{r7, pc}

08004bc0 <NRF905_spi_deselect>:
void NRF905_spi_deselect(NRF905_t *dev) {
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b082      	sub	sp, #8
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]

	NRF905_HW_SPI_DESELECT(dev->hw);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	2201      	movs	r2, #1
 8004bce:	2106      	movs	r1, #6
 8004bd0:	0018      	movs	r0, r3
 8004bd2:	f000 f924 	bl	8004e1e <NRF905_hw_gpio_set>

}
 8004bd6:	46c0      	nop			; (mov r8, r8)
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	b002      	add	sp, #8
 8004bdc:	bd80      	pop	{r7, pc}
	...

08004be0 <NRF905_init>:
	NRF905_HW_SPI_DESELECT(dev->hw);

	return 0;
}

int NRF905_init(NRF905_t *dev, NRF905_hw_t *hw) {
 8004be0:	b590      	push	{r4, r7, lr}
 8004be2:	b085      	sub	sp, #20
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
 8004be8:	6039      	str	r1, [r7, #0]
	uint8_t i;

	if (dev == NULL) {
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d102      	bne.n	8004bf6 <NRF905_init+0x16>
		return -1;
 8004bf0:	2301      	movs	r3, #1
 8004bf2:	425b      	negs	r3, r3
 8004bf4:	e0d7      	b.n	8004da6 <NRF905_init+0x1c6>
	}

	if (hw == NULL) {
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d102      	bne.n	8004c02 <NRF905_init+0x22>
		return -2;
 8004bfc:	2302      	movs	r3, #2
 8004bfe:	425b      	negs	r3, r3
 8004c00:	e0d1      	b.n	8004da6 <NRF905_init+0x1c6>
	}

	dev->hw = hw;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	683a      	ldr	r2, [r7, #0]
 8004c06:	601a      	str	r2, [r3, #0]

	dev->software_pin_configuration = 0x00;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	741a      	strb	r2, [r3, #16]

	NRF905_hw_enable_timer(hw);
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	0018      	movs	r0, r3
 8004c12:	f000 f996 	bl	8004f42 <NRF905_hw_enable_timer>

	if (hw->gpio[NRF905_HW_GPIO_DR].port == NULL) {
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d106      	bne.n	8004c2c <NRF905_init+0x4c>
		dev->software_pin_configuration |= NRF905_USE_SOFTWARE_DATA_READY;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	7c1b      	ldrb	r3, [r3, #16]
 8004c22:	2201      	movs	r2, #1
 8004c24:	4313      	orrs	r3, r2
 8004c26:	b2da      	uxtb	r2, r3
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	741a      	strb	r2, [r3, #16]
	}
	if (hw->gpio[NRF905_HW_GPIO_AM].port == NULL) {
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d106      	bne.n	8004c42 <NRF905_init+0x62>
		dev->software_pin_configuration |= NRF905_USE_SOFTWARE_ADDRESS_MATCH;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	7c1b      	ldrb	r3, [r3, #16]
 8004c38:	2202      	movs	r2, #2
 8004c3a:	4313      	orrs	r3, r2
 8004c3c:	b2da      	uxtb	r2, r3
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	741a      	strb	r2, [r3, #16]
	}

	NRF905_HW_SPI_DESELECT(dev->hw);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	2201      	movs	r2, #1
 8004c48:	2106      	movs	r1, #6
 8004c4a:	0018      	movs	r0, r3
 8004c4c:	f000 f8e7 	bl	8004e1e <NRF905_hw_gpio_set>

	NRF905_HW_POWER_DOWN(dev->hw);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	2200      	movs	r2, #0
 8004c56:	2102      	movs	r1, #2
 8004c58:	0018      	movs	r0, r3
 8004c5a:	f000 f8e0 	bl	8004e1e <NRF905_hw_gpio_set>
	NRF905_HW_STANDBY_ENTER(hw);
 8004c5e:	683b      	ldr	r3, [r7, #0]
 8004c60:	2200      	movs	r2, #0
 8004c62:	2101      	movs	r1, #1
 8004c64:	0018      	movs	r0, r3
 8004c66:	f000 f8da 	bl	8004e1e <NRF905_hw_gpio_set>
	NRF905_HW_MODE_RX(hw);
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	2100      	movs	r1, #0
 8004c70:	0018      	movs	r0, r3
 8004c72:	f000 f8d4 	bl	8004e1e <NRF905_hw_gpio_set>
	NRF905_hw_delay_ms(dev->hw, 3);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	2103      	movs	r1, #3
 8004c7c:	0018      	movs	r0, r3
 8004c7e:	f000 f908 	bl	8004e92 <NRF905_hw_delay_ms>

	// Set control registers
	NRF905_HW_SPI_SELECT(dev->hw);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	2200      	movs	r2, #0
 8004c88:	2106      	movs	r1, #6
 8004c8a:	0018      	movs	r0, r3
 8004c8c:	f000 f8c7 	bl	8004e1e <NRF905_hw_gpio_set>
	NRF905_hw_spi_transfer(dev->hw, NRF905_CMD_W_CONFIG | 0x00, NULL);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	2200      	movs	r2, #0
 8004c96:	2100      	movs	r1, #0
 8004c98:	0018      	movs	r0, r3
 8004c9a:	f000 f96d 	bl	8004f78 <NRF905_hw_spi_transfer>
	for (i = 0; i < sizeof(NRF905_default_config); i++) {
 8004c9e:	230f      	movs	r3, #15
 8004ca0:	18fb      	adds	r3, r7, r3
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	701a      	strb	r2, [r3, #0]
 8004ca6:	e00f      	b.n	8004cc8 <NRF905_init+0xe8>
		NRF905_hw_spi_transfer(dev->hw, NRF905_default_config[i], NULL);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	6818      	ldr	r0, [r3, #0]
 8004cac:	240f      	movs	r4, #15
 8004cae:	193b      	adds	r3, r7, r4
 8004cb0:	781b      	ldrb	r3, [r3, #0]
 8004cb2:	4a3f      	ldr	r2, [pc, #252]	; (8004db0 <NRF905_init+0x1d0>)
 8004cb4:	5cd3      	ldrb	r3, [r2, r3]
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	0019      	movs	r1, r3
 8004cba:	f000 f95d 	bl	8004f78 <NRF905_hw_spi_transfer>
	for (i = 0; i < sizeof(NRF905_default_config); i++) {
 8004cbe:	193b      	adds	r3, r7, r4
 8004cc0:	781a      	ldrb	r2, [r3, #0]
 8004cc2:	193b      	adds	r3, r7, r4
 8004cc4:	3201      	adds	r2, #1
 8004cc6:	701a      	strb	r2, [r3, #0]
 8004cc8:	240f      	movs	r4, #15
 8004cca:	193b      	adds	r3, r7, r4
 8004ccc:	781b      	ldrb	r3, [r3, #0]
 8004cce:	2b09      	cmp	r3, #9
 8004cd0:	d9ea      	bls.n	8004ca8 <NRF905_init+0xc8>
	}
	NRF905_HW_SPI_DESELECT(dev->hw);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	2201      	movs	r2, #1
 8004cd8:	2106      	movs	r1, #6
 8004cda:	0018      	movs	r0, r3
 8004cdc:	f000 f89f 	bl	8004e1e <NRF905_hw_gpio_set>

	NRF905_hw_delay_us(dev->hw, 100);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	2164      	movs	r1, #100	; 0x64
 8004ce6:	0018      	movs	r0, r3
 8004ce8:	f000 f8e0 	bl	8004eac <NRF905_hw_delay_us>

	NRF905_HW_SPI_SELECT(dev->hw);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	2106      	movs	r1, #6
 8004cf4:	0018      	movs	r0, r3
 8004cf6:	f000 f892 	bl	8004e1e <NRF905_hw_gpio_set>
	// Default transmit address
	NRF905_hw_spi_transfer(dev->hw, NRF905_CMD_W_TX_ADDRESS, NULL);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	2200      	movs	r2, #0
 8004d00:	2122      	movs	r1, #34	; 0x22
 8004d02:	0018      	movs	r0, r3
 8004d04:	f000 f938 	bl	8004f78 <NRF905_hw_spi_transfer>
	for (i = 0; i < 4; i++) {
 8004d08:	193b      	adds	r3, r7, r4
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	701a      	strb	r2, [r3, #0]
 8004d0e:	e00c      	b.n	8004d2a <NRF905_init+0x14a>
		NRF905_hw_spi_transfer(dev->hw, 0xE7, NULL);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	2200      	movs	r2, #0
 8004d16:	21e7      	movs	r1, #231	; 0xe7
 8004d18:	0018      	movs	r0, r3
 8004d1a:	f000 f92d 	bl	8004f78 <NRF905_hw_spi_transfer>
	for (i = 0; i < 4; i++) {
 8004d1e:	210f      	movs	r1, #15
 8004d20:	187b      	adds	r3, r7, r1
 8004d22:	781a      	ldrb	r2, [r3, #0]
 8004d24:	187b      	adds	r3, r7, r1
 8004d26:	3201      	adds	r2, #1
 8004d28:	701a      	strb	r2, [r3, #0]
 8004d2a:	240f      	movs	r4, #15
 8004d2c:	193b      	adds	r3, r7, r4
 8004d2e:	781b      	ldrb	r3, [r3, #0]
 8004d30:	2b03      	cmp	r3, #3
 8004d32:	d9ed      	bls.n	8004d10 <NRF905_init+0x130>
	}
	NRF905_HW_SPI_DESELECT(dev->hw);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	2201      	movs	r2, #1
 8004d3a:	2106      	movs	r1, #6
 8004d3c:	0018      	movs	r0, r3
 8004d3e:	f000 f86e 	bl	8004e1e <NRF905_hw_gpio_set>

	NRF905_hw_delay_us(dev->hw, 100);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	2164      	movs	r1, #100	; 0x64
 8004d48:	0018      	movs	r0, r3
 8004d4a:	f000 f8af 	bl	8004eac <NRF905_hw_delay_us>

	NRF905_HW_SPI_SELECT(dev->hw);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	2200      	movs	r2, #0
 8004d54:	2106      	movs	r1, #6
 8004d56:	0018      	movs	r0, r3
 8004d58:	f000 f861 	bl	8004e1e <NRF905_hw_gpio_set>
	// Clear transmit payload
	NRF905_hw_spi_transfer(dev->hw, NRF905_CMD_W_TX_PAYLOAD, NULL);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	2200      	movs	r2, #0
 8004d62:	2120      	movs	r1, #32
 8004d64:	0018      	movs	r0, r3
 8004d66:	f000 f907 	bl	8004f78 <NRF905_hw_spi_transfer>
	for (i = 0; i < NRF905_MAX_PAYLOAD; i++) {
 8004d6a:	193b      	adds	r3, r7, r4
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	701a      	strb	r2, [r3, #0]
 8004d70:	e00c      	b.n	8004d8c <NRF905_init+0x1ac>
		NRF905_hw_spi_transfer(dev->hw, 0x00, NULL);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	2200      	movs	r2, #0
 8004d78:	2100      	movs	r1, #0
 8004d7a:	0018      	movs	r0, r3
 8004d7c:	f000 f8fc 	bl	8004f78 <NRF905_hw_spi_transfer>
	for (i = 0; i < NRF905_MAX_PAYLOAD; i++) {
 8004d80:	210f      	movs	r1, #15
 8004d82:	187b      	adds	r3, r7, r1
 8004d84:	781a      	ldrb	r2, [r3, #0]
 8004d86:	187b      	adds	r3, r7, r1
 8004d88:	3201      	adds	r2, #1
 8004d8a:	701a      	strb	r2, [r3, #0]
 8004d8c:	230f      	movs	r3, #15
 8004d8e:	18fb      	adds	r3, r7, r3
 8004d90:	781b      	ldrb	r3, [r3, #0]
 8004d92:	2b1f      	cmp	r3, #31
 8004d94:	d9ed      	bls.n	8004d72 <NRF905_init+0x192>
	}
	NRF905_HW_SPI_DESELECT(dev->hw);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	2201      	movs	r2, #1
 8004d9c:	2106      	movs	r1, #6
 8004d9e:	0018      	movs	r0, r3
 8004da0:	f000 f83d 	bl	8004e1e <NRF905_hw_gpio_set>

	return 0;
 8004da4:	2300      	movs	r3, #0
}
 8004da6:	0018      	movs	r0, r3
 8004da8:	46bd      	mov	sp, r7
 8004daa:	b005      	add	sp, #20
 8004dac:	bd90      	pop	{r4, r7, pc}
 8004dae:	46c0      	nop			; (mov r8, r8)
 8004db0:	08006910 	.word	0x08006910

08004db4 <NRF905_hw_gpio_get>:

#include "gpio.h"
#include "tim.h"
#include "spi.h"

int NRF905_hw_gpio_get(NRF905_hw_t *hw, uint8_t gpio) {
 8004db4:	b580      	push	{r7, lr}
 8004db6:	b082      	sub	sp, #8
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
 8004dbc:	000a      	movs	r2, r1
 8004dbe:	1cfb      	adds	r3, r7, #3
 8004dc0:	701a      	strb	r2, [r3, #0]
	if (hw == NULL) {
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d102      	bne.n	8004dce <NRF905_hw_gpio_get+0x1a>
		return -1;
 8004dc8:	2301      	movs	r3, #1
 8004dca:	425b      	negs	r3, r3
 8004dcc:	e023      	b.n	8004e16 <NRF905_hw_gpio_get+0x62>
	}

	if (gpio >= 0 && gpio <= 6) {
 8004dce:	1cfb      	adds	r3, r7, #3
 8004dd0:	781b      	ldrb	r3, [r3, #0]
 8004dd2:	2b06      	cmp	r3, #6
 8004dd4:	d81d      	bhi.n	8004e12 <NRF905_hw_gpio_get+0x5e>
		if (hw->gpio[gpio].port) {
 8004dd6:	1cfb      	adds	r3, r7, #3
 8004dd8:	781b      	ldrb	r3, [r3, #0]
 8004dda:	687a      	ldr	r2, [r7, #4]
 8004ddc:	00db      	lsls	r3, r3, #3
 8004dde:	18d3      	adds	r3, r2, r3
 8004de0:	3304      	adds	r3, #4
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d011      	beq.n	8004e0c <NRF905_hw_gpio_get+0x58>
			return HAL_GPIO_ReadPin((GPIO_TypeDef*) hw->gpio[gpio].port,
 8004de8:	1cfb      	adds	r3, r7, #3
 8004dea:	781b      	ldrb	r3, [r3, #0]
 8004dec:	687a      	ldr	r2, [r7, #4]
 8004dee:	00db      	lsls	r3, r3, #3
 8004df0:	18d3      	adds	r3, r2, r3
 8004df2:	3304      	adds	r3, #4
 8004df4:	6818      	ldr	r0, [r3, #0]
					hw->gpio[gpio].pin);
 8004df6:	1cfb      	adds	r3, r7, #3
 8004df8:	781a      	ldrb	r2, [r3, #0]
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	00d2      	lsls	r2, r2, #3
 8004dfe:	58d3      	ldr	r3, [r2, r3]
			return HAL_GPIO_ReadPin((GPIO_TypeDef*) hw->gpio[gpio].port,
 8004e00:	b29b      	uxth	r3, r3
 8004e02:	0019      	movs	r1, r3
 8004e04:	f7fc fcfc 	bl	8001800 <HAL_GPIO_ReadPin>
 8004e08:	0003      	movs	r3, r0
 8004e0a:	e004      	b.n	8004e16 <NRF905_hw_gpio_get+0x62>
		} else {
			return -2;
 8004e0c:	2302      	movs	r3, #2
 8004e0e:	425b      	negs	r3, r3
 8004e10:	e001      	b.n	8004e16 <NRF905_hw_gpio_get+0x62>
		}
	}

	return -3;
 8004e12:	2303      	movs	r3, #3
 8004e14:	425b      	negs	r3, r3
}
 8004e16:	0018      	movs	r0, r3
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	b002      	add	sp, #8
 8004e1c:	bd80      	pop	{r7, pc}

08004e1e <NRF905_hw_gpio_set>:

int NRF905_hw_gpio_set(NRF905_hw_t *hw, uint8_t gpio, uint8_t value) {
 8004e1e:	b580      	push	{r7, lr}
 8004e20:	b082      	sub	sp, #8
 8004e22:	af00      	add	r7, sp, #0
 8004e24:	6078      	str	r0, [r7, #4]
 8004e26:	0008      	movs	r0, r1
 8004e28:	0011      	movs	r1, r2
 8004e2a:	1cfb      	adds	r3, r7, #3
 8004e2c:	1c02      	adds	r2, r0, #0
 8004e2e:	701a      	strb	r2, [r3, #0]
 8004e30:	1cbb      	adds	r3, r7, #2
 8004e32:	1c0a      	adds	r2, r1, #0
 8004e34:	701a      	strb	r2, [r3, #0]
	if (hw == NULL) {
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d102      	bne.n	8004e42 <NRF905_hw_gpio_set+0x24>
		return -1;
 8004e3c:	2301      	movs	r3, #1
 8004e3e:	425b      	negs	r3, r3
 8004e40:	e023      	b.n	8004e8a <NRF905_hw_gpio_set+0x6c>
	}

	if (gpio >= 0 && gpio <= 6) {
 8004e42:	1cfb      	adds	r3, r7, #3
 8004e44:	781b      	ldrb	r3, [r3, #0]
 8004e46:	2b06      	cmp	r3, #6
 8004e48:	d81e      	bhi.n	8004e88 <NRF905_hw_gpio_set+0x6a>
		if (hw->gpio[gpio].port) {
 8004e4a:	1cfb      	adds	r3, r7, #3
 8004e4c:	781b      	ldrb	r3, [r3, #0]
 8004e4e:	687a      	ldr	r2, [r7, #4]
 8004e50:	00db      	lsls	r3, r3, #3
 8004e52:	18d3      	adds	r3, r2, r3
 8004e54:	3304      	adds	r3, #4
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d012      	beq.n	8004e82 <NRF905_hw_gpio_set+0x64>
			HAL_GPIO_WritePin((GPIO_TypeDef*) hw->gpio[gpio].port,
 8004e5c:	1cfb      	adds	r3, r7, #3
 8004e5e:	781b      	ldrb	r3, [r3, #0]
 8004e60:	687a      	ldr	r2, [r7, #4]
 8004e62:	00db      	lsls	r3, r3, #3
 8004e64:	18d3      	adds	r3, r2, r3
 8004e66:	3304      	adds	r3, #4
 8004e68:	6818      	ldr	r0, [r3, #0]
					hw->gpio[gpio].pin, value);
 8004e6a:	1cfb      	adds	r3, r7, #3
 8004e6c:	781a      	ldrb	r2, [r3, #0]
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	00d2      	lsls	r2, r2, #3
 8004e72:	58d3      	ldr	r3, [r2, r3]
			HAL_GPIO_WritePin((GPIO_TypeDef*) hw->gpio[gpio].port,
 8004e74:	b299      	uxth	r1, r3
 8004e76:	1cbb      	adds	r3, r7, #2
 8004e78:	781b      	ldrb	r3, [r3, #0]
 8004e7a:	001a      	movs	r2, r3
 8004e7c:	f7fc fcdd 	bl	800183a <HAL_GPIO_WritePin>
 8004e80:	e002      	b.n	8004e88 <NRF905_hw_gpio_set+0x6a>
		} else {
			return -2;
 8004e82:	2302      	movs	r3, #2
 8004e84:	425b      	negs	r3, r3
 8004e86:	e000      	b.n	8004e8a <NRF905_hw_gpio_set+0x6c>
		}
	}

	return 0;
 8004e88:	2300      	movs	r3, #0
}
 8004e8a:	0018      	movs	r0, r3
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	b002      	add	sp, #8
 8004e90:	bd80      	pop	{r7, pc}

08004e92 <NRF905_hw_delay_ms>:

void NRF905_hw_delay_ms(NRF905_hw_t *hw, uint32_t ms) {
 8004e92:	b580      	push	{r7, lr}
 8004e94:	b082      	sub	sp, #8
 8004e96:	af00      	add	r7, sp, #0
 8004e98:	6078      	str	r0, [r7, #4]
 8004e9a:	6039      	str	r1, [r7, #0]
	HAL_Delay(ms);
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	0018      	movs	r0, r3
 8004ea0:	f7fc f9c8 	bl	8001234 <HAL_Delay>
}
 8004ea4:	46c0      	nop			; (mov r8, r8)
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	b002      	add	sp, #8
 8004eaa:	bd80      	pop	{r7, pc}

08004eac <NRF905_hw_delay_us>:

void NRF905_hw_delay_us(NRF905_hw_t *hw, uint16_t delay) {
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b084      	sub	sp, #16
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
 8004eb4:	000a      	movs	r2, r1
 8004eb6:	1cbb      	adds	r3, r7, #2
 8004eb8:	801a      	strh	r2, [r3, #0]
	if (hw->tim != NULL) {
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d03b      	beq.n	8004f3a <NRF905_hw_delay_us+0x8e>
		volatile uint16_t current_time, stop_time;
		current_time = __HAL_TIM_GET_COUNTER((TIM_HandleTypeDef* ) (hw->tim));
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eca:	b29a      	uxth	r2, r3
 8004ecc:	210e      	movs	r1, #14
 8004ece:	187b      	adds	r3, r7, r1
 8004ed0:	801a      	strh	r2, [r3, #0]
		stop_time = current_time + delay;
 8004ed2:	187b      	adds	r3, r7, r1
 8004ed4:	881b      	ldrh	r3, [r3, #0]
 8004ed6:	b29a      	uxth	r2, r3
 8004ed8:	1cbb      	adds	r3, r7, #2
 8004eda:	881b      	ldrh	r3, [r3, #0]
 8004edc:	18d3      	adds	r3, r2, r3
 8004ede:	b29a      	uxth	r2, r3
 8004ee0:	200c      	movs	r0, #12
 8004ee2:	183b      	adds	r3, r7, r0
 8004ee4:	801a      	strh	r2, [r3, #0]

		//overflow
		if (stop_time < current_time) {
 8004ee6:	183b      	adds	r3, r7, r0
 8004ee8:	881b      	ldrh	r3, [r3, #0]
 8004eea:	b29a      	uxth	r2, r3
 8004eec:	187b      	adds	r3, r7, r1
 8004eee:	881b      	ldrh	r3, [r3, #0]
 8004ef0:	b29b      	uxth	r3, r3
 8004ef2:	429a      	cmp	r2, r3
 8004ef4:	d210      	bcs.n	8004f18 <NRF905_hw_delay_us+0x6c>
			do {
				current_time = __HAL_TIM_GET_COUNTER(
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004efe:	b29a      	uxth	r2, r3
 8004f00:	210e      	movs	r1, #14
 8004f02:	187b      	adds	r3, r7, r1
 8004f04:	801a      	strh	r2, [r3, #0]
						(TIM_HandleTypeDef* ) (hw->tim));
			} while (current_time > stop_time);
 8004f06:	187b      	adds	r3, r7, r1
 8004f08:	881b      	ldrh	r3, [r3, #0]
 8004f0a:	b29a      	uxth	r2, r3
 8004f0c:	230c      	movs	r3, #12
 8004f0e:	18fb      	adds	r3, r7, r3
 8004f10:	881b      	ldrh	r3, [r3, #0]
 8004f12:	b29b      	uxth	r3, r3
 8004f14:	429a      	cmp	r2, r3
 8004f16:	d8ee      	bhi.n	8004ef6 <NRF905_hw_delay_us+0x4a>
		}

		do {
			current_time = __HAL_TIM_GET_COUNTER(
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f20:	b29a      	uxth	r2, r3
 8004f22:	210e      	movs	r1, #14
 8004f24:	187b      	adds	r3, r7, r1
 8004f26:	801a      	strh	r2, [r3, #0]
					(TIM_HandleTypeDef* ) (hw->tim));
		} while (current_time < stop_time);
 8004f28:	187b      	adds	r3, r7, r1
 8004f2a:	881b      	ldrh	r3, [r3, #0]
 8004f2c:	b29a      	uxth	r2, r3
 8004f2e:	230c      	movs	r3, #12
 8004f30:	18fb      	adds	r3, r7, r3
 8004f32:	881b      	ldrh	r3, [r3, #0]
 8004f34:	b29b      	uxth	r3, r3
 8004f36:	429a      	cmp	r2, r3
 8004f38:	d3ee      	bcc.n	8004f18 <NRF905_hw_delay_us+0x6c>
	}
}
 8004f3a:	46c0      	nop			; (mov r8, r8)
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	b004      	add	sp, #16
 8004f40:	bd80      	pop	{r7, pc}

08004f42 <NRF905_hw_enable_timer>:

void NRF905_hw_enable_timer(NRF905_hw_t *hw) {
 8004f42:	b580      	push	{r7, lr}
 8004f44:	b082      	sub	sp, #8
 8004f46:	af00      	add	r7, sp, #0
 8004f48:	6078      	str	r0, [r7, #4]
	if (hw->tim != NULL) {
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d00e      	beq.n	8004f70 <NRF905_hw_enable_timer+0x2e>
		__HAL_TIM_SET_COUNTER((TIM_HandleTypeDef* )(hw->tim), 0);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	2200      	movs	r2, #0
 8004f5a:	625a      	str	r2, [r3, #36]	; 0x24
		__HAL_TIM_ENABLE((TIM_HandleTypeDef* )hw->tim);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	681a      	ldr	r2, [r3, #0]
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	2101      	movs	r1, #1
 8004f6c:	430a      	orrs	r2, r1
 8004f6e:	601a      	str	r2, [r3, #0]
	}
}
 8004f70:	46c0      	nop			; (mov r8, r8)
 8004f72:	46bd      	mov	sp, r7
 8004f74:	b002      	add	sp, #8
 8004f76:	bd80      	pop	{r7, pc}

08004f78 <NRF905_hw_spi_transfer>:

int NRF905_hw_spi_transfer(NRF905_hw_t *hw, uint8_t data_tx, uint8_t *data_rx) {
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	b088      	sub	sp, #32
 8004f7c:	af02      	add	r7, sp, #8
 8004f7e:	60f8      	str	r0, [r7, #12]
 8004f80:	607a      	str	r2, [r7, #4]
 8004f82:	230b      	movs	r3, #11
 8004f84:	18fb      	adds	r3, r7, r3
 8004f86:	1c0a      	adds	r2, r1, #0
 8004f88:	701a      	strb	r2, [r3, #0]
	uint8_t dummy;
	int ret;

	if (hw == NULL) {
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d102      	bne.n	8004f96 <NRF905_hw_spi_transfer+0x1e>
		return -1;
 8004f90:	2301      	movs	r3, #1
 8004f92:	425b      	negs	r3, r3
 8004f94:	e012      	b.n	8004fbc <NRF905_hw_spi_transfer+0x44>
	}

	if (data_rx == NULL) {
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d102      	bne.n	8004fa2 <NRF905_hw_spi_transfer+0x2a>
		data_rx = &dummy;
 8004f9c:	2313      	movs	r3, #19
 8004f9e:	18fb      	adds	r3, r7, r3
 8004fa0:	607b      	str	r3, [r7, #4]
	}

	ret = HAL_SPI_TransmitReceive((SPI_HandleTypeDef*) hw->spi, &data_tx,
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004fa6:	687a      	ldr	r2, [r7, #4]
 8004fa8:	230b      	movs	r3, #11
 8004faa:	18f9      	adds	r1, r7, r3
 8004fac:	2364      	movs	r3, #100	; 0x64
 8004fae:	9300      	str	r3, [sp, #0]
 8004fb0:	2301      	movs	r3, #1
 8004fb2:	f7fd fbdf 	bl	8002774 <HAL_SPI_TransmitReceive>
 8004fb6:	0003      	movs	r3, r0
 8004fb8:	617b      	str	r3, [r7, #20]
			data_rx, 1, 100);

	return ret;
 8004fba:	697b      	ldr	r3, [r7, #20]
}
 8004fbc:	0018      	movs	r0, r3
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	b006      	add	sp, #24
 8004fc2:	bd80      	pop	{r7, pc}

08004fc4 <NRF905_hw_spi_receive_it>:

int NRF905_hw_spi_receive_it(NRF905_hw_t *hw, void* data_tx, uint8_t *data_rx, uint16_t size) {
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	b086      	sub	sp, #24
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	60f8      	str	r0, [r7, #12]
 8004fcc:	60b9      	str	r1, [r7, #8]
 8004fce:	607a      	str	r2, [r7, #4]
 8004fd0:	001a      	movs	r2, r3
 8004fd2:	1cbb      	adds	r3, r7, #2
 8004fd4:	801a      	strh	r2, [r3, #0]
	uint8_t dummy;
	int ret;

	if (hw == NULL) {
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d102      	bne.n	8004fe2 <NRF905_hw_spi_receive_it+0x1e>
		return -1;
 8004fdc:	2301      	movs	r3, #1
 8004fde:	425b      	negs	r3, r3
 8004fe0:	e00a      	b.n	8004ff8 <NRF905_hw_spi_receive_it+0x34>
	}



	ret = HAL_SPI_Receive_IT((SPI_HandleTypeDef*) hw->spi, (uint8_t*)data_rx, size);
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004fe6:	1cbb      	adds	r3, r7, #2
 8004fe8:	881a      	ldrh	r2, [r3, #0]
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	0019      	movs	r1, r3
 8004fee:	f7fd fd93 	bl	8002b18 <HAL_SPI_Receive_IT>
 8004ff2:	0003      	movs	r3, r0
 8004ff4:	617b      	str	r3, [r7, #20]

	return ret;
 8004ff6:	697b      	ldr	r3, [r7, #20]
}
 8004ff8:	0018      	movs	r0, r3
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	b006      	add	sp, #24
 8004ffe:	bd80      	pop	{r7, pc}

08005000 <findslot>:
 8005000:	4b0a      	ldr	r3, [pc, #40]	; (800502c <findslot+0x2c>)
 8005002:	b510      	push	{r4, lr}
 8005004:	0004      	movs	r4, r0
 8005006:	6818      	ldr	r0, [r3, #0]
 8005008:	2800      	cmp	r0, #0
 800500a:	d004      	beq.n	8005016 <findslot+0x16>
 800500c:	6983      	ldr	r3, [r0, #24]
 800500e:	2b00      	cmp	r3, #0
 8005010:	d101      	bne.n	8005016 <findslot+0x16>
 8005012:	f000 fb03 	bl	800561c <__sinit>
 8005016:	2000      	movs	r0, #0
 8005018:	2c13      	cmp	r4, #19
 800501a:	d805      	bhi.n	8005028 <findslot+0x28>
 800501c:	4b04      	ldr	r3, [pc, #16]	; (8005030 <findslot+0x30>)
 800501e:	00e4      	lsls	r4, r4, #3
 8005020:	58e2      	ldr	r2, [r4, r3]
 8005022:	3201      	adds	r2, #1
 8005024:	d000      	beq.n	8005028 <findslot+0x28>
 8005026:	18e0      	adds	r0, r4, r3
 8005028:	bd10      	pop	{r4, pc}
 800502a:	46c0      	nop			; (mov r8, r8)
 800502c:	20000014 	.word	0x20000014
 8005030:	2000026c 	.word	0x2000026c

08005034 <error>:
 8005034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005036:	0004      	movs	r4, r0
 8005038:	f000 fa88 	bl	800554c <__errno>
 800503c:	2613      	movs	r6, #19
 800503e:	0005      	movs	r5, r0
 8005040:	2700      	movs	r7, #0
 8005042:	1c30      	adds	r0, r6, #0
 8005044:	1c39      	adds	r1, r7, #0
 8005046:	beab      	bkpt	0x00ab
 8005048:	1c06      	adds	r6, r0, #0
 800504a:	602e      	str	r6, [r5, #0]
 800504c:	0020      	movs	r0, r4
 800504e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005050 <checkerror>:
 8005050:	b510      	push	{r4, lr}
 8005052:	1c43      	adds	r3, r0, #1
 8005054:	d101      	bne.n	800505a <checkerror+0xa>
 8005056:	f7ff ffed 	bl	8005034 <error>
 800505a:	bd10      	pop	{r4, pc}

0800505c <_swiread>:
 800505c:	b530      	push	{r4, r5, lr}
 800505e:	b085      	sub	sp, #20
 8005060:	ad01      	add	r5, sp, #4
 8005062:	9001      	str	r0, [sp, #4]
 8005064:	9102      	str	r1, [sp, #8]
 8005066:	9203      	str	r2, [sp, #12]
 8005068:	2406      	movs	r4, #6
 800506a:	1c20      	adds	r0, r4, #0
 800506c:	1c29      	adds	r1, r5, #0
 800506e:	beab      	bkpt	0x00ab
 8005070:	1c04      	adds	r4, r0, #0
 8005072:	0020      	movs	r0, r4
 8005074:	f7ff ffec 	bl	8005050 <checkerror>
 8005078:	b005      	add	sp, #20
 800507a:	bd30      	pop	{r4, r5, pc}

0800507c <_read>:
 800507c:	b570      	push	{r4, r5, r6, lr}
 800507e:	000e      	movs	r6, r1
 8005080:	0015      	movs	r5, r2
 8005082:	f7ff ffbd 	bl	8005000 <findslot>
 8005086:	1e04      	subs	r4, r0, #0
 8005088:	d106      	bne.n	8005098 <_read+0x1c>
 800508a:	f000 fa5f 	bl	800554c <__errno>
 800508e:	2309      	movs	r3, #9
 8005090:	6003      	str	r3, [r0, #0]
 8005092:	2001      	movs	r0, #1
 8005094:	4240      	negs	r0, r0
 8005096:	bd70      	pop	{r4, r5, r6, pc}
 8005098:	002a      	movs	r2, r5
 800509a:	0031      	movs	r1, r6
 800509c:	6800      	ldr	r0, [r0, #0]
 800509e:	f7ff ffdd 	bl	800505c <_swiread>
 80050a2:	1c43      	adds	r3, r0, #1
 80050a4:	d0f7      	beq.n	8005096 <_read+0x1a>
 80050a6:	6863      	ldr	r3, [r4, #4]
 80050a8:	1a28      	subs	r0, r5, r0
 80050aa:	181b      	adds	r3, r3, r0
 80050ac:	6063      	str	r3, [r4, #4]
 80050ae:	e7f2      	b.n	8005096 <_read+0x1a>

080050b0 <_swilseek>:
 80050b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80050b2:	000c      	movs	r4, r1
 80050b4:	0016      	movs	r6, r2
 80050b6:	f7ff ffa3 	bl	8005000 <findslot>
 80050ba:	1e05      	subs	r5, r0, #0
 80050bc:	d107      	bne.n	80050ce <_swilseek+0x1e>
 80050be:	f000 fa45 	bl	800554c <__errno>
 80050c2:	2309      	movs	r3, #9
 80050c4:	6003      	str	r3, [r0, #0]
 80050c6:	2401      	movs	r4, #1
 80050c8:	4264      	negs	r4, r4
 80050ca:	0020      	movs	r0, r4
 80050cc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80050ce:	2e02      	cmp	r6, #2
 80050d0:	d903      	bls.n	80050da <_swilseek+0x2a>
 80050d2:	f000 fa3b 	bl	800554c <__errno>
 80050d6:	2316      	movs	r3, #22
 80050d8:	e7f4      	b.n	80050c4 <_swilseek+0x14>
 80050da:	2e01      	cmp	r6, #1
 80050dc:	d112      	bne.n	8005104 <_swilseek+0x54>
 80050de:	6843      	ldr	r3, [r0, #4]
 80050e0:	18e4      	adds	r4, r4, r3
 80050e2:	d4f6      	bmi.n	80050d2 <_swilseek+0x22>
 80050e4:	466f      	mov	r7, sp
 80050e6:	682b      	ldr	r3, [r5, #0]
 80050e8:	260a      	movs	r6, #10
 80050ea:	9300      	str	r3, [sp, #0]
 80050ec:	607c      	str	r4, [r7, #4]
 80050ee:	1c30      	adds	r0, r6, #0
 80050f0:	1c39      	adds	r1, r7, #0
 80050f2:	beab      	bkpt	0x00ab
 80050f4:	1c06      	adds	r6, r0, #0
 80050f6:	0030      	movs	r0, r6
 80050f8:	f7ff ffaa 	bl	8005050 <checkerror>
 80050fc:	2800      	cmp	r0, #0
 80050fe:	dbe2      	blt.n	80050c6 <_swilseek+0x16>
 8005100:	606c      	str	r4, [r5, #4]
 8005102:	e7e2      	b.n	80050ca <_swilseek+0x1a>
 8005104:	2e02      	cmp	r6, #2
 8005106:	d1ed      	bne.n	80050e4 <_swilseek+0x34>
 8005108:	6803      	ldr	r3, [r0, #0]
 800510a:	466f      	mov	r7, sp
 800510c:	9300      	str	r3, [sp, #0]
 800510e:	360a      	adds	r6, #10
 8005110:	1c30      	adds	r0, r6, #0
 8005112:	1c39      	adds	r1, r7, #0
 8005114:	beab      	bkpt	0x00ab
 8005116:	1c06      	adds	r6, r0, #0
 8005118:	0030      	movs	r0, r6
 800511a:	f7ff ff99 	bl	8005050 <checkerror>
 800511e:	1824      	adds	r4, r4, r0
 8005120:	1c43      	adds	r3, r0, #1
 8005122:	d1df      	bne.n	80050e4 <_swilseek+0x34>
 8005124:	e7cf      	b.n	80050c6 <_swilseek+0x16>

08005126 <_lseek>:
 8005126:	b510      	push	{r4, lr}
 8005128:	f7ff ffc2 	bl	80050b0 <_swilseek>
 800512c:	bd10      	pop	{r4, pc}

0800512e <_swiwrite>:
 800512e:	b530      	push	{r4, r5, lr}
 8005130:	b085      	sub	sp, #20
 8005132:	ad01      	add	r5, sp, #4
 8005134:	9001      	str	r0, [sp, #4]
 8005136:	9102      	str	r1, [sp, #8]
 8005138:	9203      	str	r2, [sp, #12]
 800513a:	2405      	movs	r4, #5
 800513c:	1c20      	adds	r0, r4, #0
 800513e:	1c29      	adds	r1, r5, #0
 8005140:	beab      	bkpt	0x00ab
 8005142:	1c04      	adds	r4, r0, #0
 8005144:	0020      	movs	r0, r4
 8005146:	f7ff ff83 	bl	8005050 <checkerror>
 800514a:	b005      	add	sp, #20
 800514c:	bd30      	pop	{r4, r5, pc}

0800514e <_write>:
 800514e:	b570      	push	{r4, r5, r6, lr}
 8005150:	000e      	movs	r6, r1
 8005152:	0015      	movs	r5, r2
 8005154:	f7ff ff54 	bl	8005000 <findslot>
 8005158:	1e04      	subs	r4, r0, #0
 800515a:	d106      	bne.n	800516a <_write+0x1c>
 800515c:	f000 f9f6 	bl	800554c <__errno>
 8005160:	2309      	movs	r3, #9
 8005162:	6003      	str	r3, [r0, #0]
 8005164:	2001      	movs	r0, #1
 8005166:	4240      	negs	r0, r0
 8005168:	e00f      	b.n	800518a <_write+0x3c>
 800516a:	002a      	movs	r2, r5
 800516c:	0031      	movs	r1, r6
 800516e:	6800      	ldr	r0, [r0, #0]
 8005170:	f7ff ffdd 	bl	800512e <_swiwrite>
 8005174:	1e03      	subs	r3, r0, #0
 8005176:	dbf5      	blt.n	8005164 <_write+0x16>
 8005178:	6862      	ldr	r2, [r4, #4]
 800517a:	1a28      	subs	r0, r5, r0
 800517c:	1812      	adds	r2, r2, r0
 800517e:	6062      	str	r2, [r4, #4]
 8005180:	42ab      	cmp	r3, r5
 8005182:	d102      	bne.n	800518a <_write+0x3c>
 8005184:	2000      	movs	r0, #0
 8005186:	f7ff ff55 	bl	8005034 <error>
 800518a:	bd70      	pop	{r4, r5, r6, pc}

0800518c <_swiclose>:
 800518c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800518e:	2402      	movs	r4, #2
 8005190:	9001      	str	r0, [sp, #4]
 8005192:	ad01      	add	r5, sp, #4
 8005194:	1c20      	adds	r0, r4, #0
 8005196:	1c29      	adds	r1, r5, #0
 8005198:	beab      	bkpt	0x00ab
 800519a:	1c04      	adds	r4, r0, #0
 800519c:	0020      	movs	r0, r4
 800519e:	f7ff ff57 	bl	8005050 <checkerror>
 80051a2:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

080051a4 <_close>:
 80051a4:	b570      	push	{r4, r5, r6, lr}
 80051a6:	0005      	movs	r5, r0
 80051a8:	f7ff ff2a 	bl	8005000 <findslot>
 80051ac:	1e04      	subs	r4, r0, #0
 80051ae:	d106      	bne.n	80051be <_close+0x1a>
 80051b0:	f000 f9cc 	bl	800554c <__errno>
 80051b4:	2309      	movs	r3, #9
 80051b6:	6003      	str	r3, [r0, #0]
 80051b8:	2001      	movs	r0, #1
 80051ba:	4240      	negs	r0, r0
 80051bc:	bd70      	pop	{r4, r5, r6, pc}
 80051be:	3d01      	subs	r5, #1
 80051c0:	2d01      	cmp	r5, #1
 80051c2:	d809      	bhi.n	80051d8 <_close+0x34>
 80051c4:	4b09      	ldr	r3, [pc, #36]	; (80051ec <_close+0x48>)
 80051c6:	689a      	ldr	r2, [r3, #8]
 80051c8:	691b      	ldr	r3, [r3, #16]
 80051ca:	429a      	cmp	r2, r3
 80051cc:	d104      	bne.n	80051d8 <_close+0x34>
 80051ce:	2301      	movs	r3, #1
 80051d0:	425b      	negs	r3, r3
 80051d2:	6003      	str	r3, [r0, #0]
 80051d4:	2000      	movs	r0, #0
 80051d6:	e7f1      	b.n	80051bc <_close+0x18>
 80051d8:	6820      	ldr	r0, [r4, #0]
 80051da:	f7ff ffd7 	bl	800518c <_swiclose>
 80051de:	2800      	cmp	r0, #0
 80051e0:	d1ec      	bne.n	80051bc <_close+0x18>
 80051e2:	2301      	movs	r3, #1
 80051e4:	425b      	negs	r3, r3
 80051e6:	6023      	str	r3, [r4, #0]
 80051e8:	e7e8      	b.n	80051bc <_close+0x18>
 80051ea:	46c0      	nop			; (mov r8, r8)
 80051ec:	2000026c 	.word	0x2000026c

080051f0 <_getpid>:
 80051f0:	2001      	movs	r0, #1
 80051f2:	4770      	bx	lr

080051f4 <_swistat>:
 80051f4:	b570      	push	{r4, r5, r6, lr}
 80051f6:	000c      	movs	r4, r1
 80051f8:	f7ff ff02 	bl	8005000 <findslot>
 80051fc:	1e05      	subs	r5, r0, #0
 80051fe:	d106      	bne.n	800520e <_swistat+0x1a>
 8005200:	f000 f9a4 	bl	800554c <__errno>
 8005204:	2309      	movs	r3, #9
 8005206:	6003      	str	r3, [r0, #0]
 8005208:	2001      	movs	r0, #1
 800520a:	4240      	negs	r0, r0
 800520c:	bd70      	pop	{r4, r5, r6, pc}
 800520e:	2380      	movs	r3, #128	; 0x80
 8005210:	6862      	ldr	r2, [r4, #4]
 8005212:	019b      	lsls	r3, r3, #6
 8005214:	4313      	orrs	r3, r2
 8005216:	6063      	str	r3, [r4, #4]
 8005218:	2380      	movs	r3, #128	; 0x80
 800521a:	00db      	lsls	r3, r3, #3
 800521c:	260c      	movs	r6, #12
 800521e:	64a3      	str	r3, [r4, #72]	; 0x48
 8005220:	1c30      	adds	r0, r6, #0
 8005222:	1c29      	adds	r1, r5, #0
 8005224:	beab      	bkpt	0x00ab
 8005226:	1c05      	adds	r5, r0, #0
 8005228:	0028      	movs	r0, r5
 800522a:	f7ff ff11 	bl	8005050 <checkerror>
 800522e:	1c43      	adds	r3, r0, #1
 8005230:	d0ec      	beq.n	800520c <_swistat+0x18>
 8005232:	6120      	str	r0, [r4, #16]
 8005234:	2000      	movs	r0, #0
 8005236:	e7e9      	b.n	800520c <_swistat+0x18>

08005238 <_fstat>:
 8005238:	b570      	push	{r4, r5, r6, lr}
 800523a:	000c      	movs	r4, r1
 800523c:	0005      	movs	r5, r0
 800523e:	2258      	movs	r2, #88	; 0x58
 8005240:	2100      	movs	r1, #0
 8005242:	0020      	movs	r0, r4
 8005244:	f000 fab1 	bl	80057aa <memset>
 8005248:	0028      	movs	r0, r5
 800524a:	0021      	movs	r1, r4
 800524c:	f7ff ffd2 	bl	80051f4 <_swistat>
 8005250:	bd70      	pop	{r4, r5, r6, pc}

08005252 <_stat>:
 8005252:	b570      	push	{r4, r5, r6, lr}
 8005254:	000d      	movs	r5, r1
 8005256:	0004      	movs	r4, r0
 8005258:	2258      	movs	r2, #88	; 0x58
 800525a:	2100      	movs	r1, #0
 800525c:	0028      	movs	r0, r5
 800525e:	f000 faa4 	bl	80057aa <memset>
 8005262:	0020      	movs	r0, r4
 8005264:	2100      	movs	r1, #0
 8005266:	f000 f813 	bl	8005290 <_swiopen>
 800526a:	0004      	movs	r4, r0
 800526c:	1c43      	adds	r3, r0, #1
 800526e:	d00c      	beq.n	800528a <_stat+0x38>
 8005270:	2381      	movs	r3, #129	; 0x81
 8005272:	686a      	ldr	r2, [r5, #4]
 8005274:	021b      	lsls	r3, r3, #8
 8005276:	4313      	orrs	r3, r2
 8005278:	0029      	movs	r1, r5
 800527a:	606b      	str	r3, [r5, #4]
 800527c:	f7ff ffba 	bl	80051f4 <_swistat>
 8005280:	0005      	movs	r5, r0
 8005282:	0020      	movs	r0, r4
 8005284:	f7ff ff8e 	bl	80051a4 <_close>
 8005288:	002c      	movs	r4, r5
 800528a:	0020      	movs	r0, r4
 800528c:	bd70      	pop	{r4, r5, r6, pc}
	...

08005290 <_swiopen>:
 8005290:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005292:	000d      	movs	r5, r1
 8005294:	2600      	movs	r6, #0
 8005296:	b099      	sub	sp, #100	; 0x64
 8005298:	9000      	str	r0, [sp, #0]
 800529a:	00f3      	lsls	r3, r6, #3
 800529c:	9301      	str	r3, [sp, #4]
 800529e:	4b29      	ldr	r3, [pc, #164]	; (8005344 <_swiopen+0xb4>)
 80052a0:	00f2      	lsls	r2, r6, #3
 80052a2:	589c      	ldr	r4, [r3, r2]
 80052a4:	1c63      	adds	r3, r4, #1
 80052a6:	d038      	beq.n	800531a <_swiopen+0x8a>
 80052a8:	3601      	adds	r6, #1
 80052aa:	2e14      	cmp	r6, #20
 80052ac:	d1f5      	bne.n	800529a <_swiopen+0xa>
 80052ae:	f000 f94d 	bl	800554c <__errno>
 80052b2:	2401      	movs	r4, #1
 80052b4:	2318      	movs	r3, #24
 80052b6:	4264      	negs	r4, r4
 80052b8:	6003      	str	r3, [r0, #0]
 80052ba:	e03f      	b.n	800533c <_swiopen+0xac>
 80052bc:	2302      	movs	r3, #2
 80052be:	03ec      	lsls	r4, r5, #15
 80052c0:	0fe4      	lsrs	r4, r4, #31
 80052c2:	421d      	tst	r5, r3
 80052c4:	d000      	beq.n	80052c8 <_swiopen+0x38>
 80052c6:	431c      	orrs	r4, r3
 80052c8:	4b1f      	ldr	r3, [pc, #124]	; (8005348 <_swiopen+0xb8>)
 80052ca:	421d      	tst	r5, r3
 80052cc:	d001      	beq.n	80052d2 <_swiopen+0x42>
 80052ce:	2304      	movs	r3, #4
 80052d0:	431c      	orrs	r4, r3
 80052d2:	2308      	movs	r3, #8
 80052d4:	421d      	tst	r5, r3
 80052d6:	d002      	beq.n	80052de <_swiopen+0x4e>
 80052d8:	2204      	movs	r2, #4
 80052da:	4394      	bics	r4, r2
 80052dc:	431c      	orrs	r4, r3
 80052de:	9b00      	ldr	r3, [sp, #0]
 80052e0:	0018      	movs	r0, r3
 80052e2:	9302      	str	r3, [sp, #8]
 80052e4:	f7fa ff0e 	bl	8000104 <strlen>
 80052e8:	607c      	str	r4, [r7, #4]
 80052ea:	60b8      	str	r0, [r7, #8]
 80052ec:	2401      	movs	r4, #1
 80052ee:	1c20      	adds	r0, r4, #0
 80052f0:	1c39      	adds	r1, r7, #0
 80052f2:	beab      	bkpt	0x00ab
 80052f4:	1c04      	adds	r4, r0, #0
 80052f6:	2c00      	cmp	r4, #0
 80052f8:	db0a      	blt.n	8005310 <_swiopen+0x80>
 80052fa:	4b12      	ldr	r3, [pc, #72]	; (8005344 <_swiopen+0xb4>)
 80052fc:	00f2      	lsls	r2, r6, #3
 80052fe:	509c      	str	r4, [r3, r2]
 8005300:	0013      	movs	r3, r2
 8005302:	4a10      	ldr	r2, [pc, #64]	; (8005344 <_swiopen+0xb4>)
 8005304:	0034      	movs	r4, r6
 8005306:	4694      	mov	ip, r2
 8005308:	2200      	movs	r2, #0
 800530a:	4463      	add	r3, ip
 800530c:	605a      	str	r2, [r3, #4]
 800530e:	e015      	b.n	800533c <_swiopen+0xac>
 8005310:	0020      	movs	r0, r4
 8005312:	f7ff fe8f 	bl	8005034 <error>
 8005316:	0004      	movs	r4, r0
 8005318:	e010      	b.n	800533c <_swiopen+0xac>
 800531a:	23a0      	movs	r3, #160	; 0xa0
 800531c:	002a      	movs	r2, r5
 800531e:	011b      	lsls	r3, r3, #4
 8005320:	401a      	ands	r2, r3
 8005322:	af02      	add	r7, sp, #8
 8005324:	429a      	cmp	r2, r3
 8005326:	d1c9      	bne.n	80052bc <_swiopen+0x2c>
 8005328:	0039      	movs	r1, r7
 800532a:	9800      	ldr	r0, [sp, #0]
 800532c:	f7ff ff91 	bl	8005252 <_stat>
 8005330:	1c43      	adds	r3, r0, #1
 8005332:	d0c3      	beq.n	80052bc <_swiopen+0x2c>
 8005334:	f000 f90a 	bl	800554c <__errno>
 8005338:	2311      	movs	r3, #17
 800533a:	6003      	str	r3, [r0, #0]
 800533c:	0020      	movs	r0, r4
 800533e:	b019      	add	sp, #100	; 0x64
 8005340:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005342:	46c0      	nop			; (mov r8, r8)
 8005344:	2000026c 	.word	0x2000026c
 8005348:	00000601 	.word	0x00000601

0800534c <_get_semihosting_exts>:
 800534c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800534e:	b085      	sub	sp, #20
 8005350:	9000      	str	r0, [sp, #0]
 8005352:	9101      	str	r1, [sp, #4]
 8005354:	4827      	ldr	r0, [pc, #156]	; (80053f4 <_get_semihosting_exts+0xa8>)
 8005356:	2100      	movs	r1, #0
 8005358:	0015      	movs	r5, r2
 800535a:	f7ff ff99 	bl	8005290 <_swiopen>
 800535e:	0004      	movs	r4, r0
 8005360:	002a      	movs	r2, r5
 8005362:	2100      	movs	r1, #0
 8005364:	9800      	ldr	r0, [sp, #0]
 8005366:	f000 fa20 	bl	80057aa <memset>
 800536a:	1c63      	adds	r3, r4, #1
 800536c:	d015      	beq.n	800539a <_get_semihosting_exts+0x4e>
 800536e:	0020      	movs	r0, r4
 8005370:	f7ff fe46 	bl	8005000 <findslot>
 8005374:	260c      	movs	r6, #12
 8005376:	0007      	movs	r7, r0
 8005378:	1c30      	adds	r0, r6, #0
 800537a:	1c39      	adds	r1, r7, #0
 800537c:	beab      	bkpt	0x00ab
 800537e:	1c06      	adds	r6, r0, #0
 8005380:	0030      	movs	r0, r6
 8005382:	f7ff fe65 	bl	8005050 <checkerror>
 8005386:	2803      	cmp	r0, #3
 8005388:	dd02      	ble.n	8005390 <_get_semihosting_exts+0x44>
 800538a:	3803      	subs	r0, #3
 800538c:	42a8      	cmp	r0, r5
 800538e:	dc07      	bgt.n	80053a0 <_get_semihosting_exts+0x54>
 8005390:	0020      	movs	r0, r4
 8005392:	2401      	movs	r4, #1
 8005394:	f7ff ff06 	bl	80051a4 <_close>
 8005398:	4264      	negs	r4, r4
 800539a:	0020      	movs	r0, r4
 800539c:	b005      	add	sp, #20
 800539e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80053a0:	ae03      	add	r6, sp, #12
 80053a2:	2204      	movs	r2, #4
 80053a4:	0031      	movs	r1, r6
 80053a6:	0020      	movs	r0, r4
 80053a8:	f7ff fe68 	bl	800507c <_read>
 80053ac:	2803      	cmp	r0, #3
 80053ae:	ddef      	ble.n	8005390 <_get_semihosting_exts+0x44>
 80053b0:	7833      	ldrb	r3, [r6, #0]
 80053b2:	2b53      	cmp	r3, #83	; 0x53
 80053b4:	d1ec      	bne.n	8005390 <_get_semihosting_exts+0x44>
 80053b6:	7873      	ldrb	r3, [r6, #1]
 80053b8:	2b48      	cmp	r3, #72	; 0x48
 80053ba:	d1e9      	bne.n	8005390 <_get_semihosting_exts+0x44>
 80053bc:	78b3      	ldrb	r3, [r6, #2]
 80053be:	2b46      	cmp	r3, #70	; 0x46
 80053c0:	d1e6      	bne.n	8005390 <_get_semihosting_exts+0x44>
 80053c2:	78f3      	ldrb	r3, [r6, #3]
 80053c4:	2b42      	cmp	r3, #66	; 0x42
 80053c6:	d1e3      	bne.n	8005390 <_get_semihosting_exts+0x44>
 80053c8:	2201      	movs	r2, #1
 80053ca:	0020      	movs	r0, r4
 80053cc:	9901      	ldr	r1, [sp, #4]
 80053ce:	f7ff fe6f 	bl	80050b0 <_swilseek>
 80053d2:	2800      	cmp	r0, #0
 80053d4:	dbdc      	blt.n	8005390 <_get_semihosting_exts+0x44>
 80053d6:	002a      	movs	r2, r5
 80053d8:	9900      	ldr	r1, [sp, #0]
 80053da:	0020      	movs	r0, r4
 80053dc:	f7ff fe4e 	bl	800507c <_read>
 80053e0:	0005      	movs	r5, r0
 80053e2:	0020      	movs	r0, r4
 80053e4:	f7ff fede 	bl	80051a4 <_close>
 80053e8:	0028      	movs	r0, r5
 80053ea:	f7ff fe31 	bl	8005050 <checkerror>
 80053ee:	0004      	movs	r4, r0
 80053f0:	e7d3      	b.n	800539a <_get_semihosting_exts+0x4e>
 80053f2:	46c0      	nop			; (mov r8, r8)
 80053f4:	0800691a 	.word	0x0800691a

080053f8 <initialise_semihosting_exts>:
 80053f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80053fa:	2401      	movs	r4, #1
 80053fc:	2100      	movs	r1, #0
 80053fe:	4e09      	ldr	r6, [pc, #36]	; (8005424 <initialise_semihosting_exts+0x2c>)
 8005400:	4d09      	ldr	r5, [pc, #36]	; (8005428 <initialise_semihosting_exts+0x30>)
 8005402:	af01      	add	r7, sp, #4
 8005404:	0022      	movs	r2, r4
 8005406:	0038      	movs	r0, r7
 8005408:	6031      	str	r1, [r6, #0]
 800540a:	602c      	str	r4, [r5, #0]
 800540c:	f7ff ff9e 	bl	800534c <_get_semihosting_exts>
 8005410:	2800      	cmp	r0, #0
 8005412:	dd05      	ble.n	8005420 <initialise_semihosting_exts+0x28>
 8005414:	2202      	movs	r2, #2
 8005416:	783b      	ldrb	r3, [r7, #0]
 8005418:	401c      	ands	r4, r3
 800541a:	4013      	ands	r3, r2
 800541c:	6034      	str	r4, [r6, #0]
 800541e:	602b      	str	r3, [r5, #0]
 8005420:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8005422:	46c0      	nop			; (mov r8, r8)
 8005424:	2000000c 	.word	0x2000000c
 8005428:	20000010 	.word	0x20000010

0800542c <_has_ext_exit_extended>:
 800542c:	b510      	push	{r4, lr}
 800542e:	4c04      	ldr	r4, [pc, #16]	; (8005440 <_has_ext_exit_extended+0x14>)
 8005430:	6823      	ldr	r3, [r4, #0]
 8005432:	2b00      	cmp	r3, #0
 8005434:	da01      	bge.n	800543a <_has_ext_exit_extended+0xe>
 8005436:	f7ff ffdf 	bl	80053f8 <initialise_semihosting_exts>
 800543a:	6820      	ldr	r0, [r4, #0]
 800543c:	bd10      	pop	{r4, pc}
 800543e:	46c0      	nop			; (mov r8, r8)
 8005440:	2000000c 	.word	0x2000000c

08005444 <_has_ext_stdout_stderr>:
 8005444:	b510      	push	{r4, lr}
 8005446:	4c04      	ldr	r4, [pc, #16]	; (8005458 <_has_ext_stdout_stderr+0x14>)
 8005448:	6823      	ldr	r3, [r4, #0]
 800544a:	2b00      	cmp	r3, #0
 800544c:	da01      	bge.n	8005452 <_has_ext_stdout_stderr+0xe>
 800544e:	f7ff ffd3 	bl	80053f8 <initialise_semihosting_exts>
 8005452:	6820      	ldr	r0, [r4, #0]
 8005454:	bd10      	pop	{r4, pc}
 8005456:	46c0      	nop			; (mov r8, r8)
 8005458:	20000010 	.word	0x20000010

0800545c <initialise_monitor_handles>:
 800545c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800545e:	4b27      	ldr	r3, [pc, #156]	; (80054fc <initialise_monitor_handles+0xa0>)
 8005460:	b085      	sub	sp, #20
 8005462:	9301      	str	r3, [sp, #4]
 8005464:	2500      	movs	r5, #0
 8005466:	2303      	movs	r3, #3
 8005468:	ac01      	add	r4, sp, #4
 800546a:	60a3      	str	r3, [r4, #8]
 800546c:	2701      	movs	r7, #1
 800546e:	6065      	str	r5, [r4, #4]
 8005470:	1c38      	adds	r0, r7, #0
 8005472:	1c21      	adds	r1, r4, #0
 8005474:	beab      	bkpt	0x00ab
 8005476:	1c07      	adds	r7, r0, #0
 8005478:	2101      	movs	r1, #1
 800547a:	4b21      	ldr	r3, [pc, #132]	; (8005500 <initialise_monitor_handles+0xa4>)
 800547c:	4249      	negs	r1, r1
 800547e:	601f      	str	r7, [r3, #0]
 8005480:	002b      	movs	r3, r5
 8005482:	4d20      	ldr	r5, [pc, #128]	; (8005504 <initialise_monitor_handles+0xa8>)
 8005484:	00da      	lsls	r2, r3, #3
 8005486:	3301      	adds	r3, #1
 8005488:	50a9      	str	r1, [r5, r2]
 800548a:	2b14      	cmp	r3, #20
 800548c:	d1fa      	bne.n	8005484 <initialise_monitor_handles+0x28>
 800548e:	f7ff ffd9 	bl	8005444 <_has_ext_stdout_stderr>
 8005492:	2800      	cmp	r0, #0
 8005494:	d018      	beq.n	80054c8 <initialise_monitor_handles+0x6c>
 8005496:	4b19      	ldr	r3, [pc, #100]	; (80054fc <initialise_monitor_handles+0xa0>)
 8005498:	2701      	movs	r7, #1
 800549a:	9301      	str	r3, [sp, #4]
 800549c:	2303      	movs	r3, #3
 800549e:	60a3      	str	r3, [r4, #8]
 80054a0:	3301      	adds	r3, #1
 80054a2:	6063      	str	r3, [r4, #4]
 80054a4:	1c38      	adds	r0, r7, #0
 80054a6:	1c21      	adds	r1, r4, #0
 80054a8:	beab      	bkpt	0x00ab
 80054aa:	1c06      	adds	r6, r0, #0
 80054ac:	4b16      	ldr	r3, [pc, #88]	; (8005508 <initialise_monitor_handles+0xac>)
 80054ae:	4a13      	ldr	r2, [pc, #76]	; (80054fc <initialise_monitor_handles+0xa0>)
 80054b0:	601e      	str	r6, [r3, #0]
 80054b2:	2303      	movs	r3, #3
 80054b4:	9201      	str	r2, [sp, #4]
 80054b6:	60a3      	str	r3, [r4, #8]
 80054b8:	3305      	adds	r3, #5
 80054ba:	6063      	str	r3, [r4, #4]
 80054bc:	1c38      	adds	r0, r7, #0
 80054be:	1c21      	adds	r1, r4, #0
 80054c0:	beab      	bkpt	0x00ab
 80054c2:	1c04      	adds	r4, r0, #0
 80054c4:	4b11      	ldr	r3, [pc, #68]	; (800550c <initialise_monitor_handles+0xb0>)
 80054c6:	601c      	str	r4, [r3, #0]
 80054c8:	4f10      	ldr	r7, [pc, #64]	; (800550c <initialise_monitor_handles+0xb0>)
 80054ca:	683b      	ldr	r3, [r7, #0]
 80054cc:	3301      	adds	r3, #1
 80054ce:	d102      	bne.n	80054d6 <initialise_monitor_handles+0x7a>
 80054d0:	4b0d      	ldr	r3, [pc, #52]	; (8005508 <initialise_monitor_handles+0xac>)
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	603b      	str	r3, [r7, #0]
 80054d6:	2400      	movs	r4, #0
 80054d8:	4b09      	ldr	r3, [pc, #36]	; (8005500 <initialise_monitor_handles+0xa4>)
 80054da:	606c      	str	r4, [r5, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	602b      	str	r3, [r5, #0]
 80054e0:	f7ff ffb0 	bl	8005444 <_has_ext_stdout_stderr>
 80054e4:	42a0      	cmp	r0, r4
 80054e6:	d006      	beq.n	80054f6 <initialise_monitor_handles+0x9a>
 80054e8:	4b07      	ldr	r3, [pc, #28]	; (8005508 <initialise_monitor_handles+0xac>)
 80054ea:	60ec      	str	r4, [r5, #12]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	616c      	str	r4, [r5, #20]
 80054f0:	60ab      	str	r3, [r5, #8]
 80054f2:	683b      	ldr	r3, [r7, #0]
 80054f4:	612b      	str	r3, [r5, #16]
 80054f6:	b005      	add	sp, #20
 80054f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80054fa:	46c0      	nop			; (mov r8, r8)
 80054fc:	08006930 	.word	0x08006930
 8005500:	20000264 	.word	0x20000264
 8005504:	2000026c 	.word	0x2000026c
 8005508:	20000268 	.word	0x20000268
 800550c:	20000260 	.word	0x20000260

08005510 <_isatty>:
 8005510:	b570      	push	{r4, r5, r6, lr}
 8005512:	f7ff fd75 	bl	8005000 <findslot>
 8005516:	2509      	movs	r5, #9
 8005518:	1e04      	subs	r4, r0, #0
 800551a:	d104      	bne.n	8005526 <_isatty+0x16>
 800551c:	f000 f816 	bl	800554c <__errno>
 8005520:	6005      	str	r5, [r0, #0]
 8005522:	0020      	movs	r0, r4
 8005524:	bd70      	pop	{r4, r5, r6, pc}
 8005526:	1c28      	adds	r0, r5, #0
 8005528:	1c21      	adds	r1, r4, #0
 800552a:	beab      	bkpt	0x00ab
 800552c:	1c04      	adds	r4, r0, #0
 800552e:	0020      	movs	r0, r4
 8005530:	2c01      	cmp	r4, #1
 8005532:	d0f7      	beq.n	8005524 <_isatty+0x14>
 8005534:	f000 f80a 	bl	800554c <__errno>
 8005538:	2400      	movs	r4, #0
 800553a:	0005      	movs	r5, r0
 800553c:	2613      	movs	r6, #19
 800553e:	1c30      	adds	r0, r6, #0
 8005540:	1c21      	adds	r1, r4, #0
 8005542:	beab      	bkpt	0x00ab
 8005544:	1c06      	adds	r6, r0, #0
 8005546:	602e      	str	r6, [r5, #0]
 8005548:	e7eb      	b.n	8005522 <_isatty+0x12>
	...

0800554c <__errno>:
 800554c:	4b01      	ldr	r3, [pc, #4]	; (8005554 <__errno+0x8>)
 800554e:	6818      	ldr	r0, [r3, #0]
 8005550:	4770      	bx	lr
 8005552:	46c0      	nop			; (mov r8, r8)
 8005554:	20000014 	.word	0x20000014

08005558 <std>:
 8005558:	2300      	movs	r3, #0
 800555a:	b510      	push	{r4, lr}
 800555c:	0004      	movs	r4, r0
 800555e:	6003      	str	r3, [r0, #0]
 8005560:	6043      	str	r3, [r0, #4]
 8005562:	6083      	str	r3, [r0, #8]
 8005564:	8181      	strh	r1, [r0, #12]
 8005566:	6643      	str	r3, [r0, #100]	; 0x64
 8005568:	0019      	movs	r1, r3
 800556a:	81c2      	strh	r2, [r0, #14]
 800556c:	6103      	str	r3, [r0, #16]
 800556e:	6143      	str	r3, [r0, #20]
 8005570:	6183      	str	r3, [r0, #24]
 8005572:	2208      	movs	r2, #8
 8005574:	305c      	adds	r0, #92	; 0x5c
 8005576:	f000 f918 	bl	80057aa <memset>
 800557a:	4b05      	ldr	r3, [pc, #20]	; (8005590 <std+0x38>)
 800557c:	6224      	str	r4, [r4, #32]
 800557e:	6263      	str	r3, [r4, #36]	; 0x24
 8005580:	4b04      	ldr	r3, [pc, #16]	; (8005594 <std+0x3c>)
 8005582:	62a3      	str	r3, [r4, #40]	; 0x28
 8005584:	4b04      	ldr	r3, [pc, #16]	; (8005598 <std+0x40>)
 8005586:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005588:	4b04      	ldr	r3, [pc, #16]	; (800559c <std+0x44>)
 800558a:	6323      	str	r3, [r4, #48]	; 0x30
 800558c:	bd10      	pop	{r4, pc}
 800558e:	46c0      	nop			; (mov r8, r8)
 8005590:	08005a9d 	.word	0x08005a9d
 8005594:	08005ac5 	.word	0x08005ac5
 8005598:	08005afd 	.word	0x08005afd
 800559c:	08005b29 	.word	0x08005b29

080055a0 <_cleanup_r>:
 80055a0:	b510      	push	{r4, lr}
 80055a2:	4902      	ldr	r1, [pc, #8]	; (80055ac <_cleanup_r+0xc>)
 80055a4:	f000 f8ba 	bl	800571c <_fwalk_reent>
 80055a8:	bd10      	pop	{r4, pc}
 80055aa:	46c0      	nop			; (mov r8, r8)
 80055ac:	08005e71 	.word	0x08005e71

080055b0 <__sfmoreglue>:
 80055b0:	b570      	push	{r4, r5, r6, lr}
 80055b2:	2568      	movs	r5, #104	; 0x68
 80055b4:	1e4a      	subs	r2, r1, #1
 80055b6:	4355      	muls	r5, r2
 80055b8:	000e      	movs	r6, r1
 80055ba:	0029      	movs	r1, r5
 80055bc:	3174      	adds	r1, #116	; 0x74
 80055be:	f000 f91f 	bl	8005800 <_malloc_r>
 80055c2:	1e04      	subs	r4, r0, #0
 80055c4:	d008      	beq.n	80055d8 <__sfmoreglue+0x28>
 80055c6:	2100      	movs	r1, #0
 80055c8:	002a      	movs	r2, r5
 80055ca:	6001      	str	r1, [r0, #0]
 80055cc:	6046      	str	r6, [r0, #4]
 80055ce:	300c      	adds	r0, #12
 80055d0:	60a0      	str	r0, [r4, #8]
 80055d2:	3268      	adds	r2, #104	; 0x68
 80055d4:	f000 f8e9 	bl	80057aa <memset>
 80055d8:	0020      	movs	r0, r4
 80055da:	bd70      	pop	{r4, r5, r6, pc}

080055dc <__sfp_lock_acquire>:
 80055dc:	b510      	push	{r4, lr}
 80055de:	4802      	ldr	r0, [pc, #8]	; (80055e8 <__sfp_lock_acquire+0xc>)
 80055e0:	f000 f8e1 	bl	80057a6 <__retarget_lock_acquire_recursive>
 80055e4:	bd10      	pop	{r4, pc}
 80055e6:	46c0      	nop			; (mov r8, r8)
 80055e8:	2000030d 	.word	0x2000030d

080055ec <__sfp_lock_release>:
 80055ec:	b510      	push	{r4, lr}
 80055ee:	4802      	ldr	r0, [pc, #8]	; (80055f8 <__sfp_lock_release+0xc>)
 80055f0:	f000 f8da 	bl	80057a8 <__retarget_lock_release_recursive>
 80055f4:	bd10      	pop	{r4, pc}
 80055f6:	46c0      	nop			; (mov r8, r8)
 80055f8:	2000030d 	.word	0x2000030d

080055fc <__sinit_lock_acquire>:
 80055fc:	b510      	push	{r4, lr}
 80055fe:	4802      	ldr	r0, [pc, #8]	; (8005608 <__sinit_lock_acquire+0xc>)
 8005600:	f000 f8d1 	bl	80057a6 <__retarget_lock_acquire_recursive>
 8005604:	bd10      	pop	{r4, pc}
 8005606:	46c0      	nop			; (mov r8, r8)
 8005608:	2000030e 	.word	0x2000030e

0800560c <__sinit_lock_release>:
 800560c:	b510      	push	{r4, lr}
 800560e:	4802      	ldr	r0, [pc, #8]	; (8005618 <__sinit_lock_release+0xc>)
 8005610:	f000 f8ca 	bl	80057a8 <__retarget_lock_release_recursive>
 8005614:	bd10      	pop	{r4, pc}
 8005616:	46c0      	nop			; (mov r8, r8)
 8005618:	2000030e 	.word	0x2000030e

0800561c <__sinit>:
 800561c:	b513      	push	{r0, r1, r4, lr}
 800561e:	0004      	movs	r4, r0
 8005620:	f7ff ffec 	bl	80055fc <__sinit_lock_acquire>
 8005624:	69a3      	ldr	r3, [r4, #24]
 8005626:	2b00      	cmp	r3, #0
 8005628:	d002      	beq.n	8005630 <__sinit+0x14>
 800562a:	f7ff ffef 	bl	800560c <__sinit_lock_release>
 800562e:	bd13      	pop	{r0, r1, r4, pc}
 8005630:	64a3      	str	r3, [r4, #72]	; 0x48
 8005632:	64e3      	str	r3, [r4, #76]	; 0x4c
 8005634:	6523      	str	r3, [r4, #80]	; 0x50
 8005636:	4b13      	ldr	r3, [pc, #76]	; (8005684 <__sinit+0x68>)
 8005638:	4a13      	ldr	r2, [pc, #76]	; (8005688 <__sinit+0x6c>)
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	62a2      	str	r2, [r4, #40]	; 0x28
 800563e:	9301      	str	r3, [sp, #4]
 8005640:	42a3      	cmp	r3, r4
 8005642:	d101      	bne.n	8005648 <__sinit+0x2c>
 8005644:	2301      	movs	r3, #1
 8005646:	61a3      	str	r3, [r4, #24]
 8005648:	0020      	movs	r0, r4
 800564a:	f000 f81f 	bl	800568c <__sfp>
 800564e:	6060      	str	r0, [r4, #4]
 8005650:	0020      	movs	r0, r4
 8005652:	f000 f81b 	bl	800568c <__sfp>
 8005656:	60a0      	str	r0, [r4, #8]
 8005658:	0020      	movs	r0, r4
 800565a:	f000 f817 	bl	800568c <__sfp>
 800565e:	2200      	movs	r2, #0
 8005660:	2104      	movs	r1, #4
 8005662:	60e0      	str	r0, [r4, #12]
 8005664:	6860      	ldr	r0, [r4, #4]
 8005666:	f7ff ff77 	bl	8005558 <std>
 800566a:	2201      	movs	r2, #1
 800566c:	2109      	movs	r1, #9
 800566e:	68a0      	ldr	r0, [r4, #8]
 8005670:	f7ff ff72 	bl	8005558 <std>
 8005674:	2202      	movs	r2, #2
 8005676:	2112      	movs	r1, #18
 8005678:	68e0      	ldr	r0, [r4, #12]
 800567a:	f7ff ff6d 	bl	8005558 <std>
 800567e:	2301      	movs	r3, #1
 8005680:	61a3      	str	r3, [r4, #24]
 8005682:	e7d2      	b.n	800562a <__sinit+0xe>
 8005684:	08006994 	.word	0x08006994
 8005688:	080055a1 	.word	0x080055a1

0800568c <__sfp>:
 800568c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800568e:	0007      	movs	r7, r0
 8005690:	f7ff ffa4 	bl	80055dc <__sfp_lock_acquire>
 8005694:	4b1f      	ldr	r3, [pc, #124]	; (8005714 <__sfp+0x88>)
 8005696:	681e      	ldr	r6, [r3, #0]
 8005698:	69b3      	ldr	r3, [r6, #24]
 800569a:	2b00      	cmp	r3, #0
 800569c:	d102      	bne.n	80056a4 <__sfp+0x18>
 800569e:	0030      	movs	r0, r6
 80056a0:	f7ff ffbc 	bl	800561c <__sinit>
 80056a4:	3648      	adds	r6, #72	; 0x48
 80056a6:	68b4      	ldr	r4, [r6, #8]
 80056a8:	6873      	ldr	r3, [r6, #4]
 80056aa:	3b01      	subs	r3, #1
 80056ac:	d504      	bpl.n	80056b8 <__sfp+0x2c>
 80056ae:	6833      	ldr	r3, [r6, #0]
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d022      	beq.n	80056fa <__sfp+0x6e>
 80056b4:	6836      	ldr	r6, [r6, #0]
 80056b6:	e7f6      	b.n	80056a6 <__sfp+0x1a>
 80056b8:	220c      	movs	r2, #12
 80056ba:	5ea5      	ldrsh	r5, [r4, r2]
 80056bc:	2d00      	cmp	r5, #0
 80056be:	d11a      	bne.n	80056f6 <__sfp+0x6a>
 80056c0:	0020      	movs	r0, r4
 80056c2:	4b15      	ldr	r3, [pc, #84]	; (8005718 <__sfp+0x8c>)
 80056c4:	3058      	adds	r0, #88	; 0x58
 80056c6:	60e3      	str	r3, [r4, #12]
 80056c8:	6665      	str	r5, [r4, #100]	; 0x64
 80056ca:	f000 f86b 	bl	80057a4 <__retarget_lock_init_recursive>
 80056ce:	f7ff ff8d 	bl	80055ec <__sfp_lock_release>
 80056d2:	0020      	movs	r0, r4
 80056d4:	2208      	movs	r2, #8
 80056d6:	0029      	movs	r1, r5
 80056d8:	6025      	str	r5, [r4, #0]
 80056da:	60a5      	str	r5, [r4, #8]
 80056dc:	6065      	str	r5, [r4, #4]
 80056de:	6125      	str	r5, [r4, #16]
 80056e0:	6165      	str	r5, [r4, #20]
 80056e2:	61a5      	str	r5, [r4, #24]
 80056e4:	305c      	adds	r0, #92	; 0x5c
 80056e6:	f000 f860 	bl	80057aa <memset>
 80056ea:	6365      	str	r5, [r4, #52]	; 0x34
 80056ec:	63a5      	str	r5, [r4, #56]	; 0x38
 80056ee:	64a5      	str	r5, [r4, #72]	; 0x48
 80056f0:	64e5      	str	r5, [r4, #76]	; 0x4c
 80056f2:	0020      	movs	r0, r4
 80056f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80056f6:	3468      	adds	r4, #104	; 0x68
 80056f8:	e7d7      	b.n	80056aa <__sfp+0x1e>
 80056fa:	2104      	movs	r1, #4
 80056fc:	0038      	movs	r0, r7
 80056fe:	f7ff ff57 	bl	80055b0 <__sfmoreglue>
 8005702:	1e04      	subs	r4, r0, #0
 8005704:	6030      	str	r0, [r6, #0]
 8005706:	d1d5      	bne.n	80056b4 <__sfp+0x28>
 8005708:	f7ff ff70 	bl	80055ec <__sfp_lock_release>
 800570c:	230c      	movs	r3, #12
 800570e:	603b      	str	r3, [r7, #0]
 8005710:	e7ef      	b.n	80056f2 <__sfp+0x66>
 8005712:	46c0      	nop			; (mov r8, r8)
 8005714:	08006994 	.word	0x08006994
 8005718:	ffff0001 	.word	0xffff0001

0800571c <_fwalk_reent>:
 800571c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800571e:	0004      	movs	r4, r0
 8005720:	0006      	movs	r6, r0
 8005722:	2700      	movs	r7, #0
 8005724:	9101      	str	r1, [sp, #4]
 8005726:	3448      	adds	r4, #72	; 0x48
 8005728:	6863      	ldr	r3, [r4, #4]
 800572a:	68a5      	ldr	r5, [r4, #8]
 800572c:	9300      	str	r3, [sp, #0]
 800572e:	9b00      	ldr	r3, [sp, #0]
 8005730:	3b01      	subs	r3, #1
 8005732:	9300      	str	r3, [sp, #0]
 8005734:	d504      	bpl.n	8005740 <_fwalk_reent+0x24>
 8005736:	6824      	ldr	r4, [r4, #0]
 8005738:	2c00      	cmp	r4, #0
 800573a:	d1f5      	bne.n	8005728 <_fwalk_reent+0xc>
 800573c:	0038      	movs	r0, r7
 800573e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005740:	89ab      	ldrh	r3, [r5, #12]
 8005742:	2b01      	cmp	r3, #1
 8005744:	d908      	bls.n	8005758 <_fwalk_reent+0x3c>
 8005746:	220e      	movs	r2, #14
 8005748:	5eab      	ldrsh	r3, [r5, r2]
 800574a:	3301      	adds	r3, #1
 800574c:	d004      	beq.n	8005758 <_fwalk_reent+0x3c>
 800574e:	0029      	movs	r1, r5
 8005750:	0030      	movs	r0, r6
 8005752:	9b01      	ldr	r3, [sp, #4]
 8005754:	4798      	blx	r3
 8005756:	4307      	orrs	r7, r0
 8005758:	3568      	adds	r5, #104	; 0x68
 800575a:	e7e8      	b.n	800572e <_fwalk_reent+0x12>

0800575c <__libc_init_array>:
 800575c:	b570      	push	{r4, r5, r6, lr}
 800575e:	2600      	movs	r6, #0
 8005760:	4d0c      	ldr	r5, [pc, #48]	; (8005794 <__libc_init_array+0x38>)
 8005762:	4c0d      	ldr	r4, [pc, #52]	; (8005798 <__libc_init_array+0x3c>)
 8005764:	1b64      	subs	r4, r4, r5
 8005766:	10a4      	asrs	r4, r4, #2
 8005768:	42a6      	cmp	r6, r4
 800576a:	d109      	bne.n	8005780 <__libc_init_array+0x24>
 800576c:	2600      	movs	r6, #0
 800576e:	f001 f857 	bl	8006820 <_init>
 8005772:	4d0a      	ldr	r5, [pc, #40]	; (800579c <__libc_init_array+0x40>)
 8005774:	4c0a      	ldr	r4, [pc, #40]	; (80057a0 <__libc_init_array+0x44>)
 8005776:	1b64      	subs	r4, r4, r5
 8005778:	10a4      	asrs	r4, r4, #2
 800577a:	42a6      	cmp	r6, r4
 800577c:	d105      	bne.n	800578a <__libc_init_array+0x2e>
 800577e:	bd70      	pop	{r4, r5, r6, pc}
 8005780:	00b3      	lsls	r3, r6, #2
 8005782:	58eb      	ldr	r3, [r5, r3]
 8005784:	4798      	blx	r3
 8005786:	3601      	adds	r6, #1
 8005788:	e7ee      	b.n	8005768 <__libc_init_array+0xc>
 800578a:	00b3      	lsls	r3, r6, #2
 800578c:	58eb      	ldr	r3, [r5, r3]
 800578e:	4798      	blx	r3
 8005790:	3601      	adds	r6, #1
 8005792:	e7f2      	b.n	800577a <__libc_init_array+0x1e>
 8005794:	08006a84 	.word	0x08006a84
 8005798:	08006a84 	.word	0x08006a84
 800579c:	08006a84 	.word	0x08006a84
 80057a0:	08006a88 	.word	0x08006a88

080057a4 <__retarget_lock_init_recursive>:
 80057a4:	4770      	bx	lr

080057a6 <__retarget_lock_acquire_recursive>:
 80057a6:	4770      	bx	lr

080057a8 <__retarget_lock_release_recursive>:
 80057a8:	4770      	bx	lr

080057aa <memset>:
 80057aa:	0003      	movs	r3, r0
 80057ac:	1882      	adds	r2, r0, r2
 80057ae:	4293      	cmp	r3, r2
 80057b0:	d100      	bne.n	80057b4 <memset+0xa>
 80057b2:	4770      	bx	lr
 80057b4:	7019      	strb	r1, [r3, #0]
 80057b6:	3301      	adds	r3, #1
 80057b8:	e7f9      	b.n	80057ae <memset+0x4>
	...

080057bc <sbrk_aligned>:
 80057bc:	b570      	push	{r4, r5, r6, lr}
 80057be:	4e0f      	ldr	r6, [pc, #60]	; (80057fc <sbrk_aligned+0x40>)
 80057c0:	000d      	movs	r5, r1
 80057c2:	6831      	ldr	r1, [r6, #0]
 80057c4:	0004      	movs	r4, r0
 80057c6:	2900      	cmp	r1, #0
 80057c8:	d102      	bne.n	80057d0 <sbrk_aligned+0x14>
 80057ca:	f000 f955 	bl	8005a78 <_sbrk_r>
 80057ce:	6030      	str	r0, [r6, #0]
 80057d0:	0029      	movs	r1, r5
 80057d2:	0020      	movs	r0, r4
 80057d4:	f000 f950 	bl	8005a78 <_sbrk_r>
 80057d8:	1c43      	adds	r3, r0, #1
 80057da:	d00a      	beq.n	80057f2 <sbrk_aligned+0x36>
 80057dc:	2303      	movs	r3, #3
 80057de:	1cc5      	adds	r5, r0, #3
 80057e0:	439d      	bics	r5, r3
 80057e2:	42a8      	cmp	r0, r5
 80057e4:	d007      	beq.n	80057f6 <sbrk_aligned+0x3a>
 80057e6:	1a29      	subs	r1, r5, r0
 80057e8:	0020      	movs	r0, r4
 80057ea:	f000 f945 	bl	8005a78 <_sbrk_r>
 80057ee:	1c43      	adds	r3, r0, #1
 80057f0:	d101      	bne.n	80057f6 <sbrk_aligned+0x3a>
 80057f2:	2501      	movs	r5, #1
 80057f4:	426d      	negs	r5, r5
 80057f6:	0028      	movs	r0, r5
 80057f8:	bd70      	pop	{r4, r5, r6, pc}
 80057fa:	46c0      	nop			; (mov r8, r8)
 80057fc:	20000314 	.word	0x20000314

08005800 <_malloc_r>:
 8005800:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005802:	2203      	movs	r2, #3
 8005804:	1ccb      	adds	r3, r1, #3
 8005806:	4393      	bics	r3, r2
 8005808:	3308      	adds	r3, #8
 800580a:	0006      	movs	r6, r0
 800580c:	001f      	movs	r7, r3
 800580e:	2b0c      	cmp	r3, #12
 8005810:	d232      	bcs.n	8005878 <_malloc_r+0x78>
 8005812:	270c      	movs	r7, #12
 8005814:	42b9      	cmp	r1, r7
 8005816:	d831      	bhi.n	800587c <_malloc_r+0x7c>
 8005818:	0030      	movs	r0, r6
 800581a:	f000 fc03 	bl	8006024 <__malloc_lock>
 800581e:	4d32      	ldr	r5, [pc, #200]	; (80058e8 <_malloc_r+0xe8>)
 8005820:	682b      	ldr	r3, [r5, #0]
 8005822:	001c      	movs	r4, r3
 8005824:	2c00      	cmp	r4, #0
 8005826:	d12e      	bne.n	8005886 <_malloc_r+0x86>
 8005828:	0039      	movs	r1, r7
 800582a:	0030      	movs	r0, r6
 800582c:	f7ff ffc6 	bl	80057bc <sbrk_aligned>
 8005830:	0004      	movs	r4, r0
 8005832:	1c43      	adds	r3, r0, #1
 8005834:	d11e      	bne.n	8005874 <_malloc_r+0x74>
 8005836:	682c      	ldr	r4, [r5, #0]
 8005838:	0025      	movs	r5, r4
 800583a:	2d00      	cmp	r5, #0
 800583c:	d14a      	bne.n	80058d4 <_malloc_r+0xd4>
 800583e:	6823      	ldr	r3, [r4, #0]
 8005840:	0029      	movs	r1, r5
 8005842:	18e3      	adds	r3, r4, r3
 8005844:	0030      	movs	r0, r6
 8005846:	9301      	str	r3, [sp, #4]
 8005848:	f000 f916 	bl	8005a78 <_sbrk_r>
 800584c:	9b01      	ldr	r3, [sp, #4]
 800584e:	4283      	cmp	r3, r0
 8005850:	d143      	bne.n	80058da <_malloc_r+0xda>
 8005852:	6823      	ldr	r3, [r4, #0]
 8005854:	3703      	adds	r7, #3
 8005856:	1aff      	subs	r7, r7, r3
 8005858:	2303      	movs	r3, #3
 800585a:	439f      	bics	r7, r3
 800585c:	3708      	adds	r7, #8
 800585e:	2f0c      	cmp	r7, #12
 8005860:	d200      	bcs.n	8005864 <_malloc_r+0x64>
 8005862:	270c      	movs	r7, #12
 8005864:	0039      	movs	r1, r7
 8005866:	0030      	movs	r0, r6
 8005868:	f7ff ffa8 	bl	80057bc <sbrk_aligned>
 800586c:	1c43      	adds	r3, r0, #1
 800586e:	d034      	beq.n	80058da <_malloc_r+0xda>
 8005870:	6823      	ldr	r3, [r4, #0]
 8005872:	19df      	adds	r7, r3, r7
 8005874:	6027      	str	r7, [r4, #0]
 8005876:	e013      	b.n	80058a0 <_malloc_r+0xa0>
 8005878:	2b00      	cmp	r3, #0
 800587a:	dacb      	bge.n	8005814 <_malloc_r+0x14>
 800587c:	230c      	movs	r3, #12
 800587e:	2500      	movs	r5, #0
 8005880:	6033      	str	r3, [r6, #0]
 8005882:	0028      	movs	r0, r5
 8005884:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005886:	6822      	ldr	r2, [r4, #0]
 8005888:	1bd1      	subs	r1, r2, r7
 800588a:	d420      	bmi.n	80058ce <_malloc_r+0xce>
 800588c:	290b      	cmp	r1, #11
 800588e:	d917      	bls.n	80058c0 <_malloc_r+0xc0>
 8005890:	19e2      	adds	r2, r4, r7
 8005892:	6027      	str	r7, [r4, #0]
 8005894:	42a3      	cmp	r3, r4
 8005896:	d111      	bne.n	80058bc <_malloc_r+0xbc>
 8005898:	602a      	str	r2, [r5, #0]
 800589a:	6863      	ldr	r3, [r4, #4]
 800589c:	6011      	str	r1, [r2, #0]
 800589e:	6053      	str	r3, [r2, #4]
 80058a0:	0030      	movs	r0, r6
 80058a2:	0025      	movs	r5, r4
 80058a4:	f000 fbc6 	bl	8006034 <__malloc_unlock>
 80058a8:	2207      	movs	r2, #7
 80058aa:	350b      	adds	r5, #11
 80058ac:	1d23      	adds	r3, r4, #4
 80058ae:	4395      	bics	r5, r2
 80058b0:	1aea      	subs	r2, r5, r3
 80058b2:	429d      	cmp	r5, r3
 80058b4:	d0e5      	beq.n	8005882 <_malloc_r+0x82>
 80058b6:	1b5b      	subs	r3, r3, r5
 80058b8:	50a3      	str	r3, [r4, r2]
 80058ba:	e7e2      	b.n	8005882 <_malloc_r+0x82>
 80058bc:	605a      	str	r2, [r3, #4]
 80058be:	e7ec      	b.n	800589a <_malloc_r+0x9a>
 80058c0:	6862      	ldr	r2, [r4, #4]
 80058c2:	42a3      	cmp	r3, r4
 80058c4:	d101      	bne.n	80058ca <_malloc_r+0xca>
 80058c6:	602a      	str	r2, [r5, #0]
 80058c8:	e7ea      	b.n	80058a0 <_malloc_r+0xa0>
 80058ca:	605a      	str	r2, [r3, #4]
 80058cc:	e7e8      	b.n	80058a0 <_malloc_r+0xa0>
 80058ce:	0023      	movs	r3, r4
 80058d0:	6864      	ldr	r4, [r4, #4]
 80058d2:	e7a7      	b.n	8005824 <_malloc_r+0x24>
 80058d4:	002c      	movs	r4, r5
 80058d6:	686d      	ldr	r5, [r5, #4]
 80058d8:	e7af      	b.n	800583a <_malloc_r+0x3a>
 80058da:	230c      	movs	r3, #12
 80058dc:	0030      	movs	r0, r6
 80058de:	6033      	str	r3, [r6, #0]
 80058e0:	f000 fba8 	bl	8006034 <__malloc_unlock>
 80058e4:	e7cd      	b.n	8005882 <_malloc_r+0x82>
 80058e6:	46c0      	nop			; (mov r8, r8)
 80058e8:	20000310 	.word	0x20000310

080058ec <iprintf>:
 80058ec:	b40f      	push	{r0, r1, r2, r3}
 80058ee:	4b0b      	ldr	r3, [pc, #44]	; (800591c <iprintf+0x30>)
 80058f0:	b513      	push	{r0, r1, r4, lr}
 80058f2:	681c      	ldr	r4, [r3, #0]
 80058f4:	2c00      	cmp	r4, #0
 80058f6:	d005      	beq.n	8005904 <iprintf+0x18>
 80058f8:	69a3      	ldr	r3, [r4, #24]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d102      	bne.n	8005904 <iprintf+0x18>
 80058fe:	0020      	movs	r0, r4
 8005900:	f7ff fe8c 	bl	800561c <__sinit>
 8005904:	ab05      	add	r3, sp, #20
 8005906:	0020      	movs	r0, r4
 8005908:	9a04      	ldr	r2, [sp, #16]
 800590a:	68a1      	ldr	r1, [r4, #8]
 800590c:	9301      	str	r3, [sp, #4]
 800590e:	f000 fc0b 	bl	8006128 <_vfiprintf_r>
 8005912:	bc16      	pop	{r1, r2, r4}
 8005914:	bc08      	pop	{r3}
 8005916:	b004      	add	sp, #16
 8005918:	4718      	bx	r3
 800591a:	46c0      	nop			; (mov r8, r8)
 800591c:	20000014 	.word	0x20000014

08005920 <_puts_r>:
 8005920:	b570      	push	{r4, r5, r6, lr}
 8005922:	0005      	movs	r5, r0
 8005924:	000e      	movs	r6, r1
 8005926:	2800      	cmp	r0, #0
 8005928:	d004      	beq.n	8005934 <_puts_r+0x14>
 800592a:	6983      	ldr	r3, [r0, #24]
 800592c:	2b00      	cmp	r3, #0
 800592e:	d101      	bne.n	8005934 <_puts_r+0x14>
 8005930:	f7ff fe74 	bl	800561c <__sinit>
 8005934:	69ab      	ldr	r3, [r5, #24]
 8005936:	68ac      	ldr	r4, [r5, #8]
 8005938:	2b00      	cmp	r3, #0
 800593a:	d102      	bne.n	8005942 <_puts_r+0x22>
 800593c:	0028      	movs	r0, r5
 800593e:	f7ff fe6d 	bl	800561c <__sinit>
 8005942:	4b2d      	ldr	r3, [pc, #180]	; (80059f8 <_puts_r+0xd8>)
 8005944:	429c      	cmp	r4, r3
 8005946:	d122      	bne.n	800598e <_puts_r+0x6e>
 8005948:	686c      	ldr	r4, [r5, #4]
 800594a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800594c:	07db      	lsls	r3, r3, #31
 800594e:	d405      	bmi.n	800595c <_puts_r+0x3c>
 8005950:	89a3      	ldrh	r3, [r4, #12]
 8005952:	059b      	lsls	r3, r3, #22
 8005954:	d402      	bmi.n	800595c <_puts_r+0x3c>
 8005956:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005958:	f7ff ff25 	bl	80057a6 <__retarget_lock_acquire_recursive>
 800595c:	89a3      	ldrh	r3, [r4, #12]
 800595e:	071b      	lsls	r3, r3, #28
 8005960:	d502      	bpl.n	8005968 <_puts_r+0x48>
 8005962:	6923      	ldr	r3, [r4, #16]
 8005964:	2b00      	cmp	r3, #0
 8005966:	d129      	bne.n	80059bc <_puts_r+0x9c>
 8005968:	0021      	movs	r1, r4
 800596a:	0028      	movs	r0, r5
 800596c:	f000 f94c 	bl	8005c08 <__swsetup_r>
 8005970:	2800      	cmp	r0, #0
 8005972:	d023      	beq.n	80059bc <_puts_r+0x9c>
 8005974:	2501      	movs	r5, #1
 8005976:	426d      	negs	r5, r5
 8005978:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800597a:	07db      	lsls	r3, r3, #31
 800597c:	d405      	bmi.n	800598a <_puts_r+0x6a>
 800597e:	89a3      	ldrh	r3, [r4, #12]
 8005980:	059b      	lsls	r3, r3, #22
 8005982:	d402      	bmi.n	800598a <_puts_r+0x6a>
 8005984:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005986:	f7ff ff0f 	bl	80057a8 <__retarget_lock_release_recursive>
 800598a:	0028      	movs	r0, r5
 800598c:	bd70      	pop	{r4, r5, r6, pc}
 800598e:	4b1b      	ldr	r3, [pc, #108]	; (80059fc <_puts_r+0xdc>)
 8005990:	429c      	cmp	r4, r3
 8005992:	d101      	bne.n	8005998 <_puts_r+0x78>
 8005994:	68ac      	ldr	r4, [r5, #8]
 8005996:	e7d8      	b.n	800594a <_puts_r+0x2a>
 8005998:	4b19      	ldr	r3, [pc, #100]	; (8005a00 <_puts_r+0xe0>)
 800599a:	429c      	cmp	r4, r3
 800599c:	d1d5      	bne.n	800594a <_puts_r+0x2a>
 800599e:	68ec      	ldr	r4, [r5, #12]
 80059a0:	e7d3      	b.n	800594a <_puts_r+0x2a>
 80059a2:	3601      	adds	r6, #1
 80059a4:	60a3      	str	r3, [r4, #8]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	da04      	bge.n	80059b4 <_puts_r+0x94>
 80059aa:	69a2      	ldr	r2, [r4, #24]
 80059ac:	429a      	cmp	r2, r3
 80059ae:	dc16      	bgt.n	80059de <_puts_r+0xbe>
 80059b0:	290a      	cmp	r1, #10
 80059b2:	d014      	beq.n	80059de <_puts_r+0xbe>
 80059b4:	6823      	ldr	r3, [r4, #0]
 80059b6:	1c5a      	adds	r2, r3, #1
 80059b8:	6022      	str	r2, [r4, #0]
 80059ba:	7019      	strb	r1, [r3, #0]
 80059bc:	68a3      	ldr	r3, [r4, #8]
 80059be:	7831      	ldrb	r1, [r6, #0]
 80059c0:	3b01      	subs	r3, #1
 80059c2:	2900      	cmp	r1, #0
 80059c4:	d1ed      	bne.n	80059a2 <_puts_r+0x82>
 80059c6:	60a3      	str	r3, [r4, #8]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	da0f      	bge.n	80059ec <_puts_r+0xcc>
 80059cc:	0028      	movs	r0, r5
 80059ce:	0022      	movs	r2, r4
 80059d0:	310a      	adds	r1, #10
 80059d2:	f000 f8af 	bl	8005b34 <__swbuf_r>
 80059d6:	250a      	movs	r5, #10
 80059d8:	1c43      	adds	r3, r0, #1
 80059da:	d1cd      	bne.n	8005978 <_puts_r+0x58>
 80059dc:	e7ca      	b.n	8005974 <_puts_r+0x54>
 80059de:	0022      	movs	r2, r4
 80059e0:	0028      	movs	r0, r5
 80059e2:	f000 f8a7 	bl	8005b34 <__swbuf_r>
 80059e6:	1c43      	adds	r3, r0, #1
 80059e8:	d1e8      	bne.n	80059bc <_puts_r+0x9c>
 80059ea:	e7c3      	b.n	8005974 <_puts_r+0x54>
 80059ec:	250a      	movs	r5, #10
 80059ee:	6823      	ldr	r3, [r4, #0]
 80059f0:	1c5a      	adds	r2, r3, #1
 80059f2:	6022      	str	r2, [r4, #0]
 80059f4:	701d      	strb	r5, [r3, #0]
 80059f6:	e7bf      	b.n	8005978 <_puts_r+0x58>
 80059f8:	08006954 	.word	0x08006954
 80059fc:	08006974 	.word	0x08006974
 8005a00:	08006934 	.word	0x08006934

08005a04 <puts>:
 8005a04:	b510      	push	{r4, lr}
 8005a06:	4b03      	ldr	r3, [pc, #12]	; (8005a14 <puts+0x10>)
 8005a08:	0001      	movs	r1, r0
 8005a0a:	6818      	ldr	r0, [r3, #0]
 8005a0c:	f7ff ff88 	bl	8005920 <_puts_r>
 8005a10:	bd10      	pop	{r4, pc}
 8005a12:	46c0      	nop			; (mov r8, r8)
 8005a14:	20000014 	.word	0x20000014

08005a18 <srand>:
 8005a18:	4b11      	ldr	r3, [pc, #68]	; (8005a60 <srand+0x48>)
 8005a1a:	b570      	push	{r4, r5, r6, lr}
 8005a1c:	681d      	ldr	r5, [r3, #0]
 8005a1e:	0004      	movs	r4, r0
 8005a20:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d116      	bne.n	8005a54 <srand+0x3c>
 8005a26:	2018      	movs	r0, #24
 8005a28:	f000 faf2 	bl	8006010 <malloc>
 8005a2c:	1e02      	subs	r2, r0, #0
 8005a2e:	63a8      	str	r0, [r5, #56]	; 0x38
 8005a30:	d104      	bne.n	8005a3c <srand+0x24>
 8005a32:	2142      	movs	r1, #66	; 0x42
 8005a34:	4b0b      	ldr	r3, [pc, #44]	; (8005a64 <srand+0x4c>)
 8005a36:	480c      	ldr	r0, [pc, #48]	; (8005a68 <srand+0x50>)
 8005a38:	f000 f95e 	bl	8005cf8 <__assert_func>
 8005a3c:	4b0b      	ldr	r3, [pc, #44]	; (8005a6c <srand+0x54>)
 8005a3e:	2100      	movs	r1, #0
 8005a40:	6003      	str	r3, [r0, #0]
 8005a42:	4b0b      	ldr	r3, [pc, #44]	; (8005a70 <srand+0x58>)
 8005a44:	6043      	str	r3, [r0, #4]
 8005a46:	4b0b      	ldr	r3, [pc, #44]	; (8005a74 <srand+0x5c>)
 8005a48:	6083      	str	r3, [r0, #8]
 8005a4a:	230b      	movs	r3, #11
 8005a4c:	8183      	strh	r3, [r0, #12]
 8005a4e:	2001      	movs	r0, #1
 8005a50:	6110      	str	r0, [r2, #16]
 8005a52:	6151      	str	r1, [r2, #20]
 8005a54:	2200      	movs	r2, #0
 8005a56:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8005a58:	611c      	str	r4, [r3, #16]
 8005a5a:	615a      	str	r2, [r3, #20]
 8005a5c:	bd70      	pop	{r4, r5, r6, pc}
 8005a5e:	46c0      	nop			; (mov r8, r8)
 8005a60:	20000014 	.word	0x20000014
 8005a64:	08006998 	.word	0x08006998
 8005a68:	080069af 	.word	0x080069af
 8005a6c:	abcd330e 	.word	0xabcd330e
 8005a70:	e66d1234 	.word	0xe66d1234
 8005a74:	0005deec 	.word	0x0005deec

08005a78 <_sbrk_r>:
 8005a78:	2300      	movs	r3, #0
 8005a7a:	b570      	push	{r4, r5, r6, lr}
 8005a7c:	4d06      	ldr	r5, [pc, #24]	; (8005a98 <_sbrk_r+0x20>)
 8005a7e:	0004      	movs	r4, r0
 8005a80:	0008      	movs	r0, r1
 8005a82:	602b      	str	r3, [r5, #0]
 8005a84:	f7fb f9c8 	bl	8000e18 <_sbrk>
 8005a88:	1c43      	adds	r3, r0, #1
 8005a8a:	d103      	bne.n	8005a94 <_sbrk_r+0x1c>
 8005a8c:	682b      	ldr	r3, [r5, #0]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d000      	beq.n	8005a94 <_sbrk_r+0x1c>
 8005a92:	6023      	str	r3, [r4, #0]
 8005a94:	bd70      	pop	{r4, r5, r6, pc}
 8005a96:	46c0      	nop			; (mov r8, r8)
 8005a98:	20000318 	.word	0x20000318

08005a9c <__sread>:
 8005a9c:	b570      	push	{r4, r5, r6, lr}
 8005a9e:	000c      	movs	r4, r1
 8005aa0:	250e      	movs	r5, #14
 8005aa2:	5f49      	ldrsh	r1, [r1, r5]
 8005aa4:	f000 fdfc 	bl	80066a0 <_read_r>
 8005aa8:	2800      	cmp	r0, #0
 8005aaa:	db03      	blt.n	8005ab4 <__sread+0x18>
 8005aac:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005aae:	181b      	adds	r3, r3, r0
 8005ab0:	6563      	str	r3, [r4, #84]	; 0x54
 8005ab2:	bd70      	pop	{r4, r5, r6, pc}
 8005ab4:	89a3      	ldrh	r3, [r4, #12]
 8005ab6:	4a02      	ldr	r2, [pc, #8]	; (8005ac0 <__sread+0x24>)
 8005ab8:	4013      	ands	r3, r2
 8005aba:	81a3      	strh	r3, [r4, #12]
 8005abc:	e7f9      	b.n	8005ab2 <__sread+0x16>
 8005abe:	46c0      	nop			; (mov r8, r8)
 8005ac0:	ffffefff 	.word	0xffffefff

08005ac4 <__swrite>:
 8005ac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ac6:	001f      	movs	r7, r3
 8005ac8:	898b      	ldrh	r3, [r1, #12]
 8005aca:	0005      	movs	r5, r0
 8005acc:	000c      	movs	r4, r1
 8005ace:	0016      	movs	r6, r2
 8005ad0:	05db      	lsls	r3, r3, #23
 8005ad2:	d505      	bpl.n	8005ae0 <__swrite+0x1c>
 8005ad4:	230e      	movs	r3, #14
 8005ad6:	5ec9      	ldrsh	r1, [r1, r3]
 8005ad8:	2200      	movs	r2, #0
 8005ada:	2302      	movs	r3, #2
 8005adc:	f000 fa18 	bl	8005f10 <_lseek_r>
 8005ae0:	89a3      	ldrh	r3, [r4, #12]
 8005ae2:	4a05      	ldr	r2, [pc, #20]	; (8005af8 <__swrite+0x34>)
 8005ae4:	0028      	movs	r0, r5
 8005ae6:	4013      	ands	r3, r2
 8005ae8:	81a3      	strh	r3, [r4, #12]
 8005aea:	0032      	movs	r2, r6
 8005aec:	230e      	movs	r3, #14
 8005aee:	5ee1      	ldrsh	r1, [r4, r3]
 8005af0:	003b      	movs	r3, r7
 8005af2:	f000 f875 	bl	8005be0 <_write_r>
 8005af6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005af8:	ffffefff 	.word	0xffffefff

08005afc <__sseek>:
 8005afc:	b570      	push	{r4, r5, r6, lr}
 8005afe:	000c      	movs	r4, r1
 8005b00:	250e      	movs	r5, #14
 8005b02:	5f49      	ldrsh	r1, [r1, r5]
 8005b04:	f000 fa04 	bl	8005f10 <_lseek_r>
 8005b08:	89a3      	ldrh	r3, [r4, #12]
 8005b0a:	1c42      	adds	r2, r0, #1
 8005b0c:	d103      	bne.n	8005b16 <__sseek+0x1a>
 8005b0e:	4a05      	ldr	r2, [pc, #20]	; (8005b24 <__sseek+0x28>)
 8005b10:	4013      	ands	r3, r2
 8005b12:	81a3      	strh	r3, [r4, #12]
 8005b14:	bd70      	pop	{r4, r5, r6, pc}
 8005b16:	2280      	movs	r2, #128	; 0x80
 8005b18:	0152      	lsls	r2, r2, #5
 8005b1a:	4313      	orrs	r3, r2
 8005b1c:	81a3      	strh	r3, [r4, #12]
 8005b1e:	6560      	str	r0, [r4, #84]	; 0x54
 8005b20:	e7f8      	b.n	8005b14 <__sseek+0x18>
 8005b22:	46c0      	nop			; (mov r8, r8)
 8005b24:	ffffefff 	.word	0xffffefff

08005b28 <__sclose>:
 8005b28:	b510      	push	{r4, lr}
 8005b2a:	230e      	movs	r3, #14
 8005b2c:	5ec9      	ldrsh	r1, [r1, r3]
 8005b2e:	f000 f901 	bl	8005d34 <_close_r>
 8005b32:	bd10      	pop	{r4, pc}

08005b34 <__swbuf_r>:
 8005b34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b36:	0005      	movs	r5, r0
 8005b38:	000e      	movs	r6, r1
 8005b3a:	0014      	movs	r4, r2
 8005b3c:	2800      	cmp	r0, #0
 8005b3e:	d004      	beq.n	8005b4a <__swbuf_r+0x16>
 8005b40:	6983      	ldr	r3, [r0, #24]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d101      	bne.n	8005b4a <__swbuf_r+0x16>
 8005b46:	f7ff fd69 	bl	800561c <__sinit>
 8005b4a:	4b22      	ldr	r3, [pc, #136]	; (8005bd4 <__swbuf_r+0xa0>)
 8005b4c:	429c      	cmp	r4, r3
 8005b4e:	d12e      	bne.n	8005bae <__swbuf_r+0x7a>
 8005b50:	686c      	ldr	r4, [r5, #4]
 8005b52:	69a3      	ldr	r3, [r4, #24]
 8005b54:	60a3      	str	r3, [r4, #8]
 8005b56:	89a3      	ldrh	r3, [r4, #12]
 8005b58:	071b      	lsls	r3, r3, #28
 8005b5a:	d532      	bpl.n	8005bc2 <__swbuf_r+0x8e>
 8005b5c:	6923      	ldr	r3, [r4, #16]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d02f      	beq.n	8005bc2 <__swbuf_r+0x8e>
 8005b62:	6823      	ldr	r3, [r4, #0]
 8005b64:	6922      	ldr	r2, [r4, #16]
 8005b66:	b2f7      	uxtb	r7, r6
 8005b68:	1a98      	subs	r0, r3, r2
 8005b6a:	6963      	ldr	r3, [r4, #20]
 8005b6c:	b2f6      	uxtb	r6, r6
 8005b6e:	4283      	cmp	r3, r0
 8005b70:	dc05      	bgt.n	8005b7e <__swbuf_r+0x4a>
 8005b72:	0021      	movs	r1, r4
 8005b74:	0028      	movs	r0, r5
 8005b76:	f000 f97b 	bl	8005e70 <_fflush_r>
 8005b7a:	2800      	cmp	r0, #0
 8005b7c:	d127      	bne.n	8005bce <__swbuf_r+0x9a>
 8005b7e:	68a3      	ldr	r3, [r4, #8]
 8005b80:	3001      	adds	r0, #1
 8005b82:	3b01      	subs	r3, #1
 8005b84:	60a3      	str	r3, [r4, #8]
 8005b86:	6823      	ldr	r3, [r4, #0]
 8005b88:	1c5a      	adds	r2, r3, #1
 8005b8a:	6022      	str	r2, [r4, #0]
 8005b8c:	701f      	strb	r7, [r3, #0]
 8005b8e:	6963      	ldr	r3, [r4, #20]
 8005b90:	4283      	cmp	r3, r0
 8005b92:	d004      	beq.n	8005b9e <__swbuf_r+0x6a>
 8005b94:	89a3      	ldrh	r3, [r4, #12]
 8005b96:	07db      	lsls	r3, r3, #31
 8005b98:	d507      	bpl.n	8005baa <__swbuf_r+0x76>
 8005b9a:	2e0a      	cmp	r6, #10
 8005b9c:	d105      	bne.n	8005baa <__swbuf_r+0x76>
 8005b9e:	0021      	movs	r1, r4
 8005ba0:	0028      	movs	r0, r5
 8005ba2:	f000 f965 	bl	8005e70 <_fflush_r>
 8005ba6:	2800      	cmp	r0, #0
 8005ba8:	d111      	bne.n	8005bce <__swbuf_r+0x9a>
 8005baa:	0030      	movs	r0, r6
 8005bac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005bae:	4b0a      	ldr	r3, [pc, #40]	; (8005bd8 <__swbuf_r+0xa4>)
 8005bb0:	429c      	cmp	r4, r3
 8005bb2:	d101      	bne.n	8005bb8 <__swbuf_r+0x84>
 8005bb4:	68ac      	ldr	r4, [r5, #8]
 8005bb6:	e7cc      	b.n	8005b52 <__swbuf_r+0x1e>
 8005bb8:	4b08      	ldr	r3, [pc, #32]	; (8005bdc <__swbuf_r+0xa8>)
 8005bba:	429c      	cmp	r4, r3
 8005bbc:	d1c9      	bne.n	8005b52 <__swbuf_r+0x1e>
 8005bbe:	68ec      	ldr	r4, [r5, #12]
 8005bc0:	e7c7      	b.n	8005b52 <__swbuf_r+0x1e>
 8005bc2:	0021      	movs	r1, r4
 8005bc4:	0028      	movs	r0, r5
 8005bc6:	f000 f81f 	bl	8005c08 <__swsetup_r>
 8005bca:	2800      	cmp	r0, #0
 8005bcc:	d0c9      	beq.n	8005b62 <__swbuf_r+0x2e>
 8005bce:	2601      	movs	r6, #1
 8005bd0:	4276      	negs	r6, r6
 8005bd2:	e7ea      	b.n	8005baa <__swbuf_r+0x76>
 8005bd4:	08006954 	.word	0x08006954
 8005bd8:	08006974 	.word	0x08006974
 8005bdc:	08006934 	.word	0x08006934

08005be0 <_write_r>:
 8005be0:	b570      	push	{r4, r5, r6, lr}
 8005be2:	0004      	movs	r4, r0
 8005be4:	0008      	movs	r0, r1
 8005be6:	0011      	movs	r1, r2
 8005be8:	001a      	movs	r2, r3
 8005bea:	2300      	movs	r3, #0
 8005bec:	4d05      	ldr	r5, [pc, #20]	; (8005c04 <_write_r+0x24>)
 8005bee:	602b      	str	r3, [r5, #0]
 8005bf0:	f7ff faad 	bl	800514e <_write>
 8005bf4:	1c43      	adds	r3, r0, #1
 8005bf6:	d103      	bne.n	8005c00 <_write_r+0x20>
 8005bf8:	682b      	ldr	r3, [r5, #0]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d000      	beq.n	8005c00 <_write_r+0x20>
 8005bfe:	6023      	str	r3, [r4, #0]
 8005c00:	bd70      	pop	{r4, r5, r6, pc}
 8005c02:	46c0      	nop			; (mov r8, r8)
 8005c04:	20000318 	.word	0x20000318

08005c08 <__swsetup_r>:
 8005c08:	4b37      	ldr	r3, [pc, #220]	; (8005ce8 <__swsetup_r+0xe0>)
 8005c0a:	b570      	push	{r4, r5, r6, lr}
 8005c0c:	681d      	ldr	r5, [r3, #0]
 8005c0e:	0006      	movs	r6, r0
 8005c10:	000c      	movs	r4, r1
 8005c12:	2d00      	cmp	r5, #0
 8005c14:	d005      	beq.n	8005c22 <__swsetup_r+0x1a>
 8005c16:	69ab      	ldr	r3, [r5, #24]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d102      	bne.n	8005c22 <__swsetup_r+0x1a>
 8005c1c:	0028      	movs	r0, r5
 8005c1e:	f7ff fcfd 	bl	800561c <__sinit>
 8005c22:	4b32      	ldr	r3, [pc, #200]	; (8005cec <__swsetup_r+0xe4>)
 8005c24:	429c      	cmp	r4, r3
 8005c26:	d10f      	bne.n	8005c48 <__swsetup_r+0x40>
 8005c28:	686c      	ldr	r4, [r5, #4]
 8005c2a:	230c      	movs	r3, #12
 8005c2c:	5ee2      	ldrsh	r2, [r4, r3]
 8005c2e:	b293      	uxth	r3, r2
 8005c30:	0711      	lsls	r1, r2, #28
 8005c32:	d42d      	bmi.n	8005c90 <__swsetup_r+0x88>
 8005c34:	06d9      	lsls	r1, r3, #27
 8005c36:	d411      	bmi.n	8005c5c <__swsetup_r+0x54>
 8005c38:	2309      	movs	r3, #9
 8005c3a:	2001      	movs	r0, #1
 8005c3c:	6033      	str	r3, [r6, #0]
 8005c3e:	3337      	adds	r3, #55	; 0x37
 8005c40:	4313      	orrs	r3, r2
 8005c42:	81a3      	strh	r3, [r4, #12]
 8005c44:	4240      	negs	r0, r0
 8005c46:	bd70      	pop	{r4, r5, r6, pc}
 8005c48:	4b29      	ldr	r3, [pc, #164]	; (8005cf0 <__swsetup_r+0xe8>)
 8005c4a:	429c      	cmp	r4, r3
 8005c4c:	d101      	bne.n	8005c52 <__swsetup_r+0x4a>
 8005c4e:	68ac      	ldr	r4, [r5, #8]
 8005c50:	e7eb      	b.n	8005c2a <__swsetup_r+0x22>
 8005c52:	4b28      	ldr	r3, [pc, #160]	; (8005cf4 <__swsetup_r+0xec>)
 8005c54:	429c      	cmp	r4, r3
 8005c56:	d1e8      	bne.n	8005c2a <__swsetup_r+0x22>
 8005c58:	68ec      	ldr	r4, [r5, #12]
 8005c5a:	e7e6      	b.n	8005c2a <__swsetup_r+0x22>
 8005c5c:	075b      	lsls	r3, r3, #29
 8005c5e:	d513      	bpl.n	8005c88 <__swsetup_r+0x80>
 8005c60:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005c62:	2900      	cmp	r1, #0
 8005c64:	d008      	beq.n	8005c78 <__swsetup_r+0x70>
 8005c66:	0023      	movs	r3, r4
 8005c68:	3344      	adds	r3, #68	; 0x44
 8005c6a:	4299      	cmp	r1, r3
 8005c6c:	d002      	beq.n	8005c74 <__swsetup_r+0x6c>
 8005c6e:	0030      	movs	r0, r6
 8005c70:	f000 f9e8 	bl	8006044 <_free_r>
 8005c74:	2300      	movs	r3, #0
 8005c76:	6363      	str	r3, [r4, #52]	; 0x34
 8005c78:	2224      	movs	r2, #36	; 0x24
 8005c7a:	89a3      	ldrh	r3, [r4, #12]
 8005c7c:	4393      	bics	r3, r2
 8005c7e:	81a3      	strh	r3, [r4, #12]
 8005c80:	2300      	movs	r3, #0
 8005c82:	6063      	str	r3, [r4, #4]
 8005c84:	6923      	ldr	r3, [r4, #16]
 8005c86:	6023      	str	r3, [r4, #0]
 8005c88:	2308      	movs	r3, #8
 8005c8a:	89a2      	ldrh	r2, [r4, #12]
 8005c8c:	4313      	orrs	r3, r2
 8005c8e:	81a3      	strh	r3, [r4, #12]
 8005c90:	6923      	ldr	r3, [r4, #16]
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d10b      	bne.n	8005cae <__swsetup_r+0xa6>
 8005c96:	21a0      	movs	r1, #160	; 0xa0
 8005c98:	2280      	movs	r2, #128	; 0x80
 8005c9a:	89a3      	ldrh	r3, [r4, #12]
 8005c9c:	0089      	lsls	r1, r1, #2
 8005c9e:	0092      	lsls	r2, r2, #2
 8005ca0:	400b      	ands	r3, r1
 8005ca2:	4293      	cmp	r3, r2
 8005ca4:	d003      	beq.n	8005cae <__swsetup_r+0xa6>
 8005ca6:	0021      	movs	r1, r4
 8005ca8:	0030      	movs	r0, r6
 8005caa:	f000 f96d 	bl	8005f88 <__smakebuf_r>
 8005cae:	220c      	movs	r2, #12
 8005cb0:	5ea3      	ldrsh	r3, [r4, r2]
 8005cb2:	2001      	movs	r0, #1
 8005cb4:	001a      	movs	r2, r3
 8005cb6:	b299      	uxth	r1, r3
 8005cb8:	4002      	ands	r2, r0
 8005cba:	4203      	tst	r3, r0
 8005cbc:	d00f      	beq.n	8005cde <__swsetup_r+0xd6>
 8005cbe:	2200      	movs	r2, #0
 8005cc0:	60a2      	str	r2, [r4, #8]
 8005cc2:	6962      	ldr	r2, [r4, #20]
 8005cc4:	4252      	negs	r2, r2
 8005cc6:	61a2      	str	r2, [r4, #24]
 8005cc8:	2000      	movs	r0, #0
 8005cca:	6922      	ldr	r2, [r4, #16]
 8005ccc:	4282      	cmp	r2, r0
 8005cce:	d1ba      	bne.n	8005c46 <__swsetup_r+0x3e>
 8005cd0:	060a      	lsls	r2, r1, #24
 8005cd2:	d5b8      	bpl.n	8005c46 <__swsetup_r+0x3e>
 8005cd4:	2240      	movs	r2, #64	; 0x40
 8005cd6:	4313      	orrs	r3, r2
 8005cd8:	81a3      	strh	r3, [r4, #12]
 8005cda:	3801      	subs	r0, #1
 8005cdc:	e7b3      	b.n	8005c46 <__swsetup_r+0x3e>
 8005cde:	0788      	lsls	r0, r1, #30
 8005ce0:	d400      	bmi.n	8005ce4 <__swsetup_r+0xdc>
 8005ce2:	6962      	ldr	r2, [r4, #20]
 8005ce4:	60a2      	str	r2, [r4, #8]
 8005ce6:	e7ef      	b.n	8005cc8 <__swsetup_r+0xc0>
 8005ce8:	20000014 	.word	0x20000014
 8005cec:	08006954 	.word	0x08006954
 8005cf0:	08006974 	.word	0x08006974
 8005cf4:	08006934 	.word	0x08006934

08005cf8 <__assert_func>:
 8005cf8:	b530      	push	{r4, r5, lr}
 8005cfa:	0014      	movs	r4, r2
 8005cfc:	001a      	movs	r2, r3
 8005cfe:	4b09      	ldr	r3, [pc, #36]	; (8005d24 <__assert_func+0x2c>)
 8005d00:	0005      	movs	r5, r0
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	b085      	sub	sp, #20
 8005d06:	68d8      	ldr	r0, [r3, #12]
 8005d08:	4b07      	ldr	r3, [pc, #28]	; (8005d28 <__assert_func+0x30>)
 8005d0a:	2c00      	cmp	r4, #0
 8005d0c:	d101      	bne.n	8005d12 <__assert_func+0x1a>
 8005d0e:	4b07      	ldr	r3, [pc, #28]	; (8005d2c <__assert_func+0x34>)
 8005d10:	001c      	movs	r4, r3
 8005d12:	9301      	str	r3, [sp, #4]
 8005d14:	9100      	str	r1, [sp, #0]
 8005d16:	002b      	movs	r3, r5
 8005d18:	4905      	ldr	r1, [pc, #20]	; (8005d30 <__assert_func+0x38>)
 8005d1a:	9402      	str	r4, [sp, #8]
 8005d1c:	f000 f8e8 	bl	8005ef0 <fiprintf>
 8005d20:	f000 fcd2 	bl	80066c8 <abort>
 8005d24:	20000014 	.word	0x20000014
 8005d28:	08006a0a 	.word	0x08006a0a
 8005d2c:	08006a45 	.word	0x08006a45
 8005d30:	08006a17 	.word	0x08006a17

08005d34 <_close_r>:
 8005d34:	2300      	movs	r3, #0
 8005d36:	b570      	push	{r4, r5, r6, lr}
 8005d38:	4d06      	ldr	r5, [pc, #24]	; (8005d54 <_close_r+0x20>)
 8005d3a:	0004      	movs	r4, r0
 8005d3c:	0008      	movs	r0, r1
 8005d3e:	602b      	str	r3, [r5, #0]
 8005d40:	f7ff fa30 	bl	80051a4 <_close>
 8005d44:	1c43      	adds	r3, r0, #1
 8005d46:	d103      	bne.n	8005d50 <_close_r+0x1c>
 8005d48:	682b      	ldr	r3, [r5, #0]
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d000      	beq.n	8005d50 <_close_r+0x1c>
 8005d4e:	6023      	str	r3, [r4, #0]
 8005d50:	bd70      	pop	{r4, r5, r6, pc}
 8005d52:	46c0      	nop			; (mov r8, r8)
 8005d54:	20000318 	.word	0x20000318

08005d58 <__sflush_r>:
 8005d58:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005d5a:	898b      	ldrh	r3, [r1, #12]
 8005d5c:	0005      	movs	r5, r0
 8005d5e:	000c      	movs	r4, r1
 8005d60:	071a      	lsls	r2, r3, #28
 8005d62:	d45f      	bmi.n	8005e24 <__sflush_r+0xcc>
 8005d64:	684a      	ldr	r2, [r1, #4]
 8005d66:	2a00      	cmp	r2, #0
 8005d68:	dc04      	bgt.n	8005d74 <__sflush_r+0x1c>
 8005d6a:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8005d6c:	2a00      	cmp	r2, #0
 8005d6e:	dc01      	bgt.n	8005d74 <__sflush_r+0x1c>
 8005d70:	2000      	movs	r0, #0
 8005d72:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005d74:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8005d76:	2f00      	cmp	r7, #0
 8005d78:	d0fa      	beq.n	8005d70 <__sflush_r+0x18>
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	2180      	movs	r1, #128	; 0x80
 8005d7e:	682e      	ldr	r6, [r5, #0]
 8005d80:	602a      	str	r2, [r5, #0]
 8005d82:	001a      	movs	r2, r3
 8005d84:	0149      	lsls	r1, r1, #5
 8005d86:	400a      	ands	r2, r1
 8005d88:	420b      	tst	r3, r1
 8005d8a:	d034      	beq.n	8005df6 <__sflush_r+0x9e>
 8005d8c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005d8e:	89a3      	ldrh	r3, [r4, #12]
 8005d90:	075b      	lsls	r3, r3, #29
 8005d92:	d506      	bpl.n	8005da2 <__sflush_r+0x4a>
 8005d94:	6863      	ldr	r3, [r4, #4]
 8005d96:	1ac0      	subs	r0, r0, r3
 8005d98:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d001      	beq.n	8005da2 <__sflush_r+0x4a>
 8005d9e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005da0:	1ac0      	subs	r0, r0, r3
 8005da2:	0002      	movs	r2, r0
 8005da4:	6a21      	ldr	r1, [r4, #32]
 8005da6:	2300      	movs	r3, #0
 8005da8:	0028      	movs	r0, r5
 8005daa:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8005dac:	47b8      	blx	r7
 8005dae:	89a1      	ldrh	r1, [r4, #12]
 8005db0:	1c43      	adds	r3, r0, #1
 8005db2:	d106      	bne.n	8005dc2 <__sflush_r+0x6a>
 8005db4:	682b      	ldr	r3, [r5, #0]
 8005db6:	2b1d      	cmp	r3, #29
 8005db8:	d831      	bhi.n	8005e1e <__sflush_r+0xc6>
 8005dba:	4a2c      	ldr	r2, [pc, #176]	; (8005e6c <__sflush_r+0x114>)
 8005dbc:	40da      	lsrs	r2, r3
 8005dbe:	07d3      	lsls	r3, r2, #31
 8005dc0:	d52d      	bpl.n	8005e1e <__sflush_r+0xc6>
 8005dc2:	2300      	movs	r3, #0
 8005dc4:	6063      	str	r3, [r4, #4]
 8005dc6:	6923      	ldr	r3, [r4, #16]
 8005dc8:	6023      	str	r3, [r4, #0]
 8005dca:	04cb      	lsls	r3, r1, #19
 8005dcc:	d505      	bpl.n	8005dda <__sflush_r+0x82>
 8005dce:	1c43      	adds	r3, r0, #1
 8005dd0:	d102      	bne.n	8005dd8 <__sflush_r+0x80>
 8005dd2:	682b      	ldr	r3, [r5, #0]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d100      	bne.n	8005dda <__sflush_r+0x82>
 8005dd8:	6560      	str	r0, [r4, #84]	; 0x54
 8005dda:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005ddc:	602e      	str	r6, [r5, #0]
 8005dde:	2900      	cmp	r1, #0
 8005de0:	d0c6      	beq.n	8005d70 <__sflush_r+0x18>
 8005de2:	0023      	movs	r3, r4
 8005de4:	3344      	adds	r3, #68	; 0x44
 8005de6:	4299      	cmp	r1, r3
 8005de8:	d002      	beq.n	8005df0 <__sflush_r+0x98>
 8005dea:	0028      	movs	r0, r5
 8005dec:	f000 f92a 	bl	8006044 <_free_r>
 8005df0:	2000      	movs	r0, #0
 8005df2:	6360      	str	r0, [r4, #52]	; 0x34
 8005df4:	e7bd      	b.n	8005d72 <__sflush_r+0x1a>
 8005df6:	2301      	movs	r3, #1
 8005df8:	0028      	movs	r0, r5
 8005dfa:	6a21      	ldr	r1, [r4, #32]
 8005dfc:	47b8      	blx	r7
 8005dfe:	1c43      	adds	r3, r0, #1
 8005e00:	d1c5      	bne.n	8005d8e <__sflush_r+0x36>
 8005e02:	682b      	ldr	r3, [r5, #0]
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d0c2      	beq.n	8005d8e <__sflush_r+0x36>
 8005e08:	2b1d      	cmp	r3, #29
 8005e0a:	d001      	beq.n	8005e10 <__sflush_r+0xb8>
 8005e0c:	2b16      	cmp	r3, #22
 8005e0e:	d101      	bne.n	8005e14 <__sflush_r+0xbc>
 8005e10:	602e      	str	r6, [r5, #0]
 8005e12:	e7ad      	b.n	8005d70 <__sflush_r+0x18>
 8005e14:	2340      	movs	r3, #64	; 0x40
 8005e16:	89a2      	ldrh	r2, [r4, #12]
 8005e18:	4313      	orrs	r3, r2
 8005e1a:	81a3      	strh	r3, [r4, #12]
 8005e1c:	e7a9      	b.n	8005d72 <__sflush_r+0x1a>
 8005e1e:	2340      	movs	r3, #64	; 0x40
 8005e20:	430b      	orrs	r3, r1
 8005e22:	e7fa      	b.n	8005e1a <__sflush_r+0xc2>
 8005e24:	690f      	ldr	r7, [r1, #16]
 8005e26:	2f00      	cmp	r7, #0
 8005e28:	d0a2      	beq.n	8005d70 <__sflush_r+0x18>
 8005e2a:	680a      	ldr	r2, [r1, #0]
 8005e2c:	600f      	str	r7, [r1, #0]
 8005e2e:	1bd2      	subs	r2, r2, r7
 8005e30:	9201      	str	r2, [sp, #4]
 8005e32:	2200      	movs	r2, #0
 8005e34:	079b      	lsls	r3, r3, #30
 8005e36:	d100      	bne.n	8005e3a <__sflush_r+0xe2>
 8005e38:	694a      	ldr	r2, [r1, #20]
 8005e3a:	60a2      	str	r2, [r4, #8]
 8005e3c:	9b01      	ldr	r3, [sp, #4]
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	dc00      	bgt.n	8005e44 <__sflush_r+0xec>
 8005e42:	e795      	b.n	8005d70 <__sflush_r+0x18>
 8005e44:	003a      	movs	r2, r7
 8005e46:	0028      	movs	r0, r5
 8005e48:	9b01      	ldr	r3, [sp, #4]
 8005e4a:	6a21      	ldr	r1, [r4, #32]
 8005e4c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005e4e:	47b0      	blx	r6
 8005e50:	2800      	cmp	r0, #0
 8005e52:	dc06      	bgt.n	8005e62 <__sflush_r+0x10a>
 8005e54:	2340      	movs	r3, #64	; 0x40
 8005e56:	2001      	movs	r0, #1
 8005e58:	89a2      	ldrh	r2, [r4, #12]
 8005e5a:	4240      	negs	r0, r0
 8005e5c:	4313      	orrs	r3, r2
 8005e5e:	81a3      	strh	r3, [r4, #12]
 8005e60:	e787      	b.n	8005d72 <__sflush_r+0x1a>
 8005e62:	9b01      	ldr	r3, [sp, #4]
 8005e64:	183f      	adds	r7, r7, r0
 8005e66:	1a1b      	subs	r3, r3, r0
 8005e68:	9301      	str	r3, [sp, #4]
 8005e6a:	e7e7      	b.n	8005e3c <__sflush_r+0xe4>
 8005e6c:	20400001 	.word	0x20400001

08005e70 <_fflush_r>:
 8005e70:	690b      	ldr	r3, [r1, #16]
 8005e72:	b570      	push	{r4, r5, r6, lr}
 8005e74:	0005      	movs	r5, r0
 8005e76:	000c      	movs	r4, r1
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d102      	bne.n	8005e82 <_fflush_r+0x12>
 8005e7c:	2500      	movs	r5, #0
 8005e7e:	0028      	movs	r0, r5
 8005e80:	bd70      	pop	{r4, r5, r6, pc}
 8005e82:	2800      	cmp	r0, #0
 8005e84:	d004      	beq.n	8005e90 <_fflush_r+0x20>
 8005e86:	6983      	ldr	r3, [r0, #24]
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d101      	bne.n	8005e90 <_fflush_r+0x20>
 8005e8c:	f7ff fbc6 	bl	800561c <__sinit>
 8005e90:	4b14      	ldr	r3, [pc, #80]	; (8005ee4 <_fflush_r+0x74>)
 8005e92:	429c      	cmp	r4, r3
 8005e94:	d11b      	bne.n	8005ece <_fflush_r+0x5e>
 8005e96:	686c      	ldr	r4, [r5, #4]
 8005e98:	220c      	movs	r2, #12
 8005e9a:	5ea3      	ldrsh	r3, [r4, r2]
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d0ed      	beq.n	8005e7c <_fflush_r+0xc>
 8005ea0:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005ea2:	07d2      	lsls	r2, r2, #31
 8005ea4:	d404      	bmi.n	8005eb0 <_fflush_r+0x40>
 8005ea6:	059b      	lsls	r3, r3, #22
 8005ea8:	d402      	bmi.n	8005eb0 <_fflush_r+0x40>
 8005eaa:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005eac:	f7ff fc7b 	bl	80057a6 <__retarget_lock_acquire_recursive>
 8005eb0:	0028      	movs	r0, r5
 8005eb2:	0021      	movs	r1, r4
 8005eb4:	f7ff ff50 	bl	8005d58 <__sflush_r>
 8005eb8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005eba:	0005      	movs	r5, r0
 8005ebc:	07db      	lsls	r3, r3, #31
 8005ebe:	d4de      	bmi.n	8005e7e <_fflush_r+0xe>
 8005ec0:	89a3      	ldrh	r3, [r4, #12]
 8005ec2:	059b      	lsls	r3, r3, #22
 8005ec4:	d4db      	bmi.n	8005e7e <_fflush_r+0xe>
 8005ec6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005ec8:	f7ff fc6e 	bl	80057a8 <__retarget_lock_release_recursive>
 8005ecc:	e7d7      	b.n	8005e7e <_fflush_r+0xe>
 8005ece:	4b06      	ldr	r3, [pc, #24]	; (8005ee8 <_fflush_r+0x78>)
 8005ed0:	429c      	cmp	r4, r3
 8005ed2:	d101      	bne.n	8005ed8 <_fflush_r+0x68>
 8005ed4:	68ac      	ldr	r4, [r5, #8]
 8005ed6:	e7df      	b.n	8005e98 <_fflush_r+0x28>
 8005ed8:	4b04      	ldr	r3, [pc, #16]	; (8005eec <_fflush_r+0x7c>)
 8005eda:	429c      	cmp	r4, r3
 8005edc:	d1dc      	bne.n	8005e98 <_fflush_r+0x28>
 8005ede:	68ec      	ldr	r4, [r5, #12]
 8005ee0:	e7da      	b.n	8005e98 <_fflush_r+0x28>
 8005ee2:	46c0      	nop			; (mov r8, r8)
 8005ee4:	08006954 	.word	0x08006954
 8005ee8:	08006974 	.word	0x08006974
 8005eec:	08006934 	.word	0x08006934

08005ef0 <fiprintf>:
 8005ef0:	b40e      	push	{r1, r2, r3}
 8005ef2:	b503      	push	{r0, r1, lr}
 8005ef4:	0001      	movs	r1, r0
 8005ef6:	ab03      	add	r3, sp, #12
 8005ef8:	4804      	ldr	r0, [pc, #16]	; (8005f0c <fiprintf+0x1c>)
 8005efa:	cb04      	ldmia	r3!, {r2}
 8005efc:	6800      	ldr	r0, [r0, #0]
 8005efe:	9301      	str	r3, [sp, #4]
 8005f00:	f000 f912 	bl	8006128 <_vfiprintf_r>
 8005f04:	b002      	add	sp, #8
 8005f06:	bc08      	pop	{r3}
 8005f08:	b003      	add	sp, #12
 8005f0a:	4718      	bx	r3
 8005f0c:	20000014 	.word	0x20000014

08005f10 <_lseek_r>:
 8005f10:	b570      	push	{r4, r5, r6, lr}
 8005f12:	0004      	movs	r4, r0
 8005f14:	0008      	movs	r0, r1
 8005f16:	0011      	movs	r1, r2
 8005f18:	001a      	movs	r2, r3
 8005f1a:	2300      	movs	r3, #0
 8005f1c:	4d05      	ldr	r5, [pc, #20]	; (8005f34 <_lseek_r+0x24>)
 8005f1e:	602b      	str	r3, [r5, #0]
 8005f20:	f7ff f901 	bl	8005126 <_lseek>
 8005f24:	1c43      	adds	r3, r0, #1
 8005f26:	d103      	bne.n	8005f30 <_lseek_r+0x20>
 8005f28:	682b      	ldr	r3, [r5, #0]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d000      	beq.n	8005f30 <_lseek_r+0x20>
 8005f2e:	6023      	str	r3, [r4, #0]
 8005f30:	bd70      	pop	{r4, r5, r6, pc}
 8005f32:	46c0      	nop			; (mov r8, r8)
 8005f34:	20000318 	.word	0x20000318

08005f38 <__swhatbuf_r>:
 8005f38:	b570      	push	{r4, r5, r6, lr}
 8005f3a:	000e      	movs	r6, r1
 8005f3c:	001d      	movs	r5, r3
 8005f3e:	230e      	movs	r3, #14
 8005f40:	5ec9      	ldrsh	r1, [r1, r3]
 8005f42:	0014      	movs	r4, r2
 8005f44:	b096      	sub	sp, #88	; 0x58
 8005f46:	2900      	cmp	r1, #0
 8005f48:	da08      	bge.n	8005f5c <__swhatbuf_r+0x24>
 8005f4a:	220c      	movs	r2, #12
 8005f4c:	5eb3      	ldrsh	r3, [r6, r2]
 8005f4e:	2200      	movs	r2, #0
 8005f50:	602a      	str	r2, [r5, #0]
 8005f52:	061b      	lsls	r3, r3, #24
 8005f54:	d411      	bmi.n	8005f7a <__swhatbuf_r+0x42>
 8005f56:	2380      	movs	r3, #128	; 0x80
 8005f58:	00db      	lsls	r3, r3, #3
 8005f5a:	e00f      	b.n	8005f7c <__swhatbuf_r+0x44>
 8005f5c:	466a      	mov	r2, sp
 8005f5e:	f000 fbbb 	bl	80066d8 <_fstat_r>
 8005f62:	2800      	cmp	r0, #0
 8005f64:	dbf1      	blt.n	8005f4a <__swhatbuf_r+0x12>
 8005f66:	23f0      	movs	r3, #240	; 0xf0
 8005f68:	9901      	ldr	r1, [sp, #4]
 8005f6a:	021b      	lsls	r3, r3, #8
 8005f6c:	4019      	ands	r1, r3
 8005f6e:	4b05      	ldr	r3, [pc, #20]	; (8005f84 <__swhatbuf_r+0x4c>)
 8005f70:	18c9      	adds	r1, r1, r3
 8005f72:	424b      	negs	r3, r1
 8005f74:	4159      	adcs	r1, r3
 8005f76:	6029      	str	r1, [r5, #0]
 8005f78:	e7ed      	b.n	8005f56 <__swhatbuf_r+0x1e>
 8005f7a:	2340      	movs	r3, #64	; 0x40
 8005f7c:	2000      	movs	r0, #0
 8005f7e:	6023      	str	r3, [r4, #0]
 8005f80:	b016      	add	sp, #88	; 0x58
 8005f82:	bd70      	pop	{r4, r5, r6, pc}
 8005f84:	ffffe000 	.word	0xffffe000

08005f88 <__smakebuf_r>:
 8005f88:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005f8a:	2602      	movs	r6, #2
 8005f8c:	898b      	ldrh	r3, [r1, #12]
 8005f8e:	0005      	movs	r5, r0
 8005f90:	000c      	movs	r4, r1
 8005f92:	4233      	tst	r3, r6
 8005f94:	d006      	beq.n	8005fa4 <__smakebuf_r+0x1c>
 8005f96:	0023      	movs	r3, r4
 8005f98:	3347      	adds	r3, #71	; 0x47
 8005f9a:	6023      	str	r3, [r4, #0]
 8005f9c:	6123      	str	r3, [r4, #16]
 8005f9e:	2301      	movs	r3, #1
 8005fa0:	6163      	str	r3, [r4, #20]
 8005fa2:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8005fa4:	466a      	mov	r2, sp
 8005fa6:	ab01      	add	r3, sp, #4
 8005fa8:	f7ff ffc6 	bl	8005f38 <__swhatbuf_r>
 8005fac:	9900      	ldr	r1, [sp, #0]
 8005fae:	0007      	movs	r7, r0
 8005fb0:	0028      	movs	r0, r5
 8005fb2:	f7ff fc25 	bl	8005800 <_malloc_r>
 8005fb6:	2800      	cmp	r0, #0
 8005fb8:	d108      	bne.n	8005fcc <__smakebuf_r+0x44>
 8005fba:	220c      	movs	r2, #12
 8005fbc:	5ea3      	ldrsh	r3, [r4, r2]
 8005fbe:	059a      	lsls	r2, r3, #22
 8005fc0:	d4ef      	bmi.n	8005fa2 <__smakebuf_r+0x1a>
 8005fc2:	2203      	movs	r2, #3
 8005fc4:	4393      	bics	r3, r2
 8005fc6:	431e      	orrs	r6, r3
 8005fc8:	81a6      	strh	r6, [r4, #12]
 8005fca:	e7e4      	b.n	8005f96 <__smakebuf_r+0xe>
 8005fcc:	4b0f      	ldr	r3, [pc, #60]	; (800600c <__smakebuf_r+0x84>)
 8005fce:	62ab      	str	r3, [r5, #40]	; 0x28
 8005fd0:	2380      	movs	r3, #128	; 0x80
 8005fd2:	89a2      	ldrh	r2, [r4, #12]
 8005fd4:	6020      	str	r0, [r4, #0]
 8005fd6:	4313      	orrs	r3, r2
 8005fd8:	81a3      	strh	r3, [r4, #12]
 8005fda:	9b00      	ldr	r3, [sp, #0]
 8005fdc:	6120      	str	r0, [r4, #16]
 8005fde:	6163      	str	r3, [r4, #20]
 8005fe0:	9b01      	ldr	r3, [sp, #4]
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d00d      	beq.n	8006002 <__smakebuf_r+0x7a>
 8005fe6:	0028      	movs	r0, r5
 8005fe8:	230e      	movs	r3, #14
 8005fea:	5ee1      	ldrsh	r1, [r4, r3]
 8005fec:	f000 fb86 	bl	80066fc <_isatty_r>
 8005ff0:	2800      	cmp	r0, #0
 8005ff2:	d006      	beq.n	8006002 <__smakebuf_r+0x7a>
 8005ff4:	2203      	movs	r2, #3
 8005ff6:	89a3      	ldrh	r3, [r4, #12]
 8005ff8:	4393      	bics	r3, r2
 8005ffa:	001a      	movs	r2, r3
 8005ffc:	2301      	movs	r3, #1
 8005ffe:	4313      	orrs	r3, r2
 8006000:	81a3      	strh	r3, [r4, #12]
 8006002:	89a0      	ldrh	r0, [r4, #12]
 8006004:	4307      	orrs	r7, r0
 8006006:	81a7      	strh	r7, [r4, #12]
 8006008:	e7cb      	b.n	8005fa2 <__smakebuf_r+0x1a>
 800600a:	46c0      	nop			; (mov r8, r8)
 800600c:	080055a1 	.word	0x080055a1

08006010 <malloc>:
 8006010:	b510      	push	{r4, lr}
 8006012:	4b03      	ldr	r3, [pc, #12]	; (8006020 <malloc+0x10>)
 8006014:	0001      	movs	r1, r0
 8006016:	6818      	ldr	r0, [r3, #0]
 8006018:	f7ff fbf2 	bl	8005800 <_malloc_r>
 800601c:	bd10      	pop	{r4, pc}
 800601e:	46c0      	nop			; (mov r8, r8)
 8006020:	20000014 	.word	0x20000014

08006024 <__malloc_lock>:
 8006024:	b510      	push	{r4, lr}
 8006026:	4802      	ldr	r0, [pc, #8]	; (8006030 <__malloc_lock+0xc>)
 8006028:	f7ff fbbd 	bl	80057a6 <__retarget_lock_acquire_recursive>
 800602c:	bd10      	pop	{r4, pc}
 800602e:	46c0      	nop			; (mov r8, r8)
 8006030:	2000030c 	.word	0x2000030c

08006034 <__malloc_unlock>:
 8006034:	b510      	push	{r4, lr}
 8006036:	4802      	ldr	r0, [pc, #8]	; (8006040 <__malloc_unlock+0xc>)
 8006038:	f7ff fbb6 	bl	80057a8 <__retarget_lock_release_recursive>
 800603c:	bd10      	pop	{r4, pc}
 800603e:	46c0      	nop			; (mov r8, r8)
 8006040:	2000030c 	.word	0x2000030c

08006044 <_free_r>:
 8006044:	b570      	push	{r4, r5, r6, lr}
 8006046:	0005      	movs	r5, r0
 8006048:	2900      	cmp	r1, #0
 800604a:	d010      	beq.n	800606e <_free_r+0x2a>
 800604c:	1f0c      	subs	r4, r1, #4
 800604e:	6823      	ldr	r3, [r4, #0]
 8006050:	2b00      	cmp	r3, #0
 8006052:	da00      	bge.n	8006056 <_free_r+0x12>
 8006054:	18e4      	adds	r4, r4, r3
 8006056:	0028      	movs	r0, r5
 8006058:	f7ff ffe4 	bl	8006024 <__malloc_lock>
 800605c:	4a1d      	ldr	r2, [pc, #116]	; (80060d4 <_free_r+0x90>)
 800605e:	6813      	ldr	r3, [r2, #0]
 8006060:	2b00      	cmp	r3, #0
 8006062:	d105      	bne.n	8006070 <_free_r+0x2c>
 8006064:	6063      	str	r3, [r4, #4]
 8006066:	6014      	str	r4, [r2, #0]
 8006068:	0028      	movs	r0, r5
 800606a:	f7ff ffe3 	bl	8006034 <__malloc_unlock>
 800606e:	bd70      	pop	{r4, r5, r6, pc}
 8006070:	42a3      	cmp	r3, r4
 8006072:	d908      	bls.n	8006086 <_free_r+0x42>
 8006074:	6821      	ldr	r1, [r4, #0]
 8006076:	1860      	adds	r0, r4, r1
 8006078:	4283      	cmp	r3, r0
 800607a:	d1f3      	bne.n	8006064 <_free_r+0x20>
 800607c:	6818      	ldr	r0, [r3, #0]
 800607e:	685b      	ldr	r3, [r3, #4]
 8006080:	1841      	adds	r1, r0, r1
 8006082:	6021      	str	r1, [r4, #0]
 8006084:	e7ee      	b.n	8006064 <_free_r+0x20>
 8006086:	001a      	movs	r2, r3
 8006088:	685b      	ldr	r3, [r3, #4]
 800608a:	2b00      	cmp	r3, #0
 800608c:	d001      	beq.n	8006092 <_free_r+0x4e>
 800608e:	42a3      	cmp	r3, r4
 8006090:	d9f9      	bls.n	8006086 <_free_r+0x42>
 8006092:	6811      	ldr	r1, [r2, #0]
 8006094:	1850      	adds	r0, r2, r1
 8006096:	42a0      	cmp	r0, r4
 8006098:	d10b      	bne.n	80060b2 <_free_r+0x6e>
 800609a:	6820      	ldr	r0, [r4, #0]
 800609c:	1809      	adds	r1, r1, r0
 800609e:	1850      	adds	r0, r2, r1
 80060a0:	6011      	str	r1, [r2, #0]
 80060a2:	4283      	cmp	r3, r0
 80060a4:	d1e0      	bne.n	8006068 <_free_r+0x24>
 80060a6:	6818      	ldr	r0, [r3, #0]
 80060a8:	685b      	ldr	r3, [r3, #4]
 80060aa:	1841      	adds	r1, r0, r1
 80060ac:	6011      	str	r1, [r2, #0]
 80060ae:	6053      	str	r3, [r2, #4]
 80060b0:	e7da      	b.n	8006068 <_free_r+0x24>
 80060b2:	42a0      	cmp	r0, r4
 80060b4:	d902      	bls.n	80060bc <_free_r+0x78>
 80060b6:	230c      	movs	r3, #12
 80060b8:	602b      	str	r3, [r5, #0]
 80060ba:	e7d5      	b.n	8006068 <_free_r+0x24>
 80060bc:	6821      	ldr	r1, [r4, #0]
 80060be:	1860      	adds	r0, r4, r1
 80060c0:	4283      	cmp	r3, r0
 80060c2:	d103      	bne.n	80060cc <_free_r+0x88>
 80060c4:	6818      	ldr	r0, [r3, #0]
 80060c6:	685b      	ldr	r3, [r3, #4]
 80060c8:	1841      	adds	r1, r0, r1
 80060ca:	6021      	str	r1, [r4, #0]
 80060cc:	6063      	str	r3, [r4, #4]
 80060ce:	6054      	str	r4, [r2, #4]
 80060d0:	e7ca      	b.n	8006068 <_free_r+0x24>
 80060d2:	46c0      	nop			; (mov r8, r8)
 80060d4:	20000310 	.word	0x20000310

080060d8 <__sfputc_r>:
 80060d8:	6893      	ldr	r3, [r2, #8]
 80060da:	b510      	push	{r4, lr}
 80060dc:	3b01      	subs	r3, #1
 80060de:	6093      	str	r3, [r2, #8]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	da04      	bge.n	80060ee <__sfputc_r+0x16>
 80060e4:	6994      	ldr	r4, [r2, #24]
 80060e6:	42a3      	cmp	r3, r4
 80060e8:	db07      	blt.n	80060fa <__sfputc_r+0x22>
 80060ea:	290a      	cmp	r1, #10
 80060ec:	d005      	beq.n	80060fa <__sfputc_r+0x22>
 80060ee:	6813      	ldr	r3, [r2, #0]
 80060f0:	1c58      	adds	r0, r3, #1
 80060f2:	6010      	str	r0, [r2, #0]
 80060f4:	7019      	strb	r1, [r3, #0]
 80060f6:	0008      	movs	r0, r1
 80060f8:	bd10      	pop	{r4, pc}
 80060fa:	f7ff fd1b 	bl	8005b34 <__swbuf_r>
 80060fe:	0001      	movs	r1, r0
 8006100:	e7f9      	b.n	80060f6 <__sfputc_r+0x1e>

08006102 <__sfputs_r>:
 8006102:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006104:	0006      	movs	r6, r0
 8006106:	000f      	movs	r7, r1
 8006108:	0014      	movs	r4, r2
 800610a:	18d5      	adds	r5, r2, r3
 800610c:	42ac      	cmp	r4, r5
 800610e:	d101      	bne.n	8006114 <__sfputs_r+0x12>
 8006110:	2000      	movs	r0, #0
 8006112:	e007      	b.n	8006124 <__sfputs_r+0x22>
 8006114:	7821      	ldrb	r1, [r4, #0]
 8006116:	003a      	movs	r2, r7
 8006118:	0030      	movs	r0, r6
 800611a:	f7ff ffdd 	bl	80060d8 <__sfputc_r>
 800611e:	3401      	adds	r4, #1
 8006120:	1c43      	adds	r3, r0, #1
 8006122:	d1f3      	bne.n	800610c <__sfputs_r+0xa>
 8006124:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006128 <_vfiprintf_r>:
 8006128:	b5f0      	push	{r4, r5, r6, r7, lr}
 800612a:	b0a1      	sub	sp, #132	; 0x84
 800612c:	0006      	movs	r6, r0
 800612e:	000c      	movs	r4, r1
 8006130:	001f      	movs	r7, r3
 8006132:	9203      	str	r2, [sp, #12]
 8006134:	2800      	cmp	r0, #0
 8006136:	d004      	beq.n	8006142 <_vfiprintf_r+0x1a>
 8006138:	6983      	ldr	r3, [r0, #24]
 800613a:	2b00      	cmp	r3, #0
 800613c:	d101      	bne.n	8006142 <_vfiprintf_r+0x1a>
 800613e:	f7ff fa6d 	bl	800561c <__sinit>
 8006142:	4b8e      	ldr	r3, [pc, #568]	; (800637c <_vfiprintf_r+0x254>)
 8006144:	429c      	cmp	r4, r3
 8006146:	d11c      	bne.n	8006182 <_vfiprintf_r+0x5a>
 8006148:	6874      	ldr	r4, [r6, #4]
 800614a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800614c:	07db      	lsls	r3, r3, #31
 800614e:	d405      	bmi.n	800615c <_vfiprintf_r+0x34>
 8006150:	89a3      	ldrh	r3, [r4, #12]
 8006152:	059b      	lsls	r3, r3, #22
 8006154:	d402      	bmi.n	800615c <_vfiprintf_r+0x34>
 8006156:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006158:	f7ff fb25 	bl	80057a6 <__retarget_lock_acquire_recursive>
 800615c:	89a3      	ldrh	r3, [r4, #12]
 800615e:	071b      	lsls	r3, r3, #28
 8006160:	d502      	bpl.n	8006168 <_vfiprintf_r+0x40>
 8006162:	6923      	ldr	r3, [r4, #16]
 8006164:	2b00      	cmp	r3, #0
 8006166:	d11d      	bne.n	80061a4 <_vfiprintf_r+0x7c>
 8006168:	0021      	movs	r1, r4
 800616a:	0030      	movs	r0, r6
 800616c:	f7ff fd4c 	bl	8005c08 <__swsetup_r>
 8006170:	2800      	cmp	r0, #0
 8006172:	d017      	beq.n	80061a4 <_vfiprintf_r+0x7c>
 8006174:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006176:	07db      	lsls	r3, r3, #31
 8006178:	d50d      	bpl.n	8006196 <_vfiprintf_r+0x6e>
 800617a:	2001      	movs	r0, #1
 800617c:	4240      	negs	r0, r0
 800617e:	b021      	add	sp, #132	; 0x84
 8006180:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006182:	4b7f      	ldr	r3, [pc, #508]	; (8006380 <_vfiprintf_r+0x258>)
 8006184:	429c      	cmp	r4, r3
 8006186:	d101      	bne.n	800618c <_vfiprintf_r+0x64>
 8006188:	68b4      	ldr	r4, [r6, #8]
 800618a:	e7de      	b.n	800614a <_vfiprintf_r+0x22>
 800618c:	4b7d      	ldr	r3, [pc, #500]	; (8006384 <_vfiprintf_r+0x25c>)
 800618e:	429c      	cmp	r4, r3
 8006190:	d1db      	bne.n	800614a <_vfiprintf_r+0x22>
 8006192:	68f4      	ldr	r4, [r6, #12]
 8006194:	e7d9      	b.n	800614a <_vfiprintf_r+0x22>
 8006196:	89a3      	ldrh	r3, [r4, #12]
 8006198:	059b      	lsls	r3, r3, #22
 800619a:	d4ee      	bmi.n	800617a <_vfiprintf_r+0x52>
 800619c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800619e:	f7ff fb03 	bl	80057a8 <__retarget_lock_release_recursive>
 80061a2:	e7ea      	b.n	800617a <_vfiprintf_r+0x52>
 80061a4:	2300      	movs	r3, #0
 80061a6:	ad08      	add	r5, sp, #32
 80061a8:	616b      	str	r3, [r5, #20]
 80061aa:	3320      	adds	r3, #32
 80061ac:	766b      	strb	r3, [r5, #25]
 80061ae:	3310      	adds	r3, #16
 80061b0:	76ab      	strb	r3, [r5, #26]
 80061b2:	9707      	str	r7, [sp, #28]
 80061b4:	9f03      	ldr	r7, [sp, #12]
 80061b6:	783b      	ldrb	r3, [r7, #0]
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d001      	beq.n	80061c0 <_vfiprintf_r+0x98>
 80061bc:	2b25      	cmp	r3, #37	; 0x25
 80061be:	d14e      	bne.n	800625e <_vfiprintf_r+0x136>
 80061c0:	9b03      	ldr	r3, [sp, #12]
 80061c2:	1afb      	subs	r3, r7, r3
 80061c4:	9305      	str	r3, [sp, #20]
 80061c6:	9b03      	ldr	r3, [sp, #12]
 80061c8:	429f      	cmp	r7, r3
 80061ca:	d00d      	beq.n	80061e8 <_vfiprintf_r+0xc0>
 80061cc:	9b05      	ldr	r3, [sp, #20]
 80061ce:	0021      	movs	r1, r4
 80061d0:	0030      	movs	r0, r6
 80061d2:	9a03      	ldr	r2, [sp, #12]
 80061d4:	f7ff ff95 	bl	8006102 <__sfputs_r>
 80061d8:	1c43      	adds	r3, r0, #1
 80061da:	d100      	bne.n	80061de <_vfiprintf_r+0xb6>
 80061dc:	e0b5      	b.n	800634a <_vfiprintf_r+0x222>
 80061de:	696a      	ldr	r2, [r5, #20]
 80061e0:	9b05      	ldr	r3, [sp, #20]
 80061e2:	4694      	mov	ip, r2
 80061e4:	4463      	add	r3, ip
 80061e6:	616b      	str	r3, [r5, #20]
 80061e8:	783b      	ldrb	r3, [r7, #0]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d100      	bne.n	80061f0 <_vfiprintf_r+0xc8>
 80061ee:	e0ac      	b.n	800634a <_vfiprintf_r+0x222>
 80061f0:	2201      	movs	r2, #1
 80061f2:	1c7b      	adds	r3, r7, #1
 80061f4:	9303      	str	r3, [sp, #12]
 80061f6:	2300      	movs	r3, #0
 80061f8:	4252      	negs	r2, r2
 80061fa:	606a      	str	r2, [r5, #4]
 80061fc:	a904      	add	r1, sp, #16
 80061fe:	3254      	adds	r2, #84	; 0x54
 8006200:	1852      	adds	r2, r2, r1
 8006202:	602b      	str	r3, [r5, #0]
 8006204:	60eb      	str	r3, [r5, #12]
 8006206:	60ab      	str	r3, [r5, #8]
 8006208:	7013      	strb	r3, [r2, #0]
 800620a:	65ab      	str	r3, [r5, #88]	; 0x58
 800620c:	9b03      	ldr	r3, [sp, #12]
 800620e:	2205      	movs	r2, #5
 8006210:	7819      	ldrb	r1, [r3, #0]
 8006212:	485d      	ldr	r0, [pc, #372]	; (8006388 <_vfiprintf_r+0x260>)
 8006214:	f000 fa84 	bl	8006720 <memchr>
 8006218:	9b03      	ldr	r3, [sp, #12]
 800621a:	1c5f      	adds	r7, r3, #1
 800621c:	2800      	cmp	r0, #0
 800621e:	d120      	bne.n	8006262 <_vfiprintf_r+0x13a>
 8006220:	682a      	ldr	r2, [r5, #0]
 8006222:	06d3      	lsls	r3, r2, #27
 8006224:	d504      	bpl.n	8006230 <_vfiprintf_r+0x108>
 8006226:	2353      	movs	r3, #83	; 0x53
 8006228:	a904      	add	r1, sp, #16
 800622a:	185b      	adds	r3, r3, r1
 800622c:	2120      	movs	r1, #32
 800622e:	7019      	strb	r1, [r3, #0]
 8006230:	0713      	lsls	r3, r2, #28
 8006232:	d504      	bpl.n	800623e <_vfiprintf_r+0x116>
 8006234:	2353      	movs	r3, #83	; 0x53
 8006236:	a904      	add	r1, sp, #16
 8006238:	185b      	adds	r3, r3, r1
 800623a:	212b      	movs	r1, #43	; 0x2b
 800623c:	7019      	strb	r1, [r3, #0]
 800623e:	9b03      	ldr	r3, [sp, #12]
 8006240:	781b      	ldrb	r3, [r3, #0]
 8006242:	2b2a      	cmp	r3, #42	; 0x2a
 8006244:	d016      	beq.n	8006274 <_vfiprintf_r+0x14c>
 8006246:	2100      	movs	r1, #0
 8006248:	68eb      	ldr	r3, [r5, #12]
 800624a:	9f03      	ldr	r7, [sp, #12]
 800624c:	783a      	ldrb	r2, [r7, #0]
 800624e:	1c78      	adds	r0, r7, #1
 8006250:	3a30      	subs	r2, #48	; 0x30
 8006252:	4684      	mov	ip, r0
 8006254:	2a09      	cmp	r2, #9
 8006256:	d94f      	bls.n	80062f8 <_vfiprintf_r+0x1d0>
 8006258:	2900      	cmp	r1, #0
 800625a:	d111      	bne.n	8006280 <_vfiprintf_r+0x158>
 800625c:	e017      	b.n	800628e <_vfiprintf_r+0x166>
 800625e:	3701      	adds	r7, #1
 8006260:	e7a9      	b.n	80061b6 <_vfiprintf_r+0x8e>
 8006262:	4b49      	ldr	r3, [pc, #292]	; (8006388 <_vfiprintf_r+0x260>)
 8006264:	682a      	ldr	r2, [r5, #0]
 8006266:	1ac0      	subs	r0, r0, r3
 8006268:	2301      	movs	r3, #1
 800626a:	4083      	lsls	r3, r0
 800626c:	4313      	orrs	r3, r2
 800626e:	602b      	str	r3, [r5, #0]
 8006270:	9703      	str	r7, [sp, #12]
 8006272:	e7cb      	b.n	800620c <_vfiprintf_r+0xe4>
 8006274:	9b07      	ldr	r3, [sp, #28]
 8006276:	1d19      	adds	r1, r3, #4
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	9107      	str	r1, [sp, #28]
 800627c:	2b00      	cmp	r3, #0
 800627e:	db01      	blt.n	8006284 <_vfiprintf_r+0x15c>
 8006280:	930b      	str	r3, [sp, #44]	; 0x2c
 8006282:	e004      	b.n	800628e <_vfiprintf_r+0x166>
 8006284:	425b      	negs	r3, r3
 8006286:	60eb      	str	r3, [r5, #12]
 8006288:	2302      	movs	r3, #2
 800628a:	4313      	orrs	r3, r2
 800628c:	602b      	str	r3, [r5, #0]
 800628e:	783b      	ldrb	r3, [r7, #0]
 8006290:	2b2e      	cmp	r3, #46	; 0x2e
 8006292:	d10a      	bne.n	80062aa <_vfiprintf_r+0x182>
 8006294:	787b      	ldrb	r3, [r7, #1]
 8006296:	2b2a      	cmp	r3, #42	; 0x2a
 8006298:	d137      	bne.n	800630a <_vfiprintf_r+0x1e2>
 800629a:	9b07      	ldr	r3, [sp, #28]
 800629c:	3702      	adds	r7, #2
 800629e:	1d1a      	adds	r2, r3, #4
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	9207      	str	r2, [sp, #28]
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	db2d      	blt.n	8006304 <_vfiprintf_r+0x1dc>
 80062a8:	9309      	str	r3, [sp, #36]	; 0x24
 80062aa:	2203      	movs	r2, #3
 80062ac:	7839      	ldrb	r1, [r7, #0]
 80062ae:	4837      	ldr	r0, [pc, #220]	; (800638c <_vfiprintf_r+0x264>)
 80062b0:	f000 fa36 	bl	8006720 <memchr>
 80062b4:	2800      	cmp	r0, #0
 80062b6:	d007      	beq.n	80062c8 <_vfiprintf_r+0x1a0>
 80062b8:	4b34      	ldr	r3, [pc, #208]	; (800638c <_vfiprintf_r+0x264>)
 80062ba:	682a      	ldr	r2, [r5, #0]
 80062bc:	1ac0      	subs	r0, r0, r3
 80062be:	2340      	movs	r3, #64	; 0x40
 80062c0:	4083      	lsls	r3, r0
 80062c2:	4313      	orrs	r3, r2
 80062c4:	3701      	adds	r7, #1
 80062c6:	602b      	str	r3, [r5, #0]
 80062c8:	7839      	ldrb	r1, [r7, #0]
 80062ca:	1c7b      	adds	r3, r7, #1
 80062cc:	2206      	movs	r2, #6
 80062ce:	4830      	ldr	r0, [pc, #192]	; (8006390 <_vfiprintf_r+0x268>)
 80062d0:	9303      	str	r3, [sp, #12]
 80062d2:	7629      	strb	r1, [r5, #24]
 80062d4:	f000 fa24 	bl	8006720 <memchr>
 80062d8:	2800      	cmp	r0, #0
 80062da:	d045      	beq.n	8006368 <_vfiprintf_r+0x240>
 80062dc:	4b2d      	ldr	r3, [pc, #180]	; (8006394 <_vfiprintf_r+0x26c>)
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d127      	bne.n	8006332 <_vfiprintf_r+0x20a>
 80062e2:	2207      	movs	r2, #7
 80062e4:	9b07      	ldr	r3, [sp, #28]
 80062e6:	3307      	adds	r3, #7
 80062e8:	4393      	bics	r3, r2
 80062ea:	3308      	adds	r3, #8
 80062ec:	9307      	str	r3, [sp, #28]
 80062ee:	696b      	ldr	r3, [r5, #20]
 80062f0:	9a04      	ldr	r2, [sp, #16]
 80062f2:	189b      	adds	r3, r3, r2
 80062f4:	616b      	str	r3, [r5, #20]
 80062f6:	e75d      	b.n	80061b4 <_vfiprintf_r+0x8c>
 80062f8:	210a      	movs	r1, #10
 80062fa:	434b      	muls	r3, r1
 80062fc:	4667      	mov	r7, ip
 80062fe:	189b      	adds	r3, r3, r2
 8006300:	3909      	subs	r1, #9
 8006302:	e7a3      	b.n	800624c <_vfiprintf_r+0x124>
 8006304:	2301      	movs	r3, #1
 8006306:	425b      	negs	r3, r3
 8006308:	e7ce      	b.n	80062a8 <_vfiprintf_r+0x180>
 800630a:	2300      	movs	r3, #0
 800630c:	001a      	movs	r2, r3
 800630e:	3701      	adds	r7, #1
 8006310:	606b      	str	r3, [r5, #4]
 8006312:	7839      	ldrb	r1, [r7, #0]
 8006314:	1c78      	adds	r0, r7, #1
 8006316:	3930      	subs	r1, #48	; 0x30
 8006318:	4684      	mov	ip, r0
 800631a:	2909      	cmp	r1, #9
 800631c:	d903      	bls.n	8006326 <_vfiprintf_r+0x1fe>
 800631e:	2b00      	cmp	r3, #0
 8006320:	d0c3      	beq.n	80062aa <_vfiprintf_r+0x182>
 8006322:	9209      	str	r2, [sp, #36]	; 0x24
 8006324:	e7c1      	b.n	80062aa <_vfiprintf_r+0x182>
 8006326:	230a      	movs	r3, #10
 8006328:	435a      	muls	r2, r3
 800632a:	4667      	mov	r7, ip
 800632c:	1852      	adds	r2, r2, r1
 800632e:	3b09      	subs	r3, #9
 8006330:	e7ef      	b.n	8006312 <_vfiprintf_r+0x1ea>
 8006332:	ab07      	add	r3, sp, #28
 8006334:	9300      	str	r3, [sp, #0]
 8006336:	0022      	movs	r2, r4
 8006338:	0029      	movs	r1, r5
 800633a:	0030      	movs	r0, r6
 800633c:	4b16      	ldr	r3, [pc, #88]	; (8006398 <_vfiprintf_r+0x270>)
 800633e:	e000      	b.n	8006342 <_vfiprintf_r+0x21a>
 8006340:	bf00      	nop
 8006342:	9004      	str	r0, [sp, #16]
 8006344:	9b04      	ldr	r3, [sp, #16]
 8006346:	3301      	adds	r3, #1
 8006348:	d1d1      	bne.n	80062ee <_vfiprintf_r+0x1c6>
 800634a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800634c:	07db      	lsls	r3, r3, #31
 800634e:	d405      	bmi.n	800635c <_vfiprintf_r+0x234>
 8006350:	89a3      	ldrh	r3, [r4, #12]
 8006352:	059b      	lsls	r3, r3, #22
 8006354:	d402      	bmi.n	800635c <_vfiprintf_r+0x234>
 8006356:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006358:	f7ff fa26 	bl	80057a8 <__retarget_lock_release_recursive>
 800635c:	89a3      	ldrh	r3, [r4, #12]
 800635e:	065b      	lsls	r3, r3, #25
 8006360:	d500      	bpl.n	8006364 <_vfiprintf_r+0x23c>
 8006362:	e70a      	b.n	800617a <_vfiprintf_r+0x52>
 8006364:	980d      	ldr	r0, [sp, #52]	; 0x34
 8006366:	e70a      	b.n	800617e <_vfiprintf_r+0x56>
 8006368:	ab07      	add	r3, sp, #28
 800636a:	9300      	str	r3, [sp, #0]
 800636c:	0022      	movs	r2, r4
 800636e:	0029      	movs	r1, r5
 8006370:	0030      	movs	r0, r6
 8006372:	4b09      	ldr	r3, [pc, #36]	; (8006398 <_vfiprintf_r+0x270>)
 8006374:	f000 f882 	bl	800647c <_printf_i>
 8006378:	e7e3      	b.n	8006342 <_vfiprintf_r+0x21a>
 800637a:	46c0      	nop			; (mov r8, r8)
 800637c:	08006954 	.word	0x08006954
 8006380:	08006974 	.word	0x08006974
 8006384:	08006934 	.word	0x08006934
 8006388:	08006a46 	.word	0x08006a46
 800638c:	08006a4c 	.word	0x08006a4c
 8006390:	08006a50 	.word	0x08006a50
 8006394:	00000000 	.word	0x00000000
 8006398:	08006103 	.word	0x08006103

0800639c <_printf_common>:
 800639c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800639e:	0015      	movs	r5, r2
 80063a0:	9301      	str	r3, [sp, #4]
 80063a2:	688a      	ldr	r2, [r1, #8]
 80063a4:	690b      	ldr	r3, [r1, #16]
 80063a6:	000c      	movs	r4, r1
 80063a8:	9000      	str	r0, [sp, #0]
 80063aa:	4293      	cmp	r3, r2
 80063ac:	da00      	bge.n	80063b0 <_printf_common+0x14>
 80063ae:	0013      	movs	r3, r2
 80063b0:	0022      	movs	r2, r4
 80063b2:	602b      	str	r3, [r5, #0]
 80063b4:	3243      	adds	r2, #67	; 0x43
 80063b6:	7812      	ldrb	r2, [r2, #0]
 80063b8:	2a00      	cmp	r2, #0
 80063ba:	d001      	beq.n	80063c0 <_printf_common+0x24>
 80063bc:	3301      	adds	r3, #1
 80063be:	602b      	str	r3, [r5, #0]
 80063c0:	6823      	ldr	r3, [r4, #0]
 80063c2:	069b      	lsls	r3, r3, #26
 80063c4:	d502      	bpl.n	80063cc <_printf_common+0x30>
 80063c6:	682b      	ldr	r3, [r5, #0]
 80063c8:	3302      	adds	r3, #2
 80063ca:	602b      	str	r3, [r5, #0]
 80063cc:	6822      	ldr	r2, [r4, #0]
 80063ce:	2306      	movs	r3, #6
 80063d0:	0017      	movs	r7, r2
 80063d2:	401f      	ands	r7, r3
 80063d4:	421a      	tst	r2, r3
 80063d6:	d027      	beq.n	8006428 <_printf_common+0x8c>
 80063d8:	0023      	movs	r3, r4
 80063da:	3343      	adds	r3, #67	; 0x43
 80063dc:	781b      	ldrb	r3, [r3, #0]
 80063de:	1e5a      	subs	r2, r3, #1
 80063e0:	4193      	sbcs	r3, r2
 80063e2:	6822      	ldr	r2, [r4, #0]
 80063e4:	0692      	lsls	r2, r2, #26
 80063e6:	d430      	bmi.n	800644a <_printf_common+0xae>
 80063e8:	0022      	movs	r2, r4
 80063ea:	9901      	ldr	r1, [sp, #4]
 80063ec:	9800      	ldr	r0, [sp, #0]
 80063ee:	9e08      	ldr	r6, [sp, #32]
 80063f0:	3243      	adds	r2, #67	; 0x43
 80063f2:	47b0      	blx	r6
 80063f4:	1c43      	adds	r3, r0, #1
 80063f6:	d025      	beq.n	8006444 <_printf_common+0xa8>
 80063f8:	2306      	movs	r3, #6
 80063fa:	6820      	ldr	r0, [r4, #0]
 80063fc:	682a      	ldr	r2, [r5, #0]
 80063fe:	68e1      	ldr	r1, [r4, #12]
 8006400:	2500      	movs	r5, #0
 8006402:	4003      	ands	r3, r0
 8006404:	2b04      	cmp	r3, #4
 8006406:	d103      	bne.n	8006410 <_printf_common+0x74>
 8006408:	1a8d      	subs	r5, r1, r2
 800640a:	43eb      	mvns	r3, r5
 800640c:	17db      	asrs	r3, r3, #31
 800640e:	401d      	ands	r5, r3
 8006410:	68a3      	ldr	r3, [r4, #8]
 8006412:	6922      	ldr	r2, [r4, #16]
 8006414:	4293      	cmp	r3, r2
 8006416:	dd01      	ble.n	800641c <_printf_common+0x80>
 8006418:	1a9b      	subs	r3, r3, r2
 800641a:	18ed      	adds	r5, r5, r3
 800641c:	2700      	movs	r7, #0
 800641e:	42bd      	cmp	r5, r7
 8006420:	d120      	bne.n	8006464 <_printf_common+0xc8>
 8006422:	2000      	movs	r0, #0
 8006424:	e010      	b.n	8006448 <_printf_common+0xac>
 8006426:	3701      	adds	r7, #1
 8006428:	68e3      	ldr	r3, [r4, #12]
 800642a:	682a      	ldr	r2, [r5, #0]
 800642c:	1a9b      	subs	r3, r3, r2
 800642e:	42bb      	cmp	r3, r7
 8006430:	ddd2      	ble.n	80063d8 <_printf_common+0x3c>
 8006432:	0022      	movs	r2, r4
 8006434:	2301      	movs	r3, #1
 8006436:	9901      	ldr	r1, [sp, #4]
 8006438:	9800      	ldr	r0, [sp, #0]
 800643a:	9e08      	ldr	r6, [sp, #32]
 800643c:	3219      	adds	r2, #25
 800643e:	47b0      	blx	r6
 8006440:	1c43      	adds	r3, r0, #1
 8006442:	d1f0      	bne.n	8006426 <_printf_common+0x8a>
 8006444:	2001      	movs	r0, #1
 8006446:	4240      	negs	r0, r0
 8006448:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800644a:	2030      	movs	r0, #48	; 0x30
 800644c:	18e1      	adds	r1, r4, r3
 800644e:	3143      	adds	r1, #67	; 0x43
 8006450:	7008      	strb	r0, [r1, #0]
 8006452:	0021      	movs	r1, r4
 8006454:	1c5a      	adds	r2, r3, #1
 8006456:	3145      	adds	r1, #69	; 0x45
 8006458:	7809      	ldrb	r1, [r1, #0]
 800645a:	18a2      	adds	r2, r4, r2
 800645c:	3243      	adds	r2, #67	; 0x43
 800645e:	3302      	adds	r3, #2
 8006460:	7011      	strb	r1, [r2, #0]
 8006462:	e7c1      	b.n	80063e8 <_printf_common+0x4c>
 8006464:	0022      	movs	r2, r4
 8006466:	2301      	movs	r3, #1
 8006468:	9901      	ldr	r1, [sp, #4]
 800646a:	9800      	ldr	r0, [sp, #0]
 800646c:	9e08      	ldr	r6, [sp, #32]
 800646e:	321a      	adds	r2, #26
 8006470:	47b0      	blx	r6
 8006472:	1c43      	adds	r3, r0, #1
 8006474:	d0e6      	beq.n	8006444 <_printf_common+0xa8>
 8006476:	3701      	adds	r7, #1
 8006478:	e7d1      	b.n	800641e <_printf_common+0x82>
	...

0800647c <_printf_i>:
 800647c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800647e:	b08b      	sub	sp, #44	; 0x2c
 8006480:	9206      	str	r2, [sp, #24]
 8006482:	000a      	movs	r2, r1
 8006484:	3243      	adds	r2, #67	; 0x43
 8006486:	9307      	str	r3, [sp, #28]
 8006488:	9005      	str	r0, [sp, #20]
 800648a:	9204      	str	r2, [sp, #16]
 800648c:	7e0a      	ldrb	r2, [r1, #24]
 800648e:	000c      	movs	r4, r1
 8006490:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006492:	2a78      	cmp	r2, #120	; 0x78
 8006494:	d807      	bhi.n	80064a6 <_printf_i+0x2a>
 8006496:	2a62      	cmp	r2, #98	; 0x62
 8006498:	d809      	bhi.n	80064ae <_printf_i+0x32>
 800649a:	2a00      	cmp	r2, #0
 800649c:	d100      	bne.n	80064a0 <_printf_i+0x24>
 800649e:	e0c1      	b.n	8006624 <_printf_i+0x1a8>
 80064a0:	2a58      	cmp	r2, #88	; 0x58
 80064a2:	d100      	bne.n	80064a6 <_printf_i+0x2a>
 80064a4:	e08c      	b.n	80065c0 <_printf_i+0x144>
 80064a6:	0026      	movs	r6, r4
 80064a8:	3642      	adds	r6, #66	; 0x42
 80064aa:	7032      	strb	r2, [r6, #0]
 80064ac:	e022      	b.n	80064f4 <_printf_i+0x78>
 80064ae:	0010      	movs	r0, r2
 80064b0:	3863      	subs	r0, #99	; 0x63
 80064b2:	2815      	cmp	r0, #21
 80064b4:	d8f7      	bhi.n	80064a6 <_printf_i+0x2a>
 80064b6:	f7f9 fe2d 	bl	8000114 <__gnu_thumb1_case_shi>
 80064ba:	0016      	.short	0x0016
 80064bc:	fff6001f 	.word	0xfff6001f
 80064c0:	fff6fff6 	.word	0xfff6fff6
 80064c4:	001ffff6 	.word	0x001ffff6
 80064c8:	fff6fff6 	.word	0xfff6fff6
 80064cc:	fff6fff6 	.word	0xfff6fff6
 80064d0:	003600a8 	.word	0x003600a8
 80064d4:	fff6009a 	.word	0xfff6009a
 80064d8:	00b9fff6 	.word	0x00b9fff6
 80064dc:	0036fff6 	.word	0x0036fff6
 80064e0:	fff6fff6 	.word	0xfff6fff6
 80064e4:	009e      	.short	0x009e
 80064e6:	0026      	movs	r6, r4
 80064e8:	681a      	ldr	r2, [r3, #0]
 80064ea:	3642      	adds	r6, #66	; 0x42
 80064ec:	1d11      	adds	r1, r2, #4
 80064ee:	6019      	str	r1, [r3, #0]
 80064f0:	6813      	ldr	r3, [r2, #0]
 80064f2:	7033      	strb	r3, [r6, #0]
 80064f4:	2301      	movs	r3, #1
 80064f6:	e0a7      	b.n	8006648 <_printf_i+0x1cc>
 80064f8:	6808      	ldr	r0, [r1, #0]
 80064fa:	6819      	ldr	r1, [r3, #0]
 80064fc:	1d0a      	adds	r2, r1, #4
 80064fe:	0605      	lsls	r5, r0, #24
 8006500:	d50b      	bpl.n	800651a <_printf_i+0x9e>
 8006502:	680d      	ldr	r5, [r1, #0]
 8006504:	601a      	str	r2, [r3, #0]
 8006506:	2d00      	cmp	r5, #0
 8006508:	da03      	bge.n	8006512 <_printf_i+0x96>
 800650a:	232d      	movs	r3, #45	; 0x2d
 800650c:	9a04      	ldr	r2, [sp, #16]
 800650e:	426d      	negs	r5, r5
 8006510:	7013      	strb	r3, [r2, #0]
 8006512:	4b61      	ldr	r3, [pc, #388]	; (8006698 <_printf_i+0x21c>)
 8006514:	270a      	movs	r7, #10
 8006516:	9303      	str	r3, [sp, #12]
 8006518:	e01b      	b.n	8006552 <_printf_i+0xd6>
 800651a:	680d      	ldr	r5, [r1, #0]
 800651c:	601a      	str	r2, [r3, #0]
 800651e:	0641      	lsls	r1, r0, #25
 8006520:	d5f1      	bpl.n	8006506 <_printf_i+0x8a>
 8006522:	b22d      	sxth	r5, r5
 8006524:	e7ef      	b.n	8006506 <_printf_i+0x8a>
 8006526:	680d      	ldr	r5, [r1, #0]
 8006528:	6819      	ldr	r1, [r3, #0]
 800652a:	1d08      	adds	r0, r1, #4
 800652c:	6018      	str	r0, [r3, #0]
 800652e:	062e      	lsls	r6, r5, #24
 8006530:	d501      	bpl.n	8006536 <_printf_i+0xba>
 8006532:	680d      	ldr	r5, [r1, #0]
 8006534:	e003      	b.n	800653e <_printf_i+0xc2>
 8006536:	066d      	lsls	r5, r5, #25
 8006538:	d5fb      	bpl.n	8006532 <_printf_i+0xb6>
 800653a:	680d      	ldr	r5, [r1, #0]
 800653c:	b2ad      	uxth	r5, r5
 800653e:	4b56      	ldr	r3, [pc, #344]	; (8006698 <_printf_i+0x21c>)
 8006540:	2708      	movs	r7, #8
 8006542:	9303      	str	r3, [sp, #12]
 8006544:	2a6f      	cmp	r2, #111	; 0x6f
 8006546:	d000      	beq.n	800654a <_printf_i+0xce>
 8006548:	3702      	adds	r7, #2
 800654a:	0023      	movs	r3, r4
 800654c:	2200      	movs	r2, #0
 800654e:	3343      	adds	r3, #67	; 0x43
 8006550:	701a      	strb	r2, [r3, #0]
 8006552:	6863      	ldr	r3, [r4, #4]
 8006554:	60a3      	str	r3, [r4, #8]
 8006556:	2b00      	cmp	r3, #0
 8006558:	db03      	blt.n	8006562 <_printf_i+0xe6>
 800655a:	2204      	movs	r2, #4
 800655c:	6821      	ldr	r1, [r4, #0]
 800655e:	4391      	bics	r1, r2
 8006560:	6021      	str	r1, [r4, #0]
 8006562:	2d00      	cmp	r5, #0
 8006564:	d102      	bne.n	800656c <_printf_i+0xf0>
 8006566:	9e04      	ldr	r6, [sp, #16]
 8006568:	2b00      	cmp	r3, #0
 800656a:	d00c      	beq.n	8006586 <_printf_i+0x10a>
 800656c:	9e04      	ldr	r6, [sp, #16]
 800656e:	0028      	movs	r0, r5
 8006570:	0039      	movs	r1, r7
 8006572:	f7f9 fe5f 	bl	8000234 <__aeabi_uidivmod>
 8006576:	9b03      	ldr	r3, [sp, #12]
 8006578:	3e01      	subs	r6, #1
 800657a:	5c5b      	ldrb	r3, [r3, r1]
 800657c:	7033      	strb	r3, [r6, #0]
 800657e:	002b      	movs	r3, r5
 8006580:	0005      	movs	r5, r0
 8006582:	429f      	cmp	r7, r3
 8006584:	d9f3      	bls.n	800656e <_printf_i+0xf2>
 8006586:	2f08      	cmp	r7, #8
 8006588:	d109      	bne.n	800659e <_printf_i+0x122>
 800658a:	6823      	ldr	r3, [r4, #0]
 800658c:	07db      	lsls	r3, r3, #31
 800658e:	d506      	bpl.n	800659e <_printf_i+0x122>
 8006590:	6863      	ldr	r3, [r4, #4]
 8006592:	6922      	ldr	r2, [r4, #16]
 8006594:	4293      	cmp	r3, r2
 8006596:	dc02      	bgt.n	800659e <_printf_i+0x122>
 8006598:	2330      	movs	r3, #48	; 0x30
 800659a:	3e01      	subs	r6, #1
 800659c:	7033      	strb	r3, [r6, #0]
 800659e:	9b04      	ldr	r3, [sp, #16]
 80065a0:	1b9b      	subs	r3, r3, r6
 80065a2:	6123      	str	r3, [r4, #16]
 80065a4:	9b07      	ldr	r3, [sp, #28]
 80065a6:	0021      	movs	r1, r4
 80065a8:	9300      	str	r3, [sp, #0]
 80065aa:	9805      	ldr	r0, [sp, #20]
 80065ac:	9b06      	ldr	r3, [sp, #24]
 80065ae:	aa09      	add	r2, sp, #36	; 0x24
 80065b0:	f7ff fef4 	bl	800639c <_printf_common>
 80065b4:	1c43      	adds	r3, r0, #1
 80065b6:	d14c      	bne.n	8006652 <_printf_i+0x1d6>
 80065b8:	2001      	movs	r0, #1
 80065ba:	4240      	negs	r0, r0
 80065bc:	b00b      	add	sp, #44	; 0x2c
 80065be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80065c0:	3145      	adds	r1, #69	; 0x45
 80065c2:	700a      	strb	r2, [r1, #0]
 80065c4:	4a34      	ldr	r2, [pc, #208]	; (8006698 <_printf_i+0x21c>)
 80065c6:	9203      	str	r2, [sp, #12]
 80065c8:	681a      	ldr	r2, [r3, #0]
 80065ca:	6821      	ldr	r1, [r4, #0]
 80065cc:	ca20      	ldmia	r2!, {r5}
 80065ce:	601a      	str	r2, [r3, #0]
 80065d0:	0608      	lsls	r0, r1, #24
 80065d2:	d516      	bpl.n	8006602 <_printf_i+0x186>
 80065d4:	07cb      	lsls	r3, r1, #31
 80065d6:	d502      	bpl.n	80065de <_printf_i+0x162>
 80065d8:	2320      	movs	r3, #32
 80065da:	4319      	orrs	r1, r3
 80065dc:	6021      	str	r1, [r4, #0]
 80065de:	2710      	movs	r7, #16
 80065e0:	2d00      	cmp	r5, #0
 80065e2:	d1b2      	bne.n	800654a <_printf_i+0xce>
 80065e4:	2320      	movs	r3, #32
 80065e6:	6822      	ldr	r2, [r4, #0]
 80065e8:	439a      	bics	r2, r3
 80065ea:	6022      	str	r2, [r4, #0]
 80065ec:	e7ad      	b.n	800654a <_printf_i+0xce>
 80065ee:	2220      	movs	r2, #32
 80065f0:	6809      	ldr	r1, [r1, #0]
 80065f2:	430a      	orrs	r2, r1
 80065f4:	6022      	str	r2, [r4, #0]
 80065f6:	0022      	movs	r2, r4
 80065f8:	2178      	movs	r1, #120	; 0x78
 80065fa:	3245      	adds	r2, #69	; 0x45
 80065fc:	7011      	strb	r1, [r2, #0]
 80065fe:	4a27      	ldr	r2, [pc, #156]	; (800669c <_printf_i+0x220>)
 8006600:	e7e1      	b.n	80065c6 <_printf_i+0x14a>
 8006602:	0648      	lsls	r0, r1, #25
 8006604:	d5e6      	bpl.n	80065d4 <_printf_i+0x158>
 8006606:	b2ad      	uxth	r5, r5
 8006608:	e7e4      	b.n	80065d4 <_printf_i+0x158>
 800660a:	681a      	ldr	r2, [r3, #0]
 800660c:	680d      	ldr	r5, [r1, #0]
 800660e:	1d10      	adds	r0, r2, #4
 8006610:	6949      	ldr	r1, [r1, #20]
 8006612:	6018      	str	r0, [r3, #0]
 8006614:	6813      	ldr	r3, [r2, #0]
 8006616:	062e      	lsls	r6, r5, #24
 8006618:	d501      	bpl.n	800661e <_printf_i+0x1a2>
 800661a:	6019      	str	r1, [r3, #0]
 800661c:	e002      	b.n	8006624 <_printf_i+0x1a8>
 800661e:	066d      	lsls	r5, r5, #25
 8006620:	d5fb      	bpl.n	800661a <_printf_i+0x19e>
 8006622:	8019      	strh	r1, [r3, #0]
 8006624:	2300      	movs	r3, #0
 8006626:	9e04      	ldr	r6, [sp, #16]
 8006628:	6123      	str	r3, [r4, #16]
 800662a:	e7bb      	b.n	80065a4 <_printf_i+0x128>
 800662c:	681a      	ldr	r2, [r3, #0]
 800662e:	1d11      	adds	r1, r2, #4
 8006630:	6019      	str	r1, [r3, #0]
 8006632:	6816      	ldr	r6, [r2, #0]
 8006634:	2100      	movs	r1, #0
 8006636:	0030      	movs	r0, r6
 8006638:	6862      	ldr	r2, [r4, #4]
 800663a:	f000 f871 	bl	8006720 <memchr>
 800663e:	2800      	cmp	r0, #0
 8006640:	d001      	beq.n	8006646 <_printf_i+0x1ca>
 8006642:	1b80      	subs	r0, r0, r6
 8006644:	6060      	str	r0, [r4, #4]
 8006646:	6863      	ldr	r3, [r4, #4]
 8006648:	6123      	str	r3, [r4, #16]
 800664a:	2300      	movs	r3, #0
 800664c:	9a04      	ldr	r2, [sp, #16]
 800664e:	7013      	strb	r3, [r2, #0]
 8006650:	e7a8      	b.n	80065a4 <_printf_i+0x128>
 8006652:	6923      	ldr	r3, [r4, #16]
 8006654:	0032      	movs	r2, r6
 8006656:	9906      	ldr	r1, [sp, #24]
 8006658:	9805      	ldr	r0, [sp, #20]
 800665a:	9d07      	ldr	r5, [sp, #28]
 800665c:	47a8      	blx	r5
 800665e:	1c43      	adds	r3, r0, #1
 8006660:	d0aa      	beq.n	80065b8 <_printf_i+0x13c>
 8006662:	6823      	ldr	r3, [r4, #0]
 8006664:	079b      	lsls	r3, r3, #30
 8006666:	d415      	bmi.n	8006694 <_printf_i+0x218>
 8006668:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800666a:	68e0      	ldr	r0, [r4, #12]
 800666c:	4298      	cmp	r0, r3
 800666e:	daa5      	bge.n	80065bc <_printf_i+0x140>
 8006670:	0018      	movs	r0, r3
 8006672:	e7a3      	b.n	80065bc <_printf_i+0x140>
 8006674:	0022      	movs	r2, r4
 8006676:	2301      	movs	r3, #1
 8006678:	9906      	ldr	r1, [sp, #24]
 800667a:	9805      	ldr	r0, [sp, #20]
 800667c:	9e07      	ldr	r6, [sp, #28]
 800667e:	3219      	adds	r2, #25
 8006680:	47b0      	blx	r6
 8006682:	1c43      	adds	r3, r0, #1
 8006684:	d098      	beq.n	80065b8 <_printf_i+0x13c>
 8006686:	3501      	adds	r5, #1
 8006688:	68e3      	ldr	r3, [r4, #12]
 800668a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800668c:	1a9b      	subs	r3, r3, r2
 800668e:	42ab      	cmp	r3, r5
 8006690:	dcf0      	bgt.n	8006674 <_printf_i+0x1f8>
 8006692:	e7e9      	b.n	8006668 <_printf_i+0x1ec>
 8006694:	2500      	movs	r5, #0
 8006696:	e7f7      	b.n	8006688 <_printf_i+0x20c>
 8006698:	08006a57 	.word	0x08006a57
 800669c:	08006a68 	.word	0x08006a68

080066a0 <_read_r>:
 80066a0:	b570      	push	{r4, r5, r6, lr}
 80066a2:	0004      	movs	r4, r0
 80066a4:	0008      	movs	r0, r1
 80066a6:	0011      	movs	r1, r2
 80066a8:	001a      	movs	r2, r3
 80066aa:	2300      	movs	r3, #0
 80066ac:	4d05      	ldr	r5, [pc, #20]	; (80066c4 <_read_r+0x24>)
 80066ae:	602b      	str	r3, [r5, #0]
 80066b0:	f7fe fce4 	bl	800507c <_read>
 80066b4:	1c43      	adds	r3, r0, #1
 80066b6:	d103      	bne.n	80066c0 <_read_r+0x20>
 80066b8:	682b      	ldr	r3, [r5, #0]
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d000      	beq.n	80066c0 <_read_r+0x20>
 80066be:	6023      	str	r3, [r4, #0]
 80066c0:	bd70      	pop	{r4, r5, r6, pc}
 80066c2:	46c0      	nop			; (mov r8, r8)
 80066c4:	20000318 	.word	0x20000318

080066c8 <abort>:
 80066c8:	2006      	movs	r0, #6
 80066ca:	b510      	push	{r4, lr}
 80066cc:	f000 f85e 	bl	800678c <raise>
 80066d0:	2001      	movs	r0, #1
 80066d2:	f000 f87b 	bl	80067cc <_exit>
	...

080066d8 <_fstat_r>:
 80066d8:	2300      	movs	r3, #0
 80066da:	b570      	push	{r4, r5, r6, lr}
 80066dc:	4d06      	ldr	r5, [pc, #24]	; (80066f8 <_fstat_r+0x20>)
 80066de:	0004      	movs	r4, r0
 80066e0:	0008      	movs	r0, r1
 80066e2:	0011      	movs	r1, r2
 80066e4:	602b      	str	r3, [r5, #0]
 80066e6:	f7fe fda7 	bl	8005238 <_fstat>
 80066ea:	1c43      	adds	r3, r0, #1
 80066ec:	d103      	bne.n	80066f6 <_fstat_r+0x1e>
 80066ee:	682b      	ldr	r3, [r5, #0]
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d000      	beq.n	80066f6 <_fstat_r+0x1e>
 80066f4:	6023      	str	r3, [r4, #0]
 80066f6:	bd70      	pop	{r4, r5, r6, pc}
 80066f8:	20000318 	.word	0x20000318

080066fc <_isatty_r>:
 80066fc:	2300      	movs	r3, #0
 80066fe:	b570      	push	{r4, r5, r6, lr}
 8006700:	4d06      	ldr	r5, [pc, #24]	; (800671c <_isatty_r+0x20>)
 8006702:	0004      	movs	r4, r0
 8006704:	0008      	movs	r0, r1
 8006706:	602b      	str	r3, [r5, #0]
 8006708:	f7fe ff02 	bl	8005510 <_isatty>
 800670c:	1c43      	adds	r3, r0, #1
 800670e:	d103      	bne.n	8006718 <_isatty_r+0x1c>
 8006710:	682b      	ldr	r3, [r5, #0]
 8006712:	2b00      	cmp	r3, #0
 8006714:	d000      	beq.n	8006718 <_isatty_r+0x1c>
 8006716:	6023      	str	r3, [r4, #0]
 8006718:	bd70      	pop	{r4, r5, r6, pc}
 800671a:	46c0      	nop			; (mov r8, r8)
 800671c:	20000318 	.word	0x20000318

08006720 <memchr>:
 8006720:	b2c9      	uxtb	r1, r1
 8006722:	1882      	adds	r2, r0, r2
 8006724:	4290      	cmp	r0, r2
 8006726:	d101      	bne.n	800672c <memchr+0xc>
 8006728:	2000      	movs	r0, #0
 800672a:	4770      	bx	lr
 800672c:	7803      	ldrb	r3, [r0, #0]
 800672e:	428b      	cmp	r3, r1
 8006730:	d0fb      	beq.n	800672a <memchr+0xa>
 8006732:	3001      	adds	r0, #1
 8006734:	e7f6      	b.n	8006724 <memchr+0x4>

08006736 <_raise_r>:
 8006736:	b570      	push	{r4, r5, r6, lr}
 8006738:	0004      	movs	r4, r0
 800673a:	000d      	movs	r5, r1
 800673c:	291f      	cmp	r1, #31
 800673e:	d904      	bls.n	800674a <_raise_r+0x14>
 8006740:	2316      	movs	r3, #22
 8006742:	6003      	str	r3, [r0, #0]
 8006744:	2001      	movs	r0, #1
 8006746:	4240      	negs	r0, r0
 8006748:	bd70      	pop	{r4, r5, r6, pc}
 800674a:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800674c:	2b00      	cmp	r3, #0
 800674e:	d004      	beq.n	800675a <_raise_r+0x24>
 8006750:	008a      	lsls	r2, r1, #2
 8006752:	189b      	adds	r3, r3, r2
 8006754:	681a      	ldr	r2, [r3, #0]
 8006756:	2a00      	cmp	r2, #0
 8006758:	d108      	bne.n	800676c <_raise_r+0x36>
 800675a:	0020      	movs	r0, r4
 800675c:	f000 f832 	bl	80067c4 <_getpid_r>
 8006760:	002a      	movs	r2, r5
 8006762:	0001      	movs	r1, r0
 8006764:	0020      	movs	r0, r4
 8006766:	f000 f81b 	bl	80067a0 <_kill_r>
 800676a:	e7ed      	b.n	8006748 <_raise_r+0x12>
 800676c:	2000      	movs	r0, #0
 800676e:	2a01      	cmp	r2, #1
 8006770:	d0ea      	beq.n	8006748 <_raise_r+0x12>
 8006772:	1c51      	adds	r1, r2, #1
 8006774:	d103      	bne.n	800677e <_raise_r+0x48>
 8006776:	2316      	movs	r3, #22
 8006778:	3001      	adds	r0, #1
 800677a:	6023      	str	r3, [r4, #0]
 800677c:	e7e4      	b.n	8006748 <_raise_r+0x12>
 800677e:	2400      	movs	r4, #0
 8006780:	0028      	movs	r0, r5
 8006782:	601c      	str	r4, [r3, #0]
 8006784:	4790      	blx	r2
 8006786:	0020      	movs	r0, r4
 8006788:	e7de      	b.n	8006748 <_raise_r+0x12>
	...

0800678c <raise>:
 800678c:	b510      	push	{r4, lr}
 800678e:	4b03      	ldr	r3, [pc, #12]	; (800679c <raise+0x10>)
 8006790:	0001      	movs	r1, r0
 8006792:	6818      	ldr	r0, [r3, #0]
 8006794:	f7ff ffcf 	bl	8006736 <_raise_r>
 8006798:	bd10      	pop	{r4, pc}
 800679a:	46c0      	nop			; (mov r8, r8)
 800679c:	20000014 	.word	0x20000014

080067a0 <_kill_r>:
 80067a0:	2300      	movs	r3, #0
 80067a2:	b570      	push	{r4, r5, r6, lr}
 80067a4:	4d06      	ldr	r5, [pc, #24]	; (80067c0 <_kill_r+0x20>)
 80067a6:	0004      	movs	r4, r0
 80067a8:	0008      	movs	r0, r1
 80067aa:	0011      	movs	r1, r2
 80067ac:	602b      	str	r3, [r5, #0]
 80067ae:	f000 f82b 	bl	8006808 <_kill>
 80067b2:	1c43      	adds	r3, r0, #1
 80067b4:	d103      	bne.n	80067be <_kill_r+0x1e>
 80067b6:	682b      	ldr	r3, [r5, #0]
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d000      	beq.n	80067be <_kill_r+0x1e>
 80067bc:	6023      	str	r3, [r4, #0]
 80067be:	bd70      	pop	{r4, r5, r6, pc}
 80067c0:	20000318 	.word	0x20000318

080067c4 <_getpid_r>:
 80067c4:	b510      	push	{r4, lr}
 80067c6:	f7fe fd13 	bl	80051f0 <_getpid>
 80067ca:	bd10      	pop	{r4, pc}

080067cc <_exit>:
 80067cc:	0001      	movs	r1, r0
 80067ce:	2001      	movs	r0, #1
 80067d0:	b510      	push	{r4, lr}
 80067d2:	4a02      	ldr	r2, [pc, #8]	; (80067dc <_exit+0x10>)
 80067d4:	4240      	negs	r0, r0
 80067d6:	f000 f803 	bl	80067e0 <_kill_shared>
 80067da:	46c0      	nop			; (mov r8, r8)
 80067dc:	00020026 	.word	0x00020026

080067e0 <_kill_shared>:
 80067e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80067e2:	466d      	mov	r5, sp
 80067e4:	6069      	str	r1, [r5, #4]
 80067e6:	9200      	str	r2, [sp, #0]
 80067e8:	f7fe fe20 	bl	800542c <_has_ext_exit_extended>
 80067ec:	2420      	movs	r4, #32
 80067ee:	2800      	cmp	r0, #0
 80067f0:	d100      	bne.n	80067f4 <_kill_shared+0x14>
 80067f2:	3c08      	subs	r4, #8
 80067f4:	f7fe fe1a 	bl	800542c <_has_ext_exit_extended>
 80067f8:	2800      	cmp	r0, #0
 80067fa:	d003      	beq.n	8006804 <_kill_shared+0x24>
 80067fc:	1c20      	adds	r0, r4, #0
 80067fe:	1c29      	adds	r1, r5, #0
 8006800:	beab      	bkpt	0x00ab
 8006802:	1c04      	adds	r4, r0, #0
 8006804:	9d00      	ldr	r5, [sp, #0]
 8006806:	e7f9      	b.n	80067fc <_kill_shared+0x1c>

08006808 <_kill>:
 8006808:	b510      	push	{r4, lr}
 800680a:	2906      	cmp	r1, #6
 800680c:	d102      	bne.n	8006814 <_kill+0xc>
 800680e:	4a02      	ldr	r2, [pc, #8]	; (8006818 <_kill+0x10>)
 8006810:	f7ff ffe6 	bl	80067e0 <_kill_shared>
 8006814:	4a01      	ldr	r2, [pc, #4]	; (800681c <_kill+0x14>)
 8006816:	e7fb      	b.n	8006810 <_kill+0x8>
 8006818:	00020023 	.word	0x00020023
 800681c:	00020026 	.word	0x00020026

08006820 <_init>:
 8006820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006822:	46c0      	nop			; (mov r8, r8)
 8006824:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006826:	bc08      	pop	{r3}
 8006828:	469e      	mov	lr, r3
 800682a:	4770      	bx	lr

0800682c <_fini>:
 800682c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800682e:	46c0      	nop			; (mov r8, r8)
 8006830:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006832:	bc08      	pop	{r3}
 8006834:	469e      	mov	lr, r3
 8006836:	4770      	bx	lr
