
snt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006d44  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000029c  08006e00  08006e00  00016e00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800709c  0800709c  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  0800709c  0800709c  0001709c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080070a4  080070a4  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080070a4  080070a4  000170a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080070a8  080070a8  000170a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  080070ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002e4  2000007c  08007128  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000360  08007128  00020360  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000164e5  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000031c0  00000000  00000000  00036589  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001260  00000000  00000000  00039750  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001108  00000000  00000000  0003a9b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ac33  00000000  00000000  0003bab8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017125  00000000  00000000  000566eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a4d6f  00000000  00000000  0006d810  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011257f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004fd8  00000000  00000000  001125d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000007c 	.word	0x2000007c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08006de8 	.word	0x08006de8

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000080 	.word	0x20000080
 8000100:	08006de8 	.word	0x08006de8

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__gnu_thumb1_case_shi>:
 8000114:	b403      	push	{r0, r1}
 8000116:	4671      	mov	r1, lr
 8000118:	0849      	lsrs	r1, r1, #1
 800011a:	0040      	lsls	r0, r0, #1
 800011c:	0049      	lsls	r1, r1, #1
 800011e:	5e09      	ldrsh	r1, [r1, r0]
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	448e      	add	lr, r1
 8000124:	bc03      	pop	{r0, r1}
 8000126:	4770      	bx	lr

08000128 <__udivsi3>:
 8000128:	2200      	movs	r2, #0
 800012a:	0843      	lsrs	r3, r0, #1
 800012c:	428b      	cmp	r3, r1
 800012e:	d374      	bcc.n	800021a <__udivsi3+0xf2>
 8000130:	0903      	lsrs	r3, r0, #4
 8000132:	428b      	cmp	r3, r1
 8000134:	d35f      	bcc.n	80001f6 <__udivsi3+0xce>
 8000136:	0a03      	lsrs	r3, r0, #8
 8000138:	428b      	cmp	r3, r1
 800013a:	d344      	bcc.n	80001c6 <__udivsi3+0x9e>
 800013c:	0b03      	lsrs	r3, r0, #12
 800013e:	428b      	cmp	r3, r1
 8000140:	d328      	bcc.n	8000194 <__udivsi3+0x6c>
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d30d      	bcc.n	8000164 <__udivsi3+0x3c>
 8000148:	22ff      	movs	r2, #255	; 0xff
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	ba12      	rev	r2, r2
 800014e:	0c03      	lsrs	r3, r0, #16
 8000150:	428b      	cmp	r3, r1
 8000152:	d302      	bcc.n	800015a <__udivsi3+0x32>
 8000154:	1212      	asrs	r2, r2, #8
 8000156:	0209      	lsls	r1, r1, #8
 8000158:	d065      	beq.n	8000226 <__udivsi3+0xfe>
 800015a:	0b03      	lsrs	r3, r0, #12
 800015c:	428b      	cmp	r3, r1
 800015e:	d319      	bcc.n	8000194 <__udivsi3+0x6c>
 8000160:	e000      	b.n	8000164 <__udivsi3+0x3c>
 8000162:	0a09      	lsrs	r1, r1, #8
 8000164:	0bc3      	lsrs	r3, r0, #15
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x46>
 800016a:	03cb      	lsls	r3, r1, #15
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b83      	lsrs	r3, r0, #14
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x52>
 8000176:	038b      	lsls	r3, r1, #14
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b43      	lsrs	r3, r0, #13
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x5e>
 8000182:	034b      	lsls	r3, r1, #13
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b03      	lsrs	r3, r0, #12
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x6a>
 800018e:	030b      	lsls	r3, r1, #12
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0ac3      	lsrs	r3, r0, #11
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x76>
 800019a:	02cb      	lsls	r3, r1, #11
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a83      	lsrs	r3, r0, #10
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x82>
 80001a6:	028b      	lsls	r3, r1, #10
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a43      	lsrs	r3, r0, #9
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x8e>
 80001b2:	024b      	lsls	r3, r1, #9
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a03      	lsrs	r3, r0, #8
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x9a>
 80001be:	020b      	lsls	r3, r1, #8
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	d2cd      	bcs.n	8000162 <__udivsi3+0x3a>
 80001c6:	09c3      	lsrs	r3, r0, #7
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xa8>
 80001cc:	01cb      	lsls	r3, r1, #7
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0983      	lsrs	r3, r0, #6
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xb4>
 80001d8:	018b      	lsls	r3, r1, #6
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0943      	lsrs	r3, r0, #5
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xc0>
 80001e4:	014b      	lsls	r3, r1, #5
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0903      	lsrs	r3, r0, #4
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xcc>
 80001f0:	010b      	lsls	r3, r1, #4
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	08c3      	lsrs	r3, r0, #3
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xd8>
 80001fc:	00cb      	lsls	r3, r1, #3
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0883      	lsrs	r3, r0, #2
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xe4>
 8000208:	008b      	lsls	r3, r1, #2
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	0843      	lsrs	r3, r0, #1
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xf0>
 8000214:	004b      	lsls	r3, r1, #1
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	1a41      	subs	r1, r0, r1
 800021c:	d200      	bcs.n	8000220 <__udivsi3+0xf8>
 800021e:	4601      	mov	r1, r0
 8000220:	4152      	adcs	r2, r2
 8000222:	4610      	mov	r0, r2
 8000224:	4770      	bx	lr
 8000226:	e7ff      	b.n	8000228 <__udivsi3+0x100>
 8000228:	b501      	push	{r0, lr}
 800022a:	2000      	movs	r0, #0
 800022c:	f000 f8f0 	bl	8000410 <__aeabi_idiv0>
 8000230:	bd02      	pop	{r1, pc}
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <__aeabi_uidivmod>:
 8000234:	2900      	cmp	r1, #0
 8000236:	d0f7      	beq.n	8000228 <__udivsi3+0x100>
 8000238:	e776      	b.n	8000128 <__udivsi3>
 800023a:	4770      	bx	lr

0800023c <__divsi3>:
 800023c:	4603      	mov	r3, r0
 800023e:	430b      	orrs	r3, r1
 8000240:	d47f      	bmi.n	8000342 <__divsi3+0x106>
 8000242:	2200      	movs	r2, #0
 8000244:	0843      	lsrs	r3, r0, #1
 8000246:	428b      	cmp	r3, r1
 8000248:	d374      	bcc.n	8000334 <__divsi3+0xf8>
 800024a:	0903      	lsrs	r3, r0, #4
 800024c:	428b      	cmp	r3, r1
 800024e:	d35f      	bcc.n	8000310 <__divsi3+0xd4>
 8000250:	0a03      	lsrs	r3, r0, #8
 8000252:	428b      	cmp	r3, r1
 8000254:	d344      	bcc.n	80002e0 <__divsi3+0xa4>
 8000256:	0b03      	lsrs	r3, r0, #12
 8000258:	428b      	cmp	r3, r1
 800025a:	d328      	bcc.n	80002ae <__divsi3+0x72>
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d30d      	bcc.n	800027e <__divsi3+0x42>
 8000262:	22ff      	movs	r2, #255	; 0xff
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	ba12      	rev	r2, r2
 8000268:	0c03      	lsrs	r3, r0, #16
 800026a:	428b      	cmp	r3, r1
 800026c:	d302      	bcc.n	8000274 <__divsi3+0x38>
 800026e:	1212      	asrs	r2, r2, #8
 8000270:	0209      	lsls	r1, r1, #8
 8000272:	d065      	beq.n	8000340 <__divsi3+0x104>
 8000274:	0b03      	lsrs	r3, r0, #12
 8000276:	428b      	cmp	r3, r1
 8000278:	d319      	bcc.n	80002ae <__divsi3+0x72>
 800027a:	e000      	b.n	800027e <__divsi3+0x42>
 800027c:	0a09      	lsrs	r1, r1, #8
 800027e:	0bc3      	lsrs	r3, r0, #15
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x4c>
 8000284:	03cb      	lsls	r3, r1, #15
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b83      	lsrs	r3, r0, #14
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x58>
 8000290:	038b      	lsls	r3, r1, #14
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b43      	lsrs	r3, r0, #13
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x64>
 800029c:	034b      	lsls	r3, r1, #13
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b03      	lsrs	r3, r0, #12
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x70>
 80002a8:	030b      	lsls	r3, r1, #12
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0ac3      	lsrs	r3, r0, #11
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x7c>
 80002b4:	02cb      	lsls	r3, r1, #11
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a83      	lsrs	r3, r0, #10
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x88>
 80002c0:	028b      	lsls	r3, r1, #10
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a43      	lsrs	r3, r0, #9
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x94>
 80002cc:	024b      	lsls	r3, r1, #9
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a03      	lsrs	r3, r0, #8
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0xa0>
 80002d8:	020b      	lsls	r3, r1, #8
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	d2cd      	bcs.n	800027c <__divsi3+0x40>
 80002e0:	09c3      	lsrs	r3, r0, #7
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xae>
 80002e6:	01cb      	lsls	r3, r1, #7
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0983      	lsrs	r3, r0, #6
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xba>
 80002f2:	018b      	lsls	r3, r1, #6
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0943      	lsrs	r3, r0, #5
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xc6>
 80002fe:	014b      	lsls	r3, r1, #5
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0903      	lsrs	r3, r0, #4
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xd2>
 800030a:	010b      	lsls	r3, r1, #4
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	08c3      	lsrs	r3, r0, #3
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xde>
 8000316:	00cb      	lsls	r3, r1, #3
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0883      	lsrs	r3, r0, #2
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xea>
 8000322:	008b      	lsls	r3, r1, #2
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	0843      	lsrs	r3, r0, #1
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xf6>
 800032e:	004b      	lsls	r3, r1, #1
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	1a41      	subs	r1, r0, r1
 8000336:	d200      	bcs.n	800033a <__divsi3+0xfe>
 8000338:	4601      	mov	r1, r0
 800033a:	4152      	adcs	r2, r2
 800033c:	4610      	mov	r0, r2
 800033e:	4770      	bx	lr
 8000340:	e05d      	b.n	80003fe <__divsi3+0x1c2>
 8000342:	0fca      	lsrs	r2, r1, #31
 8000344:	d000      	beq.n	8000348 <__divsi3+0x10c>
 8000346:	4249      	negs	r1, r1
 8000348:	1003      	asrs	r3, r0, #32
 800034a:	d300      	bcc.n	800034e <__divsi3+0x112>
 800034c:	4240      	negs	r0, r0
 800034e:	4053      	eors	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	469c      	mov	ip, r3
 8000354:	0903      	lsrs	r3, r0, #4
 8000356:	428b      	cmp	r3, r1
 8000358:	d32d      	bcc.n	80003b6 <__divsi3+0x17a>
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d312      	bcc.n	8000386 <__divsi3+0x14a>
 8000360:	22fc      	movs	r2, #252	; 0xfc
 8000362:	0189      	lsls	r1, r1, #6
 8000364:	ba12      	rev	r2, r2
 8000366:	0a03      	lsrs	r3, r0, #8
 8000368:	428b      	cmp	r3, r1
 800036a:	d30c      	bcc.n	8000386 <__divsi3+0x14a>
 800036c:	0189      	lsls	r1, r1, #6
 800036e:	1192      	asrs	r2, r2, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d308      	bcc.n	8000386 <__divsi3+0x14a>
 8000374:	0189      	lsls	r1, r1, #6
 8000376:	1192      	asrs	r2, r2, #6
 8000378:	428b      	cmp	r3, r1
 800037a:	d304      	bcc.n	8000386 <__divsi3+0x14a>
 800037c:	0189      	lsls	r1, r1, #6
 800037e:	d03a      	beq.n	80003f6 <__divsi3+0x1ba>
 8000380:	1192      	asrs	r2, r2, #6
 8000382:	e000      	b.n	8000386 <__divsi3+0x14a>
 8000384:	0989      	lsrs	r1, r1, #6
 8000386:	09c3      	lsrs	r3, r0, #7
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x154>
 800038c:	01cb      	lsls	r3, r1, #7
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0983      	lsrs	r3, r0, #6
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x160>
 8000398:	018b      	lsls	r3, r1, #6
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0943      	lsrs	r3, r0, #5
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x16c>
 80003a4:	014b      	lsls	r3, r1, #5
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0903      	lsrs	r3, r0, #4
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x178>
 80003b0:	010b      	lsls	r3, r1, #4
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	08c3      	lsrs	r3, r0, #3
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x184>
 80003bc:	00cb      	lsls	r3, r1, #3
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0883      	lsrs	r3, r0, #2
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x190>
 80003c8:	008b      	lsls	r3, r1, #2
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	d2d9      	bcs.n	8000384 <__divsi3+0x148>
 80003d0:	0843      	lsrs	r3, r0, #1
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d301      	bcc.n	80003da <__divsi3+0x19e>
 80003d6:	004b      	lsls	r3, r1, #1
 80003d8:	1ac0      	subs	r0, r0, r3
 80003da:	4152      	adcs	r2, r2
 80003dc:	1a41      	subs	r1, r0, r1
 80003de:	d200      	bcs.n	80003e2 <__divsi3+0x1a6>
 80003e0:	4601      	mov	r1, r0
 80003e2:	4663      	mov	r3, ip
 80003e4:	4152      	adcs	r2, r2
 80003e6:	105b      	asrs	r3, r3, #1
 80003e8:	4610      	mov	r0, r2
 80003ea:	d301      	bcc.n	80003f0 <__divsi3+0x1b4>
 80003ec:	4240      	negs	r0, r0
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d500      	bpl.n	80003f4 <__divsi3+0x1b8>
 80003f2:	4249      	negs	r1, r1
 80003f4:	4770      	bx	lr
 80003f6:	4663      	mov	r3, ip
 80003f8:	105b      	asrs	r3, r3, #1
 80003fa:	d300      	bcc.n	80003fe <__divsi3+0x1c2>
 80003fc:	4240      	negs	r0, r0
 80003fe:	b501      	push	{r0, lr}
 8000400:	2000      	movs	r0, #0
 8000402:	f000 f805 	bl	8000410 <__aeabi_idiv0>
 8000406:	bd02      	pop	{r1, pc}

08000408 <__aeabi_idivmod>:
 8000408:	2900      	cmp	r1, #0
 800040a:	d0f8      	beq.n	80003fe <__divsi3+0x1c2>
 800040c:	e716      	b.n	800023c <__divsi3>
 800040e:	4770      	bx	lr

08000410 <__aeabi_idiv0>:
 8000410:	4770      	bx	lr
 8000412:	46c0      	nop			; (mov r8, r8)

08000414 <__aeabi_uldivmod>:
 8000414:	2b00      	cmp	r3, #0
 8000416:	d111      	bne.n	800043c <__aeabi_uldivmod+0x28>
 8000418:	2a00      	cmp	r2, #0
 800041a:	d10f      	bne.n	800043c <__aeabi_uldivmod+0x28>
 800041c:	2900      	cmp	r1, #0
 800041e:	d100      	bne.n	8000422 <__aeabi_uldivmod+0xe>
 8000420:	2800      	cmp	r0, #0
 8000422:	d002      	beq.n	800042a <__aeabi_uldivmod+0x16>
 8000424:	2100      	movs	r1, #0
 8000426:	43c9      	mvns	r1, r1
 8000428:	0008      	movs	r0, r1
 800042a:	b407      	push	{r0, r1, r2}
 800042c:	4802      	ldr	r0, [pc, #8]	; (8000438 <__aeabi_uldivmod+0x24>)
 800042e:	a102      	add	r1, pc, #8	; (adr r1, 8000438 <__aeabi_uldivmod+0x24>)
 8000430:	1840      	adds	r0, r0, r1
 8000432:	9002      	str	r0, [sp, #8]
 8000434:	bd03      	pop	{r0, r1, pc}
 8000436:	46c0      	nop			; (mov r8, r8)
 8000438:	ffffffd9 	.word	0xffffffd9
 800043c:	b403      	push	{r0, r1}
 800043e:	4668      	mov	r0, sp
 8000440:	b501      	push	{r0, lr}
 8000442:	9802      	ldr	r0, [sp, #8]
 8000444:	f000 f806 	bl	8000454 <__udivmoddi4>
 8000448:	9b01      	ldr	r3, [sp, #4]
 800044a:	469e      	mov	lr, r3
 800044c:	b002      	add	sp, #8
 800044e:	bc0c      	pop	{r2, r3}
 8000450:	4770      	bx	lr
 8000452:	46c0      	nop			; (mov r8, r8)

08000454 <__udivmoddi4>:
 8000454:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000456:	4657      	mov	r7, sl
 8000458:	464e      	mov	r6, r9
 800045a:	4645      	mov	r5, r8
 800045c:	46de      	mov	lr, fp
 800045e:	b5e0      	push	{r5, r6, r7, lr}
 8000460:	0004      	movs	r4, r0
 8000462:	000d      	movs	r5, r1
 8000464:	4692      	mov	sl, r2
 8000466:	4699      	mov	r9, r3
 8000468:	b083      	sub	sp, #12
 800046a:	428b      	cmp	r3, r1
 800046c:	d830      	bhi.n	80004d0 <__udivmoddi4+0x7c>
 800046e:	d02d      	beq.n	80004cc <__udivmoddi4+0x78>
 8000470:	4649      	mov	r1, r9
 8000472:	4650      	mov	r0, sl
 8000474:	f000 f8ba 	bl	80005ec <__clzdi2>
 8000478:	0029      	movs	r1, r5
 800047a:	0006      	movs	r6, r0
 800047c:	0020      	movs	r0, r4
 800047e:	f000 f8b5 	bl	80005ec <__clzdi2>
 8000482:	1a33      	subs	r3, r6, r0
 8000484:	4698      	mov	r8, r3
 8000486:	3b20      	subs	r3, #32
 8000488:	469b      	mov	fp, r3
 800048a:	d433      	bmi.n	80004f4 <__udivmoddi4+0xa0>
 800048c:	465a      	mov	r2, fp
 800048e:	4653      	mov	r3, sl
 8000490:	4093      	lsls	r3, r2
 8000492:	4642      	mov	r2, r8
 8000494:	001f      	movs	r7, r3
 8000496:	4653      	mov	r3, sl
 8000498:	4093      	lsls	r3, r2
 800049a:	001e      	movs	r6, r3
 800049c:	42af      	cmp	r7, r5
 800049e:	d83a      	bhi.n	8000516 <__udivmoddi4+0xc2>
 80004a0:	42af      	cmp	r7, r5
 80004a2:	d100      	bne.n	80004a6 <__udivmoddi4+0x52>
 80004a4:	e078      	b.n	8000598 <__udivmoddi4+0x144>
 80004a6:	465b      	mov	r3, fp
 80004a8:	1ba4      	subs	r4, r4, r6
 80004aa:	41bd      	sbcs	r5, r7
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	da00      	bge.n	80004b2 <__udivmoddi4+0x5e>
 80004b0:	e075      	b.n	800059e <__udivmoddi4+0x14a>
 80004b2:	2200      	movs	r2, #0
 80004b4:	2300      	movs	r3, #0
 80004b6:	9200      	str	r2, [sp, #0]
 80004b8:	9301      	str	r3, [sp, #4]
 80004ba:	2301      	movs	r3, #1
 80004bc:	465a      	mov	r2, fp
 80004be:	4093      	lsls	r3, r2
 80004c0:	9301      	str	r3, [sp, #4]
 80004c2:	2301      	movs	r3, #1
 80004c4:	4642      	mov	r2, r8
 80004c6:	4093      	lsls	r3, r2
 80004c8:	9300      	str	r3, [sp, #0]
 80004ca:	e028      	b.n	800051e <__udivmoddi4+0xca>
 80004cc:	4282      	cmp	r2, r0
 80004ce:	d9cf      	bls.n	8000470 <__udivmoddi4+0x1c>
 80004d0:	2200      	movs	r2, #0
 80004d2:	2300      	movs	r3, #0
 80004d4:	9200      	str	r2, [sp, #0]
 80004d6:	9301      	str	r3, [sp, #4]
 80004d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d001      	beq.n	80004e2 <__udivmoddi4+0x8e>
 80004de:	601c      	str	r4, [r3, #0]
 80004e0:	605d      	str	r5, [r3, #4]
 80004e2:	9800      	ldr	r0, [sp, #0]
 80004e4:	9901      	ldr	r1, [sp, #4]
 80004e6:	b003      	add	sp, #12
 80004e8:	bcf0      	pop	{r4, r5, r6, r7}
 80004ea:	46bb      	mov	fp, r7
 80004ec:	46b2      	mov	sl, r6
 80004ee:	46a9      	mov	r9, r5
 80004f0:	46a0      	mov	r8, r4
 80004f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004f4:	4642      	mov	r2, r8
 80004f6:	2320      	movs	r3, #32
 80004f8:	1a9b      	subs	r3, r3, r2
 80004fa:	4652      	mov	r2, sl
 80004fc:	40da      	lsrs	r2, r3
 80004fe:	4641      	mov	r1, r8
 8000500:	0013      	movs	r3, r2
 8000502:	464a      	mov	r2, r9
 8000504:	408a      	lsls	r2, r1
 8000506:	0017      	movs	r7, r2
 8000508:	4642      	mov	r2, r8
 800050a:	431f      	orrs	r7, r3
 800050c:	4653      	mov	r3, sl
 800050e:	4093      	lsls	r3, r2
 8000510:	001e      	movs	r6, r3
 8000512:	42af      	cmp	r7, r5
 8000514:	d9c4      	bls.n	80004a0 <__udivmoddi4+0x4c>
 8000516:	2200      	movs	r2, #0
 8000518:	2300      	movs	r3, #0
 800051a:	9200      	str	r2, [sp, #0]
 800051c:	9301      	str	r3, [sp, #4]
 800051e:	4643      	mov	r3, r8
 8000520:	2b00      	cmp	r3, #0
 8000522:	d0d9      	beq.n	80004d8 <__udivmoddi4+0x84>
 8000524:	07fb      	lsls	r3, r7, #31
 8000526:	0872      	lsrs	r2, r6, #1
 8000528:	431a      	orrs	r2, r3
 800052a:	4646      	mov	r6, r8
 800052c:	087b      	lsrs	r3, r7, #1
 800052e:	e00e      	b.n	800054e <__udivmoddi4+0xfa>
 8000530:	42ab      	cmp	r3, r5
 8000532:	d101      	bne.n	8000538 <__udivmoddi4+0xe4>
 8000534:	42a2      	cmp	r2, r4
 8000536:	d80c      	bhi.n	8000552 <__udivmoddi4+0xfe>
 8000538:	1aa4      	subs	r4, r4, r2
 800053a:	419d      	sbcs	r5, r3
 800053c:	2001      	movs	r0, #1
 800053e:	1924      	adds	r4, r4, r4
 8000540:	416d      	adcs	r5, r5
 8000542:	2100      	movs	r1, #0
 8000544:	3e01      	subs	r6, #1
 8000546:	1824      	adds	r4, r4, r0
 8000548:	414d      	adcs	r5, r1
 800054a:	2e00      	cmp	r6, #0
 800054c:	d006      	beq.n	800055c <__udivmoddi4+0x108>
 800054e:	42ab      	cmp	r3, r5
 8000550:	d9ee      	bls.n	8000530 <__udivmoddi4+0xdc>
 8000552:	3e01      	subs	r6, #1
 8000554:	1924      	adds	r4, r4, r4
 8000556:	416d      	adcs	r5, r5
 8000558:	2e00      	cmp	r6, #0
 800055a:	d1f8      	bne.n	800054e <__udivmoddi4+0xfa>
 800055c:	9800      	ldr	r0, [sp, #0]
 800055e:	9901      	ldr	r1, [sp, #4]
 8000560:	465b      	mov	r3, fp
 8000562:	1900      	adds	r0, r0, r4
 8000564:	4169      	adcs	r1, r5
 8000566:	2b00      	cmp	r3, #0
 8000568:	db24      	blt.n	80005b4 <__udivmoddi4+0x160>
 800056a:	002b      	movs	r3, r5
 800056c:	465a      	mov	r2, fp
 800056e:	4644      	mov	r4, r8
 8000570:	40d3      	lsrs	r3, r2
 8000572:	002a      	movs	r2, r5
 8000574:	40e2      	lsrs	r2, r4
 8000576:	001c      	movs	r4, r3
 8000578:	465b      	mov	r3, fp
 800057a:	0015      	movs	r5, r2
 800057c:	2b00      	cmp	r3, #0
 800057e:	db2a      	blt.n	80005d6 <__udivmoddi4+0x182>
 8000580:	0026      	movs	r6, r4
 8000582:	409e      	lsls	r6, r3
 8000584:	0033      	movs	r3, r6
 8000586:	0026      	movs	r6, r4
 8000588:	4647      	mov	r7, r8
 800058a:	40be      	lsls	r6, r7
 800058c:	0032      	movs	r2, r6
 800058e:	1a80      	subs	r0, r0, r2
 8000590:	4199      	sbcs	r1, r3
 8000592:	9000      	str	r0, [sp, #0]
 8000594:	9101      	str	r1, [sp, #4]
 8000596:	e79f      	b.n	80004d8 <__udivmoddi4+0x84>
 8000598:	42a3      	cmp	r3, r4
 800059a:	d8bc      	bhi.n	8000516 <__udivmoddi4+0xc2>
 800059c:	e783      	b.n	80004a6 <__udivmoddi4+0x52>
 800059e:	4642      	mov	r2, r8
 80005a0:	2320      	movs	r3, #32
 80005a2:	2100      	movs	r1, #0
 80005a4:	1a9b      	subs	r3, r3, r2
 80005a6:	2200      	movs	r2, #0
 80005a8:	9100      	str	r1, [sp, #0]
 80005aa:	9201      	str	r2, [sp, #4]
 80005ac:	2201      	movs	r2, #1
 80005ae:	40da      	lsrs	r2, r3
 80005b0:	9201      	str	r2, [sp, #4]
 80005b2:	e786      	b.n	80004c2 <__udivmoddi4+0x6e>
 80005b4:	4642      	mov	r2, r8
 80005b6:	2320      	movs	r3, #32
 80005b8:	1a9b      	subs	r3, r3, r2
 80005ba:	002a      	movs	r2, r5
 80005bc:	4646      	mov	r6, r8
 80005be:	409a      	lsls	r2, r3
 80005c0:	0023      	movs	r3, r4
 80005c2:	40f3      	lsrs	r3, r6
 80005c4:	4644      	mov	r4, r8
 80005c6:	4313      	orrs	r3, r2
 80005c8:	002a      	movs	r2, r5
 80005ca:	40e2      	lsrs	r2, r4
 80005cc:	001c      	movs	r4, r3
 80005ce:	465b      	mov	r3, fp
 80005d0:	0015      	movs	r5, r2
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	dad4      	bge.n	8000580 <__udivmoddi4+0x12c>
 80005d6:	4642      	mov	r2, r8
 80005d8:	002f      	movs	r7, r5
 80005da:	2320      	movs	r3, #32
 80005dc:	0026      	movs	r6, r4
 80005de:	4097      	lsls	r7, r2
 80005e0:	1a9b      	subs	r3, r3, r2
 80005e2:	40de      	lsrs	r6, r3
 80005e4:	003b      	movs	r3, r7
 80005e6:	4333      	orrs	r3, r6
 80005e8:	e7cd      	b.n	8000586 <__udivmoddi4+0x132>
 80005ea:	46c0      	nop			; (mov r8, r8)

080005ec <__clzdi2>:
 80005ec:	b510      	push	{r4, lr}
 80005ee:	2900      	cmp	r1, #0
 80005f0:	d103      	bne.n	80005fa <__clzdi2+0xe>
 80005f2:	f000 f807 	bl	8000604 <__clzsi2>
 80005f6:	3020      	adds	r0, #32
 80005f8:	e002      	b.n	8000600 <__clzdi2+0x14>
 80005fa:	0008      	movs	r0, r1
 80005fc:	f000 f802 	bl	8000604 <__clzsi2>
 8000600:	bd10      	pop	{r4, pc}
 8000602:	46c0      	nop			; (mov r8, r8)

08000604 <__clzsi2>:
 8000604:	211c      	movs	r1, #28
 8000606:	2301      	movs	r3, #1
 8000608:	041b      	lsls	r3, r3, #16
 800060a:	4298      	cmp	r0, r3
 800060c:	d301      	bcc.n	8000612 <__clzsi2+0xe>
 800060e:	0c00      	lsrs	r0, r0, #16
 8000610:	3910      	subs	r1, #16
 8000612:	0a1b      	lsrs	r3, r3, #8
 8000614:	4298      	cmp	r0, r3
 8000616:	d301      	bcc.n	800061c <__clzsi2+0x18>
 8000618:	0a00      	lsrs	r0, r0, #8
 800061a:	3908      	subs	r1, #8
 800061c:	091b      	lsrs	r3, r3, #4
 800061e:	4298      	cmp	r0, r3
 8000620:	d301      	bcc.n	8000626 <__clzsi2+0x22>
 8000622:	0900      	lsrs	r0, r0, #4
 8000624:	3904      	subs	r1, #4
 8000626:	a202      	add	r2, pc, #8	; (adr r2, 8000630 <__clzsi2+0x2c>)
 8000628:	5c10      	ldrb	r0, [r2, r0]
 800062a:	1840      	adds	r0, r0, r1
 800062c:	4770      	bx	lr
 800062e:	46c0      	nop			; (mov r8, r8)
 8000630:	02020304 	.word	0x02020304
 8000634:	01010101 	.word	0x01010101
	...

08000640 <portInit_shiftreg>:
#include "cd4094.h"
#include "main.h"

//switches connected on encoder - D1, D4, D5, D8, D9, D12, D13, D16, D17, D20, D21, D22
void portInit_shiftreg(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	af00      	add	r7, sp, #0

    //default conditions
//    WDI_TOGGLE();
//    ANDgate_LOW();
//    STROBE_4094_LOW();
	HAL_GPIO_WritePin(STROBE_4094_GPIO_Port, STROBE_4094_Pin, RESET);
 8000644:	2380      	movs	r3, #128	; 0x80
 8000646:	005b      	lsls	r3, r3, #1
 8000648:	480a      	ldr	r0, [pc, #40]	; (8000674 <portInit_shiftreg+0x34>)
 800064a:	2200      	movs	r2, #0
 800064c:	0019      	movs	r1, r3
 800064e:	f001 fa89 	bl	8001b64 <HAL_GPIO_WritePin>
//    CLOCK_4094_LOW();
	HAL_GPIO_WritePin(CLK_4094_GPIO_Port, CLK_4094_Pin, RESET);
 8000652:	2380      	movs	r3, #128	; 0x80
 8000654:	009b      	lsls	r3, r3, #2
 8000656:	4807      	ldr	r0, [pc, #28]	; (8000674 <portInit_shiftreg+0x34>)
 8000658:	2200      	movs	r2, #0
 800065a:	0019      	movs	r1, r3
 800065c:	f001 fa82 	bl	8001b64 <HAL_GPIO_WritePin>
//    DATA_4094_LOW();
	HAL_GPIO_WritePin(DATA_4094_GPIO_Port, DATA_4094_Pin, RESET);
 8000660:	2380      	movs	r3, #128	; 0x80
 8000662:	005b      	lsls	r3, r3, #1
 8000664:	4804      	ldr	r0, [pc, #16]	; (8000678 <portInit_shiftreg+0x38>)
 8000666:	2200      	movs	r2, #0
 8000668:	0019      	movs	r1, r3
 800066a:	f001 fa7b 	bl	8001b64 <HAL_GPIO_WritePin>
}
 800066e:	46c0      	nop			; (mov r8, r8)
 8000670:	46bd      	mov	sp, r7
 8000672:	bd80      	pop	{r7, pc}
 8000674:	50000800 	.word	0x50000800
 8000678:	50000400 	.word	0x50000400

0800067c <writeToShiftRegister>:


void writeToShiftRegister(uint32_t value)
{
 800067c:	b590      	push	{r4, r7, lr}
 800067e:	b087      	sub	sp, #28
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]
    uint32_t tempValue = value;
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	617b      	str	r3, [r7, #20]
    if(tempValue > MaxAllowedNum)
 8000688:	697a      	ldr	r2, [r7, #20]
 800068a:	2380      	movs	r3, #128	; 0x80
 800068c:	045b      	lsls	r3, r3, #17
 800068e:	429a      	cmp	r2, r3
 8000690:	d301      	bcc.n	8000696 <writeToShiftRegister+0x1a>
    {
        tempValue = MaxAllowedNum;
 8000692:	4b2a      	ldr	r3, [pc, #168]	; (800073c <writeToShiftRegister+0xc0>)
 8000694:	617b      	str	r3, [r7, #20]
    }
    int j;

//    STROBE_4094_LOW();
	HAL_GPIO_WritePin(STROBE_4094_GPIO_Port, STROBE_4094_Pin, RESET);
 8000696:	2380      	movs	r3, #128	; 0x80
 8000698:	005b      	lsls	r3, r3, #1
 800069a:	4829      	ldr	r0, [pc, #164]	; (8000740 <writeToShiftRegister+0xc4>)
 800069c:	2200      	movs	r2, #0
 800069e:	0019      	movs	r1, r3
 80006a0:	f001 fa60 	bl	8001b64 <HAL_GPIO_WritePin>

    for(j = HCF4094_outputs-1; j>=0; j--)
 80006a4:	2317      	movs	r3, #23
 80006a6:	613b      	str	r3, [r7, #16]
 80006a8:	e03a      	b.n	8000720 <writeToShiftRegister+0xa4>
    {
        bool num = 0;
 80006aa:	210f      	movs	r1, #15
 80006ac:	187b      	adds	r3, r7, r1
 80006ae:	2200      	movs	r2, #0
 80006b0:	701a      	strb	r2, [r3, #0]
        uint32_t temp1Val = 0;
 80006b2:	2300      	movs	r3, #0
 80006b4:	60bb      	str	r3, [r7, #8]
        temp1Val = (tempValue >> (j - 1));
 80006b6:	693b      	ldr	r3, [r7, #16]
 80006b8:	3b01      	subs	r3, #1
 80006ba:	697a      	ldr	r2, [r7, #20]
 80006bc:	40da      	lsrs	r2, r3
 80006be:	0013      	movs	r3, r2
 80006c0:	60bb      	str	r3, [r7, #8]
        num = (bool)(temp1Val & 0x01);
 80006c2:	68bb      	ldr	r3, [r7, #8]
 80006c4:	2201      	movs	r2, #1
 80006c6:	401a      	ands	r2, r3
 80006c8:	000c      	movs	r4, r1
 80006ca:	187b      	adds	r3, r7, r1
 80006cc:	1e51      	subs	r1, r2, #1
 80006ce:	418a      	sbcs	r2, r1
 80006d0:	701a      	strb	r2, [r3, #0]

//        CLOCK_4094_LOW();
    	HAL_GPIO_WritePin(CLK_4094_GPIO_Port, CLK_4094_Pin, RESET);
 80006d2:	2380      	movs	r3, #128	; 0x80
 80006d4:	009b      	lsls	r3, r3, #2
 80006d6:	481a      	ldr	r0, [pc, #104]	; (8000740 <writeToShiftRegister+0xc4>)
 80006d8:	2200      	movs	r2, #0
 80006da:	0019      	movs	r1, r3
 80006dc:	f001 fa42 	bl	8001b64 <HAL_GPIO_WritePin>

        if(num == 0)
 80006e0:	193b      	adds	r3, r7, r4
 80006e2:	781b      	ldrb	r3, [r3, #0]
 80006e4:	2201      	movs	r2, #1
 80006e6:	4053      	eors	r3, r2
 80006e8:	b2db      	uxtb	r3, r3
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d007      	beq.n	80006fe <writeToShiftRegister+0x82>
        {
//            DATA_4094_HIGH();
        	HAL_GPIO_WritePin(DATA_4094_GPIO_Port, DATA_4094_Pin, SET);
 80006ee:	2380      	movs	r3, #128	; 0x80
 80006f0:	005b      	lsls	r3, r3, #1
 80006f2:	4814      	ldr	r0, [pc, #80]	; (8000744 <writeToShiftRegister+0xc8>)
 80006f4:	2201      	movs	r2, #1
 80006f6:	0019      	movs	r1, r3
 80006f8:	f001 fa34 	bl	8001b64 <HAL_GPIO_WritePin>
 80006fc:	e006      	b.n	800070c <writeToShiftRegister+0x90>

        }
        else
        {
//            DATA_4094_LOW();
        	HAL_GPIO_WritePin(DATA_4094_GPIO_Port, DATA_4094_Pin, RESET);
 80006fe:	2380      	movs	r3, #128	; 0x80
 8000700:	005b      	lsls	r3, r3, #1
 8000702:	4810      	ldr	r0, [pc, #64]	; (8000744 <writeToShiftRegister+0xc8>)
 8000704:	2200      	movs	r2, #0
 8000706:	0019      	movs	r1, r3
 8000708:	f001 fa2c 	bl	8001b64 <HAL_GPIO_WritePin>

        }
//        CLOCK_4094_HIGH();
    	HAL_GPIO_WritePin(CLK_4094_GPIO_Port, CLK_4094_Pin, SET);
 800070c:	2380      	movs	r3, #128	; 0x80
 800070e:	009b      	lsls	r3, r3, #2
 8000710:	480b      	ldr	r0, [pc, #44]	; (8000740 <writeToShiftRegister+0xc4>)
 8000712:	2201      	movs	r2, #1
 8000714:	0019      	movs	r1, r3
 8000716:	f001 fa25 	bl	8001b64 <HAL_GPIO_WritePin>
    for(j = HCF4094_outputs-1; j>=0; j--)
 800071a:	693b      	ldr	r3, [r7, #16]
 800071c:	3b01      	subs	r3, #1
 800071e:	613b      	str	r3, [r7, #16]
 8000720:	693b      	ldr	r3, [r7, #16]
 8000722:	2b00      	cmp	r3, #0
 8000724:	dac1      	bge.n	80006aa <writeToShiftRegister+0x2e>

    }
//    STROBE_4094_HIGH();
	HAL_GPIO_WritePin(STROBE_4094_GPIO_Port, STROBE_4094_Pin, SET);
 8000726:	2380      	movs	r3, #128	; 0x80
 8000728:	005b      	lsls	r3, r3, #1
 800072a:	4805      	ldr	r0, [pc, #20]	; (8000740 <writeToShiftRegister+0xc4>)
 800072c:	2201      	movs	r2, #1
 800072e:	0019      	movs	r1, r3
 8000730:	f001 fa18 	bl	8001b64 <HAL_GPIO_WritePin>

}
 8000734:	46c0      	nop			; (mov r8, r8)
 8000736:	46bd      	mov	sp, r7
 8000738:	b007      	add	sp, #28
 800073a:	bd90      	pop	{r4, r7, pc}
 800073c:	00ffffff 	.word	0x00ffffff
 8000740:	50000800 	.word	0x50000800
 8000744:	50000400 	.word	0x50000400

08000748 <triggerRelays>:

void triggerRelays(uint32_t ActiveRelays)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b086      	sub	sp, #24
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
  int j;
  uint32_t ShiftRegInput = 0;
 8000750:	2300      	movs	r3, #0
 8000752:	613b      	str	r3, [r7, #16]

  for(j = HCF4094_outputs; j>0; j--)
 8000754:	2318      	movs	r3, #24
 8000756:	617b      	str	r3, [r7, #20]
 8000758:	e0bc      	b.n	80008d4 <triggerRelays+0x18c>
  {
    bool num = 0;
 800075a:	210f      	movs	r1, #15
 800075c:	187b      	adds	r3, r7, r1
 800075e:	2200      	movs	r2, #0
 8000760:	701a      	strb	r2, [r3, #0]
    num = (bool)((ActiveRelays >> (j - 1)) & 0x01);
 8000762:	697b      	ldr	r3, [r7, #20]
 8000764:	3b01      	subs	r3, #1
 8000766:	687a      	ldr	r2, [r7, #4]
 8000768:	40da      	lsrs	r2, r3
 800076a:	0013      	movs	r3, r2
 800076c:	2201      	movs	r2, #1
 800076e:	401a      	ands	r2, r3
 8000770:	0008      	movs	r0, r1
 8000772:	187b      	adds	r3, r7, r1
 8000774:	1e51      	subs	r1, r2, #1
 8000776:	418a      	sbcs	r2, r1
 8000778:	701a      	strb	r2, [r3, #0]
    if(num == 1)
 800077a:	183b      	adds	r3, r7, r0
 800077c:	781b      	ldrb	r3, [r3, #0]
 800077e:	2b00      	cmp	r3, #0
 8000780:	d100      	bne.n	8000784 <triggerRelays+0x3c>
 8000782:	e083      	b.n	800088c <triggerRelays+0x144>
    {
        switch(j)
 8000784:	697b      	ldr	r3, [r7, #20]
 8000786:	2b15      	cmp	r3, #21
 8000788:	d900      	bls.n	800078c <triggerRelays+0x44>
 800078a:	e09d      	b.n	80008c8 <triggerRelays+0x180>
 800078c:	697b      	ldr	r3, [r7, #20]
 800078e:	009a      	lsls	r2, r3, #2
 8000790:	4b56      	ldr	r3, [pc, #344]	; (80008ec <triggerRelays+0x1a4>)
 8000792:	18d3      	adds	r3, r2, r3
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	469f      	mov	pc, r3
        {
            case 1: ShiftRegInput += RELAY01;     break;
 8000798:	693b      	ldr	r3, [r7, #16]
 800079a:	2280      	movs	r2, #128	; 0x80
 800079c:	0112      	lsls	r2, r2, #4
 800079e:	4694      	mov	ip, r2
 80007a0:	4463      	add	r3, ip
 80007a2:	613b      	str	r3, [r7, #16]
 80007a4:	e093      	b.n	80008ce <triggerRelays+0x186>
//            case 2: RELAY2_HIGH();                break;
            case 2: HAL_GPIO_WritePin(RELAY2_GPIO_Port, RELAY2_Pin, SET); break;
 80007a6:	4b52      	ldr	r3, [pc, #328]	; (80008f0 <triggerRelays+0x1a8>)
 80007a8:	2201      	movs	r2, #1
 80007aa:	2140      	movs	r1, #64	; 0x40
 80007ac:	0018      	movs	r0, r3
 80007ae:	f001 f9d9 	bl	8001b64 <HAL_GPIO_WritePin>
 80007b2:	e08c      	b.n	80008ce <triggerRelays+0x186>
//            case 3: RELAY3_HIGH();                break;
            case 3: HAL_GPIO_WritePin(RELAY3_GPIO_Port, RELAY3_Pin, SET); break;
 80007b4:	2380      	movs	r3, #128	; 0x80
 80007b6:	009b      	lsls	r3, r3, #2
 80007b8:	484e      	ldr	r0, [pc, #312]	; (80008f4 <triggerRelays+0x1ac>)
 80007ba:	2201      	movs	r2, #1
 80007bc:	0019      	movs	r1, r3
 80007be:	f001 f9d1 	bl	8001b64 <HAL_GPIO_WritePin>
 80007c2:	e084      	b.n	80008ce <triggerRelays+0x186>

            case 4: ShiftRegInput += RELAY04;     break;
 80007c4:	693b      	ldr	r3, [r7, #16]
 80007c6:	2280      	movs	r2, #128	; 0x80
 80007c8:	0092      	lsls	r2, r2, #2
 80007ca:	4694      	mov	ip, r2
 80007cc:	4463      	add	r3, ip
 80007ce:	613b      	str	r3, [r7, #16]
 80007d0:	e07d      	b.n	80008ce <triggerRelays+0x186>
            case 5: ShiftRegInput += RELAY05;     break;
 80007d2:	693b      	ldr	r3, [r7, #16]
 80007d4:	2280      	movs	r2, #128	; 0x80
 80007d6:	00d2      	lsls	r2, r2, #3
 80007d8:	4694      	mov	ip, r2
 80007da:	4463      	add	r3, ip
 80007dc:	613b      	str	r3, [r7, #16]
 80007de:	e076      	b.n	80008ce <triggerRelays+0x186>
            case 6: ShiftRegInput += RELAY06;     break;
 80007e0:	693b      	ldr	r3, [r7, #16]
 80007e2:	2280      	movs	r2, #128	; 0x80
 80007e4:	0152      	lsls	r2, r2, #5
 80007e6:	4694      	mov	ip, r2
 80007e8:	4463      	add	r3, ip
 80007ea:	613b      	str	r3, [r7, #16]
 80007ec:	e06f      	b.n	80008ce <triggerRelays+0x186>
            case 7: ShiftRegInput += RELAY07;     break;
 80007ee:	693b      	ldr	r3, [r7, #16]
 80007f0:	3380      	adds	r3, #128	; 0x80
 80007f2:	613b      	str	r3, [r7, #16]
 80007f4:	e06b      	b.n	80008ce <triggerRelays+0x186>
            case 8: ShiftRegInput += RELAY08;     break;
 80007f6:	693b      	ldr	r3, [r7, #16]
 80007f8:	2280      	movs	r2, #128	; 0x80
 80007fa:	01d2      	lsls	r2, r2, #7
 80007fc:	4694      	mov	ip, r2
 80007fe:	4463      	add	r3, ip
 8000800:	613b      	str	r3, [r7, #16]
 8000802:	e064      	b.n	80008ce <triggerRelays+0x186>
            case 9: ShiftRegInput += RELAY09;     break;
 8000804:	693b      	ldr	r3, [r7, #16]
 8000806:	3301      	adds	r3, #1
 8000808:	33ff      	adds	r3, #255	; 0xff
 800080a:	613b      	str	r3, [r7, #16]
 800080c:	e05f      	b.n	80008ce <triggerRelays+0x186>
            case 10: ShiftRegInput += RELAY10;     break;
 800080e:	693b      	ldr	r3, [r7, #16]
 8000810:	3308      	adds	r3, #8
 8000812:	613b      	str	r3, [r7, #16]
 8000814:	e05b      	b.n	80008ce <triggerRelays+0x186>
            case 11: ShiftRegInput += RELAY11;     break;
 8000816:	693b      	ldr	r3, [r7, #16]
 8000818:	3310      	adds	r3, #16
 800081a:	613b      	str	r3, [r7, #16]
 800081c:	e057      	b.n	80008ce <triggerRelays+0x186>
            case 12: ShiftRegInput += RELAY12;     break;
 800081e:	693b      	ldr	r3, [r7, #16]
 8000820:	3340      	adds	r3, #64	; 0x40
 8000822:	613b      	str	r3, [r7, #16]
 8000824:	e053      	b.n	80008ce <triggerRelays+0x186>
            case 13: ShiftRegInput += RELAY13;     break;
 8000826:	693b      	ldr	r3, [r7, #16]
 8000828:	3301      	adds	r3, #1
 800082a:	613b      	str	r3, [r7, #16]
 800082c:	e04f      	b.n	80008ce <triggerRelays+0x186>
            case 14: ShiftRegInput += RELAY14;     break;
 800082e:	693b      	ldr	r3, [r7, #16]
 8000830:	3304      	adds	r3, #4
 8000832:	613b      	str	r3, [r7, #16]
 8000834:	e04b      	b.n	80008ce <triggerRelays+0x186>
            case 15: ShiftRegInput += RELAY15;     break;
 8000836:	693b      	ldr	r3, [r7, #16]
 8000838:	2280      	movs	r2, #128	; 0x80
 800083a:	0192      	lsls	r2, r2, #6
 800083c:	4694      	mov	ip, r2
 800083e:	4463      	add	r3, ip
 8000840:	613b      	str	r3, [r7, #16]
 8000842:	e044      	b.n	80008ce <triggerRelays+0x186>
            case 16: ShiftRegInput += RELAY16;     break;
 8000844:	693b      	ldr	r3, [r7, #16]
 8000846:	2280      	movs	r2, #128	; 0x80
 8000848:	0212      	lsls	r2, r2, #8
 800084a:	4694      	mov	ip, r2
 800084c:	4463      	add	r3, ip
 800084e:	613b      	str	r3, [r7, #16]
 8000850:	e03d      	b.n	80008ce <triggerRelays+0x186>
            case 17: ShiftRegInput += RELAY17;     break;
 8000852:	693b      	ldr	r3, [r7, #16]
 8000854:	3320      	adds	r3, #32
 8000856:	613b      	str	r3, [r7, #16]
 8000858:	e039      	b.n	80008ce <triggerRelays+0x186>
            case 18: ShiftRegInput += RELAY18;     break;
 800085a:	693b      	ldr	r3, [r7, #16]
 800085c:	3302      	adds	r3, #2
 800085e:	613b      	str	r3, [r7, #16]
 8000860:	e035      	b.n	80008ce <triggerRelays+0x186>
            case 19: ShiftRegInput += RELAY19;     break;
 8000862:	693b      	ldr	r3, [r7, #16]
 8000864:	2280      	movs	r2, #128	; 0x80
 8000866:	0252      	lsls	r2, r2, #9
 8000868:	4694      	mov	ip, r2
 800086a:	4463      	add	r3, ip
 800086c:	613b      	str	r3, [r7, #16]
 800086e:	e02e      	b.n	80008ce <triggerRelays+0x186>
            case 20: ShiftRegInput += RELAY20;     break;
 8000870:	693b      	ldr	r3, [r7, #16]
 8000872:	2280      	movs	r2, #128	; 0x80
 8000874:	0292      	lsls	r2, r2, #10
 8000876:	4694      	mov	ip, r2
 8000878:	4463      	add	r3, ip
 800087a:	613b      	str	r3, [r7, #16]
 800087c:	e027      	b.n	80008ce <triggerRelays+0x186>
            case 21: ShiftRegInput += RELAY21;     break;
 800087e:	693b      	ldr	r3, [r7, #16]
 8000880:	2280      	movs	r2, #128	; 0x80
 8000882:	02d2      	lsls	r2, r2, #11
 8000884:	4694      	mov	ip, r2
 8000886:	4463      	add	r3, ip
 8000888:	613b      	str	r3, [r7, #16]
 800088a:	e020      	b.n	80008ce <triggerRelays+0x186>
            default: break;
        }
    }
    else if(num == 0)
 800088c:	230f      	movs	r3, #15
 800088e:	18fb      	adds	r3, r7, r3
 8000890:	781b      	ldrb	r3, [r3, #0]
 8000892:	2201      	movs	r2, #1
 8000894:	4053      	eors	r3, r2
 8000896:	b2db      	uxtb	r3, r3
 8000898:	2b00      	cmp	r3, #0
 800089a:	d017      	beq.n	80008cc <triggerRelays+0x184>
    {
        switch(j)
 800089c:	697b      	ldr	r3, [r7, #20]
 800089e:	2b02      	cmp	r3, #2
 80008a0:	d003      	beq.n	80008aa <triggerRelays+0x162>
 80008a2:	697b      	ldr	r3, [r7, #20]
 80008a4:	2b03      	cmp	r3, #3
 80008a6:	d007      	beq.n	80008b8 <triggerRelays+0x170>
//            case 2: RELAY2_LOW();           break;
			case 2: HAL_GPIO_WritePin(RELAY2_GPIO_Port, RELAY2_Pin, RESET); break;
//            case 3: RELAY3_LOW();           break;
            case 3: HAL_GPIO_WritePin(RELAY3_GPIO_Port, RELAY3_Pin, RESET); break;

            default: break;
 80008a8:	e011      	b.n	80008ce <triggerRelays+0x186>
			case 2: HAL_GPIO_WritePin(RELAY2_GPIO_Port, RELAY2_Pin, RESET); break;
 80008aa:	4b11      	ldr	r3, [pc, #68]	; (80008f0 <triggerRelays+0x1a8>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	2140      	movs	r1, #64	; 0x40
 80008b0:	0018      	movs	r0, r3
 80008b2:	f001 f957 	bl	8001b64 <HAL_GPIO_WritePin>
 80008b6:	e00a      	b.n	80008ce <triggerRelays+0x186>
            case 3: HAL_GPIO_WritePin(RELAY3_GPIO_Port, RELAY3_Pin, RESET); break;
 80008b8:	2380      	movs	r3, #128	; 0x80
 80008ba:	009b      	lsls	r3, r3, #2
 80008bc:	480d      	ldr	r0, [pc, #52]	; (80008f4 <triggerRelays+0x1ac>)
 80008be:	2200      	movs	r2, #0
 80008c0:	0019      	movs	r1, r3
 80008c2:	f001 f94f 	bl	8001b64 <HAL_GPIO_WritePin>
 80008c6:	e002      	b.n	80008ce <triggerRelays+0x186>
            default: break;
 80008c8:	46c0      	nop			; (mov r8, r8)
 80008ca:	e000      	b.n	80008ce <triggerRelays+0x186>
        }
    }
 80008cc:	46c0      	nop			; (mov r8, r8)
  for(j = HCF4094_outputs; j>0; j--)
 80008ce:	697b      	ldr	r3, [r7, #20]
 80008d0:	3b01      	subs	r3, #1
 80008d2:	617b      	str	r3, [r7, #20]
 80008d4:	697b      	ldr	r3, [r7, #20]
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	dd00      	ble.n	80008dc <triggerRelays+0x194>
 80008da:	e73e      	b.n	800075a <triggerRelays+0x12>
  }
  writeToShiftRegister(ShiftRegInput);
 80008dc:	693b      	ldr	r3, [r7, #16]
 80008de:	0018      	movs	r0, r3
 80008e0:	f7ff fecc 	bl	800067c <writeToShiftRegister>
}
 80008e4:	46c0      	nop			; (mov r8, r8)
 80008e6:	46bd      	mov	sp, r7
 80008e8:	b006      	add	sp, #24
 80008ea:	bd80      	pop	{r7, pc}
 80008ec:	08006e50 	.word	0x08006e50
 80008f0:	50000800 	.word	0x50000800
 80008f4:	50000400 	.word	0x50000400

080008f8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80008f8:	b590      	push	{r4, r7, lr}
 80008fa:	b08b      	sub	sp, #44	; 0x2c
 80008fc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008fe:	2414      	movs	r4, #20
 8000900:	193b      	adds	r3, r7, r4
 8000902:	0018      	movs	r0, r3
 8000904:	2314      	movs	r3, #20
 8000906:	001a      	movs	r2, r3
 8000908:	2100      	movs	r1, #0
 800090a:	f005 fa32 	bl	8005d72 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800090e:	4b6b      	ldr	r3, [pc, #428]	; (8000abc <MX_GPIO_Init+0x1c4>)
 8000910:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000912:	4b6a      	ldr	r3, [pc, #424]	; (8000abc <MX_GPIO_Init+0x1c4>)
 8000914:	2104      	movs	r1, #4
 8000916:	430a      	orrs	r2, r1
 8000918:	635a      	str	r2, [r3, #52]	; 0x34
 800091a:	4b68      	ldr	r3, [pc, #416]	; (8000abc <MX_GPIO_Init+0x1c4>)
 800091c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800091e:	2204      	movs	r2, #4
 8000920:	4013      	ands	r3, r2
 8000922:	613b      	str	r3, [r7, #16]
 8000924:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000926:	4b65      	ldr	r3, [pc, #404]	; (8000abc <MX_GPIO_Init+0x1c4>)
 8000928:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800092a:	4b64      	ldr	r3, [pc, #400]	; (8000abc <MX_GPIO_Init+0x1c4>)
 800092c:	2120      	movs	r1, #32
 800092e:	430a      	orrs	r2, r1
 8000930:	635a      	str	r2, [r3, #52]	; 0x34
 8000932:	4b62      	ldr	r3, [pc, #392]	; (8000abc <MX_GPIO_Init+0x1c4>)
 8000934:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000936:	2220      	movs	r2, #32
 8000938:	4013      	ands	r3, r2
 800093a:	60fb      	str	r3, [r7, #12]
 800093c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800093e:	4b5f      	ldr	r3, [pc, #380]	; (8000abc <MX_GPIO_Init+0x1c4>)
 8000940:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000942:	4b5e      	ldr	r3, [pc, #376]	; (8000abc <MX_GPIO_Init+0x1c4>)
 8000944:	2101      	movs	r1, #1
 8000946:	430a      	orrs	r2, r1
 8000948:	635a      	str	r2, [r3, #52]	; 0x34
 800094a:	4b5c      	ldr	r3, [pc, #368]	; (8000abc <MX_GPIO_Init+0x1c4>)
 800094c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800094e:	2201      	movs	r2, #1
 8000950:	4013      	ands	r3, r2
 8000952:	60bb      	str	r3, [r7, #8]
 8000954:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000956:	4b59      	ldr	r3, [pc, #356]	; (8000abc <MX_GPIO_Init+0x1c4>)
 8000958:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800095a:	4b58      	ldr	r3, [pc, #352]	; (8000abc <MX_GPIO_Init+0x1c4>)
 800095c:	2102      	movs	r1, #2
 800095e:	430a      	orrs	r2, r1
 8000960:	635a      	str	r2, [r3, #52]	; 0x34
 8000962:	4b56      	ldr	r3, [pc, #344]	; (8000abc <MX_GPIO_Init+0x1c4>)
 8000964:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000966:	2202      	movs	r2, #2
 8000968:	4013      	ands	r3, r2
 800096a:	607b      	str	r3, [r7, #4]
 800096c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI_CS_Pin|LED_GREEN_Pin, GPIO_PIN_RESET);
 800096e:	23a0      	movs	r3, #160	; 0xa0
 8000970:	05db      	lsls	r3, r3, #23
 8000972:	2200      	movs	r2, #0
 8000974:	2122      	movs	r1, #34	; 0x22
 8000976:	0018      	movs	r0, r3
 8000978:	f001 f8f4 	bl	8001b64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, PWR_Pin|TRX_CE_Pin|TXEN_Pin|DATA_4094_Pin
 800097c:	23e3      	movs	r3, #227	; 0xe3
 800097e:	021b      	lsls	r3, r3, #8
 8000980:	484f      	ldr	r0, [pc, #316]	; (8000ac0 <MX_GPIO_Init+0x1c8>)
 8000982:	2200      	movs	r2, #0
 8000984:	0019      	movs	r1, r3
 8000986:	f001 f8ed 	bl	8001b64 <HAL_GPIO_WritePin>
                          |RELAY3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, RELAY2_Pin|STROBE_4094_Pin|CLK_4094_Pin, GPIO_PIN_RESET);
 800098a:	23d0      	movs	r3, #208	; 0xd0
 800098c:	009b      	lsls	r3, r3, #2
 800098e:	484d      	ldr	r0, [pc, #308]	; (8000ac4 <MX_GPIO_Init+0x1cc>)
 8000990:	2200      	movs	r2, #0
 8000992:	0019      	movs	r1, r3
 8000994:	f001 f8e6 	bl	8001b64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI_CS_Pin;
 8000998:	193b      	adds	r3, r7, r4
 800099a:	2202      	movs	r2, #2
 800099c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800099e:	193b      	adds	r3, r7, r4
 80009a0:	2201      	movs	r2, #1
 80009a2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a4:	193b      	adds	r3, r7, r4
 80009a6:	2200      	movs	r2, #0
 80009a8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009aa:	193b      	adds	r3, r7, r4
 80009ac:	2200      	movs	r2, #0
 80009ae:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(SPI_CS_GPIO_Port, &GPIO_InitStruct);
 80009b0:	193a      	adds	r2, r7, r4
 80009b2:	23a0      	movs	r3, #160	; 0xa0
 80009b4:	05db      	lsls	r3, r3, #23
 80009b6:	0011      	movs	r1, r2
 80009b8:	0018      	movs	r0, r3
 80009ba:	f000 ff6f 	bl	800189c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 80009be:	193b      	adds	r3, r7, r4
 80009c0:	2220      	movs	r2, #32
 80009c2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009c4:	193b      	adds	r3, r7, r4
 80009c6:	2201      	movs	r2, #1
 80009c8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ca:	193b      	adds	r3, r7, r4
 80009cc:	2200      	movs	r2, #0
 80009ce:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009d0:	193b      	adds	r3, r7, r4
 80009d2:	2202      	movs	r2, #2
 80009d4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 80009d6:	193a      	adds	r2, r7, r4
 80009d8:	23a0      	movs	r3, #160	; 0xa0
 80009da:	05db      	lsls	r3, r3, #23
 80009dc:	0011      	movs	r1, r2
 80009de:	0018      	movs	r0, r3
 80009e0:	f000 ff5c 	bl	800189c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CD_Pin;
 80009e4:	0021      	movs	r1, r4
 80009e6:	187b      	adds	r3, r7, r1
 80009e8:	2280      	movs	r2, #128	; 0x80
 80009ea:	0152      	lsls	r2, r2, #5
 80009ec:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009ee:	000c      	movs	r4, r1
 80009f0:	193b      	adds	r3, r7, r4
 80009f2:	2200      	movs	r2, #0
 80009f4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f6:	193b      	adds	r3, r7, r4
 80009f8:	2200      	movs	r2, #0
 80009fa:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(CD_GPIO_Port, &GPIO_InitStruct);
 80009fc:	193b      	adds	r3, r7, r4
 80009fe:	4a30      	ldr	r2, [pc, #192]	; (8000ac0 <MX_GPIO_Init+0x1c8>)
 8000a00:	0019      	movs	r1, r3
 8000a02:	0010      	movs	r0, r2
 8000a04:	f000 ff4a 	bl	800189c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = PWR_Pin|TRX_CE_Pin|TXEN_Pin|DATA_4094_Pin
 8000a08:	0021      	movs	r1, r4
 8000a0a:	187b      	adds	r3, r7, r1
 8000a0c:	22e3      	movs	r2, #227	; 0xe3
 8000a0e:	0212      	lsls	r2, r2, #8
 8000a10:	601a      	str	r2, [r3, #0]
                          |RELAY3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a12:	000c      	movs	r4, r1
 8000a14:	193b      	adds	r3, r7, r4
 8000a16:	2201      	movs	r2, #1
 8000a18:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1a:	193b      	adds	r3, r7, r4
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a20:	193b      	adds	r3, r7, r4
 8000a22:	2200      	movs	r2, #0
 8000a24:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a26:	193b      	adds	r3, r7, r4
 8000a28:	4a25      	ldr	r2, [pc, #148]	; (8000ac0 <MX_GPIO_Init+0x1c8>)
 8000a2a:	0019      	movs	r1, r3
 8000a2c:	0010      	movs	r0, r2
 8000a2e:	f000 ff35 	bl	800189c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RELAY2_Pin|STROBE_4094_Pin|CLK_4094_Pin;
 8000a32:	0021      	movs	r1, r4
 8000a34:	187b      	adds	r3, r7, r1
 8000a36:	22d0      	movs	r2, #208	; 0xd0
 8000a38:	0092      	lsls	r2, r2, #2
 8000a3a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a3c:	000c      	movs	r4, r1
 8000a3e:	193b      	adds	r3, r7, r4
 8000a40:	2201      	movs	r2, #1
 8000a42:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a44:	193b      	adds	r3, r7, r4
 8000a46:	2200      	movs	r2, #0
 8000a48:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a4a:	193b      	adds	r3, r7, r4
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a50:	193b      	adds	r3, r7, r4
 8000a52:	4a1c      	ldr	r2, [pc, #112]	; (8000ac4 <MX_GPIO_Init+0x1cc>)
 8000a54:	0019      	movs	r1, r3
 8000a56:	0010      	movs	r0, r2
 8000a58:	f000 ff20 	bl	800189c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = AM_Pin;
 8000a5c:	193b      	adds	r3, r7, r4
 8000a5e:	2280      	movs	r2, #128	; 0x80
 8000a60:	0112      	lsls	r2, r2, #4
 8000a62:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a64:	193b      	adds	r3, r7, r4
 8000a66:	2200      	movs	r2, #0
 8000a68:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6a:	193b      	adds	r3, r7, r4
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(AM_GPIO_Port, &GPIO_InitStruct);
 8000a70:	193a      	adds	r2, r7, r4
 8000a72:	23a0      	movs	r3, #160	; 0xa0
 8000a74:	05db      	lsls	r3, r3, #23
 8000a76:	0011      	movs	r1, r2
 8000a78:	0018      	movs	r0, r3
 8000a7a:	f000 ff0f 	bl	800189c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DR_Pin;
 8000a7e:	0021      	movs	r1, r4
 8000a80:	187b      	adds	r3, r7, r1
 8000a82:	2280      	movs	r2, #128	; 0x80
 8000a84:	0152      	lsls	r2, r2, #5
 8000a86:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000a88:	187b      	adds	r3, r7, r1
 8000a8a:	22c4      	movs	r2, #196	; 0xc4
 8000a8c:	0392      	lsls	r2, r2, #14
 8000a8e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a90:	187b      	adds	r3, r7, r1
 8000a92:	2200      	movs	r2, #0
 8000a94:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(DR_GPIO_Port, &GPIO_InitStruct);
 8000a96:	187a      	adds	r2, r7, r1
 8000a98:	23a0      	movs	r3, #160	; 0xa0
 8000a9a:	05db      	lsls	r3, r3, #23
 8000a9c:	0011      	movs	r1, r2
 8000a9e:	0018      	movs	r0, r3
 8000aa0:	f000 fefc 	bl	800189c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	2100      	movs	r1, #0
 8000aa8:	2007      	movs	r0, #7
 8000aaa:	f000 fe5b 	bl	8001764 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8000aae:	2007      	movs	r0, #7
 8000ab0:	f000 fe6d 	bl	800178e <HAL_NVIC_EnableIRQ>

}
 8000ab4:	46c0      	nop			; (mov r8, r8)
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	b00b      	add	sp, #44	; 0x2c
 8000aba:	bd90      	pop	{r4, r7, pc}
 8000abc:	40021000 	.word	0x40021000
 8000ac0:	50000400 	.word	0x50000400
 8000ac4:	50000800 	.word	0x50000800

08000ac8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ac8:	b590      	push	{r4, r7, lr}
 8000aca:	b085      	sub	sp, #20
 8000acc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	initialise_monitor_handles();
 8000ace:	f004 ffa9 	bl	8005a24 <initialise_monitor_handles>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ad2:	f000 fcdb 	bl	800148c <HAL_Init>

  /* USER CODE BEGIN Init */
  portInit_shiftreg();
 8000ad6:	f7ff fdb3 	bl	8000640 <portInit_shiftreg>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ada:	f000 f90f 	bl	8000cfc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ade:	f7ff ff0b 	bl	80008f8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000ae2:	f000 fbfb 	bl	80012dc <MX_USART2_UART_Init>
  MX_SPI2_Init();
 8000ae6:	f000 f9c5 	bl	8000e74 <MX_SPI2_Init>
  MX_TIM3_Init();
 8000aea:	f000 fb69 	bl	80011c0 <MX_TIM3_Init>
  MX_TIM2_Init();
 8000aee:	f000 fb13 	bl	8001118 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000af2:	4b6e      	ldr	r3, [pc, #440]	; (8000cac <main+0x1e4>)
 8000af4:	0018      	movs	r0, r3
 8000af6:	f003 f88f 	bl	8003c18 <HAL_TIM_Base_Start_IT>

  uint32_t uid = 0x00;
 8000afa:	2300      	movs	r3, #0
 8000afc:	60fb      	str	r3, [r7, #12]
  	for (uint8_t i = 0; i < 3; ++i) {
 8000afe:	230b      	movs	r3, #11
 8000b00:	18fb      	adds	r3, r7, r3
 8000b02:	2200      	movs	r2, #0
 8000b04:	701a      	strb	r2, [r3, #0]
 8000b06:	e00f      	b.n	8000b28 <main+0x60>
  		uid += (uint32_t) (UID_BASE + i * 4);
 8000b08:	210b      	movs	r1, #11
 8000b0a:	187b      	adds	r3, r7, r1
 8000b0c:	781b      	ldrb	r3, [r3, #0]
 8000b0e:	009b      	lsls	r3, r3, #2
 8000b10:	001a      	movs	r2, r3
 8000b12:	68fb      	ldr	r3, [r7, #12]
 8000b14:	18d3      	adds	r3, r2, r3
 8000b16:	4a66      	ldr	r2, [pc, #408]	; (8000cb0 <main+0x1e8>)
 8000b18:	4694      	mov	ip, r2
 8000b1a:	4463      	add	r3, ip
 8000b1c:	60fb      	str	r3, [r7, #12]
  	for (uint8_t i = 0; i < 3; ++i) {
 8000b1e:	187b      	adds	r3, r7, r1
 8000b20:	187a      	adds	r2, r7, r1
 8000b22:	7812      	ldrb	r2, [r2, #0]
 8000b24:	3201      	adds	r2, #1
 8000b26:	701a      	strb	r2, [r3, #0]
 8000b28:	230b      	movs	r3, #11
 8000b2a:	18fb      	adds	r3, r7, r3
 8000b2c:	781b      	ldrb	r3, [r3, #0]
 8000b2e:	2b02      	cmp	r3, #2
 8000b30:	d9ea      	bls.n	8000b08 <main+0x40>
  	}
  	srand(uid);
 8000b32:	68fb      	ldr	r3, [r7, #12]
 8000b34:	0018      	movs	r0, r3
 8000b36:	f005 fa53 	bl	8005fe0 <srand>

  	NRF905_hw.gpio[NRF905_HW_GPIO_TXEN].pin = TXEN_Pin;
 8000b3a:	4b5e      	ldr	r3, [pc, #376]	; (8000cb4 <main+0x1ec>)
 8000b3c:	2280      	movs	r2, #128	; 0x80
 8000b3e:	0212      	lsls	r2, r2, #8
 8000b40:	601a      	str	r2, [r3, #0]
  	NRF905_hw.gpio[NRF905_HW_GPIO_TXEN].port = TXEN_GPIO_Port;
 8000b42:	4b5c      	ldr	r3, [pc, #368]	; (8000cb4 <main+0x1ec>)
 8000b44:	4a5c      	ldr	r2, [pc, #368]	; (8000cb8 <main+0x1f0>)
 8000b46:	605a      	str	r2, [r3, #4]
  	NRF905_hw.gpio[NRF905_HW_GPIO_TRX_EN].pin = TRX_CE_Pin;
 8000b48:	4b5a      	ldr	r3, [pc, #360]	; (8000cb4 <main+0x1ec>)
 8000b4a:	2280      	movs	r2, #128	; 0x80
 8000b4c:	01d2      	lsls	r2, r2, #7
 8000b4e:	609a      	str	r2, [r3, #8]
  	NRF905_hw.gpio[NRF905_HW_GPIO_TRX_EN].port = TRX_CE_GPIO_Port;
 8000b50:	4b58      	ldr	r3, [pc, #352]	; (8000cb4 <main+0x1ec>)
 8000b52:	4a59      	ldr	r2, [pc, #356]	; (8000cb8 <main+0x1f0>)
 8000b54:	60da      	str	r2, [r3, #12]
  	NRF905_hw.gpio[NRF905_HW_GPIO_PWR].pin = PWR_Pin;
 8000b56:	4b57      	ldr	r3, [pc, #348]	; (8000cb4 <main+0x1ec>)
 8000b58:	2280      	movs	r2, #128	; 0x80
 8000b5a:	0192      	lsls	r2, r2, #6
 8000b5c:	611a      	str	r2, [r3, #16]
  	NRF905_hw.gpio[NRF905_HW_GPIO_PWR].port = PWR_GPIO_Port;
 8000b5e:	4b55      	ldr	r3, [pc, #340]	; (8000cb4 <main+0x1ec>)
 8000b60:	4a55      	ldr	r2, [pc, #340]	; (8000cb8 <main+0x1f0>)
 8000b62:	615a      	str	r2, [r3, #20]

  	NRF905_hw.gpio[NRF905_HW_GPIO_CD].pin = CD_Pin;
 8000b64:	4b53      	ldr	r3, [pc, #332]	; (8000cb4 <main+0x1ec>)
 8000b66:	2280      	movs	r2, #128	; 0x80
 8000b68:	0152      	lsls	r2, r2, #5
 8000b6a:	619a      	str	r2, [r3, #24]
  	NRF905_hw.gpio[NRF905_HW_GPIO_CD].port = CD_GPIO_Port;
 8000b6c:	4b51      	ldr	r3, [pc, #324]	; (8000cb4 <main+0x1ec>)
 8000b6e:	4a52      	ldr	r2, [pc, #328]	; (8000cb8 <main+0x1f0>)
 8000b70:	61da      	str	r2, [r3, #28]
  	NRF905_hw.gpio[NRF905_HW_GPIO_AM].pin = AM_Pin;
 8000b72:	4b50      	ldr	r3, [pc, #320]	; (8000cb4 <main+0x1ec>)
 8000b74:	2280      	movs	r2, #128	; 0x80
 8000b76:	0112      	lsls	r2, r2, #4
 8000b78:	621a      	str	r2, [r3, #32]
  	NRF905_hw.gpio[NRF905_HW_GPIO_AM].port = AM_GPIO_Port;
 8000b7a:	4b4e      	ldr	r3, [pc, #312]	; (8000cb4 <main+0x1ec>)
 8000b7c:	22a0      	movs	r2, #160	; 0xa0
 8000b7e:	05d2      	lsls	r2, r2, #23
 8000b80:	625a      	str	r2, [r3, #36]	; 0x24
  	NRF905_hw.gpio[NRF905_HW_GPIO_DR].pin = DR_Pin;
 8000b82:	4b4c      	ldr	r3, [pc, #304]	; (8000cb4 <main+0x1ec>)
 8000b84:	2280      	movs	r2, #128	; 0x80
 8000b86:	0152      	lsls	r2, r2, #5
 8000b88:	629a      	str	r2, [r3, #40]	; 0x28
  	NRF905_hw.gpio[NRF905_HW_GPIO_DR].port = DR_GPIO_Port;
 8000b8a:	4b4a      	ldr	r3, [pc, #296]	; (8000cb4 <main+0x1ec>)
 8000b8c:	22a0      	movs	r2, #160	; 0xa0
 8000b8e:	05d2      	lsls	r2, r2, #23
 8000b90:	62da      	str	r2, [r3, #44]	; 0x2c

  	NRF905_hw.gpio[NRF905_HW_GPIO_CS].pin = SPI_CS_Pin;
 8000b92:	4b48      	ldr	r3, [pc, #288]	; (8000cb4 <main+0x1ec>)
 8000b94:	2202      	movs	r2, #2
 8000b96:	631a      	str	r2, [r3, #48]	; 0x30
  	NRF905_hw.gpio[NRF905_HW_GPIO_CS].port = SPI_CS_GPIO_Port;
 8000b98:	4b46      	ldr	r3, [pc, #280]	; (8000cb4 <main+0x1ec>)
 8000b9a:	22a0      	movs	r2, #160	; 0xa0
 8000b9c:	05d2      	lsls	r2, r2, #23
 8000b9e:	635a      	str	r2, [r3, #52]	; 0x34

  	NRF905_hw.tim = &htim3;
 8000ba0:	4b44      	ldr	r3, [pc, #272]	; (8000cb4 <main+0x1ec>)
 8000ba2:	4a46      	ldr	r2, [pc, #280]	; (8000cbc <main+0x1f4>)
 8000ba4:	63da      	str	r2, [r3, #60]	; 0x3c
  	NRF905_hw.spi = &hspi2;
 8000ba6:	4b43      	ldr	r3, [pc, #268]	; (8000cb4 <main+0x1ec>)
 8000ba8:	4a45      	ldr	r2, [pc, #276]	; (8000cc0 <main+0x1f8>)
 8000baa:	639a      	str	r2, [r3, #56]	; 0x38

  	master = 0;
 8000bac:	4b45      	ldr	r3, [pc, #276]	; (8000cc4 <main+0x1fc>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	601a      	str	r2, [r3, #0]
  	if (master == 1) {
 8000bb2:	4b44      	ldr	r3, [pc, #272]	; (8000cc4 <main+0x1fc>)
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	2b01      	cmp	r3, #1
 8000bb8:	d106      	bne.n	8000bc8 <main+0x100>
  		my_address = ADDRESS_MASTER;
 8000bba:	4b43      	ldr	r3, [pc, #268]	; (8000cc8 <main+0x200>)
 8000bbc:	4a43      	ldr	r2, [pc, #268]	; (8000ccc <main+0x204>)
 8000bbe:	601a      	str	r2, [r3, #0]
  		receiver_address = ADDRESS_SLAVE;
 8000bc0:	4b43      	ldr	r3, [pc, #268]	; (8000cd0 <main+0x208>)
 8000bc2:	4a42      	ldr	r2, [pc, #264]	; (8000ccc <main+0x204>)
 8000bc4:	601a      	str	r2, [r3, #0]
 8000bc6:	e005      	b.n	8000bd4 <main+0x10c>
  	} else {
  		my_address = ADDRESS_SLAVE;
 8000bc8:	4b3f      	ldr	r3, [pc, #252]	; (8000cc8 <main+0x200>)
 8000bca:	4a40      	ldr	r2, [pc, #256]	; (8000ccc <main+0x204>)
 8000bcc:	601a      	str	r2, [r3, #0]
  		receiver_address = ADDRESS_MASTER;
 8000bce:	4b40      	ldr	r3, [pc, #256]	; (8000cd0 <main+0x208>)
 8000bd0:	4a3e      	ldr	r2, [pc, #248]	; (8000ccc <main+0x204>)
 8000bd2:	601a      	str	r2, [r3, #0]
  	}

  	if (master == 1) {
 8000bd4:	4b3b      	ldr	r3, [pc, #236]	; (8000cc4 <main+0x1fc>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	2b01      	cmp	r3, #1
 8000bda:	d107      	bne.n	8000bec <main+0x124>
  		printf("Mode: Master, TX, %08lX\r\n", my_address);
 8000bdc:	4b3a      	ldr	r3, [pc, #232]	; (8000cc8 <main+0x200>)
 8000bde:	681a      	ldr	r2, [r3, #0]
 8000be0:	4b3c      	ldr	r3, [pc, #240]	; (8000cd4 <main+0x20c>)
 8000be2:	0011      	movs	r1, r2
 8000be4:	0018      	movs	r0, r3
 8000be6:	f005 f965 	bl	8005eb4 <iprintf>
 8000bea:	e006      	b.n	8000bfa <main+0x132>
  	} else {
  		printf("Mode: Slave, RX, %08lX\r\n", my_address);
 8000bec:	4b36      	ldr	r3, [pc, #216]	; (8000cc8 <main+0x200>)
 8000bee:	681a      	ldr	r2, [r3, #0]
 8000bf0:	4b39      	ldr	r3, [pc, #228]	; (8000cd8 <main+0x210>)
 8000bf2:	0011      	movs	r1, r2
 8000bf4:	0018      	movs	r0, r3
 8000bf6:	f005 f95d 	bl	8005eb4 <iprintf>
  	}

  	NRF905_init(&NRF905, &NRF905_hw);
 8000bfa:	4a2e      	ldr	r2, [pc, #184]	; (8000cb4 <main+0x1ec>)
 8000bfc:	4b37      	ldr	r3, [pc, #220]	; (8000cdc <main+0x214>)
 8000bfe:	0011      	movs	r1, r2
 8000c00:	0018      	movs	r0, r3
 8000c02:	f004 fb11 	bl	8005228 <NRF905_init>
  	NRF905_set_listen_address(&NRF905, receiver_address);
 8000c06:	4b32      	ldr	r3, [pc, #200]	; (8000cd0 <main+0x208>)
 8000c08:	681a      	ldr	r2, [r3, #0]
 8000c0a:	4b34      	ldr	r3, [pc, #208]	; (8000cdc <main+0x214>)
 8000c0c:	0011      	movs	r1, r2
 8000c0e:	0018      	movs	r0, r3
 8000c10:	f004 fa97 	bl	8005142 <NRF905_set_listen_address>

  	printf("Reg conf: ");
 8000c14:	4b32      	ldr	r3, [pc, #200]	; (8000ce0 <main+0x218>)
 8000c16:	0018      	movs	r0, r3
 8000c18:	f005 f94c 	bl	8005eb4 <iprintf>
  	for (int i = 0; i < 10; ++i) {
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	607b      	str	r3, [r7, #4]
 8000c20:	e013      	b.n	8000c4a <main+0x182>
  		uint8_t d = NRF905_read_config_register(&NRF905, i);
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	b2da      	uxtb	r2, r3
 8000c26:	1cfc      	adds	r4, r7, #3
 8000c28:	4b2c      	ldr	r3, [pc, #176]	; (8000cdc <main+0x214>)
 8000c2a:	0011      	movs	r1, r2
 8000c2c:	0018      	movs	r0, r3
 8000c2e:	f004 fa0d 	bl	800504c <NRF905_read_config_register>
 8000c32:	0003      	movs	r3, r0
 8000c34:	7023      	strb	r3, [r4, #0]
  		printf("%02X, ", d);
 8000c36:	1cfb      	adds	r3, r7, #3
 8000c38:	781a      	ldrb	r2, [r3, #0]
 8000c3a:	4b2a      	ldr	r3, [pc, #168]	; (8000ce4 <main+0x21c>)
 8000c3c:	0011      	movs	r1, r2
 8000c3e:	0018      	movs	r0, r3
 8000c40:	f005 f938 	bl	8005eb4 <iprintf>
  	for (int i = 0; i < 10; ++i) {
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	3301      	adds	r3, #1
 8000c48:	607b      	str	r3, [r7, #4]
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	2b09      	cmp	r3, #9
 8000c4e:	dde8      	ble.n	8000c22 <main+0x15a>
  	}
  	printf("\r\n");
 8000c50:	4b25      	ldr	r3, [pc, #148]	; (8000ce8 <main+0x220>)
 8000c52:	0018      	movs	r0, r3
 8000c54:	f005 f9ba 	bl	8005fcc <puts>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {

		NRF905_rx(&NRF905);
 8000c58:	4b20      	ldr	r3, [pc, #128]	; (8000cdc <main+0x214>)
 8000c5a:	0018      	movs	r0, r3
 8000c5c:	f004 fa87 	bl	800516e <NRF905_rx>

//		If no message has been received for the past 10ms, all relays are set to low
//		System is stable atleast upto 2ms
		if (counter >= 10) {
 8000c60:	4b22      	ldr	r3, [pc, #136]	; (8000cec <main+0x224>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	2b09      	cmp	r3, #9
 8000c66:	dd08      	ble.n	8000c7a <main+0x1b2>

			shift_num = 0x00000000;
 8000c68:	4b21      	ldr	r3, [pc, #132]	; (8000cf0 <main+0x228>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	601a      	str	r2, [r3, #0]
			led = 0;
 8000c6e:	4b21      	ldr	r3, [pc, #132]	; (8000cf4 <main+0x22c>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	601a      	str	r2, [r3, #0]
			counter = 0;
 8000c74:	4b1d      	ldr	r3, [pc, #116]	; (8000cec <main+0x224>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	601a      	str	r2, [r3, #0]

		}

//		Writes to shift register only if there is a change of state
		if(shift_num != temp_num){
 8000c7a:	4b1d      	ldr	r3, [pc, #116]	; (8000cf0 <main+0x228>)
 8000c7c:	681a      	ldr	r2, [r3, #0]
 8000c7e:	4b1e      	ldr	r3, [pc, #120]	; (8000cf8 <main+0x230>)
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	429a      	cmp	r2, r3
 8000c84:	d0e8      	beq.n	8000c58 <main+0x190>

			triggerRelays(shift_num);
 8000c86:	4b1a      	ldr	r3, [pc, #104]	; (8000cf0 <main+0x228>)
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	0018      	movs	r0, r3
 8000c8c:	f7ff fd5c 	bl	8000748 <triggerRelays>
			HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, led);
 8000c90:	4b18      	ldr	r3, [pc, #96]	; (8000cf4 <main+0x22c>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	b2da      	uxtb	r2, r3
 8000c96:	23a0      	movs	r3, #160	; 0xa0
 8000c98:	05db      	lsls	r3, r3, #23
 8000c9a:	2120      	movs	r1, #32
 8000c9c:	0018      	movs	r0, r3
 8000c9e:	f000 ff61 	bl	8001b64 <HAL_GPIO_WritePin>
			temp_num = shift_num;
 8000ca2:	4b13      	ldr	r3, [pc, #76]	; (8000cf0 <main+0x228>)
 8000ca4:	681a      	ldr	r2, [r3, #0]
 8000ca6:	4b14      	ldr	r3, [pc, #80]	; (8000cf8 <main+0x230>)
 8000ca8:	601a      	str	r2, [r3, #0]
		NRF905_rx(&NRF905);
 8000caa:	e7d5      	b.n	8000c58 <main+0x190>
 8000cac:	20000178 	.word	0x20000178
 8000cb0:	1fff7590 	.word	0x1fff7590
 8000cb4:	20000098 	.word	0x20000098
 8000cb8:	50000400 	.word	0x50000400
 8000cbc:	200001c4 	.word	0x200001c4
 8000cc0:	20000110 	.word	0x20000110
 8000cc4:	200000ec 	.word	0x200000ec
 8000cc8:	20000108 	.word	0x20000108
 8000ccc:	a2b5d154 	.word	0xa2b5d154
 8000cd0:	2000010c 	.word	0x2000010c
 8000cd4:	08006e00 	.word	0x08006e00
 8000cd8:	08006e1c 	.word	0x08006e1c
 8000cdc:	200000d8 	.word	0x200000d8
 8000ce0:	08006e38 	.word	0x08006e38
 8000ce4:	08006e44 	.word	0x08006e44
 8000ce8:	08006e4c 	.word	0x08006e4c
 8000cec:	200000fc 	.word	0x200000fc
 8000cf0:	20000100 	.word	0x20000100
 8000cf4:	20000104 	.word	0x20000104
 8000cf8:	20000000 	.word	0x20000000

08000cfc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cfc:	b590      	push	{r4, r7, lr}
 8000cfe:	b093      	sub	sp, #76	; 0x4c
 8000d00:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d02:	2410      	movs	r4, #16
 8000d04:	193b      	adds	r3, r7, r4
 8000d06:	0018      	movs	r0, r3
 8000d08:	2338      	movs	r3, #56	; 0x38
 8000d0a:	001a      	movs	r2, r3
 8000d0c:	2100      	movs	r1, #0
 8000d0e:	f005 f830 	bl	8005d72 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d12:	003b      	movs	r3, r7
 8000d14:	0018      	movs	r0, r3
 8000d16:	2310      	movs	r3, #16
 8000d18:	001a      	movs	r2, r3
 8000d1a:	2100      	movs	r1, #0
 8000d1c:	f005 f829 	bl	8005d72 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d20:	2380      	movs	r3, #128	; 0x80
 8000d22:	009b      	lsls	r3, r3, #2
 8000d24:	0018      	movs	r0, r3
 8000d26:	f000 ff6f 	bl	8001c08 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d2a:	193b      	adds	r3, r7, r4
 8000d2c:	2202      	movs	r2, #2
 8000d2e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d30:	193b      	adds	r3, r7, r4
 8000d32:	2280      	movs	r2, #128	; 0x80
 8000d34:	0052      	lsls	r2, r2, #1
 8000d36:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000d38:	193b      	adds	r3, r7, r4
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d3e:	193b      	adds	r3, r7, r4
 8000d40:	2240      	movs	r2, #64	; 0x40
 8000d42:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000d44:	193b      	adds	r3, r7, r4
 8000d46:	2200      	movs	r2, #0
 8000d48:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d4a:	193b      	adds	r3, r7, r4
 8000d4c:	0018      	movs	r0, r3
 8000d4e:	f000 ffa7 	bl	8001ca0 <HAL_RCC_OscConfig>
 8000d52:	1e03      	subs	r3, r0, #0
 8000d54:	d001      	beq.n	8000d5a <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000d56:	f000 f887 	bl	8000e68 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d5a:	003b      	movs	r3, r7
 8000d5c:	2207      	movs	r2, #7
 8000d5e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000d60:	003b      	movs	r3, r7
 8000d62:	2200      	movs	r2, #0
 8000d64:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d66:	003b      	movs	r3, r7
 8000d68:	2200      	movs	r2, #0
 8000d6a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d6c:	003b      	movs	r3, r7
 8000d6e:	2200      	movs	r2, #0
 8000d70:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000d72:	003b      	movs	r3, r7
 8000d74:	2100      	movs	r1, #0
 8000d76:	0018      	movs	r0, r3
 8000d78:	f001 faac 	bl	80022d4 <HAL_RCC_ClockConfig>
 8000d7c:	1e03      	subs	r3, r0, #0
 8000d7e:	d001      	beq.n	8000d84 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000d80:	f000 f872 	bl	8000e68 <Error_Handler>
  }
}
 8000d84:	46c0      	nop			; (mov r8, r8)
 8000d86:	46bd      	mov	sp, r7
 8000d88:	b013      	add	sp, #76	; 0x4c
 8000d8a:	bd90      	pop	{r4, r7, pc}

08000d8c <HAL_SPI_RxCpltCallback>:

/* USER CODE BEGIN 4 */

// Callback for completion of read from SPI buffer
void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi){
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b082      	sub	sp, #8
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]

	NRF905_spi_deselect(&NRF905);
 8000d94:	4b03      	ldr	r3, [pc, #12]	; (8000da4 <HAL_SPI_RxCpltCallback+0x18>)
 8000d96:	0018      	movs	r0, r3
 8000d98:	f004 fa36 	bl	8005208 <NRF905_spi_deselect>

}
 8000d9c:	46c0      	nop			; (mov r8, r8)
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	b002      	add	sp, #8
 8000da2:	bd80      	pop	{r7, pc}
 8000da4:	200000d8 	.word	0x200000d8

08000da8 <HAL_GPIO_EXTI_Rising_Callback>:

// Callback for DR Pin Interrupt
// DR Pin is set high when the message is transmitted successfully
void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b084      	sub	sp, #16
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	0002      	movs	r2, r0
 8000db0:	1dbb      	adds	r3, r7, #6
 8000db2:	801a      	strh	r2, [r3, #0]

	if (GPIO_Pin == GPIO_PIN_12){
 8000db4:	1dbb      	adds	r3, r7, #6
 8000db6:	881a      	ldrh	r2, [r3, #0]
 8000db8:	2380      	movs	r3, #128	; 0x80
 8000dba:	015b      	lsls	r3, r3, #5
 8000dbc:	429a      	cmp	r2, r3
 8000dbe:	d134      	bne.n	8000e2a <HAL_GPIO_EXTI_Rising_Callback+0x82>

		NRF905_read_it(&NRF905, (uint8_t*)nrf905_payload_buffer, NRF905_MAX_PAYLOAD);
 8000dc0:	491c      	ldr	r1, [pc, #112]	; (8000e34 <HAL_GPIO_EXTI_Rising_Callback+0x8c>)
 8000dc2:	4b1d      	ldr	r3, [pc, #116]	; (8000e38 <HAL_GPIO_EXTI_Rising_Callback+0x90>)
 8000dc4:	2209      	movs	r2, #9
 8000dc6:	0018      	movs	r0, r3
 8000dc8:	f004 f9f5 	bl	80051b6 <NRF905_read_it>

//		Verifies data by looking for check bytes in the transmission
		if((nrf905_payload_buffer[0]==0xD3) && (nrf905_payload_buffer[4]==0x16) &&
 8000dcc:	4b19      	ldr	r3, [pc, #100]	; (8000e34 <HAL_GPIO_EXTI_Rising_Callback+0x8c>)
 8000dce:	781b      	ldrb	r3, [r3, #0]
 8000dd0:	2bd3      	cmp	r3, #211	; 0xd3
 8000dd2:	d12a      	bne.n	8000e2a <HAL_GPIO_EXTI_Rising_Callback+0x82>
 8000dd4:	4b17      	ldr	r3, [pc, #92]	; (8000e34 <HAL_GPIO_EXTI_Rising_Callback+0x8c>)
 8000dd6:	791b      	ldrb	r3, [r3, #4]
 8000dd8:	2b16      	cmp	r3, #22
 8000dda:	d126      	bne.n	8000e2a <HAL_GPIO_EXTI_Rising_Callback+0x82>
				(nrf905_payload_buffer[8]==0x69)){
 8000ddc:	4b15      	ldr	r3, [pc, #84]	; (8000e34 <HAL_GPIO_EXTI_Rising_Callback+0x8c>)
 8000dde:	7a1b      	ldrb	r3, [r3, #8]
		if((nrf905_payload_buffer[0]==0xD3) && (nrf905_payload_buffer[4]==0x16) &&
 8000de0:	2b69      	cmp	r3, #105	; 0x69
 8000de2:	d122      	bne.n	8000e2a <HAL_GPIO_EXTI_Rising_Callback+0x82>

//			Combines the incoming data of 3 separate bytes into 1 uint32
			uint32_t no1 = ((uint32_t)nrf905_payload_buffer[3] << 16) | ((uint32_t)nrf905_payload_buffer[2] << 8)
 8000de4:	4b13      	ldr	r3, [pc, #76]	; (8000e34 <HAL_GPIO_EXTI_Rising_Callback+0x8c>)
 8000de6:	78db      	ldrb	r3, [r3, #3]
 8000de8:	041a      	lsls	r2, r3, #16
 8000dea:	4b12      	ldr	r3, [pc, #72]	; (8000e34 <HAL_GPIO_EXTI_Rising_Callback+0x8c>)
 8000dec:	789b      	ldrb	r3, [r3, #2]
 8000dee:	021b      	lsls	r3, r3, #8
 8000df0:	4313      	orrs	r3, r2
					| ((uint32_t)nrf905_payload_buffer[1]);
 8000df2:	4a10      	ldr	r2, [pc, #64]	; (8000e34 <HAL_GPIO_EXTI_Rising_Callback+0x8c>)
 8000df4:	7852      	ldrb	r2, [r2, #1]
			uint32_t no1 = ((uint32_t)nrf905_payload_buffer[3] << 16) | ((uint32_t)nrf905_payload_buffer[2] << 8)
 8000df6:	4313      	orrs	r3, r2
 8000df8:	60fb      	str	r3, [r7, #12]

			uint32_t no2 = ((uint32_t)nrf905_payload_buffer[7] << 16) | ((uint32_t)nrf905_payload_buffer[6] << 8)
 8000dfa:	4b0e      	ldr	r3, [pc, #56]	; (8000e34 <HAL_GPIO_EXTI_Rising_Callback+0x8c>)
 8000dfc:	79db      	ldrb	r3, [r3, #7]
 8000dfe:	041a      	lsls	r2, r3, #16
 8000e00:	4b0c      	ldr	r3, [pc, #48]	; (8000e34 <HAL_GPIO_EXTI_Rising_Callback+0x8c>)
 8000e02:	799b      	ldrb	r3, [r3, #6]
 8000e04:	021b      	lsls	r3, r3, #8
 8000e06:	4313      	orrs	r3, r2
					| ((uint32_t)nrf905_payload_buffer[5]);
 8000e08:	4a0a      	ldr	r2, [pc, #40]	; (8000e34 <HAL_GPIO_EXTI_Rising_Callback+0x8c>)
 8000e0a:	7952      	ldrb	r2, [r2, #5]
			uint32_t no2 = ((uint32_t)nrf905_payload_buffer[7] << 16) | ((uint32_t)nrf905_payload_buffer[6] << 8)
 8000e0c:	4313      	orrs	r3, r2
 8000e0e:	60bb      	str	r3, [r7, #8]

//			Verifies if both 3 byte numbers are the same
			if(no1 == no2){
 8000e10:	68fa      	ldr	r2, [r7, #12]
 8000e12:	68bb      	ldr	r3, [r7, #8]
 8000e14:	429a      	cmp	r2, r3
 8000e16:	d108      	bne.n	8000e2a <HAL_GPIO_EXTI_Rising_Callback+0x82>
				shift_num = no1;
 8000e18:	68fa      	ldr	r2, [r7, #12]
 8000e1a:	4b08      	ldr	r3, [pc, #32]	; (8000e3c <HAL_GPIO_EXTI_Rising_Callback+0x94>)
 8000e1c:	601a      	str	r2, [r3, #0]
				led = 1;
 8000e1e:	4b08      	ldr	r3, [pc, #32]	; (8000e40 <HAL_GPIO_EXTI_Rising_Callback+0x98>)
 8000e20:	2201      	movs	r2, #1
 8000e22:	601a      	str	r2, [r3, #0]
				counter = 0;
 8000e24:	4b07      	ldr	r3, [pc, #28]	; (8000e44 <HAL_GPIO_EXTI_Rising_Callback+0x9c>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	601a      	str	r2, [r3, #0]
			}
		}
	}

}
 8000e2a:	46c0      	nop			; (mov r8, r8)
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	b004      	add	sp, #16
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	46c0      	nop			; (mov r8, r8)
 8000e34:	200000f0 	.word	0x200000f0
 8000e38:	200000d8 	.word	0x200000d8
 8000e3c:	20000100 	.word	0x20000100
 8000e40:	20000104 	.word	0x20000104
 8000e44:	200000fc 	.word	0x200000fc

08000e48 <HAL_TIM_PeriodElapsedCallback>:

//	Timer for checking time since last message
//	1 tick = 1ms
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim){
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b082      	sub	sp, #8
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]

	counter++;
 8000e50:	4b04      	ldr	r3, [pc, #16]	; (8000e64 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	1c5a      	adds	r2, r3, #1
 8000e56:	4b03      	ldr	r3, [pc, #12]	; (8000e64 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8000e58:	601a      	str	r2, [r3, #0]

}
 8000e5a:	46c0      	nop			; (mov r8, r8)
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	b002      	add	sp, #8
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	46c0      	nop			; (mov r8, r8)
 8000e64:	200000fc 	.word	0x200000fc

08000e68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e6c:	b672      	cpsid	i
}
 8000e6e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e70:	e7fe      	b.n	8000e70 <Error_Handler+0x8>
	...

08000e74 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8000e78:	4b1b      	ldr	r3, [pc, #108]	; (8000ee8 <MX_SPI2_Init+0x74>)
 8000e7a:	4a1c      	ldr	r2, [pc, #112]	; (8000eec <MX_SPI2_Init+0x78>)
 8000e7c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000e7e:	4b1a      	ldr	r3, [pc, #104]	; (8000ee8 <MX_SPI2_Init+0x74>)
 8000e80:	2282      	movs	r2, #130	; 0x82
 8000e82:	0052      	lsls	r2, r2, #1
 8000e84:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000e86:	4b18      	ldr	r3, [pc, #96]	; (8000ee8 <MX_SPI2_Init+0x74>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000e8c:	4b16      	ldr	r3, [pc, #88]	; (8000ee8 <MX_SPI2_Init+0x74>)
 8000e8e:	22e0      	movs	r2, #224	; 0xe0
 8000e90:	00d2      	lsls	r2, r2, #3
 8000e92:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e94:	4b14      	ldr	r3, [pc, #80]	; (8000ee8 <MX_SPI2_Init+0x74>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000e9a:	4b13      	ldr	r3, [pc, #76]	; (8000ee8 <MX_SPI2_Init+0x74>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000ea0:	4b11      	ldr	r3, [pc, #68]	; (8000ee8 <MX_SPI2_Init+0x74>)
 8000ea2:	2280      	movs	r2, #128	; 0x80
 8000ea4:	0092      	lsls	r2, r2, #2
 8000ea6:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000ea8:	4b0f      	ldr	r3, [pc, #60]	; (8000ee8 <MX_SPI2_Init+0x74>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000eae:	4b0e      	ldr	r3, [pc, #56]	; (8000ee8 <MX_SPI2_Init+0x74>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000eb4:	4b0c      	ldr	r3, [pc, #48]	; (8000ee8 <MX_SPI2_Init+0x74>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000eba:	4b0b      	ldr	r3, [pc, #44]	; (8000ee8 <MX_SPI2_Init+0x74>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000ec0:	4b09      	ldr	r3, [pc, #36]	; (8000ee8 <MX_SPI2_Init+0x74>)
 8000ec2:	2207      	movs	r2, #7
 8000ec4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000ec6:	4b08      	ldr	r3, [pc, #32]	; (8000ee8 <MX_SPI2_Init+0x74>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000ecc:	4b06      	ldr	r3, [pc, #24]	; (8000ee8 <MX_SPI2_Init+0x74>)
 8000ece:	2208      	movs	r2, #8
 8000ed0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000ed2:	4b05      	ldr	r3, [pc, #20]	; (8000ee8 <MX_SPI2_Init+0x74>)
 8000ed4:	0018      	movs	r0, r3
 8000ed6:	f001 fd5f 	bl	8002998 <HAL_SPI_Init>
 8000eda:	1e03      	subs	r3, r0, #0
 8000edc:	d001      	beq.n	8000ee2 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8000ede:	f7ff ffc3 	bl	8000e68 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000ee2:	46c0      	nop			; (mov r8, r8)
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	20000110 	.word	0x20000110
 8000eec:	40003800 	.word	0x40003800

08000ef0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000ef0:	b590      	push	{r4, r7, lr}
 8000ef2:	b08b      	sub	sp, #44	; 0x2c
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ef8:	2414      	movs	r4, #20
 8000efa:	193b      	adds	r3, r7, r4
 8000efc:	0018      	movs	r0, r3
 8000efe:	2314      	movs	r3, #20
 8000f00:	001a      	movs	r2, r3
 8000f02:	2100      	movs	r1, #0
 8000f04:	f004 ff35 	bl	8005d72 <memset>
  if(spiHandle->Instance==SPI2)
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	4a30      	ldr	r2, [pc, #192]	; (8000fd0 <HAL_SPI_MspInit+0xe0>)
 8000f0e:	4293      	cmp	r3, r2
 8000f10:	d159      	bne.n	8000fc6 <HAL_SPI_MspInit+0xd6>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000f12:	4b30      	ldr	r3, [pc, #192]	; (8000fd4 <HAL_SPI_MspInit+0xe4>)
 8000f14:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000f16:	4b2f      	ldr	r3, [pc, #188]	; (8000fd4 <HAL_SPI_MspInit+0xe4>)
 8000f18:	2180      	movs	r1, #128	; 0x80
 8000f1a:	01c9      	lsls	r1, r1, #7
 8000f1c:	430a      	orrs	r2, r1
 8000f1e:	63da      	str	r2, [r3, #60]	; 0x3c
 8000f20:	4b2c      	ldr	r3, [pc, #176]	; (8000fd4 <HAL_SPI_MspInit+0xe4>)
 8000f22:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000f24:	2380      	movs	r3, #128	; 0x80
 8000f26:	01db      	lsls	r3, r3, #7
 8000f28:	4013      	ands	r3, r2
 8000f2a:	613b      	str	r3, [r7, #16]
 8000f2c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f2e:	4b29      	ldr	r3, [pc, #164]	; (8000fd4 <HAL_SPI_MspInit+0xe4>)
 8000f30:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000f32:	4b28      	ldr	r3, [pc, #160]	; (8000fd4 <HAL_SPI_MspInit+0xe4>)
 8000f34:	2104      	movs	r1, #4
 8000f36:	430a      	orrs	r2, r1
 8000f38:	635a      	str	r2, [r3, #52]	; 0x34
 8000f3a:	4b26      	ldr	r3, [pc, #152]	; (8000fd4 <HAL_SPI_MspInit+0xe4>)
 8000f3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f3e:	2204      	movs	r2, #4
 8000f40:	4013      	ands	r3, r2
 8000f42:	60fb      	str	r3, [r7, #12]
 8000f44:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f46:	4b23      	ldr	r3, [pc, #140]	; (8000fd4 <HAL_SPI_MspInit+0xe4>)
 8000f48:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000f4a:	4b22      	ldr	r3, [pc, #136]	; (8000fd4 <HAL_SPI_MspInit+0xe4>)
 8000f4c:	2101      	movs	r1, #1
 8000f4e:	430a      	orrs	r2, r1
 8000f50:	635a      	str	r2, [r3, #52]	; 0x34
 8000f52:	4b20      	ldr	r3, [pc, #128]	; (8000fd4 <HAL_SPI_MspInit+0xe4>)
 8000f54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f56:	2201      	movs	r2, #1
 8000f58:	4013      	ands	r3, r2
 8000f5a:	60bb      	str	r3, [r7, #8]
 8000f5c:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PA0     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000f5e:	193b      	adds	r3, r7, r4
 8000f60:	220c      	movs	r2, #12
 8000f62:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f64:	193b      	adds	r3, r7, r4
 8000f66:	2202      	movs	r2, #2
 8000f68:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6a:	193b      	adds	r3, r7, r4
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f70:	193b      	adds	r3, r7, r4
 8000f72:	2200      	movs	r2, #0
 8000f74:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_SPI2;
 8000f76:	193b      	adds	r3, r7, r4
 8000f78:	2201      	movs	r2, #1
 8000f7a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f7c:	193b      	adds	r3, r7, r4
 8000f7e:	4a16      	ldr	r2, [pc, #88]	; (8000fd8 <HAL_SPI_MspInit+0xe8>)
 8000f80:	0019      	movs	r1, r3
 8000f82:	0010      	movs	r0, r2
 8000f84:	f000 fc8a 	bl	800189c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000f88:	0021      	movs	r1, r4
 8000f8a:	187b      	adds	r3, r7, r1
 8000f8c:	2201      	movs	r2, #1
 8000f8e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f90:	187b      	adds	r3, r7, r1
 8000f92:	2202      	movs	r2, #2
 8000f94:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f96:	187b      	adds	r3, r7, r1
 8000f98:	2200      	movs	r2, #0
 8000f9a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f9c:	187b      	adds	r3, r7, r1
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 8000fa2:	187b      	adds	r3, r7, r1
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fa8:	187a      	adds	r2, r7, r1
 8000faa:	23a0      	movs	r3, #160	; 0xa0
 8000fac:	05db      	lsls	r3, r3, #23
 8000fae:	0011      	movs	r1, r2
 8000fb0:	0018      	movs	r0, r3
 8000fb2:	f000 fc73 	bl	800189c <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	2100      	movs	r1, #0
 8000fba:	201a      	movs	r0, #26
 8000fbc:	f000 fbd2 	bl	8001764 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8000fc0:	201a      	movs	r0, #26
 8000fc2:	f000 fbe4 	bl	800178e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8000fc6:	46c0      	nop			; (mov r8, r8)
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	b00b      	add	sp, #44	; 0x2c
 8000fcc:	bd90      	pop	{r4, r7, pc}
 8000fce:	46c0      	nop			; (mov r8, r8)
 8000fd0:	40003800 	.word	0x40003800
 8000fd4:	40021000 	.word	0x40021000
 8000fd8:	50000800 	.word	0x50000800

08000fdc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b082      	sub	sp, #8
 8000fe0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fe2:	4b11      	ldr	r3, [pc, #68]	; (8001028 <HAL_MspInit+0x4c>)
 8000fe4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000fe6:	4b10      	ldr	r3, [pc, #64]	; (8001028 <HAL_MspInit+0x4c>)
 8000fe8:	2101      	movs	r1, #1
 8000fea:	430a      	orrs	r2, r1
 8000fec:	641a      	str	r2, [r3, #64]	; 0x40
 8000fee:	4b0e      	ldr	r3, [pc, #56]	; (8001028 <HAL_MspInit+0x4c>)
 8000ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ff2:	2201      	movs	r2, #1
 8000ff4:	4013      	ands	r3, r2
 8000ff6:	607b      	str	r3, [r7, #4]
 8000ff8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ffa:	4b0b      	ldr	r3, [pc, #44]	; (8001028 <HAL_MspInit+0x4c>)
 8000ffc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000ffe:	4b0a      	ldr	r3, [pc, #40]	; (8001028 <HAL_MspInit+0x4c>)
 8001000:	2180      	movs	r1, #128	; 0x80
 8001002:	0549      	lsls	r1, r1, #21
 8001004:	430a      	orrs	r2, r1
 8001006:	63da      	str	r2, [r3, #60]	; 0x3c
 8001008:	4b07      	ldr	r3, [pc, #28]	; (8001028 <HAL_MspInit+0x4c>)
 800100a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800100c:	2380      	movs	r3, #128	; 0x80
 800100e:	055b      	lsls	r3, r3, #21
 8001010:	4013      	ands	r3, r2
 8001012:	603b      	str	r3, [r7, #0]
 8001014:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 8001016:	23c0      	movs	r3, #192	; 0xc0
 8001018:	00db      	lsls	r3, r3, #3
 800101a:	0018      	movs	r0, r3
 800101c:	f000 fae0 	bl	80015e0 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001020:	46c0      	nop			; (mov r8, r8)
 8001022:	46bd      	mov	sp, r7
 8001024:	b002      	add	sp, #8
 8001026:	bd80      	pop	{r7, pc}
 8001028:	40021000 	.word	0x40021000

0800102c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001030:	e7fe      	b.n	8001030 <NMI_Handler+0x4>

08001032 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001032:	b580      	push	{r7, lr}
 8001034:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001036:	e7fe      	b.n	8001036 <HardFault_Handler+0x4>

08001038 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800103c:	46c0      	nop			; (mov r8, r8)
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}

08001042 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001042:	b580      	push	{r7, lr}
 8001044:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001046:	46c0      	nop			; (mov r8, r8)
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}

0800104c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001050:	f000 fa86 	bl	8001560 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001054:	46c0      	nop			; (mov r8, r8)
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}

0800105a <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 800105a:	b580      	push	{r7, lr}
 800105c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DR_Pin);
 800105e:	2380      	movs	r3, #128	; 0x80
 8001060:	015b      	lsls	r3, r3, #5
 8001062:	0018      	movs	r0, r3
 8001064:	f000 fd9c 	bl	8001ba0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8001068:	46c0      	nop			; (mov r8, r8)
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
	...

08001070 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001074:	4b03      	ldr	r3, [pc, #12]	; (8001084 <TIM2_IRQHandler+0x14>)
 8001076:	0018      	movs	r0, r3
 8001078:	f002 fe2a 	bl	8003cd0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800107c:	46c0      	nop			; (mov r8, r8)
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}
 8001082:	46c0      	nop			; (mov r8, r8)
 8001084:	20000178 	.word	0x20000178

08001088 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 800108c:	4b03      	ldr	r3, [pc, #12]	; (800109c <SPI2_IRQHandler+0x14>)
 800108e:	0018      	movs	r0, r3
 8001090:	f002 f89a 	bl	80031c8 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8001094:	46c0      	nop			; (mov r8, r8)
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
 800109a:	46c0      	nop			; (mov r8, r8)
 800109c:	20000110 	.word	0x20000110

080010a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b086      	sub	sp, #24
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010a8:	4a14      	ldr	r2, [pc, #80]	; (80010fc <_sbrk+0x5c>)
 80010aa:	4b15      	ldr	r3, [pc, #84]	; (8001100 <_sbrk+0x60>)
 80010ac:	1ad3      	subs	r3, r2, r3
 80010ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010b0:	697b      	ldr	r3, [r7, #20]
 80010b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010b4:	4b13      	ldr	r3, [pc, #76]	; (8001104 <_sbrk+0x64>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d102      	bne.n	80010c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010bc:	4b11      	ldr	r3, [pc, #68]	; (8001104 <_sbrk+0x64>)
 80010be:	4a12      	ldr	r2, [pc, #72]	; (8001108 <_sbrk+0x68>)
 80010c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010c2:	4b10      	ldr	r3, [pc, #64]	; (8001104 <_sbrk+0x64>)
 80010c4:	681a      	ldr	r2, [r3, #0]
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	18d3      	adds	r3, r2, r3
 80010ca:	693a      	ldr	r2, [r7, #16]
 80010cc:	429a      	cmp	r2, r3
 80010ce:	d207      	bcs.n	80010e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010d0:	f004 fd20 	bl	8005b14 <__errno>
 80010d4:	0003      	movs	r3, r0
 80010d6:	220c      	movs	r2, #12
 80010d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010da:	2301      	movs	r3, #1
 80010dc:	425b      	negs	r3, r3
 80010de:	e009      	b.n	80010f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010e0:	4b08      	ldr	r3, [pc, #32]	; (8001104 <_sbrk+0x64>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010e6:	4b07      	ldr	r3, [pc, #28]	; (8001104 <_sbrk+0x64>)
 80010e8:	681a      	ldr	r2, [r3, #0]
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	18d2      	adds	r2, r2, r3
 80010ee:	4b05      	ldr	r3, [pc, #20]	; (8001104 <_sbrk+0x64>)
 80010f0:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80010f2:	68fb      	ldr	r3, [r7, #12]
}
 80010f4:	0018      	movs	r0, r3
 80010f6:	46bd      	mov	sp, r7
 80010f8:	b006      	add	sp, #24
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	20009000 	.word	0x20009000
 8001100:	00000400 	.word	0x00000400
 8001104:	20000174 	.word	0x20000174
 8001108:	20000360 	.word	0x20000360

0800110c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001110:	46c0      	nop			; (mov r8, r8)
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
	...

08001118 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b088      	sub	sp, #32
 800111c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800111e:	2310      	movs	r3, #16
 8001120:	18fb      	adds	r3, r7, r3
 8001122:	0018      	movs	r0, r3
 8001124:	2310      	movs	r3, #16
 8001126:	001a      	movs	r2, r3
 8001128:	2100      	movs	r1, #0
 800112a:	f004 fe22 	bl	8005d72 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800112e:	1d3b      	adds	r3, r7, #4
 8001130:	0018      	movs	r0, r3
 8001132:	230c      	movs	r3, #12
 8001134:	001a      	movs	r2, r3
 8001136:	2100      	movs	r1, #0
 8001138:	f004 fe1b 	bl	8005d72 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800113c:	4b1f      	ldr	r3, [pc, #124]	; (80011bc <MX_TIM2_Init+0xa4>)
 800113e:	2280      	movs	r2, #128	; 0x80
 8001140:	05d2      	lsls	r2, r2, #23
 8001142:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 20;
 8001144:	4b1d      	ldr	r3, [pc, #116]	; (80011bc <MX_TIM2_Init+0xa4>)
 8001146:	2214      	movs	r2, #20
 8001148:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800114a:	4b1c      	ldr	r3, [pc, #112]	; (80011bc <MX_TIM2_Init+0xa4>)
 800114c:	2200      	movs	r2, #0
 800114e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3600;
 8001150:	4b1a      	ldr	r3, [pc, #104]	; (80011bc <MX_TIM2_Init+0xa4>)
 8001152:	22e1      	movs	r2, #225	; 0xe1
 8001154:	0112      	lsls	r2, r2, #4
 8001156:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001158:	4b18      	ldr	r3, [pc, #96]	; (80011bc <MX_TIM2_Init+0xa4>)
 800115a:	2200      	movs	r2, #0
 800115c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800115e:	4b17      	ldr	r3, [pc, #92]	; (80011bc <MX_TIM2_Init+0xa4>)
 8001160:	2200      	movs	r2, #0
 8001162:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001164:	4b15      	ldr	r3, [pc, #84]	; (80011bc <MX_TIM2_Init+0xa4>)
 8001166:	0018      	movs	r0, r3
 8001168:	f002 fcfd 	bl	8003b66 <HAL_TIM_Base_Init>
 800116c:	1e03      	subs	r3, r0, #0
 800116e:	d001      	beq.n	8001174 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8001170:	f7ff fe7a 	bl	8000e68 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001174:	2110      	movs	r1, #16
 8001176:	187b      	adds	r3, r7, r1
 8001178:	2280      	movs	r2, #128	; 0x80
 800117a:	0152      	lsls	r2, r2, #5
 800117c:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800117e:	187a      	adds	r2, r7, r1
 8001180:	4b0e      	ldr	r3, [pc, #56]	; (80011bc <MX_TIM2_Init+0xa4>)
 8001182:	0011      	movs	r1, r2
 8001184:	0018      	movs	r0, r3
 8001186:	f002 fed5 	bl	8003f34 <HAL_TIM_ConfigClockSource>
 800118a:	1e03      	subs	r3, r0, #0
 800118c:	d001      	beq.n	8001192 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 800118e:	f7ff fe6b 	bl	8000e68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001192:	1d3b      	adds	r3, r7, #4
 8001194:	2200      	movs	r2, #0
 8001196:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001198:	1d3b      	adds	r3, r7, #4
 800119a:	2200      	movs	r2, #0
 800119c:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800119e:	1d3a      	adds	r2, r7, #4
 80011a0:	4b06      	ldr	r3, [pc, #24]	; (80011bc <MX_TIM2_Init+0xa4>)
 80011a2:	0011      	movs	r1, r2
 80011a4:	0018      	movs	r0, r3
 80011a6:	f003 f8d7 	bl	8004358 <HAL_TIMEx_MasterConfigSynchronization>
 80011aa:	1e03      	subs	r3, r0, #0
 80011ac:	d001      	beq.n	80011b2 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80011ae:	f7ff fe5b 	bl	8000e68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80011b2:	46c0      	nop			; (mov r8, r8)
 80011b4:	46bd      	mov	sp, r7
 80011b6:	b008      	add	sp, #32
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	46c0      	nop			; (mov r8, r8)
 80011bc:	20000178 	.word	0x20000178

080011c0 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b088      	sub	sp, #32
 80011c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011c6:	2310      	movs	r3, #16
 80011c8:	18fb      	adds	r3, r7, r3
 80011ca:	0018      	movs	r0, r3
 80011cc:	2310      	movs	r3, #16
 80011ce:	001a      	movs	r2, r3
 80011d0:	2100      	movs	r1, #0
 80011d2:	f004 fdce 	bl	8005d72 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011d6:	1d3b      	adds	r3, r7, #4
 80011d8:	0018      	movs	r0, r3
 80011da:	230c      	movs	r3, #12
 80011dc:	001a      	movs	r2, r3
 80011de:	2100      	movs	r1, #0
 80011e0:	f004 fdc7 	bl	8005d72 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80011e4:	4b1e      	ldr	r3, [pc, #120]	; (8001260 <MX_TIM3_Init+0xa0>)
 80011e6:	4a1f      	ldr	r2, [pc, #124]	; (8001264 <MX_TIM3_Init+0xa4>)
 80011e8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 79;
 80011ea:	4b1d      	ldr	r3, [pc, #116]	; (8001260 <MX_TIM3_Init+0xa0>)
 80011ec:	224f      	movs	r2, #79	; 0x4f
 80011ee:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011f0:	4b1b      	ldr	r3, [pc, #108]	; (8001260 <MX_TIM3_Init+0xa0>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80011f6:	4b1a      	ldr	r3, [pc, #104]	; (8001260 <MX_TIM3_Init+0xa0>)
 80011f8:	4a1b      	ldr	r2, [pc, #108]	; (8001268 <MX_TIM3_Init+0xa8>)
 80011fa:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011fc:	4b18      	ldr	r3, [pc, #96]	; (8001260 <MX_TIM3_Init+0xa0>)
 80011fe:	2200      	movs	r2, #0
 8001200:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001202:	4b17      	ldr	r3, [pc, #92]	; (8001260 <MX_TIM3_Init+0xa0>)
 8001204:	2200      	movs	r2, #0
 8001206:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001208:	4b15      	ldr	r3, [pc, #84]	; (8001260 <MX_TIM3_Init+0xa0>)
 800120a:	0018      	movs	r0, r3
 800120c:	f002 fcab 	bl	8003b66 <HAL_TIM_Base_Init>
 8001210:	1e03      	subs	r3, r0, #0
 8001212:	d001      	beq.n	8001218 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8001214:	f7ff fe28 	bl	8000e68 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001218:	2110      	movs	r1, #16
 800121a:	187b      	adds	r3, r7, r1
 800121c:	2280      	movs	r2, #128	; 0x80
 800121e:	0152      	lsls	r2, r2, #5
 8001220:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001222:	187a      	adds	r2, r7, r1
 8001224:	4b0e      	ldr	r3, [pc, #56]	; (8001260 <MX_TIM3_Init+0xa0>)
 8001226:	0011      	movs	r1, r2
 8001228:	0018      	movs	r0, r3
 800122a:	f002 fe83 	bl	8003f34 <HAL_TIM_ConfigClockSource>
 800122e:	1e03      	subs	r3, r0, #0
 8001230:	d001      	beq.n	8001236 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8001232:	f7ff fe19 	bl	8000e68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001236:	1d3b      	adds	r3, r7, #4
 8001238:	2200      	movs	r2, #0
 800123a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800123c:	1d3b      	adds	r3, r7, #4
 800123e:	2200      	movs	r2, #0
 8001240:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001242:	1d3a      	adds	r2, r7, #4
 8001244:	4b06      	ldr	r3, [pc, #24]	; (8001260 <MX_TIM3_Init+0xa0>)
 8001246:	0011      	movs	r1, r2
 8001248:	0018      	movs	r0, r3
 800124a:	f003 f885 	bl	8004358 <HAL_TIMEx_MasterConfigSynchronization>
 800124e:	1e03      	subs	r3, r0, #0
 8001250:	d001      	beq.n	8001256 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8001252:	f7ff fe09 	bl	8000e68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001256:	46c0      	nop			; (mov r8, r8)
 8001258:	46bd      	mov	sp, r7
 800125a:	b008      	add	sp, #32
 800125c:	bd80      	pop	{r7, pc}
 800125e:	46c0      	nop			; (mov r8, r8)
 8001260:	200001c4 	.word	0x200001c4
 8001264:	40000400 	.word	0x40000400
 8001268:	0000ffff 	.word	0x0000ffff

0800126c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b084      	sub	sp, #16
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681a      	ldr	r2, [r3, #0]
 8001278:	2380      	movs	r3, #128	; 0x80
 800127a:	05db      	lsls	r3, r3, #23
 800127c:	429a      	cmp	r2, r3
 800127e:	d114      	bne.n	80012aa <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001280:	4b14      	ldr	r3, [pc, #80]	; (80012d4 <HAL_TIM_Base_MspInit+0x68>)
 8001282:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001284:	4b13      	ldr	r3, [pc, #76]	; (80012d4 <HAL_TIM_Base_MspInit+0x68>)
 8001286:	2101      	movs	r1, #1
 8001288:	430a      	orrs	r2, r1
 800128a:	63da      	str	r2, [r3, #60]	; 0x3c
 800128c:	4b11      	ldr	r3, [pc, #68]	; (80012d4 <HAL_TIM_Base_MspInit+0x68>)
 800128e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001290:	2201      	movs	r2, #1
 8001292:	4013      	ands	r3, r2
 8001294:	60fb      	str	r3, [r7, #12]
 8001296:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001298:	2200      	movs	r2, #0
 800129a:	2100      	movs	r1, #0
 800129c:	200f      	movs	r0, #15
 800129e:	f000 fa61 	bl	8001764 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80012a2:	200f      	movs	r0, #15
 80012a4:	f000 fa73 	bl	800178e <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80012a8:	e010      	b.n	80012cc <HAL_TIM_Base_MspInit+0x60>
  else if(tim_baseHandle->Instance==TIM3)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	4a0a      	ldr	r2, [pc, #40]	; (80012d8 <HAL_TIM_Base_MspInit+0x6c>)
 80012b0:	4293      	cmp	r3, r2
 80012b2:	d10b      	bne.n	80012cc <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80012b4:	4b07      	ldr	r3, [pc, #28]	; (80012d4 <HAL_TIM_Base_MspInit+0x68>)
 80012b6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80012b8:	4b06      	ldr	r3, [pc, #24]	; (80012d4 <HAL_TIM_Base_MspInit+0x68>)
 80012ba:	2102      	movs	r1, #2
 80012bc:	430a      	orrs	r2, r1
 80012be:	63da      	str	r2, [r3, #60]	; 0x3c
 80012c0:	4b04      	ldr	r3, [pc, #16]	; (80012d4 <HAL_TIM_Base_MspInit+0x68>)
 80012c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80012c4:	2202      	movs	r2, #2
 80012c6:	4013      	ands	r3, r2
 80012c8:	60bb      	str	r3, [r7, #8]
 80012ca:	68bb      	ldr	r3, [r7, #8]
}
 80012cc:	46c0      	nop			; (mov r8, r8)
 80012ce:	46bd      	mov	sp, r7
 80012d0:	b004      	add	sp, #16
 80012d2:	bd80      	pop	{r7, pc}
 80012d4:	40021000 	.word	0x40021000
 80012d8:	40000400 	.word	0x40000400

080012dc <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80012e0:	4b23      	ldr	r3, [pc, #140]	; (8001370 <MX_USART2_UART_Init+0x94>)
 80012e2:	4a24      	ldr	r2, [pc, #144]	; (8001374 <MX_USART2_UART_Init+0x98>)
 80012e4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80012e6:	4b22      	ldr	r3, [pc, #136]	; (8001370 <MX_USART2_UART_Init+0x94>)
 80012e8:	22e1      	movs	r2, #225	; 0xe1
 80012ea:	0252      	lsls	r2, r2, #9
 80012ec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80012ee:	4b20      	ldr	r3, [pc, #128]	; (8001370 <MX_USART2_UART_Init+0x94>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80012f4:	4b1e      	ldr	r3, [pc, #120]	; (8001370 <MX_USART2_UART_Init+0x94>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80012fa:	4b1d      	ldr	r3, [pc, #116]	; (8001370 <MX_USART2_UART_Init+0x94>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001300:	4b1b      	ldr	r3, [pc, #108]	; (8001370 <MX_USART2_UART_Init+0x94>)
 8001302:	220c      	movs	r2, #12
 8001304:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001306:	4b1a      	ldr	r3, [pc, #104]	; (8001370 <MX_USART2_UART_Init+0x94>)
 8001308:	2200      	movs	r2, #0
 800130a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800130c:	4b18      	ldr	r3, [pc, #96]	; (8001370 <MX_USART2_UART_Init+0x94>)
 800130e:	2200      	movs	r2, #0
 8001310:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001312:	4b17      	ldr	r3, [pc, #92]	; (8001370 <MX_USART2_UART_Init+0x94>)
 8001314:	2200      	movs	r2, #0
 8001316:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001318:	4b15      	ldr	r3, [pc, #84]	; (8001370 <MX_USART2_UART_Init+0x94>)
 800131a:	2200      	movs	r2, #0
 800131c:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800131e:	4b14      	ldr	r3, [pc, #80]	; (8001370 <MX_USART2_UART_Init+0x94>)
 8001320:	2200      	movs	r2, #0
 8001322:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001324:	4b12      	ldr	r3, [pc, #72]	; (8001370 <MX_USART2_UART_Init+0x94>)
 8001326:	0018      	movs	r0, r3
 8001328:	f003 f89c 	bl	8004464 <HAL_UART_Init>
 800132c:	1e03      	subs	r3, r0, #0
 800132e:	d001      	beq.n	8001334 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001330:	f7ff fd9a 	bl	8000e68 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001334:	4b0e      	ldr	r3, [pc, #56]	; (8001370 <MX_USART2_UART_Init+0x94>)
 8001336:	2100      	movs	r1, #0
 8001338:	0018      	movs	r0, r3
 800133a:	f003 fda7 	bl	8004e8c <HAL_UARTEx_SetTxFifoThreshold>
 800133e:	1e03      	subs	r3, r0, #0
 8001340:	d001      	beq.n	8001346 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001342:	f7ff fd91 	bl	8000e68 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001346:	4b0a      	ldr	r3, [pc, #40]	; (8001370 <MX_USART2_UART_Init+0x94>)
 8001348:	2100      	movs	r1, #0
 800134a:	0018      	movs	r0, r3
 800134c:	f003 fdde 	bl	8004f0c <HAL_UARTEx_SetRxFifoThreshold>
 8001350:	1e03      	subs	r3, r0, #0
 8001352:	d001      	beq.n	8001358 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001354:	f7ff fd88 	bl	8000e68 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001358:	4b05      	ldr	r3, [pc, #20]	; (8001370 <MX_USART2_UART_Init+0x94>)
 800135a:	0018      	movs	r0, r3
 800135c:	f003 fd5c 	bl	8004e18 <HAL_UARTEx_DisableFifoMode>
 8001360:	1e03      	subs	r3, r0, #0
 8001362:	d001      	beq.n	8001368 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001364:	f7ff fd80 	bl	8000e68 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001368:	46c0      	nop			; (mov r8, r8)
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}
 800136e:	46c0      	nop			; (mov r8, r8)
 8001370:	20000210 	.word	0x20000210
 8001374:	40004400 	.word	0x40004400

08001378 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001378:	b590      	push	{r4, r7, lr}
 800137a:	b097      	sub	sp, #92	; 0x5c
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001380:	2344      	movs	r3, #68	; 0x44
 8001382:	18fb      	adds	r3, r7, r3
 8001384:	0018      	movs	r0, r3
 8001386:	2314      	movs	r3, #20
 8001388:	001a      	movs	r2, r3
 800138a:	2100      	movs	r1, #0
 800138c:	f004 fcf1 	bl	8005d72 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001390:	2410      	movs	r4, #16
 8001392:	193b      	adds	r3, r7, r4
 8001394:	0018      	movs	r0, r3
 8001396:	2334      	movs	r3, #52	; 0x34
 8001398:	001a      	movs	r2, r3
 800139a:	2100      	movs	r1, #0
 800139c:	f004 fce9 	bl	8005d72 <memset>
  if(uartHandle->Instance==USART2)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4a22      	ldr	r2, [pc, #136]	; (8001430 <HAL_UART_MspInit+0xb8>)
 80013a6:	4293      	cmp	r3, r2
 80013a8:	d13e      	bne.n	8001428 <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80013aa:	193b      	adds	r3, r7, r4
 80013ac:	2202      	movs	r2, #2
 80013ae:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80013b0:	193b      	adds	r3, r7, r4
 80013b2:	2200      	movs	r2, #0
 80013b4:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013b6:	193b      	adds	r3, r7, r4
 80013b8:	0018      	movs	r0, r3
 80013ba:	f001 f935 	bl	8002628 <HAL_RCCEx_PeriphCLKConfig>
 80013be:	1e03      	subs	r3, r0, #0
 80013c0:	d001      	beq.n	80013c6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80013c2:	f7ff fd51 	bl	8000e68 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80013c6:	4b1b      	ldr	r3, [pc, #108]	; (8001434 <HAL_UART_MspInit+0xbc>)
 80013c8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80013ca:	4b1a      	ldr	r3, [pc, #104]	; (8001434 <HAL_UART_MspInit+0xbc>)
 80013cc:	2180      	movs	r1, #128	; 0x80
 80013ce:	0289      	lsls	r1, r1, #10
 80013d0:	430a      	orrs	r2, r1
 80013d2:	63da      	str	r2, [r3, #60]	; 0x3c
 80013d4:	4b17      	ldr	r3, [pc, #92]	; (8001434 <HAL_UART_MspInit+0xbc>)
 80013d6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80013d8:	2380      	movs	r3, #128	; 0x80
 80013da:	029b      	lsls	r3, r3, #10
 80013dc:	4013      	ands	r3, r2
 80013de:	60fb      	str	r3, [r7, #12]
 80013e0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013e2:	4b14      	ldr	r3, [pc, #80]	; (8001434 <HAL_UART_MspInit+0xbc>)
 80013e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80013e6:	4b13      	ldr	r3, [pc, #76]	; (8001434 <HAL_UART_MspInit+0xbc>)
 80013e8:	2101      	movs	r1, #1
 80013ea:	430a      	orrs	r2, r1
 80013ec:	635a      	str	r2, [r3, #52]	; 0x34
 80013ee:	4b11      	ldr	r3, [pc, #68]	; (8001434 <HAL_UART_MspInit+0xbc>)
 80013f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013f2:	2201      	movs	r2, #1
 80013f4:	4013      	ands	r3, r2
 80013f6:	60bb      	str	r3, [r7, #8]
 80013f8:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 80013fa:	2144      	movs	r1, #68	; 0x44
 80013fc:	187b      	adds	r3, r7, r1
 80013fe:	220c      	movs	r2, #12
 8001400:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001402:	187b      	adds	r3, r7, r1
 8001404:	2202      	movs	r2, #2
 8001406:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001408:	187b      	adds	r3, r7, r1
 800140a:	2201      	movs	r2, #1
 800140c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800140e:	187b      	adds	r3, r7, r1
 8001410:	2200      	movs	r2, #0
 8001412:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8001414:	187b      	adds	r3, r7, r1
 8001416:	2201      	movs	r2, #1
 8001418:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800141a:	187a      	adds	r2, r7, r1
 800141c:	23a0      	movs	r3, #160	; 0xa0
 800141e:	05db      	lsls	r3, r3, #23
 8001420:	0011      	movs	r1, r2
 8001422:	0018      	movs	r0, r3
 8001424:	f000 fa3a 	bl	800189c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001428:	46c0      	nop			; (mov r8, r8)
 800142a:	46bd      	mov	sp, r7
 800142c:	b017      	add	sp, #92	; 0x5c
 800142e:	bd90      	pop	{r4, r7, pc}
 8001430:	40004400 	.word	0x40004400
 8001434:	40021000 	.word	0x40021000

08001438 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001438:	480d      	ldr	r0, [pc, #52]	; (8001470 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800143a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 800143c:	f7ff fe66 	bl	800110c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001440:	480c      	ldr	r0, [pc, #48]	; (8001474 <LoopForever+0x6>)
  ldr r1, =_edata
 8001442:	490d      	ldr	r1, [pc, #52]	; (8001478 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001444:	4a0d      	ldr	r2, [pc, #52]	; (800147c <LoopForever+0xe>)
  movs r3, #0
 8001446:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001448:	e002      	b.n	8001450 <LoopCopyDataInit>

0800144a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800144a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800144c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800144e:	3304      	adds	r3, #4

08001450 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001450:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001452:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001454:	d3f9      	bcc.n	800144a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001456:	4a0a      	ldr	r2, [pc, #40]	; (8001480 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001458:	4c0a      	ldr	r4, [pc, #40]	; (8001484 <LoopForever+0x16>)
  movs r3, #0
 800145a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800145c:	e001      	b.n	8001462 <LoopFillZerobss>

0800145e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800145e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001460:	3204      	adds	r2, #4

08001462 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001462:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001464:	d3fb      	bcc.n	800145e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001466:	f004 fc5d 	bl	8005d24 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800146a:	f7ff fb2d 	bl	8000ac8 <main>

0800146e <LoopForever>:

LoopForever:
  b LoopForever
 800146e:	e7fe      	b.n	800146e <LoopForever>
  ldr   r0, =_estack
 8001470:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8001474:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001478:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 800147c:	080070ac 	.word	0x080070ac
  ldr r2, =_sbss
 8001480:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8001484:	20000360 	.word	0x20000360

08001488 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001488:	e7fe      	b.n	8001488 <ADC1_COMP_IRQHandler>
	...

0800148c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b082      	sub	sp, #8
 8001490:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001492:	1dfb      	adds	r3, r7, #7
 8001494:	2200      	movs	r2, #0
 8001496:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001498:	4b0b      	ldr	r3, [pc, #44]	; (80014c8 <HAL_Init+0x3c>)
 800149a:	681a      	ldr	r2, [r3, #0]
 800149c:	4b0a      	ldr	r3, [pc, #40]	; (80014c8 <HAL_Init+0x3c>)
 800149e:	2180      	movs	r1, #128	; 0x80
 80014a0:	0049      	lsls	r1, r1, #1
 80014a2:	430a      	orrs	r2, r1
 80014a4:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80014a6:	2000      	movs	r0, #0
 80014a8:	f000 f810 	bl	80014cc <HAL_InitTick>
 80014ac:	1e03      	subs	r3, r0, #0
 80014ae:	d003      	beq.n	80014b8 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80014b0:	1dfb      	adds	r3, r7, #7
 80014b2:	2201      	movs	r2, #1
 80014b4:	701a      	strb	r2, [r3, #0]
 80014b6:	e001      	b.n	80014bc <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80014b8:	f7ff fd90 	bl	8000fdc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80014bc:	1dfb      	adds	r3, r7, #7
 80014be:	781b      	ldrb	r3, [r3, #0]
}
 80014c0:	0018      	movs	r0, r3
 80014c2:	46bd      	mov	sp, r7
 80014c4:	b002      	add	sp, #8
 80014c6:	bd80      	pop	{r7, pc}
 80014c8:	40022000 	.word	0x40022000

080014cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014cc:	b590      	push	{r4, r7, lr}
 80014ce:	b085      	sub	sp, #20
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80014d4:	230f      	movs	r3, #15
 80014d6:	18fb      	adds	r3, r7, r3
 80014d8:	2200      	movs	r2, #0
 80014da:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 80014dc:	4b1d      	ldr	r3, [pc, #116]	; (8001554 <HAL_InitTick+0x88>)
 80014de:	781b      	ldrb	r3, [r3, #0]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d02b      	beq.n	800153c <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 80014e4:	4b1c      	ldr	r3, [pc, #112]	; (8001558 <HAL_InitTick+0x8c>)
 80014e6:	681c      	ldr	r4, [r3, #0]
 80014e8:	4b1a      	ldr	r3, [pc, #104]	; (8001554 <HAL_InitTick+0x88>)
 80014ea:	781b      	ldrb	r3, [r3, #0]
 80014ec:	0019      	movs	r1, r3
 80014ee:	23fa      	movs	r3, #250	; 0xfa
 80014f0:	0098      	lsls	r0, r3, #2
 80014f2:	f7fe fe19 	bl	8000128 <__udivsi3>
 80014f6:	0003      	movs	r3, r0
 80014f8:	0019      	movs	r1, r3
 80014fa:	0020      	movs	r0, r4
 80014fc:	f7fe fe14 	bl	8000128 <__udivsi3>
 8001500:	0003      	movs	r3, r0
 8001502:	0018      	movs	r0, r3
 8001504:	f000 f953 	bl	80017ae <HAL_SYSTICK_Config>
 8001508:	1e03      	subs	r3, r0, #0
 800150a:	d112      	bne.n	8001532 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	2b03      	cmp	r3, #3
 8001510:	d80a      	bhi.n	8001528 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001512:	6879      	ldr	r1, [r7, #4]
 8001514:	2301      	movs	r3, #1
 8001516:	425b      	negs	r3, r3
 8001518:	2200      	movs	r2, #0
 800151a:	0018      	movs	r0, r3
 800151c:	f000 f922 	bl	8001764 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001520:	4b0e      	ldr	r3, [pc, #56]	; (800155c <HAL_InitTick+0x90>)
 8001522:	687a      	ldr	r2, [r7, #4]
 8001524:	601a      	str	r2, [r3, #0]
 8001526:	e00d      	b.n	8001544 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001528:	230f      	movs	r3, #15
 800152a:	18fb      	adds	r3, r7, r3
 800152c:	2201      	movs	r2, #1
 800152e:	701a      	strb	r2, [r3, #0]
 8001530:	e008      	b.n	8001544 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001532:	230f      	movs	r3, #15
 8001534:	18fb      	adds	r3, r7, r3
 8001536:	2201      	movs	r2, #1
 8001538:	701a      	strb	r2, [r3, #0]
 800153a:	e003      	b.n	8001544 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 800153c:	230f      	movs	r3, #15
 800153e:	18fb      	adds	r3, r7, r3
 8001540:	2201      	movs	r2, #1
 8001542:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8001544:	230f      	movs	r3, #15
 8001546:	18fb      	adds	r3, r7, r3
 8001548:	781b      	ldrb	r3, [r3, #0]
}
 800154a:	0018      	movs	r0, r3
 800154c:	46bd      	mov	sp, r7
 800154e:	b005      	add	sp, #20
 8001550:	bd90      	pop	{r4, r7, pc}
 8001552:	46c0      	nop			; (mov r8, r8)
 8001554:	2000000c 	.word	0x2000000c
 8001558:	20000004 	.word	0x20000004
 800155c:	20000008 	.word	0x20000008

08001560 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001564:	4b05      	ldr	r3, [pc, #20]	; (800157c <HAL_IncTick+0x1c>)
 8001566:	781b      	ldrb	r3, [r3, #0]
 8001568:	001a      	movs	r2, r3
 800156a:	4b05      	ldr	r3, [pc, #20]	; (8001580 <HAL_IncTick+0x20>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	18d2      	adds	r2, r2, r3
 8001570:	4b03      	ldr	r3, [pc, #12]	; (8001580 <HAL_IncTick+0x20>)
 8001572:	601a      	str	r2, [r3, #0]
}
 8001574:	46c0      	nop			; (mov r8, r8)
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}
 800157a:	46c0      	nop			; (mov r8, r8)
 800157c:	2000000c 	.word	0x2000000c
 8001580:	200002a0 	.word	0x200002a0

08001584 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	af00      	add	r7, sp, #0
  return uwTick;
 8001588:	4b02      	ldr	r3, [pc, #8]	; (8001594 <HAL_GetTick+0x10>)
 800158a:	681b      	ldr	r3, [r3, #0]
}
 800158c:	0018      	movs	r0, r3
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}
 8001592:	46c0      	nop			; (mov r8, r8)
 8001594:	200002a0 	.word	0x200002a0

08001598 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b084      	sub	sp, #16
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015a0:	f7ff fff0 	bl	8001584 <HAL_GetTick>
 80015a4:	0003      	movs	r3, r0
 80015a6:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	3301      	adds	r3, #1
 80015b0:	d005      	beq.n	80015be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80015b2:	4b0a      	ldr	r3, [pc, #40]	; (80015dc <HAL_Delay+0x44>)
 80015b4:	781b      	ldrb	r3, [r3, #0]
 80015b6:	001a      	movs	r2, r3
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	189b      	adds	r3, r3, r2
 80015bc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80015be:	46c0      	nop			; (mov r8, r8)
 80015c0:	f7ff ffe0 	bl	8001584 <HAL_GetTick>
 80015c4:	0002      	movs	r2, r0
 80015c6:	68bb      	ldr	r3, [r7, #8]
 80015c8:	1ad3      	subs	r3, r2, r3
 80015ca:	68fa      	ldr	r2, [r7, #12]
 80015cc:	429a      	cmp	r2, r3
 80015ce:	d8f7      	bhi.n	80015c0 <HAL_Delay+0x28>
  {
  }
}
 80015d0:	46c0      	nop			; (mov r8, r8)
 80015d2:	46c0      	nop			; (mov r8, r8)
 80015d4:	46bd      	mov	sp, r7
 80015d6:	b004      	add	sp, #16
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	46c0      	nop			; (mov r8, r8)
 80015dc:	2000000c 	.word	0x2000000c

080015e0 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b082      	sub	sp, #8
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 80015e8:	4b06      	ldr	r3, [pc, #24]	; (8001604 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4a06      	ldr	r2, [pc, #24]	; (8001608 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 80015ee:	4013      	ands	r3, r2
 80015f0:	0019      	movs	r1, r3
 80015f2:	4b04      	ldr	r3, [pc, #16]	; (8001604 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 80015f4:	687a      	ldr	r2, [r7, #4]
 80015f6:	430a      	orrs	r2, r1
 80015f8:	601a      	str	r2, [r3, #0]
}
 80015fa:	46c0      	nop			; (mov r8, r8)
 80015fc:	46bd      	mov	sp, r7
 80015fe:	b002      	add	sp, #8
 8001600:	bd80      	pop	{r7, pc}
 8001602:	46c0      	nop			; (mov r8, r8)
 8001604:	40010000 	.word	0x40010000
 8001608:	fffff9ff 	.word	0xfffff9ff

0800160c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b082      	sub	sp, #8
 8001610:	af00      	add	r7, sp, #0
 8001612:	0002      	movs	r2, r0
 8001614:	1dfb      	adds	r3, r7, #7
 8001616:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001618:	1dfb      	adds	r3, r7, #7
 800161a:	781b      	ldrb	r3, [r3, #0]
 800161c:	2b7f      	cmp	r3, #127	; 0x7f
 800161e:	d809      	bhi.n	8001634 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001620:	1dfb      	adds	r3, r7, #7
 8001622:	781b      	ldrb	r3, [r3, #0]
 8001624:	001a      	movs	r2, r3
 8001626:	231f      	movs	r3, #31
 8001628:	401a      	ands	r2, r3
 800162a:	4b04      	ldr	r3, [pc, #16]	; (800163c <__NVIC_EnableIRQ+0x30>)
 800162c:	2101      	movs	r1, #1
 800162e:	4091      	lsls	r1, r2
 8001630:	000a      	movs	r2, r1
 8001632:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8001634:	46c0      	nop			; (mov r8, r8)
 8001636:	46bd      	mov	sp, r7
 8001638:	b002      	add	sp, #8
 800163a:	bd80      	pop	{r7, pc}
 800163c:	e000e100 	.word	0xe000e100

08001640 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001640:	b590      	push	{r4, r7, lr}
 8001642:	b083      	sub	sp, #12
 8001644:	af00      	add	r7, sp, #0
 8001646:	0002      	movs	r2, r0
 8001648:	6039      	str	r1, [r7, #0]
 800164a:	1dfb      	adds	r3, r7, #7
 800164c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800164e:	1dfb      	adds	r3, r7, #7
 8001650:	781b      	ldrb	r3, [r3, #0]
 8001652:	2b7f      	cmp	r3, #127	; 0x7f
 8001654:	d828      	bhi.n	80016a8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001656:	4a2f      	ldr	r2, [pc, #188]	; (8001714 <__NVIC_SetPriority+0xd4>)
 8001658:	1dfb      	adds	r3, r7, #7
 800165a:	781b      	ldrb	r3, [r3, #0]
 800165c:	b25b      	sxtb	r3, r3
 800165e:	089b      	lsrs	r3, r3, #2
 8001660:	33c0      	adds	r3, #192	; 0xc0
 8001662:	009b      	lsls	r3, r3, #2
 8001664:	589b      	ldr	r3, [r3, r2]
 8001666:	1dfa      	adds	r2, r7, #7
 8001668:	7812      	ldrb	r2, [r2, #0]
 800166a:	0011      	movs	r1, r2
 800166c:	2203      	movs	r2, #3
 800166e:	400a      	ands	r2, r1
 8001670:	00d2      	lsls	r2, r2, #3
 8001672:	21ff      	movs	r1, #255	; 0xff
 8001674:	4091      	lsls	r1, r2
 8001676:	000a      	movs	r2, r1
 8001678:	43d2      	mvns	r2, r2
 800167a:	401a      	ands	r2, r3
 800167c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	019b      	lsls	r3, r3, #6
 8001682:	22ff      	movs	r2, #255	; 0xff
 8001684:	401a      	ands	r2, r3
 8001686:	1dfb      	adds	r3, r7, #7
 8001688:	781b      	ldrb	r3, [r3, #0]
 800168a:	0018      	movs	r0, r3
 800168c:	2303      	movs	r3, #3
 800168e:	4003      	ands	r3, r0
 8001690:	00db      	lsls	r3, r3, #3
 8001692:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001694:	481f      	ldr	r0, [pc, #124]	; (8001714 <__NVIC_SetPriority+0xd4>)
 8001696:	1dfb      	adds	r3, r7, #7
 8001698:	781b      	ldrb	r3, [r3, #0]
 800169a:	b25b      	sxtb	r3, r3
 800169c:	089b      	lsrs	r3, r3, #2
 800169e:	430a      	orrs	r2, r1
 80016a0:	33c0      	adds	r3, #192	; 0xc0
 80016a2:	009b      	lsls	r3, r3, #2
 80016a4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80016a6:	e031      	b.n	800170c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80016a8:	4a1b      	ldr	r2, [pc, #108]	; (8001718 <__NVIC_SetPriority+0xd8>)
 80016aa:	1dfb      	adds	r3, r7, #7
 80016ac:	781b      	ldrb	r3, [r3, #0]
 80016ae:	0019      	movs	r1, r3
 80016b0:	230f      	movs	r3, #15
 80016b2:	400b      	ands	r3, r1
 80016b4:	3b08      	subs	r3, #8
 80016b6:	089b      	lsrs	r3, r3, #2
 80016b8:	3306      	adds	r3, #6
 80016ba:	009b      	lsls	r3, r3, #2
 80016bc:	18d3      	adds	r3, r2, r3
 80016be:	3304      	adds	r3, #4
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	1dfa      	adds	r2, r7, #7
 80016c4:	7812      	ldrb	r2, [r2, #0]
 80016c6:	0011      	movs	r1, r2
 80016c8:	2203      	movs	r2, #3
 80016ca:	400a      	ands	r2, r1
 80016cc:	00d2      	lsls	r2, r2, #3
 80016ce:	21ff      	movs	r1, #255	; 0xff
 80016d0:	4091      	lsls	r1, r2
 80016d2:	000a      	movs	r2, r1
 80016d4:	43d2      	mvns	r2, r2
 80016d6:	401a      	ands	r2, r3
 80016d8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	019b      	lsls	r3, r3, #6
 80016de:	22ff      	movs	r2, #255	; 0xff
 80016e0:	401a      	ands	r2, r3
 80016e2:	1dfb      	adds	r3, r7, #7
 80016e4:	781b      	ldrb	r3, [r3, #0]
 80016e6:	0018      	movs	r0, r3
 80016e8:	2303      	movs	r3, #3
 80016ea:	4003      	ands	r3, r0
 80016ec:	00db      	lsls	r3, r3, #3
 80016ee:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80016f0:	4809      	ldr	r0, [pc, #36]	; (8001718 <__NVIC_SetPriority+0xd8>)
 80016f2:	1dfb      	adds	r3, r7, #7
 80016f4:	781b      	ldrb	r3, [r3, #0]
 80016f6:	001c      	movs	r4, r3
 80016f8:	230f      	movs	r3, #15
 80016fa:	4023      	ands	r3, r4
 80016fc:	3b08      	subs	r3, #8
 80016fe:	089b      	lsrs	r3, r3, #2
 8001700:	430a      	orrs	r2, r1
 8001702:	3306      	adds	r3, #6
 8001704:	009b      	lsls	r3, r3, #2
 8001706:	18c3      	adds	r3, r0, r3
 8001708:	3304      	adds	r3, #4
 800170a:	601a      	str	r2, [r3, #0]
}
 800170c:	46c0      	nop			; (mov r8, r8)
 800170e:	46bd      	mov	sp, r7
 8001710:	b003      	add	sp, #12
 8001712:	bd90      	pop	{r4, r7, pc}
 8001714:	e000e100 	.word	0xe000e100
 8001718:	e000ed00 	.word	0xe000ed00

0800171c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b082      	sub	sp, #8
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	1e5a      	subs	r2, r3, #1
 8001728:	2380      	movs	r3, #128	; 0x80
 800172a:	045b      	lsls	r3, r3, #17
 800172c:	429a      	cmp	r2, r3
 800172e:	d301      	bcc.n	8001734 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001730:	2301      	movs	r3, #1
 8001732:	e010      	b.n	8001756 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001734:	4b0a      	ldr	r3, [pc, #40]	; (8001760 <SysTick_Config+0x44>)
 8001736:	687a      	ldr	r2, [r7, #4]
 8001738:	3a01      	subs	r2, #1
 800173a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800173c:	2301      	movs	r3, #1
 800173e:	425b      	negs	r3, r3
 8001740:	2103      	movs	r1, #3
 8001742:	0018      	movs	r0, r3
 8001744:	f7ff ff7c 	bl	8001640 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001748:	4b05      	ldr	r3, [pc, #20]	; (8001760 <SysTick_Config+0x44>)
 800174a:	2200      	movs	r2, #0
 800174c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800174e:	4b04      	ldr	r3, [pc, #16]	; (8001760 <SysTick_Config+0x44>)
 8001750:	2207      	movs	r2, #7
 8001752:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001754:	2300      	movs	r3, #0
}
 8001756:	0018      	movs	r0, r3
 8001758:	46bd      	mov	sp, r7
 800175a:	b002      	add	sp, #8
 800175c:	bd80      	pop	{r7, pc}
 800175e:	46c0      	nop			; (mov r8, r8)
 8001760:	e000e010 	.word	0xe000e010

08001764 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b084      	sub	sp, #16
 8001768:	af00      	add	r7, sp, #0
 800176a:	60b9      	str	r1, [r7, #8]
 800176c:	607a      	str	r2, [r7, #4]
 800176e:	210f      	movs	r1, #15
 8001770:	187b      	adds	r3, r7, r1
 8001772:	1c02      	adds	r2, r0, #0
 8001774:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8001776:	68ba      	ldr	r2, [r7, #8]
 8001778:	187b      	adds	r3, r7, r1
 800177a:	781b      	ldrb	r3, [r3, #0]
 800177c:	b25b      	sxtb	r3, r3
 800177e:	0011      	movs	r1, r2
 8001780:	0018      	movs	r0, r3
 8001782:	f7ff ff5d 	bl	8001640 <__NVIC_SetPriority>
}
 8001786:	46c0      	nop			; (mov r8, r8)
 8001788:	46bd      	mov	sp, r7
 800178a:	b004      	add	sp, #16
 800178c:	bd80      	pop	{r7, pc}

0800178e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800178e:	b580      	push	{r7, lr}
 8001790:	b082      	sub	sp, #8
 8001792:	af00      	add	r7, sp, #0
 8001794:	0002      	movs	r2, r0
 8001796:	1dfb      	adds	r3, r7, #7
 8001798:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800179a:	1dfb      	adds	r3, r7, #7
 800179c:	781b      	ldrb	r3, [r3, #0]
 800179e:	b25b      	sxtb	r3, r3
 80017a0:	0018      	movs	r0, r3
 80017a2:	f7ff ff33 	bl	800160c <__NVIC_EnableIRQ>
}
 80017a6:	46c0      	nop			; (mov r8, r8)
 80017a8:	46bd      	mov	sp, r7
 80017aa:	b002      	add	sp, #8
 80017ac:	bd80      	pop	{r7, pc}

080017ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017ae:	b580      	push	{r7, lr}
 80017b0:	b082      	sub	sp, #8
 80017b2:	af00      	add	r7, sp, #0
 80017b4:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	0018      	movs	r0, r3
 80017ba:	f7ff ffaf 	bl	800171c <SysTick_Config>
 80017be:	0003      	movs	r3, r0
}
 80017c0:	0018      	movs	r0, r3
 80017c2:	46bd      	mov	sp, r7
 80017c4:	b002      	add	sp, #8
 80017c6:	bd80      	pop	{r7, pc}

080017c8 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b084      	sub	sp, #16
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80017d0:	210f      	movs	r1, #15
 80017d2:	187b      	adds	r3, r7, r1
 80017d4:	2200      	movs	r2, #0
 80017d6:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	2225      	movs	r2, #37	; 0x25
 80017dc:	5c9b      	ldrb	r3, [r3, r2]
 80017de:	b2db      	uxtb	r3, r3
 80017e0:	2b02      	cmp	r3, #2
 80017e2:	d006      	beq.n	80017f2 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	2204      	movs	r2, #4
 80017e8:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80017ea:	187b      	adds	r3, r7, r1
 80017ec:	2201      	movs	r2, #1
 80017ee:	701a      	strb	r2, [r3, #0]
 80017f0:	e049      	b.n	8001886 <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	681a      	ldr	r2, [r3, #0]
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	210e      	movs	r1, #14
 80017fe:	438a      	bics	r2, r1
 8001800:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	681a      	ldr	r2, [r3, #0]
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	2101      	movs	r1, #1
 800180e:	438a      	bics	r2, r1
 8001810:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001816:	681a      	ldr	r2, [r3, #0]
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800181c:	491d      	ldr	r1, [pc, #116]	; (8001894 <HAL_DMA_Abort_IT+0xcc>)
 800181e:	400a      	ands	r2, r1
 8001820:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 8001822:	4b1d      	ldr	r3, [pc, #116]	; (8001898 <HAL_DMA_Abort_IT+0xd0>)
 8001824:	6859      	ldr	r1, [r3, #4]
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800182a:	221c      	movs	r2, #28
 800182c:	4013      	ands	r3, r2
 800182e:	2201      	movs	r2, #1
 8001830:	409a      	lsls	r2, r3
 8001832:	4b19      	ldr	r3, [pc, #100]	; (8001898 <HAL_DMA_Abort_IT+0xd0>)
 8001834:	430a      	orrs	r2, r1
 8001836:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800183c:	687a      	ldr	r2, [r7, #4]
 800183e:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001840:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001846:	2b00      	cmp	r3, #0
 8001848:	d00c      	beq.n	8001864 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800184e:	681a      	ldr	r2, [r3, #0]
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001854:	490f      	ldr	r1, [pc, #60]	; (8001894 <HAL_DMA_Abort_IT+0xcc>)
 8001856:	400a      	ands	r2, r1
 8001858:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800185e:	687a      	ldr	r2, [r7, #4]
 8001860:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8001862:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	2225      	movs	r2, #37	; 0x25
 8001868:	2101      	movs	r1, #1
 800186a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	2224      	movs	r2, #36	; 0x24
 8001870:	2100      	movs	r1, #0
 8001872:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001878:	2b00      	cmp	r3, #0
 800187a:	d004      	beq.n	8001886 <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001880:	687a      	ldr	r2, [r7, #4]
 8001882:	0010      	movs	r0, r2
 8001884:	4798      	blx	r3
    }
  }
  return status;
 8001886:	230f      	movs	r3, #15
 8001888:	18fb      	adds	r3, r7, r3
 800188a:	781b      	ldrb	r3, [r3, #0]
}
 800188c:	0018      	movs	r0, r3
 800188e:	46bd      	mov	sp, r7
 8001890:	b004      	add	sp, #16
 8001892:	bd80      	pop	{r7, pc}
 8001894:	fffffeff 	.word	0xfffffeff
 8001898:	40020000 	.word	0x40020000

0800189c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b086      	sub	sp, #24
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
 80018a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80018a6:	2300      	movs	r3, #0
 80018a8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018aa:	e147      	b.n	8001b3c <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	2101      	movs	r1, #1
 80018b2:	697a      	ldr	r2, [r7, #20]
 80018b4:	4091      	lsls	r1, r2
 80018b6:	000a      	movs	r2, r1
 80018b8:	4013      	ands	r3, r2
 80018ba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d100      	bne.n	80018c4 <HAL_GPIO_Init+0x28>
 80018c2:	e138      	b.n	8001b36 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	2203      	movs	r2, #3
 80018ca:	4013      	ands	r3, r2
 80018cc:	2b01      	cmp	r3, #1
 80018ce:	d005      	beq.n	80018dc <HAL_GPIO_Init+0x40>
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	2203      	movs	r2, #3
 80018d6:	4013      	ands	r3, r2
 80018d8:	2b02      	cmp	r3, #2
 80018da:	d130      	bne.n	800193e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	689b      	ldr	r3, [r3, #8]
 80018e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80018e2:	697b      	ldr	r3, [r7, #20]
 80018e4:	005b      	lsls	r3, r3, #1
 80018e6:	2203      	movs	r2, #3
 80018e8:	409a      	lsls	r2, r3
 80018ea:	0013      	movs	r3, r2
 80018ec:	43da      	mvns	r2, r3
 80018ee:	693b      	ldr	r3, [r7, #16]
 80018f0:	4013      	ands	r3, r2
 80018f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	68da      	ldr	r2, [r3, #12]
 80018f8:	697b      	ldr	r3, [r7, #20]
 80018fa:	005b      	lsls	r3, r3, #1
 80018fc:	409a      	lsls	r2, r3
 80018fe:	0013      	movs	r3, r2
 8001900:	693a      	ldr	r2, [r7, #16]
 8001902:	4313      	orrs	r3, r2
 8001904:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	693a      	ldr	r2, [r7, #16]
 800190a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001912:	2201      	movs	r2, #1
 8001914:	697b      	ldr	r3, [r7, #20]
 8001916:	409a      	lsls	r2, r3
 8001918:	0013      	movs	r3, r2
 800191a:	43da      	mvns	r2, r3
 800191c:	693b      	ldr	r3, [r7, #16]
 800191e:	4013      	ands	r3, r2
 8001920:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	091b      	lsrs	r3, r3, #4
 8001928:	2201      	movs	r2, #1
 800192a:	401a      	ands	r2, r3
 800192c:	697b      	ldr	r3, [r7, #20]
 800192e:	409a      	lsls	r2, r3
 8001930:	0013      	movs	r3, r2
 8001932:	693a      	ldr	r2, [r7, #16]
 8001934:	4313      	orrs	r3, r2
 8001936:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	693a      	ldr	r2, [r7, #16]
 800193c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	2203      	movs	r2, #3
 8001944:	4013      	ands	r3, r2
 8001946:	2b03      	cmp	r3, #3
 8001948:	d017      	beq.n	800197a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	68db      	ldr	r3, [r3, #12]
 800194e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001950:	697b      	ldr	r3, [r7, #20]
 8001952:	005b      	lsls	r3, r3, #1
 8001954:	2203      	movs	r2, #3
 8001956:	409a      	lsls	r2, r3
 8001958:	0013      	movs	r3, r2
 800195a:	43da      	mvns	r2, r3
 800195c:	693b      	ldr	r3, [r7, #16]
 800195e:	4013      	ands	r3, r2
 8001960:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	689a      	ldr	r2, [r3, #8]
 8001966:	697b      	ldr	r3, [r7, #20]
 8001968:	005b      	lsls	r3, r3, #1
 800196a:	409a      	lsls	r2, r3
 800196c:	0013      	movs	r3, r2
 800196e:	693a      	ldr	r2, [r7, #16]
 8001970:	4313      	orrs	r3, r2
 8001972:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	693a      	ldr	r2, [r7, #16]
 8001978:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	685b      	ldr	r3, [r3, #4]
 800197e:	2203      	movs	r2, #3
 8001980:	4013      	ands	r3, r2
 8001982:	2b02      	cmp	r3, #2
 8001984:	d123      	bne.n	80019ce <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001986:	697b      	ldr	r3, [r7, #20]
 8001988:	08da      	lsrs	r2, r3, #3
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	3208      	adds	r2, #8
 800198e:	0092      	lsls	r2, r2, #2
 8001990:	58d3      	ldr	r3, [r2, r3]
 8001992:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001994:	697b      	ldr	r3, [r7, #20]
 8001996:	2207      	movs	r2, #7
 8001998:	4013      	ands	r3, r2
 800199a:	009b      	lsls	r3, r3, #2
 800199c:	220f      	movs	r2, #15
 800199e:	409a      	lsls	r2, r3
 80019a0:	0013      	movs	r3, r2
 80019a2:	43da      	mvns	r2, r3
 80019a4:	693b      	ldr	r3, [r7, #16]
 80019a6:	4013      	ands	r3, r2
 80019a8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	691a      	ldr	r2, [r3, #16]
 80019ae:	697b      	ldr	r3, [r7, #20]
 80019b0:	2107      	movs	r1, #7
 80019b2:	400b      	ands	r3, r1
 80019b4:	009b      	lsls	r3, r3, #2
 80019b6:	409a      	lsls	r2, r3
 80019b8:	0013      	movs	r3, r2
 80019ba:	693a      	ldr	r2, [r7, #16]
 80019bc:	4313      	orrs	r3, r2
 80019be:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80019c0:	697b      	ldr	r3, [r7, #20]
 80019c2:	08da      	lsrs	r2, r3, #3
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	3208      	adds	r2, #8
 80019c8:	0092      	lsls	r2, r2, #2
 80019ca:	6939      	ldr	r1, [r7, #16]
 80019cc:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80019d4:	697b      	ldr	r3, [r7, #20]
 80019d6:	005b      	lsls	r3, r3, #1
 80019d8:	2203      	movs	r2, #3
 80019da:	409a      	lsls	r2, r3
 80019dc:	0013      	movs	r3, r2
 80019de:	43da      	mvns	r2, r3
 80019e0:	693b      	ldr	r3, [r7, #16]
 80019e2:	4013      	ands	r3, r2
 80019e4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	2203      	movs	r2, #3
 80019ec:	401a      	ands	r2, r3
 80019ee:	697b      	ldr	r3, [r7, #20]
 80019f0:	005b      	lsls	r3, r3, #1
 80019f2:	409a      	lsls	r2, r3
 80019f4:	0013      	movs	r3, r2
 80019f6:	693a      	ldr	r2, [r7, #16]
 80019f8:	4313      	orrs	r3, r2
 80019fa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	693a      	ldr	r2, [r7, #16]
 8001a00:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	685a      	ldr	r2, [r3, #4]
 8001a06:	23c0      	movs	r3, #192	; 0xc0
 8001a08:	029b      	lsls	r3, r3, #10
 8001a0a:	4013      	ands	r3, r2
 8001a0c:	d100      	bne.n	8001a10 <HAL_GPIO_Init+0x174>
 8001a0e:	e092      	b.n	8001b36 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001a10:	4a50      	ldr	r2, [pc, #320]	; (8001b54 <HAL_GPIO_Init+0x2b8>)
 8001a12:	697b      	ldr	r3, [r7, #20]
 8001a14:	089b      	lsrs	r3, r3, #2
 8001a16:	3318      	adds	r3, #24
 8001a18:	009b      	lsls	r3, r3, #2
 8001a1a:	589b      	ldr	r3, [r3, r2]
 8001a1c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8001a1e:	697b      	ldr	r3, [r7, #20]
 8001a20:	2203      	movs	r2, #3
 8001a22:	4013      	ands	r3, r2
 8001a24:	00db      	lsls	r3, r3, #3
 8001a26:	220f      	movs	r2, #15
 8001a28:	409a      	lsls	r2, r3
 8001a2a:	0013      	movs	r3, r2
 8001a2c:	43da      	mvns	r2, r3
 8001a2e:	693b      	ldr	r3, [r7, #16]
 8001a30:	4013      	ands	r3, r2
 8001a32:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001a34:	687a      	ldr	r2, [r7, #4]
 8001a36:	23a0      	movs	r3, #160	; 0xa0
 8001a38:	05db      	lsls	r3, r3, #23
 8001a3a:	429a      	cmp	r2, r3
 8001a3c:	d013      	beq.n	8001a66 <HAL_GPIO_Init+0x1ca>
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	4a45      	ldr	r2, [pc, #276]	; (8001b58 <HAL_GPIO_Init+0x2bc>)
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d00d      	beq.n	8001a62 <HAL_GPIO_Init+0x1c6>
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	4a44      	ldr	r2, [pc, #272]	; (8001b5c <HAL_GPIO_Init+0x2c0>)
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d007      	beq.n	8001a5e <HAL_GPIO_Init+0x1c2>
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	4a43      	ldr	r2, [pc, #268]	; (8001b60 <HAL_GPIO_Init+0x2c4>)
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d101      	bne.n	8001a5a <HAL_GPIO_Init+0x1be>
 8001a56:	2303      	movs	r3, #3
 8001a58:	e006      	b.n	8001a68 <HAL_GPIO_Init+0x1cc>
 8001a5a:	2305      	movs	r3, #5
 8001a5c:	e004      	b.n	8001a68 <HAL_GPIO_Init+0x1cc>
 8001a5e:	2302      	movs	r3, #2
 8001a60:	e002      	b.n	8001a68 <HAL_GPIO_Init+0x1cc>
 8001a62:	2301      	movs	r3, #1
 8001a64:	e000      	b.n	8001a68 <HAL_GPIO_Init+0x1cc>
 8001a66:	2300      	movs	r3, #0
 8001a68:	697a      	ldr	r2, [r7, #20]
 8001a6a:	2103      	movs	r1, #3
 8001a6c:	400a      	ands	r2, r1
 8001a6e:	00d2      	lsls	r2, r2, #3
 8001a70:	4093      	lsls	r3, r2
 8001a72:	693a      	ldr	r2, [r7, #16]
 8001a74:	4313      	orrs	r3, r2
 8001a76:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8001a78:	4936      	ldr	r1, [pc, #216]	; (8001b54 <HAL_GPIO_Init+0x2b8>)
 8001a7a:	697b      	ldr	r3, [r7, #20]
 8001a7c:	089b      	lsrs	r3, r3, #2
 8001a7e:	3318      	adds	r3, #24
 8001a80:	009b      	lsls	r3, r3, #2
 8001a82:	693a      	ldr	r2, [r7, #16]
 8001a84:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001a86:	4b33      	ldr	r3, [pc, #204]	; (8001b54 <HAL_GPIO_Init+0x2b8>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	43da      	mvns	r2, r3
 8001a90:	693b      	ldr	r3, [r7, #16]
 8001a92:	4013      	ands	r3, r2
 8001a94:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	685a      	ldr	r2, [r3, #4]
 8001a9a:	2380      	movs	r3, #128	; 0x80
 8001a9c:	035b      	lsls	r3, r3, #13
 8001a9e:	4013      	ands	r3, r2
 8001aa0:	d003      	beq.n	8001aaa <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8001aa2:	693a      	ldr	r2, [r7, #16]
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	4313      	orrs	r3, r2
 8001aa8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001aaa:	4b2a      	ldr	r3, [pc, #168]	; (8001b54 <HAL_GPIO_Init+0x2b8>)
 8001aac:	693a      	ldr	r2, [r7, #16]
 8001aae:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001ab0:	4b28      	ldr	r3, [pc, #160]	; (8001b54 <HAL_GPIO_Init+0x2b8>)
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	43da      	mvns	r2, r3
 8001aba:	693b      	ldr	r3, [r7, #16]
 8001abc:	4013      	ands	r3, r2
 8001abe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	685a      	ldr	r2, [r3, #4]
 8001ac4:	2380      	movs	r3, #128	; 0x80
 8001ac6:	039b      	lsls	r3, r3, #14
 8001ac8:	4013      	ands	r3, r2
 8001aca:	d003      	beq.n	8001ad4 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8001acc:	693a      	ldr	r2, [r7, #16]
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	4313      	orrs	r3, r2
 8001ad2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001ad4:	4b1f      	ldr	r3, [pc, #124]	; (8001b54 <HAL_GPIO_Init+0x2b8>)
 8001ad6:	693a      	ldr	r2, [r7, #16]
 8001ad8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001ada:	4a1e      	ldr	r2, [pc, #120]	; (8001b54 <HAL_GPIO_Init+0x2b8>)
 8001adc:	2384      	movs	r3, #132	; 0x84
 8001ade:	58d3      	ldr	r3, [r2, r3]
 8001ae0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	43da      	mvns	r2, r3
 8001ae6:	693b      	ldr	r3, [r7, #16]
 8001ae8:	4013      	ands	r3, r2
 8001aea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	685a      	ldr	r2, [r3, #4]
 8001af0:	2380      	movs	r3, #128	; 0x80
 8001af2:	029b      	lsls	r3, r3, #10
 8001af4:	4013      	ands	r3, r2
 8001af6:	d003      	beq.n	8001b00 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001af8:	693a      	ldr	r2, [r7, #16]
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	4313      	orrs	r3, r2
 8001afe:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001b00:	4914      	ldr	r1, [pc, #80]	; (8001b54 <HAL_GPIO_Init+0x2b8>)
 8001b02:	2284      	movs	r2, #132	; 0x84
 8001b04:	693b      	ldr	r3, [r7, #16]
 8001b06:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8001b08:	4a12      	ldr	r2, [pc, #72]	; (8001b54 <HAL_GPIO_Init+0x2b8>)
 8001b0a:	2380      	movs	r3, #128	; 0x80
 8001b0c:	58d3      	ldr	r3, [r2, r3]
 8001b0e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	43da      	mvns	r2, r3
 8001b14:	693b      	ldr	r3, [r7, #16]
 8001b16:	4013      	ands	r3, r2
 8001b18:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	685a      	ldr	r2, [r3, #4]
 8001b1e:	2380      	movs	r3, #128	; 0x80
 8001b20:	025b      	lsls	r3, r3, #9
 8001b22:	4013      	ands	r3, r2
 8001b24:	d003      	beq.n	8001b2e <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8001b26:	693a      	ldr	r2, [r7, #16]
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	4313      	orrs	r3, r2
 8001b2c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001b2e:	4909      	ldr	r1, [pc, #36]	; (8001b54 <HAL_GPIO_Init+0x2b8>)
 8001b30:	2280      	movs	r2, #128	; 0x80
 8001b32:	693b      	ldr	r3, [r7, #16]
 8001b34:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8001b36:	697b      	ldr	r3, [r7, #20]
 8001b38:	3301      	adds	r3, #1
 8001b3a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	681a      	ldr	r2, [r3, #0]
 8001b40:	697b      	ldr	r3, [r7, #20]
 8001b42:	40da      	lsrs	r2, r3
 8001b44:	1e13      	subs	r3, r2, #0
 8001b46:	d000      	beq.n	8001b4a <HAL_GPIO_Init+0x2ae>
 8001b48:	e6b0      	b.n	80018ac <HAL_GPIO_Init+0x10>
  }
}
 8001b4a:	46c0      	nop			; (mov r8, r8)
 8001b4c:	46c0      	nop			; (mov r8, r8)
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	b006      	add	sp, #24
 8001b52:	bd80      	pop	{r7, pc}
 8001b54:	40021800 	.word	0x40021800
 8001b58:	50000400 	.word	0x50000400
 8001b5c:	50000800 	.word	0x50000800
 8001b60:	50000c00 	.word	0x50000c00

08001b64 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b082      	sub	sp, #8
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
 8001b6c:	0008      	movs	r0, r1
 8001b6e:	0011      	movs	r1, r2
 8001b70:	1cbb      	adds	r3, r7, #2
 8001b72:	1c02      	adds	r2, r0, #0
 8001b74:	801a      	strh	r2, [r3, #0]
 8001b76:	1c7b      	adds	r3, r7, #1
 8001b78:	1c0a      	adds	r2, r1, #0
 8001b7a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b7c:	1c7b      	adds	r3, r7, #1
 8001b7e:	781b      	ldrb	r3, [r3, #0]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d004      	beq.n	8001b8e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001b84:	1cbb      	adds	r3, r7, #2
 8001b86:	881a      	ldrh	r2, [r3, #0]
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001b8c:	e003      	b.n	8001b96 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001b8e:	1cbb      	adds	r3, r7, #2
 8001b90:	881a      	ldrh	r2, [r3, #0]
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001b96:	46c0      	nop			; (mov r8, r8)
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	b002      	add	sp, #8
 8001b9c:	bd80      	pop	{r7, pc}
	...

08001ba0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b082      	sub	sp, #8
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	0002      	movs	r2, r0
 8001ba8:	1dbb      	adds	r3, r7, #6
 8001baa:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 8001bac:	4b10      	ldr	r3, [pc, #64]	; (8001bf0 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8001bae:	68db      	ldr	r3, [r3, #12]
 8001bb0:	1dba      	adds	r2, r7, #6
 8001bb2:	8812      	ldrh	r2, [r2, #0]
 8001bb4:	4013      	ands	r3, r2
 8001bb6:	d008      	beq.n	8001bca <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8001bb8:	4b0d      	ldr	r3, [pc, #52]	; (8001bf0 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8001bba:	1dba      	adds	r2, r7, #6
 8001bbc:	8812      	ldrh	r2, [r2, #0]
 8001bbe:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8001bc0:	1dbb      	adds	r3, r7, #6
 8001bc2:	881b      	ldrh	r3, [r3, #0]
 8001bc4:	0018      	movs	r0, r3
 8001bc6:	f7ff f8ef 	bl	8000da8 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 8001bca:	4b09      	ldr	r3, [pc, #36]	; (8001bf0 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8001bcc:	691b      	ldr	r3, [r3, #16]
 8001bce:	1dba      	adds	r2, r7, #6
 8001bd0:	8812      	ldrh	r2, [r2, #0]
 8001bd2:	4013      	ands	r3, r2
 8001bd4:	d008      	beq.n	8001be8 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8001bd6:	4b06      	ldr	r3, [pc, #24]	; (8001bf0 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8001bd8:	1dba      	adds	r2, r7, #6
 8001bda:	8812      	ldrh	r2, [r2, #0]
 8001bdc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8001bde:	1dbb      	adds	r3, r7, #6
 8001be0:	881b      	ldrh	r3, [r3, #0]
 8001be2:	0018      	movs	r0, r3
 8001be4:	f000 f806 	bl	8001bf4 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8001be8:	46c0      	nop			; (mov r8, r8)
 8001bea:	46bd      	mov	sp, r7
 8001bec:	b002      	add	sp, #8
 8001bee:	bd80      	pop	{r7, pc}
 8001bf0:	40021800 	.word	0x40021800

08001bf4 <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b082      	sub	sp, #8
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	0002      	movs	r2, r0
 8001bfc:	1dbb      	adds	r3, r7, #6
 8001bfe:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 8001c00:	46c0      	nop			; (mov r8, r8)
 8001c02:	46bd      	mov	sp, r7
 8001c04:	b002      	add	sp, #8
 8001c06:	bd80      	pop	{r7, pc}

08001c08 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b084      	sub	sp, #16
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001c10:	4b19      	ldr	r3, [pc, #100]	; (8001c78 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4a19      	ldr	r2, [pc, #100]	; (8001c7c <HAL_PWREx_ControlVoltageScaling+0x74>)
 8001c16:	4013      	ands	r3, r2
 8001c18:	0019      	movs	r1, r3
 8001c1a:	4b17      	ldr	r3, [pc, #92]	; (8001c78 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001c1c:	687a      	ldr	r2, [r7, #4]
 8001c1e:	430a      	orrs	r2, r1
 8001c20:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001c22:	687a      	ldr	r2, [r7, #4]
 8001c24:	2380      	movs	r3, #128	; 0x80
 8001c26:	009b      	lsls	r3, r3, #2
 8001c28:	429a      	cmp	r2, r3
 8001c2a:	d11f      	bne.n	8001c6c <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8001c2c:	4b14      	ldr	r3, [pc, #80]	; (8001c80 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8001c2e:	681a      	ldr	r2, [r3, #0]
 8001c30:	0013      	movs	r3, r2
 8001c32:	005b      	lsls	r3, r3, #1
 8001c34:	189b      	adds	r3, r3, r2
 8001c36:	005b      	lsls	r3, r3, #1
 8001c38:	4912      	ldr	r1, [pc, #72]	; (8001c84 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8001c3a:	0018      	movs	r0, r3
 8001c3c:	f7fe fa74 	bl	8000128 <__udivsi3>
 8001c40:	0003      	movs	r3, r0
 8001c42:	3301      	adds	r3, #1
 8001c44:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001c46:	e008      	b.n	8001c5a <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d003      	beq.n	8001c56 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	3b01      	subs	r3, #1
 8001c52:	60fb      	str	r3, [r7, #12]
 8001c54:	e001      	b.n	8001c5a <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8001c56:	2303      	movs	r3, #3
 8001c58:	e009      	b.n	8001c6e <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001c5a:	4b07      	ldr	r3, [pc, #28]	; (8001c78 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001c5c:	695a      	ldr	r2, [r3, #20]
 8001c5e:	2380      	movs	r3, #128	; 0x80
 8001c60:	00db      	lsls	r3, r3, #3
 8001c62:	401a      	ands	r2, r3
 8001c64:	2380      	movs	r3, #128	; 0x80
 8001c66:	00db      	lsls	r3, r3, #3
 8001c68:	429a      	cmp	r2, r3
 8001c6a:	d0ed      	beq.n	8001c48 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8001c6c:	2300      	movs	r3, #0
}
 8001c6e:	0018      	movs	r0, r3
 8001c70:	46bd      	mov	sp, r7
 8001c72:	b004      	add	sp, #16
 8001c74:	bd80      	pop	{r7, pc}
 8001c76:	46c0      	nop			; (mov r8, r8)
 8001c78:	40007000 	.word	0x40007000
 8001c7c:	fffff9ff 	.word	0xfffff9ff
 8001c80:	20000004 	.word	0x20000004
 8001c84:	000f4240 	.word	0x000f4240

08001c88 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8001c8c:	4b03      	ldr	r3, [pc, #12]	; (8001c9c <LL_RCC_GetAPB1Prescaler+0x14>)
 8001c8e:	689a      	ldr	r2, [r3, #8]
 8001c90:	23e0      	movs	r3, #224	; 0xe0
 8001c92:	01db      	lsls	r3, r3, #7
 8001c94:	4013      	ands	r3, r2
}
 8001c96:	0018      	movs	r0, r3
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bd80      	pop	{r7, pc}
 8001c9c:	40021000 	.word	0x40021000

08001ca0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b088      	sub	sp, #32
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d101      	bne.n	8001cb2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001cae:	2301      	movs	r3, #1
 8001cb0:	e2fe      	b.n	80022b0 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	2201      	movs	r2, #1
 8001cb8:	4013      	ands	r3, r2
 8001cba:	d100      	bne.n	8001cbe <HAL_RCC_OscConfig+0x1e>
 8001cbc:	e07c      	b.n	8001db8 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001cbe:	4bc3      	ldr	r3, [pc, #780]	; (8001fcc <HAL_RCC_OscConfig+0x32c>)
 8001cc0:	689b      	ldr	r3, [r3, #8]
 8001cc2:	2238      	movs	r2, #56	; 0x38
 8001cc4:	4013      	ands	r3, r2
 8001cc6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001cc8:	4bc0      	ldr	r3, [pc, #768]	; (8001fcc <HAL_RCC_OscConfig+0x32c>)
 8001cca:	68db      	ldr	r3, [r3, #12]
 8001ccc:	2203      	movs	r2, #3
 8001cce:	4013      	ands	r3, r2
 8001cd0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8001cd2:	69bb      	ldr	r3, [r7, #24]
 8001cd4:	2b10      	cmp	r3, #16
 8001cd6:	d102      	bne.n	8001cde <HAL_RCC_OscConfig+0x3e>
 8001cd8:	697b      	ldr	r3, [r7, #20]
 8001cda:	2b03      	cmp	r3, #3
 8001cdc:	d002      	beq.n	8001ce4 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8001cde:	69bb      	ldr	r3, [r7, #24]
 8001ce0:	2b08      	cmp	r3, #8
 8001ce2:	d10b      	bne.n	8001cfc <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ce4:	4bb9      	ldr	r3, [pc, #740]	; (8001fcc <HAL_RCC_OscConfig+0x32c>)
 8001ce6:	681a      	ldr	r2, [r3, #0]
 8001ce8:	2380      	movs	r3, #128	; 0x80
 8001cea:	029b      	lsls	r3, r3, #10
 8001cec:	4013      	ands	r3, r2
 8001cee:	d062      	beq.n	8001db6 <HAL_RCC_OscConfig+0x116>
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d15e      	bne.n	8001db6 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	e2d9      	b.n	80022b0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	685a      	ldr	r2, [r3, #4]
 8001d00:	2380      	movs	r3, #128	; 0x80
 8001d02:	025b      	lsls	r3, r3, #9
 8001d04:	429a      	cmp	r2, r3
 8001d06:	d107      	bne.n	8001d18 <HAL_RCC_OscConfig+0x78>
 8001d08:	4bb0      	ldr	r3, [pc, #704]	; (8001fcc <HAL_RCC_OscConfig+0x32c>)
 8001d0a:	681a      	ldr	r2, [r3, #0]
 8001d0c:	4baf      	ldr	r3, [pc, #700]	; (8001fcc <HAL_RCC_OscConfig+0x32c>)
 8001d0e:	2180      	movs	r1, #128	; 0x80
 8001d10:	0249      	lsls	r1, r1, #9
 8001d12:	430a      	orrs	r2, r1
 8001d14:	601a      	str	r2, [r3, #0]
 8001d16:	e020      	b.n	8001d5a <HAL_RCC_OscConfig+0xba>
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	685a      	ldr	r2, [r3, #4]
 8001d1c:	23a0      	movs	r3, #160	; 0xa0
 8001d1e:	02db      	lsls	r3, r3, #11
 8001d20:	429a      	cmp	r2, r3
 8001d22:	d10e      	bne.n	8001d42 <HAL_RCC_OscConfig+0xa2>
 8001d24:	4ba9      	ldr	r3, [pc, #676]	; (8001fcc <HAL_RCC_OscConfig+0x32c>)
 8001d26:	681a      	ldr	r2, [r3, #0]
 8001d28:	4ba8      	ldr	r3, [pc, #672]	; (8001fcc <HAL_RCC_OscConfig+0x32c>)
 8001d2a:	2180      	movs	r1, #128	; 0x80
 8001d2c:	02c9      	lsls	r1, r1, #11
 8001d2e:	430a      	orrs	r2, r1
 8001d30:	601a      	str	r2, [r3, #0]
 8001d32:	4ba6      	ldr	r3, [pc, #664]	; (8001fcc <HAL_RCC_OscConfig+0x32c>)
 8001d34:	681a      	ldr	r2, [r3, #0]
 8001d36:	4ba5      	ldr	r3, [pc, #660]	; (8001fcc <HAL_RCC_OscConfig+0x32c>)
 8001d38:	2180      	movs	r1, #128	; 0x80
 8001d3a:	0249      	lsls	r1, r1, #9
 8001d3c:	430a      	orrs	r2, r1
 8001d3e:	601a      	str	r2, [r3, #0]
 8001d40:	e00b      	b.n	8001d5a <HAL_RCC_OscConfig+0xba>
 8001d42:	4ba2      	ldr	r3, [pc, #648]	; (8001fcc <HAL_RCC_OscConfig+0x32c>)
 8001d44:	681a      	ldr	r2, [r3, #0]
 8001d46:	4ba1      	ldr	r3, [pc, #644]	; (8001fcc <HAL_RCC_OscConfig+0x32c>)
 8001d48:	49a1      	ldr	r1, [pc, #644]	; (8001fd0 <HAL_RCC_OscConfig+0x330>)
 8001d4a:	400a      	ands	r2, r1
 8001d4c:	601a      	str	r2, [r3, #0]
 8001d4e:	4b9f      	ldr	r3, [pc, #636]	; (8001fcc <HAL_RCC_OscConfig+0x32c>)
 8001d50:	681a      	ldr	r2, [r3, #0]
 8001d52:	4b9e      	ldr	r3, [pc, #632]	; (8001fcc <HAL_RCC_OscConfig+0x32c>)
 8001d54:	499f      	ldr	r1, [pc, #636]	; (8001fd4 <HAL_RCC_OscConfig+0x334>)
 8001d56:	400a      	ands	r2, r1
 8001d58:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d014      	beq.n	8001d8c <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d62:	f7ff fc0f 	bl	8001584 <HAL_GetTick>
 8001d66:	0003      	movs	r3, r0
 8001d68:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d6a:	e008      	b.n	8001d7e <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d6c:	f7ff fc0a 	bl	8001584 <HAL_GetTick>
 8001d70:	0002      	movs	r2, r0
 8001d72:	693b      	ldr	r3, [r7, #16]
 8001d74:	1ad3      	subs	r3, r2, r3
 8001d76:	2b64      	cmp	r3, #100	; 0x64
 8001d78:	d901      	bls.n	8001d7e <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8001d7a:	2303      	movs	r3, #3
 8001d7c:	e298      	b.n	80022b0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d7e:	4b93      	ldr	r3, [pc, #588]	; (8001fcc <HAL_RCC_OscConfig+0x32c>)
 8001d80:	681a      	ldr	r2, [r3, #0]
 8001d82:	2380      	movs	r3, #128	; 0x80
 8001d84:	029b      	lsls	r3, r3, #10
 8001d86:	4013      	ands	r3, r2
 8001d88:	d0f0      	beq.n	8001d6c <HAL_RCC_OscConfig+0xcc>
 8001d8a:	e015      	b.n	8001db8 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d8c:	f7ff fbfa 	bl	8001584 <HAL_GetTick>
 8001d90:	0003      	movs	r3, r0
 8001d92:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001d94:	e008      	b.n	8001da8 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d96:	f7ff fbf5 	bl	8001584 <HAL_GetTick>
 8001d9a:	0002      	movs	r2, r0
 8001d9c:	693b      	ldr	r3, [r7, #16]
 8001d9e:	1ad3      	subs	r3, r2, r3
 8001da0:	2b64      	cmp	r3, #100	; 0x64
 8001da2:	d901      	bls.n	8001da8 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001da4:	2303      	movs	r3, #3
 8001da6:	e283      	b.n	80022b0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001da8:	4b88      	ldr	r3, [pc, #544]	; (8001fcc <HAL_RCC_OscConfig+0x32c>)
 8001daa:	681a      	ldr	r2, [r3, #0]
 8001dac:	2380      	movs	r3, #128	; 0x80
 8001dae:	029b      	lsls	r3, r3, #10
 8001db0:	4013      	ands	r3, r2
 8001db2:	d1f0      	bne.n	8001d96 <HAL_RCC_OscConfig+0xf6>
 8001db4:	e000      	b.n	8001db8 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001db6:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	2202      	movs	r2, #2
 8001dbe:	4013      	ands	r3, r2
 8001dc0:	d100      	bne.n	8001dc4 <HAL_RCC_OscConfig+0x124>
 8001dc2:	e099      	b.n	8001ef8 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001dc4:	4b81      	ldr	r3, [pc, #516]	; (8001fcc <HAL_RCC_OscConfig+0x32c>)
 8001dc6:	689b      	ldr	r3, [r3, #8]
 8001dc8:	2238      	movs	r2, #56	; 0x38
 8001dca:	4013      	ands	r3, r2
 8001dcc:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001dce:	4b7f      	ldr	r3, [pc, #508]	; (8001fcc <HAL_RCC_OscConfig+0x32c>)
 8001dd0:	68db      	ldr	r3, [r3, #12]
 8001dd2:	2203      	movs	r2, #3
 8001dd4:	4013      	ands	r3, r2
 8001dd6:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8001dd8:	69bb      	ldr	r3, [r7, #24]
 8001dda:	2b10      	cmp	r3, #16
 8001ddc:	d102      	bne.n	8001de4 <HAL_RCC_OscConfig+0x144>
 8001dde:	697b      	ldr	r3, [r7, #20]
 8001de0:	2b02      	cmp	r3, #2
 8001de2:	d002      	beq.n	8001dea <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8001de4:	69bb      	ldr	r3, [r7, #24]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d135      	bne.n	8001e56 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001dea:	4b78      	ldr	r3, [pc, #480]	; (8001fcc <HAL_RCC_OscConfig+0x32c>)
 8001dec:	681a      	ldr	r2, [r3, #0]
 8001dee:	2380      	movs	r3, #128	; 0x80
 8001df0:	00db      	lsls	r3, r3, #3
 8001df2:	4013      	ands	r3, r2
 8001df4:	d005      	beq.n	8001e02 <HAL_RCC_OscConfig+0x162>
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	68db      	ldr	r3, [r3, #12]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d101      	bne.n	8001e02 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8001dfe:	2301      	movs	r3, #1
 8001e00:	e256      	b.n	80022b0 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e02:	4b72      	ldr	r3, [pc, #456]	; (8001fcc <HAL_RCC_OscConfig+0x32c>)
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	4a74      	ldr	r2, [pc, #464]	; (8001fd8 <HAL_RCC_OscConfig+0x338>)
 8001e08:	4013      	ands	r3, r2
 8001e0a:	0019      	movs	r1, r3
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	695b      	ldr	r3, [r3, #20]
 8001e10:	021a      	lsls	r2, r3, #8
 8001e12:	4b6e      	ldr	r3, [pc, #440]	; (8001fcc <HAL_RCC_OscConfig+0x32c>)
 8001e14:	430a      	orrs	r2, r1
 8001e16:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001e18:	69bb      	ldr	r3, [r7, #24]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d112      	bne.n	8001e44 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001e1e:	4b6b      	ldr	r3, [pc, #428]	; (8001fcc <HAL_RCC_OscConfig+0x32c>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4a6e      	ldr	r2, [pc, #440]	; (8001fdc <HAL_RCC_OscConfig+0x33c>)
 8001e24:	4013      	ands	r3, r2
 8001e26:	0019      	movs	r1, r3
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	691a      	ldr	r2, [r3, #16]
 8001e2c:	4b67      	ldr	r3, [pc, #412]	; (8001fcc <HAL_RCC_OscConfig+0x32c>)
 8001e2e:	430a      	orrs	r2, r1
 8001e30:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001e32:	4b66      	ldr	r3, [pc, #408]	; (8001fcc <HAL_RCC_OscConfig+0x32c>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	0adb      	lsrs	r3, r3, #11
 8001e38:	2207      	movs	r2, #7
 8001e3a:	4013      	ands	r3, r2
 8001e3c:	4a68      	ldr	r2, [pc, #416]	; (8001fe0 <HAL_RCC_OscConfig+0x340>)
 8001e3e:	40da      	lsrs	r2, r3
 8001e40:	4b68      	ldr	r3, [pc, #416]	; (8001fe4 <HAL_RCC_OscConfig+0x344>)
 8001e42:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001e44:	4b68      	ldr	r3, [pc, #416]	; (8001fe8 <HAL_RCC_OscConfig+0x348>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	0018      	movs	r0, r3
 8001e4a:	f7ff fb3f 	bl	80014cc <HAL_InitTick>
 8001e4e:	1e03      	subs	r3, r0, #0
 8001e50:	d051      	beq.n	8001ef6 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8001e52:	2301      	movs	r3, #1
 8001e54:	e22c      	b.n	80022b0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	68db      	ldr	r3, [r3, #12]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d030      	beq.n	8001ec0 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001e5e:	4b5b      	ldr	r3, [pc, #364]	; (8001fcc <HAL_RCC_OscConfig+0x32c>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4a5e      	ldr	r2, [pc, #376]	; (8001fdc <HAL_RCC_OscConfig+0x33c>)
 8001e64:	4013      	ands	r3, r2
 8001e66:	0019      	movs	r1, r3
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	691a      	ldr	r2, [r3, #16]
 8001e6c:	4b57      	ldr	r3, [pc, #348]	; (8001fcc <HAL_RCC_OscConfig+0x32c>)
 8001e6e:	430a      	orrs	r2, r1
 8001e70:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8001e72:	4b56      	ldr	r3, [pc, #344]	; (8001fcc <HAL_RCC_OscConfig+0x32c>)
 8001e74:	681a      	ldr	r2, [r3, #0]
 8001e76:	4b55      	ldr	r3, [pc, #340]	; (8001fcc <HAL_RCC_OscConfig+0x32c>)
 8001e78:	2180      	movs	r1, #128	; 0x80
 8001e7a:	0049      	lsls	r1, r1, #1
 8001e7c:	430a      	orrs	r2, r1
 8001e7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e80:	f7ff fb80 	bl	8001584 <HAL_GetTick>
 8001e84:	0003      	movs	r3, r0
 8001e86:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e88:	e008      	b.n	8001e9c <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e8a:	f7ff fb7b 	bl	8001584 <HAL_GetTick>
 8001e8e:	0002      	movs	r2, r0
 8001e90:	693b      	ldr	r3, [r7, #16]
 8001e92:	1ad3      	subs	r3, r2, r3
 8001e94:	2b02      	cmp	r3, #2
 8001e96:	d901      	bls.n	8001e9c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8001e98:	2303      	movs	r3, #3
 8001e9a:	e209      	b.n	80022b0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e9c:	4b4b      	ldr	r3, [pc, #300]	; (8001fcc <HAL_RCC_OscConfig+0x32c>)
 8001e9e:	681a      	ldr	r2, [r3, #0]
 8001ea0:	2380      	movs	r3, #128	; 0x80
 8001ea2:	00db      	lsls	r3, r3, #3
 8001ea4:	4013      	ands	r3, r2
 8001ea6:	d0f0      	beq.n	8001e8a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ea8:	4b48      	ldr	r3, [pc, #288]	; (8001fcc <HAL_RCC_OscConfig+0x32c>)
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	4a4a      	ldr	r2, [pc, #296]	; (8001fd8 <HAL_RCC_OscConfig+0x338>)
 8001eae:	4013      	ands	r3, r2
 8001eb0:	0019      	movs	r1, r3
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	695b      	ldr	r3, [r3, #20]
 8001eb6:	021a      	lsls	r2, r3, #8
 8001eb8:	4b44      	ldr	r3, [pc, #272]	; (8001fcc <HAL_RCC_OscConfig+0x32c>)
 8001eba:	430a      	orrs	r2, r1
 8001ebc:	605a      	str	r2, [r3, #4]
 8001ebe:	e01b      	b.n	8001ef8 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8001ec0:	4b42      	ldr	r3, [pc, #264]	; (8001fcc <HAL_RCC_OscConfig+0x32c>)
 8001ec2:	681a      	ldr	r2, [r3, #0]
 8001ec4:	4b41      	ldr	r3, [pc, #260]	; (8001fcc <HAL_RCC_OscConfig+0x32c>)
 8001ec6:	4949      	ldr	r1, [pc, #292]	; (8001fec <HAL_RCC_OscConfig+0x34c>)
 8001ec8:	400a      	ands	r2, r1
 8001eca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ecc:	f7ff fb5a 	bl	8001584 <HAL_GetTick>
 8001ed0:	0003      	movs	r3, r0
 8001ed2:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001ed4:	e008      	b.n	8001ee8 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ed6:	f7ff fb55 	bl	8001584 <HAL_GetTick>
 8001eda:	0002      	movs	r2, r0
 8001edc:	693b      	ldr	r3, [r7, #16]
 8001ede:	1ad3      	subs	r3, r2, r3
 8001ee0:	2b02      	cmp	r3, #2
 8001ee2:	d901      	bls.n	8001ee8 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8001ee4:	2303      	movs	r3, #3
 8001ee6:	e1e3      	b.n	80022b0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001ee8:	4b38      	ldr	r3, [pc, #224]	; (8001fcc <HAL_RCC_OscConfig+0x32c>)
 8001eea:	681a      	ldr	r2, [r3, #0]
 8001eec:	2380      	movs	r3, #128	; 0x80
 8001eee:	00db      	lsls	r3, r3, #3
 8001ef0:	4013      	ands	r3, r2
 8001ef2:	d1f0      	bne.n	8001ed6 <HAL_RCC_OscConfig+0x236>
 8001ef4:	e000      	b.n	8001ef8 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ef6:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	2208      	movs	r2, #8
 8001efe:	4013      	ands	r3, r2
 8001f00:	d047      	beq.n	8001f92 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001f02:	4b32      	ldr	r3, [pc, #200]	; (8001fcc <HAL_RCC_OscConfig+0x32c>)
 8001f04:	689b      	ldr	r3, [r3, #8]
 8001f06:	2238      	movs	r2, #56	; 0x38
 8001f08:	4013      	ands	r3, r2
 8001f0a:	2b18      	cmp	r3, #24
 8001f0c:	d10a      	bne.n	8001f24 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8001f0e:	4b2f      	ldr	r3, [pc, #188]	; (8001fcc <HAL_RCC_OscConfig+0x32c>)
 8001f10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f12:	2202      	movs	r2, #2
 8001f14:	4013      	ands	r3, r2
 8001f16:	d03c      	beq.n	8001f92 <HAL_RCC_OscConfig+0x2f2>
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	699b      	ldr	r3, [r3, #24]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d138      	bne.n	8001f92 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8001f20:	2301      	movs	r3, #1
 8001f22:	e1c5      	b.n	80022b0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	699b      	ldr	r3, [r3, #24]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d019      	beq.n	8001f60 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001f2c:	4b27      	ldr	r3, [pc, #156]	; (8001fcc <HAL_RCC_OscConfig+0x32c>)
 8001f2e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001f30:	4b26      	ldr	r3, [pc, #152]	; (8001fcc <HAL_RCC_OscConfig+0x32c>)
 8001f32:	2101      	movs	r1, #1
 8001f34:	430a      	orrs	r2, r1
 8001f36:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f38:	f7ff fb24 	bl	8001584 <HAL_GetTick>
 8001f3c:	0003      	movs	r3, r0
 8001f3e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001f40:	e008      	b.n	8001f54 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f42:	f7ff fb1f 	bl	8001584 <HAL_GetTick>
 8001f46:	0002      	movs	r2, r0
 8001f48:	693b      	ldr	r3, [r7, #16]
 8001f4a:	1ad3      	subs	r3, r2, r3
 8001f4c:	2b02      	cmp	r3, #2
 8001f4e:	d901      	bls.n	8001f54 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8001f50:	2303      	movs	r3, #3
 8001f52:	e1ad      	b.n	80022b0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001f54:	4b1d      	ldr	r3, [pc, #116]	; (8001fcc <HAL_RCC_OscConfig+0x32c>)
 8001f56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f58:	2202      	movs	r2, #2
 8001f5a:	4013      	ands	r3, r2
 8001f5c:	d0f1      	beq.n	8001f42 <HAL_RCC_OscConfig+0x2a2>
 8001f5e:	e018      	b.n	8001f92 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001f60:	4b1a      	ldr	r3, [pc, #104]	; (8001fcc <HAL_RCC_OscConfig+0x32c>)
 8001f62:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001f64:	4b19      	ldr	r3, [pc, #100]	; (8001fcc <HAL_RCC_OscConfig+0x32c>)
 8001f66:	2101      	movs	r1, #1
 8001f68:	438a      	bics	r2, r1
 8001f6a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f6c:	f7ff fb0a 	bl	8001584 <HAL_GetTick>
 8001f70:	0003      	movs	r3, r0
 8001f72:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001f74:	e008      	b.n	8001f88 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f76:	f7ff fb05 	bl	8001584 <HAL_GetTick>
 8001f7a:	0002      	movs	r2, r0
 8001f7c:	693b      	ldr	r3, [r7, #16]
 8001f7e:	1ad3      	subs	r3, r2, r3
 8001f80:	2b02      	cmp	r3, #2
 8001f82:	d901      	bls.n	8001f88 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8001f84:	2303      	movs	r3, #3
 8001f86:	e193      	b.n	80022b0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001f88:	4b10      	ldr	r3, [pc, #64]	; (8001fcc <HAL_RCC_OscConfig+0x32c>)
 8001f8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f8c:	2202      	movs	r2, #2
 8001f8e:	4013      	ands	r3, r2
 8001f90:	d1f1      	bne.n	8001f76 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	2204      	movs	r2, #4
 8001f98:	4013      	ands	r3, r2
 8001f9a:	d100      	bne.n	8001f9e <HAL_RCC_OscConfig+0x2fe>
 8001f9c:	e0c6      	b.n	800212c <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f9e:	231f      	movs	r3, #31
 8001fa0:	18fb      	adds	r3, r7, r3
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001fa6:	4b09      	ldr	r3, [pc, #36]	; (8001fcc <HAL_RCC_OscConfig+0x32c>)
 8001fa8:	689b      	ldr	r3, [r3, #8]
 8001faa:	2238      	movs	r2, #56	; 0x38
 8001fac:	4013      	ands	r3, r2
 8001fae:	2b20      	cmp	r3, #32
 8001fb0:	d11e      	bne.n	8001ff0 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8001fb2:	4b06      	ldr	r3, [pc, #24]	; (8001fcc <HAL_RCC_OscConfig+0x32c>)
 8001fb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fb6:	2202      	movs	r2, #2
 8001fb8:	4013      	ands	r3, r2
 8001fba:	d100      	bne.n	8001fbe <HAL_RCC_OscConfig+0x31e>
 8001fbc:	e0b6      	b.n	800212c <HAL_RCC_OscConfig+0x48c>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	689b      	ldr	r3, [r3, #8]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d000      	beq.n	8001fc8 <HAL_RCC_OscConfig+0x328>
 8001fc6:	e0b1      	b.n	800212c <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8001fc8:	2301      	movs	r3, #1
 8001fca:	e171      	b.n	80022b0 <HAL_RCC_OscConfig+0x610>
 8001fcc:	40021000 	.word	0x40021000
 8001fd0:	fffeffff 	.word	0xfffeffff
 8001fd4:	fffbffff 	.word	0xfffbffff
 8001fd8:	ffff80ff 	.word	0xffff80ff
 8001fdc:	ffffc7ff 	.word	0xffffc7ff
 8001fe0:	00f42400 	.word	0x00f42400
 8001fe4:	20000004 	.word	0x20000004
 8001fe8:	20000008 	.word	0x20000008
 8001fec:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001ff0:	4bb1      	ldr	r3, [pc, #708]	; (80022b8 <HAL_RCC_OscConfig+0x618>)
 8001ff2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001ff4:	2380      	movs	r3, #128	; 0x80
 8001ff6:	055b      	lsls	r3, r3, #21
 8001ff8:	4013      	ands	r3, r2
 8001ffa:	d101      	bne.n	8002000 <HAL_RCC_OscConfig+0x360>
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	e000      	b.n	8002002 <HAL_RCC_OscConfig+0x362>
 8002000:	2300      	movs	r3, #0
 8002002:	2b00      	cmp	r3, #0
 8002004:	d011      	beq.n	800202a <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8002006:	4bac      	ldr	r3, [pc, #688]	; (80022b8 <HAL_RCC_OscConfig+0x618>)
 8002008:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800200a:	4bab      	ldr	r3, [pc, #684]	; (80022b8 <HAL_RCC_OscConfig+0x618>)
 800200c:	2180      	movs	r1, #128	; 0x80
 800200e:	0549      	lsls	r1, r1, #21
 8002010:	430a      	orrs	r2, r1
 8002012:	63da      	str	r2, [r3, #60]	; 0x3c
 8002014:	4ba8      	ldr	r3, [pc, #672]	; (80022b8 <HAL_RCC_OscConfig+0x618>)
 8002016:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002018:	2380      	movs	r3, #128	; 0x80
 800201a:	055b      	lsls	r3, r3, #21
 800201c:	4013      	ands	r3, r2
 800201e:	60fb      	str	r3, [r7, #12]
 8002020:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8002022:	231f      	movs	r3, #31
 8002024:	18fb      	adds	r3, r7, r3
 8002026:	2201      	movs	r2, #1
 8002028:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800202a:	4ba4      	ldr	r3, [pc, #656]	; (80022bc <HAL_RCC_OscConfig+0x61c>)
 800202c:	681a      	ldr	r2, [r3, #0]
 800202e:	2380      	movs	r3, #128	; 0x80
 8002030:	005b      	lsls	r3, r3, #1
 8002032:	4013      	ands	r3, r2
 8002034:	d11a      	bne.n	800206c <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002036:	4ba1      	ldr	r3, [pc, #644]	; (80022bc <HAL_RCC_OscConfig+0x61c>)
 8002038:	681a      	ldr	r2, [r3, #0]
 800203a:	4ba0      	ldr	r3, [pc, #640]	; (80022bc <HAL_RCC_OscConfig+0x61c>)
 800203c:	2180      	movs	r1, #128	; 0x80
 800203e:	0049      	lsls	r1, r1, #1
 8002040:	430a      	orrs	r2, r1
 8002042:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8002044:	f7ff fa9e 	bl	8001584 <HAL_GetTick>
 8002048:	0003      	movs	r3, r0
 800204a:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800204c:	e008      	b.n	8002060 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800204e:	f7ff fa99 	bl	8001584 <HAL_GetTick>
 8002052:	0002      	movs	r2, r0
 8002054:	693b      	ldr	r3, [r7, #16]
 8002056:	1ad3      	subs	r3, r2, r3
 8002058:	2b02      	cmp	r3, #2
 800205a:	d901      	bls.n	8002060 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 800205c:	2303      	movs	r3, #3
 800205e:	e127      	b.n	80022b0 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002060:	4b96      	ldr	r3, [pc, #600]	; (80022bc <HAL_RCC_OscConfig+0x61c>)
 8002062:	681a      	ldr	r2, [r3, #0]
 8002064:	2380      	movs	r3, #128	; 0x80
 8002066:	005b      	lsls	r3, r3, #1
 8002068:	4013      	ands	r3, r2
 800206a:	d0f0      	beq.n	800204e <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	689b      	ldr	r3, [r3, #8]
 8002070:	2b01      	cmp	r3, #1
 8002072:	d106      	bne.n	8002082 <HAL_RCC_OscConfig+0x3e2>
 8002074:	4b90      	ldr	r3, [pc, #576]	; (80022b8 <HAL_RCC_OscConfig+0x618>)
 8002076:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002078:	4b8f      	ldr	r3, [pc, #572]	; (80022b8 <HAL_RCC_OscConfig+0x618>)
 800207a:	2101      	movs	r1, #1
 800207c:	430a      	orrs	r2, r1
 800207e:	65da      	str	r2, [r3, #92]	; 0x5c
 8002080:	e01c      	b.n	80020bc <HAL_RCC_OscConfig+0x41c>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	689b      	ldr	r3, [r3, #8]
 8002086:	2b05      	cmp	r3, #5
 8002088:	d10c      	bne.n	80020a4 <HAL_RCC_OscConfig+0x404>
 800208a:	4b8b      	ldr	r3, [pc, #556]	; (80022b8 <HAL_RCC_OscConfig+0x618>)
 800208c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800208e:	4b8a      	ldr	r3, [pc, #552]	; (80022b8 <HAL_RCC_OscConfig+0x618>)
 8002090:	2104      	movs	r1, #4
 8002092:	430a      	orrs	r2, r1
 8002094:	65da      	str	r2, [r3, #92]	; 0x5c
 8002096:	4b88      	ldr	r3, [pc, #544]	; (80022b8 <HAL_RCC_OscConfig+0x618>)
 8002098:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800209a:	4b87      	ldr	r3, [pc, #540]	; (80022b8 <HAL_RCC_OscConfig+0x618>)
 800209c:	2101      	movs	r1, #1
 800209e:	430a      	orrs	r2, r1
 80020a0:	65da      	str	r2, [r3, #92]	; 0x5c
 80020a2:	e00b      	b.n	80020bc <HAL_RCC_OscConfig+0x41c>
 80020a4:	4b84      	ldr	r3, [pc, #528]	; (80022b8 <HAL_RCC_OscConfig+0x618>)
 80020a6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80020a8:	4b83      	ldr	r3, [pc, #524]	; (80022b8 <HAL_RCC_OscConfig+0x618>)
 80020aa:	2101      	movs	r1, #1
 80020ac:	438a      	bics	r2, r1
 80020ae:	65da      	str	r2, [r3, #92]	; 0x5c
 80020b0:	4b81      	ldr	r3, [pc, #516]	; (80022b8 <HAL_RCC_OscConfig+0x618>)
 80020b2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80020b4:	4b80      	ldr	r3, [pc, #512]	; (80022b8 <HAL_RCC_OscConfig+0x618>)
 80020b6:	2104      	movs	r1, #4
 80020b8:	438a      	bics	r2, r1
 80020ba:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	689b      	ldr	r3, [r3, #8]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d014      	beq.n	80020ee <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020c4:	f7ff fa5e 	bl	8001584 <HAL_GetTick>
 80020c8:	0003      	movs	r3, r0
 80020ca:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020cc:	e009      	b.n	80020e2 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020ce:	f7ff fa59 	bl	8001584 <HAL_GetTick>
 80020d2:	0002      	movs	r2, r0
 80020d4:	693b      	ldr	r3, [r7, #16]
 80020d6:	1ad3      	subs	r3, r2, r3
 80020d8:	4a79      	ldr	r2, [pc, #484]	; (80022c0 <HAL_RCC_OscConfig+0x620>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d901      	bls.n	80020e2 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 80020de:	2303      	movs	r3, #3
 80020e0:	e0e6      	b.n	80022b0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020e2:	4b75      	ldr	r3, [pc, #468]	; (80022b8 <HAL_RCC_OscConfig+0x618>)
 80020e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020e6:	2202      	movs	r2, #2
 80020e8:	4013      	ands	r3, r2
 80020ea:	d0f0      	beq.n	80020ce <HAL_RCC_OscConfig+0x42e>
 80020ec:	e013      	b.n	8002116 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020ee:	f7ff fa49 	bl	8001584 <HAL_GetTick>
 80020f2:	0003      	movs	r3, r0
 80020f4:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80020f6:	e009      	b.n	800210c <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020f8:	f7ff fa44 	bl	8001584 <HAL_GetTick>
 80020fc:	0002      	movs	r2, r0
 80020fe:	693b      	ldr	r3, [r7, #16]
 8002100:	1ad3      	subs	r3, r2, r3
 8002102:	4a6f      	ldr	r2, [pc, #444]	; (80022c0 <HAL_RCC_OscConfig+0x620>)
 8002104:	4293      	cmp	r3, r2
 8002106:	d901      	bls.n	800210c <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8002108:	2303      	movs	r3, #3
 800210a:	e0d1      	b.n	80022b0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800210c:	4b6a      	ldr	r3, [pc, #424]	; (80022b8 <HAL_RCC_OscConfig+0x618>)
 800210e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002110:	2202      	movs	r2, #2
 8002112:	4013      	ands	r3, r2
 8002114:	d1f0      	bne.n	80020f8 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8002116:	231f      	movs	r3, #31
 8002118:	18fb      	adds	r3, r7, r3
 800211a:	781b      	ldrb	r3, [r3, #0]
 800211c:	2b01      	cmp	r3, #1
 800211e:	d105      	bne.n	800212c <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8002120:	4b65      	ldr	r3, [pc, #404]	; (80022b8 <HAL_RCC_OscConfig+0x618>)
 8002122:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002124:	4b64      	ldr	r3, [pc, #400]	; (80022b8 <HAL_RCC_OscConfig+0x618>)
 8002126:	4967      	ldr	r1, [pc, #412]	; (80022c4 <HAL_RCC_OscConfig+0x624>)
 8002128:	400a      	ands	r2, r1
 800212a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	69db      	ldr	r3, [r3, #28]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d100      	bne.n	8002136 <HAL_RCC_OscConfig+0x496>
 8002134:	e0bb      	b.n	80022ae <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002136:	4b60      	ldr	r3, [pc, #384]	; (80022b8 <HAL_RCC_OscConfig+0x618>)
 8002138:	689b      	ldr	r3, [r3, #8]
 800213a:	2238      	movs	r2, #56	; 0x38
 800213c:	4013      	ands	r3, r2
 800213e:	2b10      	cmp	r3, #16
 8002140:	d100      	bne.n	8002144 <HAL_RCC_OscConfig+0x4a4>
 8002142:	e07b      	b.n	800223c <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	69db      	ldr	r3, [r3, #28]
 8002148:	2b02      	cmp	r3, #2
 800214a:	d156      	bne.n	80021fa <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800214c:	4b5a      	ldr	r3, [pc, #360]	; (80022b8 <HAL_RCC_OscConfig+0x618>)
 800214e:	681a      	ldr	r2, [r3, #0]
 8002150:	4b59      	ldr	r3, [pc, #356]	; (80022b8 <HAL_RCC_OscConfig+0x618>)
 8002152:	495d      	ldr	r1, [pc, #372]	; (80022c8 <HAL_RCC_OscConfig+0x628>)
 8002154:	400a      	ands	r2, r1
 8002156:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002158:	f7ff fa14 	bl	8001584 <HAL_GetTick>
 800215c:	0003      	movs	r3, r0
 800215e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002160:	e008      	b.n	8002174 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002162:	f7ff fa0f 	bl	8001584 <HAL_GetTick>
 8002166:	0002      	movs	r2, r0
 8002168:	693b      	ldr	r3, [r7, #16]
 800216a:	1ad3      	subs	r3, r2, r3
 800216c:	2b02      	cmp	r3, #2
 800216e:	d901      	bls.n	8002174 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8002170:	2303      	movs	r3, #3
 8002172:	e09d      	b.n	80022b0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002174:	4b50      	ldr	r3, [pc, #320]	; (80022b8 <HAL_RCC_OscConfig+0x618>)
 8002176:	681a      	ldr	r2, [r3, #0]
 8002178:	2380      	movs	r3, #128	; 0x80
 800217a:	049b      	lsls	r3, r3, #18
 800217c:	4013      	ands	r3, r2
 800217e:	d1f0      	bne.n	8002162 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002180:	4b4d      	ldr	r3, [pc, #308]	; (80022b8 <HAL_RCC_OscConfig+0x618>)
 8002182:	68db      	ldr	r3, [r3, #12]
 8002184:	4a51      	ldr	r2, [pc, #324]	; (80022cc <HAL_RCC_OscConfig+0x62c>)
 8002186:	4013      	ands	r3, r2
 8002188:	0019      	movs	r1, r3
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6a1a      	ldr	r2, [r3, #32]
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002192:	431a      	orrs	r2, r3
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002198:	021b      	lsls	r3, r3, #8
 800219a:	431a      	orrs	r2, r3
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021a0:	431a      	orrs	r2, r3
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021a6:	431a      	orrs	r2, r3
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021ac:	431a      	orrs	r2, r3
 80021ae:	4b42      	ldr	r3, [pc, #264]	; (80022b8 <HAL_RCC_OscConfig+0x618>)
 80021b0:	430a      	orrs	r2, r1
 80021b2:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80021b4:	4b40      	ldr	r3, [pc, #256]	; (80022b8 <HAL_RCC_OscConfig+0x618>)
 80021b6:	681a      	ldr	r2, [r3, #0]
 80021b8:	4b3f      	ldr	r3, [pc, #252]	; (80022b8 <HAL_RCC_OscConfig+0x618>)
 80021ba:	2180      	movs	r1, #128	; 0x80
 80021bc:	0449      	lsls	r1, r1, #17
 80021be:	430a      	orrs	r2, r1
 80021c0:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80021c2:	4b3d      	ldr	r3, [pc, #244]	; (80022b8 <HAL_RCC_OscConfig+0x618>)
 80021c4:	68da      	ldr	r2, [r3, #12]
 80021c6:	4b3c      	ldr	r3, [pc, #240]	; (80022b8 <HAL_RCC_OscConfig+0x618>)
 80021c8:	2180      	movs	r1, #128	; 0x80
 80021ca:	0549      	lsls	r1, r1, #21
 80021cc:	430a      	orrs	r2, r1
 80021ce:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021d0:	f7ff f9d8 	bl	8001584 <HAL_GetTick>
 80021d4:	0003      	movs	r3, r0
 80021d6:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021d8:	e008      	b.n	80021ec <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021da:	f7ff f9d3 	bl	8001584 <HAL_GetTick>
 80021de:	0002      	movs	r2, r0
 80021e0:	693b      	ldr	r3, [r7, #16]
 80021e2:	1ad3      	subs	r3, r2, r3
 80021e4:	2b02      	cmp	r3, #2
 80021e6:	d901      	bls.n	80021ec <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 80021e8:	2303      	movs	r3, #3
 80021ea:	e061      	b.n	80022b0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021ec:	4b32      	ldr	r3, [pc, #200]	; (80022b8 <HAL_RCC_OscConfig+0x618>)
 80021ee:	681a      	ldr	r2, [r3, #0]
 80021f0:	2380      	movs	r3, #128	; 0x80
 80021f2:	049b      	lsls	r3, r3, #18
 80021f4:	4013      	ands	r3, r2
 80021f6:	d0f0      	beq.n	80021da <HAL_RCC_OscConfig+0x53a>
 80021f8:	e059      	b.n	80022ae <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021fa:	4b2f      	ldr	r3, [pc, #188]	; (80022b8 <HAL_RCC_OscConfig+0x618>)
 80021fc:	681a      	ldr	r2, [r3, #0]
 80021fe:	4b2e      	ldr	r3, [pc, #184]	; (80022b8 <HAL_RCC_OscConfig+0x618>)
 8002200:	4931      	ldr	r1, [pc, #196]	; (80022c8 <HAL_RCC_OscConfig+0x628>)
 8002202:	400a      	ands	r2, r1
 8002204:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002206:	f7ff f9bd 	bl	8001584 <HAL_GetTick>
 800220a:	0003      	movs	r3, r0
 800220c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800220e:	e008      	b.n	8002222 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002210:	f7ff f9b8 	bl	8001584 <HAL_GetTick>
 8002214:	0002      	movs	r2, r0
 8002216:	693b      	ldr	r3, [r7, #16]
 8002218:	1ad3      	subs	r3, r2, r3
 800221a:	2b02      	cmp	r3, #2
 800221c:	d901      	bls.n	8002222 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 800221e:	2303      	movs	r3, #3
 8002220:	e046      	b.n	80022b0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002222:	4b25      	ldr	r3, [pc, #148]	; (80022b8 <HAL_RCC_OscConfig+0x618>)
 8002224:	681a      	ldr	r2, [r3, #0]
 8002226:	2380      	movs	r3, #128	; 0x80
 8002228:	049b      	lsls	r3, r3, #18
 800222a:	4013      	ands	r3, r2
 800222c:	d1f0      	bne.n	8002210 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 800222e:	4b22      	ldr	r3, [pc, #136]	; (80022b8 <HAL_RCC_OscConfig+0x618>)
 8002230:	68da      	ldr	r2, [r3, #12]
 8002232:	4b21      	ldr	r3, [pc, #132]	; (80022b8 <HAL_RCC_OscConfig+0x618>)
 8002234:	4926      	ldr	r1, [pc, #152]	; (80022d0 <HAL_RCC_OscConfig+0x630>)
 8002236:	400a      	ands	r2, r1
 8002238:	60da      	str	r2, [r3, #12]
 800223a:	e038      	b.n	80022ae <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	69db      	ldr	r3, [r3, #28]
 8002240:	2b01      	cmp	r3, #1
 8002242:	d101      	bne.n	8002248 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8002244:	2301      	movs	r3, #1
 8002246:	e033      	b.n	80022b0 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8002248:	4b1b      	ldr	r3, [pc, #108]	; (80022b8 <HAL_RCC_OscConfig+0x618>)
 800224a:	68db      	ldr	r3, [r3, #12]
 800224c:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800224e:	697b      	ldr	r3, [r7, #20]
 8002250:	2203      	movs	r2, #3
 8002252:	401a      	ands	r2, r3
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6a1b      	ldr	r3, [r3, #32]
 8002258:	429a      	cmp	r2, r3
 800225a:	d126      	bne.n	80022aa <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800225c:	697b      	ldr	r3, [r7, #20]
 800225e:	2270      	movs	r2, #112	; 0x70
 8002260:	401a      	ands	r2, r3
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002266:	429a      	cmp	r2, r3
 8002268:	d11f      	bne.n	80022aa <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800226a:	697a      	ldr	r2, [r7, #20]
 800226c:	23fe      	movs	r3, #254	; 0xfe
 800226e:	01db      	lsls	r3, r3, #7
 8002270:	401a      	ands	r2, r3
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002276:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002278:	429a      	cmp	r2, r3
 800227a:	d116      	bne.n	80022aa <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800227c:	697a      	ldr	r2, [r7, #20]
 800227e:	23f8      	movs	r3, #248	; 0xf8
 8002280:	039b      	lsls	r3, r3, #14
 8002282:	401a      	ands	r2, r3
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002288:	429a      	cmp	r2, r3
 800228a:	d10e      	bne.n	80022aa <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800228c:	697a      	ldr	r2, [r7, #20]
 800228e:	23e0      	movs	r3, #224	; 0xe0
 8002290:	051b      	lsls	r3, r3, #20
 8002292:	401a      	ands	r2, r3
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002298:	429a      	cmp	r2, r3
 800229a:	d106      	bne.n	80022aa <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800229c:	697b      	ldr	r3, [r7, #20]
 800229e:	0f5b      	lsrs	r3, r3, #29
 80022a0:	075a      	lsls	r2, r3, #29
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80022a6:	429a      	cmp	r2, r3
 80022a8:	d001      	beq.n	80022ae <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 80022aa:	2301      	movs	r3, #1
 80022ac:	e000      	b.n	80022b0 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 80022ae:	2300      	movs	r3, #0
}
 80022b0:	0018      	movs	r0, r3
 80022b2:	46bd      	mov	sp, r7
 80022b4:	b008      	add	sp, #32
 80022b6:	bd80      	pop	{r7, pc}
 80022b8:	40021000 	.word	0x40021000
 80022bc:	40007000 	.word	0x40007000
 80022c0:	00001388 	.word	0x00001388
 80022c4:	efffffff 	.word	0xefffffff
 80022c8:	feffffff 	.word	0xfeffffff
 80022cc:	11c1808c 	.word	0x11c1808c
 80022d0:	eefefffc 	.word	0xeefefffc

080022d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b084      	sub	sp, #16
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
 80022dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d101      	bne.n	80022e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80022e4:	2301      	movs	r3, #1
 80022e6:	e0e9      	b.n	80024bc <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80022e8:	4b76      	ldr	r3, [pc, #472]	; (80024c4 <HAL_RCC_ClockConfig+0x1f0>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	2207      	movs	r2, #7
 80022ee:	4013      	ands	r3, r2
 80022f0:	683a      	ldr	r2, [r7, #0]
 80022f2:	429a      	cmp	r2, r3
 80022f4:	d91e      	bls.n	8002334 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022f6:	4b73      	ldr	r3, [pc, #460]	; (80024c4 <HAL_RCC_ClockConfig+0x1f0>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	2207      	movs	r2, #7
 80022fc:	4393      	bics	r3, r2
 80022fe:	0019      	movs	r1, r3
 8002300:	4b70      	ldr	r3, [pc, #448]	; (80024c4 <HAL_RCC_ClockConfig+0x1f0>)
 8002302:	683a      	ldr	r2, [r7, #0]
 8002304:	430a      	orrs	r2, r1
 8002306:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002308:	f7ff f93c 	bl	8001584 <HAL_GetTick>
 800230c:	0003      	movs	r3, r0
 800230e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002310:	e009      	b.n	8002326 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002312:	f7ff f937 	bl	8001584 <HAL_GetTick>
 8002316:	0002      	movs	r2, r0
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	1ad3      	subs	r3, r2, r3
 800231c:	4a6a      	ldr	r2, [pc, #424]	; (80024c8 <HAL_RCC_ClockConfig+0x1f4>)
 800231e:	4293      	cmp	r3, r2
 8002320:	d901      	bls.n	8002326 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002322:	2303      	movs	r3, #3
 8002324:	e0ca      	b.n	80024bc <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002326:	4b67      	ldr	r3, [pc, #412]	; (80024c4 <HAL_RCC_ClockConfig+0x1f0>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	2207      	movs	r2, #7
 800232c:	4013      	ands	r3, r2
 800232e:	683a      	ldr	r2, [r7, #0]
 8002330:	429a      	cmp	r2, r3
 8002332:	d1ee      	bne.n	8002312 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	2202      	movs	r2, #2
 800233a:	4013      	ands	r3, r2
 800233c:	d015      	beq.n	800236a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	2204      	movs	r2, #4
 8002344:	4013      	ands	r3, r2
 8002346:	d006      	beq.n	8002356 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002348:	4b60      	ldr	r3, [pc, #384]	; (80024cc <HAL_RCC_ClockConfig+0x1f8>)
 800234a:	689a      	ldr	r2, [r3, #8]
 800234c:	4b5f      	ldr	r3, [pc, #380]	; (80024cc <HAL_RCC_ClockConfig+0x1f8>)
 800234e:	21e0      	movs	r1, #224	; 0xe0
 8002350:	01c9      	lsls	r1, r1, #7
 8002352:	430a      	orrs	r2, r1
 8002354:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002356:	4b5d      	ldr	r3, [pc, #372]	; (80024cc <HAL_RCC_ClockConfig+0x1f8>)
 8002358:	689b      	ldr	r3, [r3, #8]
 800235a:	4a5d      	ldr	r2, [pc, #372]	; (80024d0 <HAL_RCC_ClockConfig+0x1fc>)
 800235c:	4013      	ands	r3, r2
 800235e:	0019      	movs	r1, r3
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	689a      	ldr	r2, [r3, #8]
 8002364:	4b59      	ldr	r3, [pc, #356]	; (80024cc <HAL_RCC_ClockConfig+0x1f8>)
 8002366:	430a      	orrs	r2, r1
 8002368:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	2201      	movs	r2, #1
 8002370:	4013      	ands	r3, r2
 8002372:	d057      	beq.n	8002424 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	2b01      	cmp	r3, #1
 800237a:	d107      	bne.n	800238c <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800237c:	4b53      	ldr	r3, [pc, #332]	; (80024cc <HAL_RCC_ClockConfig+0x1f8>)
 800237e:	681a      	ldr	r2, [r3, #0]
 8002380:	2380      	movs	r3, #128	; 0x80
 8002382:	029b      	lsls	r3, r3, #10
 8002384:	4013      	ands	r3, r2
 8002386:	d12b      	bne.n	80023e0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002388:	2301      	movs	r3, #1
 800238a:	e097      	b.n	80024bc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	2b02      	cmp	r3, #2
 8002392:	d107      	bne.n	80023a4 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002394:	4b4d      	ldr	r3, [pc, #308]	; (80024cc <HAL_RCC_ClockConfig+0x1f8>)
 8002396:	681a      	ldr	r2, [r3, #0]
 8002398:	2380      	movs	r3, #128	; 0x80
 800239a:	049b      	lsls	r3, r3, #18
 800239c:	4013      	ands	r3, r2
 800239e:	d11f      	bne.n	80023e0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80023a0:	2301      	movs	r3, #1
 80023a2:	e08b      	b.n	80024bc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d107      	bne.n	80023bc <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80023ac:	4b47      	ldr	r3, [pc, #284]	; (80024cc <HAL_RCC_ClockConfig+0x1f8>)
 80023ae:	681a      	ldr	r2, [r3, #0]
 80023b0:	2380      	movs	r3, #128	; 0x80
 80023b2:	00db      	lsls	r3, r3, #3
 80023b4:	4013      	ands	r3, r2
 80023b6:	d113      	bne.n	80023e0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80023b8:	2301      	movs	r3, #1
 80023ba:	e07f      	b.n	80024bc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	2b03      	cmp	r3, #3
 80023c2:	d106      	bne.n	80023d2 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80023c4:	4b41      	ldr	r3, [pc, #260]	; (80024cc <HAL_RCC_ClockConfig+0x1f8>)
 80023c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023c8:	2202      	movs	r2, #2
 80023ca:	4013      	ands	r3, r2
 80023cc:	d108      	bne.n	80023e0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80023ce:	2301      	movs	r3, #1
 80023d0:	e074      	b.n	80024bc <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80023d2:	4b3e      	ldr	r3, [pc, #248]	; (80024cc <HAL_RCC_ClockConfig+0x1f8>)
 80023d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023d6:	2202      	movs	r2, #2
 80023d8:	4013      	ands	r3, r2
 80023da:	d101      	bne.n	80023e0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80023dc:	2301      	movs	r3, #1
 80023de:	e06d      	b.n	80024bc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80023e0:	4b3a      	ldr	r3, [pc, #232]	; (80024cc <HAL_RCC_ClockConfig+0x1f8>)
 80023e2:	689b      	ldr	r3, [r3, #8]
 80023e4:	2207      	movs	r2, #7
 80023e6:	4393      	bics	r3, r2
 80023e8:	0019      	movs	r1, r3
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	685a      	ldr	r2, [r3, #4]
 80023ee:	4b37      	ldr	r3, [pc, #220]	; (80024cc <HAL_RCC_ClockConfig+0x1f8>)
 80023f0:	430a      	orrs	r2, r1
 80023f2:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80023f4:	f7ff f8c6 	bl	8001584 <HAL_GetTick>
 80023f8:	0003      	movs	r3, r0
 80023fa:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023fc:	e009      	b.n	8002412 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023fe:	f7ff f8c1 	bl	8001584 <HAL_GetTick>
 8002402:	0002      	movs	r2, r0
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	1ad3      	subs	r3, r2, r3
 8002408:	4a2f      	ldr	r2, [pc, #188]	; (80024c8 <HAL_RCC_ClockConfig+0x1f4>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d901      	bls.n	8002412 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800240e:	2303      	movs	r3, #3
 8002410:	e054      	b.n	80024bc <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002412:	4b2e      	ldr	r3, [pc, #184]	; (80024cc <HAL_RCC_ClockConfig+0x1f8>)
 8002414:	689b      	ldr	r3, [r3, #8]
 8002416:	2238      	movs	r2, #56	; 0x38
 8002418:	401a      	ands	r2, r3
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	00db      	lsls	r3, r3, #3
 8002420:	429a      	cmp	r2, r3
 8002422:	d1ec      	bne.n	80023fe <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002424:	4b27      	ldr	r3, [pc, #156]	; (80024c4 <HAL_RCC_ClockConfig+0x1f0>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	2207      	movs	r2, #7
 800242a:	4013      	ands	r3, r2
 800242c:	683a      	ldr	r2, [r7, #0]
 800242e:	429a      	cmp	r2, r3
 8002430:	d21e      	bcs.n	8002470 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002432:	4b24      	ldr	r3, [pc, #144]	; (80024c4 <HAL_RCC_ClockConfig+0x1f0>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	2207      	movs	r2, #7
 8002438:	4393      	bics	r3, r2
 800243a:	0019      	movs	r1, r3
 800243c:	4b21      	ldr	r3, [pc, #132]	; (80024c4 <HAL_RCC_ClockConfig+0x1f0>)
 800243e:	683a      	ldr	r2, [r7, #0]
 8002440:	430a      	orrs	r2, r1
 8002442:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002444:	f7ff f89e 	bl	8001584 <HAL_GetTick>
 8002448:	0003      	movs	r3, r0
 800244a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800244c:	e009      	b.n	8002462 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800244e:	f7ff f899 	bl	8001584 <HAL_GetTick>
 8002452:	0002      	movs	r2, r0
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	1ad3      	subs	r3, r2, r3
 8002458:	4a1b      	ldr	r2, [pc, #108]	; (80024c8 <HAL_RCC_ClockConfig+0x1f4>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d901      	bls.n	8002462 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800245e:	2303      	movs	r3, #3
 8002460:	e02c      	b.n	80024bc <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002462:	4b18      	ldr	r3, [pc, #96]	; (80024c4 <HAL_RCC_ClockConfig+0x1f0>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	2207      	movs	r2, #7
 8002468:	4013      	ands	r3, r2
 800246a:	683a      	ldr	r2, [r7, #0]
 800246c:	429a      	cmp	r2, r3
 800246e:	d1ee      	bne.n	800244e <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	2204      	movs	r2, #4
 8002476:	4013      	ands	r3, r2
 8002478:	d009      	beq.n	800248e <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800247a:	4b14      	ldr	r3, [pc, #80]	; (80024cc <HAL_RCC_ClockConfig+0x1f8>)
 800247c:	689b      	ldr	r3, [r3, #8]
 800247e:	4a15      	ldr	r2, [pc, #84]	; (80024d4 <HAL_RCC_ClockConfig+0x200>)
 8002480:	4013      	ands	r3, r2
 8002482:	0019      	movs	r1, r3
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	68da      	ldr	r2, [r3, #12]
 8002488:	4b10      	ldr	r3, [pc, #64]	; (80024cc <HAL_RCC_ClockConfig+0x1f8>)
 800248a:	430a      	orrs	r2, r1
 800248c:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800248e:	f000 f829 	bl	80024e4 <HAL_RCC_GetSysClockFreq>
 8002492:	0001      	movs	r1, r0
 8002494:	4b0d      	ldr	r3, [pc, #52]	; (80024cc <HAL_RCC_ClockConfig+0x1f8>)
 8002496:	689b      	ldr	r3, [r3, #8]
 8002498:	0a1b      	lsrs	r3, r3, #8
 800249a:	220f      	movs	r2, #15
 800249c:	401a      	ands	r2, r3
 800249e:	4b0e      	ldr	r3, [pc, #56]	; (80024d8 <HAL_RCC_ClockConfig+0x204>)
 80024a0:	0092      	lsls	r2, r2, #2
 80024a2:	58d3      	ldr	r3, [r2, r3]
 80024a4:	221f      	movs	r2, #31
 80024a6:	4013      	ands	r3, r2
 80024a8:	000a      	movs	r2, r1
 80024aa:	40da      	lsrs	r2, r3
 80024ac:	4b0b      	ldr	r3, [pc, #44]	; (80024dc <HAL_RCC_ClockConfig+0x208>)
 80024ae:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80024b0:	4b0b      	ldr	r3, [pc, #44]	; (80024e0 <HAL_RCC_ClockConfig+0x20c>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	0018      	movs	r0, r3
 80024b6:	f7ff f809 	bl	80014cc <HAL_InitTick>
 80024ba:	0003      	movs	r3, r0
}
 80024bc:	0018      	movs	r0, r3
 80024be:	46bd      	mov	sp, r7
 80024c0:	b004      	add	sp, #16
 80024c2:	bd80      	pop	{r7, pc}
 80024c4:	40022000 	.word	0x40022000
 80024c8:	00001388 	.word	0x00001388
 80024cc:	40021000 	.word	0x40021000
 80024d0:	fffff0ff 	.word	0xfffff0ff
 80024d4:	ffff8fff 	.word	0xffff8fff
 80024d8:	08006ea8 	.word	0x08006ea8
 80024dc:	20000004 	.word	0x20000004
 80024e0:	20000008 	.word	0x20000008

080024e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b086      	sub	sp, #24
 80024e8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80024ea:	4b3c      	ldr	r3, [pc, #240]	; (80025dc <HAL_RCC_GetSysClockFreq+0xf8>)
 80024ec:	689b      	ldr	r3, [r3, #8]
 80024ee:	2238      	movs	r2, #56	; 0x38
 80024f0:	4013      	ands	r3, r2
 80024f2:	d10f      	bne.n	8002514 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80024f4:	4b39      	ldr	r3, [pc, #228]	; (80025dc <HAL_RCC_GetSysClockFreq+0xf8>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	0adb      	lsrs	r3, r3, #11
 80024fa:	2207      	movs	r2, #7
 80024fc:	4013      	ands	r3, r2
 80024fe:	2201      	movs	r2, #1
 8002500:	409a      	lsls	r2, r3
 8002502:	0013      	movs	r3, r2
 8002504:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8002506:	6839      	ldr	r1, [r7, #0]
 8002508:	4835      	ldr	r0, [pc, #212]	; (80025e0 <HAL_RCC_GetSysClockFreq+0xfc>)
 800250a:	f7fd fe0d 	bl	8000128 <__udivsi3>
 800250e:	0003      	movs	r3, r0
 8002510:	613b      	str	r3, [r7, #16]
 8002512:	e05d      	b.n	80025d0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002514:	4b31      	ldr	r3, [pc, #196]	; (80025dc <HAL_RCC_GetSysClockFreq+0xf8>)
 8002516:	689b      	ldr	r3, [r3, #8]
 8002518:	2238      	movs	r2, #56	; 0x38
 800251a:	4013      	ands	r3, r2
 800251c:	2b08      	cmp	r3, #8
 800251e:	d102      	bne.n	8002526 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002520:	4b30      	ldr	r3, [pc, #192]	; (80025e4 <HAL_RCC_GetSysClockFreq+0x100>)
 8002522:	613b      	str	r3, [r7, #16]
 8002524:	e054      	b.n	80025d0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002526:	4b2d      	ldr	r3, [pc, #180]	; (80025dc <HAL_RCC_GetSysClockFreq+0xf8>)
 8002528:	689b      	ldr	r3, [r3, #8]
 800252a:	2238      	movs	r2, #56	; 0x38
 800252c:	4013      	ands	r3, r2
 800252e:	2b10      	cmp	r3, #16
 8002530:	d138      	bne.n	80025a4 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8002532:	4b2a      	ldr	r3, [pc, #168]	; (80025dc <HAL_RCC_GetSysClockFreq+0xf8>)
 8002534:	68db      	ldr	r3, [r3, #12]
 8002536:	2203      	movs	r2, #3
 8002538:	4013      	ands	r3, r2
 800253a:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800253c:	4b27      	ldr	r3, [pc, #156]	; (80025dc <HAL_RCC_GetSysClockFreq+0xf8>)
 800253e:	68db      	ldr	r3, [r3, #12]
 8002540:	091b      	lsrs	r3, r3, #4
 8002542:	2207      	movs	r2, #7
 8002544:	4013      	ands	r3, r2
 8002546:	3301      	adds	r3, #1
 8002548:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	2b03      	cmp	r3, #3
 800254e:	d10d      	bne.n	800256c <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002550:	68b9      	ldr	r1, [r7, #8]
 8002552:	4824      	ldr	r0, [pc, #144]	; (80025e4 <HAL_RCC_GetSysClockFreq+0x100>)
 8002554:	f7fd fde8 	bl	8000128 <__udivsi3>
 8002558:	0003      	movs	r3, r0
 800255a:	0019      	movs	r1, r3
 800255c:	4b1f      	ldr	r3, [pc, #124]	; (80025dc <HAL_RCC_GetSysClockFreq+0xf8>)
 800255e:	68db      	ldr	r3, [r3, #12]
 8002560:	0a1b      	lsrs	r3, r3, #8
 8002562:	227f      	movs	r2, #127	; 0x7f
 8002564:	4013      	ands	r3, r2
 8002566:	434b      	muls	r3, r1
 8002568:	617b      	str	r3, [r7, #20]
        break;
 800256a:	e00d      	b.n	8002588 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 800256c:	68b9      	ldr	r1, [r7, #8]
 800256e:	481c      	ldr	r0, [pc, #112]	; (80025e0 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002570:	f7fd fdda 	bl	8000128 <__udivsi3>
 8002574:	0003      	movs	r3, r0
 8002576:	0019      	movs	r1, r3
 8002578:	4b18      	ldr	r3, [pc, #96]	; (80025dc <HAL_RCC_GetSysClockFreq+0xf8>)
 800257a:	68db      	ldr	r3, [r3, #12]
 800257c:	0a1b      	lsrs	r3, r3, #8
 800257e:	227f      	movs	r2, #127	; 0x7f
 8002580:	4013      	ands	r3, r2
 8002582:	434b      	muls	r3, r1
 8002584:	617b      	str	r3, [r7, #20]
        break;
 8002586:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8002588:	4b14      	ldr	r3, [pc, #80]	; (80025dc <HAL_RCC_GetSysClockFreq+0xf8>)
 800258a:	68db      	ldr	r3, [r3, #12]
 800258c:	0f5b      	lsrs	r3, r3, #29
 800258e:	2207      	movs	r2, #7
 8002590:	4013      	ands	r3, r2
 8002592:	3301      	adds	r3, #1
 8002594:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8002596:	6879      	ldr	r1, [r7, #4]
 8002598:	6978      	ldr	r0, [r7, #20]
 800259a:	f7fd fdc5 	bl	8000128 <__udivsi3>
 800259e:	0003      	movs	r3, r0
 80025a0:	613b      	str	r3, [r7, #16]
 80025a2:	e015      	b.n	80025d0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80025a4:	4b0d      	ldr	r3, [pc, #52]	; (80025dc <HAL_RCC_GetSysClockFreq+0xf8>)
 80025a6:	689b      	ldr	r3, [r3, #8]
 80025a8:	2238      	movs	r2, #56	; 0x38
 80025aa:	4013      	ands	r3, r2
 80025ac:	2b20      	cmp	r3, #32
 80025ae:	d103      	bne.n	80025b8 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80025b0:	2380      	movs	r3, #128	; 0x80
 80025b2:	021b      	lsls	r3, r3, #8
 80025b4:	613b      	str	r3, [r7, #16]
 80025b6:	e00b      	b.n	80025d0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80025b8:	4b08      	ldr	r3, [pc, #32]	; (80025dc <HAL_RCC_GetSysClockFreq+0xf8>)
 80025ba:	689b      	ldr	r3, [r3, #8]
 80025bc:	2238      	movs	r2, #56	; 0x38
 80025be:	4013      	ands	r3, r2
 80025c0:	2b18      	cmp	r3, #24
 80025c2:	d103      	bne.n	80025cc <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80025c4:	23fa      	movs	r3, #250	; 0xfa
 80025c6:	01db      	lsls	r3, r3, #7
 80025c8:	613b      	str	r3, [r7, #16]
 80025ca:	e001      	b.n	80025d0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80025cc:	2300      	movs	r3, #0
 80025ce:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80025d0:	693b      	ldr	r3, [r7, #16]
}
 80025d2:	0018      	movs	r0, r3
 80025d4:	46bd      	mov	sp, r7
 80025d6:	b006      	add	sp, #24
 80025d8:	bd80      	pop	{r7, pc}
 80025da:	46c0      	nop			; (mov r8, r8)
 80025dc:	40021000 	.word	0x40021000
 80025e0:	00f42400 	.word	0x00f42400
 80025e4:	007a1200 	.word	0x007a1200

080025e8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80025ec:	4b02      	ldr	r3, [pc, #8]	; (80025f8 <HAL_RCC_GetHCLKFreq+0x10>)
 80025ee:	681b      	ldr	r3, [r3, #0]
}
 80025f0:	0018      	movs	r0, r3
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd80      	pop	{r7, pc}
 80025f6:	46c0      	nop			; (mov r8, r8)
 80025f8:	20000004 	.word	0x20000004

080025fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80025fc:	b5b0      	push	{r4, r5, r7, lr}
 80025fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002600:	f7ff fff2 	bl	80025e8 <HAL_RCC_GetHCLKFreq>
 8002604:	0004      	movs	r4, r0
 8002606:	f7ff fb3f 	bl	8001c88 <LL_RCC_GetAPB1Prescaler>
 800260a:	0003      	movs	r3, r0
 800260c:	0b1a      	lsrs	r2, r3, #12
 800260e:	4b05      	ldr	r3, [pc, #20]	; (8002624 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002610:	0092      	lsls	r2, r2, #2
 8002612:	58d3      	ldr	r3, [r2, r3]
 8002614:	221f      	movs	r2, #31
 8002616:	4013      	ands	r3, r2
 8002618:	40dc      	lsrs	r4, r3
 800261a:	0023      	movs	r3, r4
}
 800261c:	0018      	movs	r0, r3
 800261e:	46bd      	mov	sp, r7
 8002620:	bdb0      	pop	{r4, r5, r7, pc}
 8002622:	46c0      	nop			; (mov r8, r8)
 8002624:	08006ee8 	.word	0x08006ee8

08002628 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b086      	sub	sp, #24
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8002630:	2313      	movs	r3, #19
 8002632:	18fb      	adds	r3, r7, r3
 8002634:	2200      	movs	r2, #0
 8002636:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002638:	2312      	movs	r3, #18
 800263a:	18fb      	adds	r3, r7, r3
 800263c:	2200      	movs	r2, #0
 800263e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681a      	ldr	r2, [r3, #0]
 8002644:	2380      	movs	r3, #128	; 0x80
 8002646:	029b      	lsls	r3, r3, #10
 8002648:	4013      	ands	r3, r2
 800264a:	d100      	bne.n	800264e <HAL_RCCEx_PeriphCLKConfig+0x26>
 800264c:	e0a3      	b.n	8002796 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800264e:	2011      	movs	r0, #17
 8002650:	183b      	adds	r3, r7, r0
 8002652:	2200      	movs	r2, #0
 8002654:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002656:	4bc3      	ldr	r3, [pc, #780]	; (8002964 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002658:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800265a:	2380      	movs	r3, #128	; 0x80
 800265c:	055b      	lsls	r3, r3, #21
 800265e:	4013      	ands	r3, r2
 8002660:	d110      	bne.n	8002684 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002662:	4bc0      	ldr	r3, [pc, #768]	; (8002964 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002664:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002666:	4bbf      	ldr	r3, [pc, #764]	; (8002964 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002668:	2180      	movs	r1, #128	; 0x80
 800266a:	0549      	lsls	r1, r1, #21
 800266c:	430a      	orrs	r2, r1
 800266e:	63da      	str	r2, [r3, #60]	; 0x3c
 8002670:	4bbc      	ldr	r3, [pc, #752]	; (8002964 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002672:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002674:	2380      	movs	r3, #128	; 0x80
 8002676:	055b      	lsls	r3, r3, #21
 8002678:	4013      	ands	r3, r2
 800267a:	60bb      	str	r3, [r7, #8]
 800267c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800267e:	183b      	adds	r3, r7, r0
 8002680:	2201      	movs	r2, #1
 8002682:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002684:	4bb8      	ldr	r3, [pc, #736]	; (8002968 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8002686:	681a      	ldr	r2, [r3, #0]
 8002688:	4bb7      	ldr	r3, [pc, #732]	; (8002968 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 800268a:	2180      	movs	r1, #128	; 0x80
 800268c:	0049      	lsls	r1, r1, #1
 800268e:	430a      	orrs	r2, r1
 8002690:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002692:	f7fe ff77 	bl	8001584 <HAL_GetTick>
 8002696:	0003      	movs	r3, r0
 8002698:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800269a:	e00b      	b.n	80026b4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800269c:	f7fe ff72 	bl	8001584 <HAL_GetTick>
 80026a0:	0002      	movs	r2, r0
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	1ad3      	subs	r3, r2, r3
 80026a6:	2b02      	cmp	r3, #2
 80026a8:	d904      	bls.n	80026b4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 80026aa:	2313      	movs	r3, #19
 80026ac:	18fb      	adds	r3, r7, r3
 80026ae:	2203      	movs	r2, #3
 80026b0:	701a      	strb	r2, [r3, #0]
        break;
 80026b2:	e005      	b.n	80026c0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80026b4:	4bac      	ldr	r3, [pc, #688]	; (8002968 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80026b6:	681a      	ldr	r2, [r3, #0]
 80026b8:	2380      	movs	r3, #128	; 0x80
 80026ba:	005b      	lsls	r3, r3, #1
 80026bc:	4013      	ands	r3, r2
 80026be:	d0ed      	beq.n	800269c <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 80026c0:	2313      	movs	r3, #19
 80026c2:	18fb      	adds	r3, r7, r3
 80026c4:	781b      	ldrb	r3, [r3, #0]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d154      	bne.n	8002774 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80026ca:	4ba6      	ldr	r3, [pc, #664]	; (8002964 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80026cc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80026ce:	23c0      	movs	r3, #192	; 0xc0
 80026d0:	009b      	lsls	r3, r3, #2
 80026d2:	4013      	ands	r3, r2
 80026d4:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80026d6:	697b      	ldr	r3, [r7, #20]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d019      	beq.n	8002710 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026e0:	697a      	ldr	r2, [r7, #20]
 80026e2:	429a      	cmp	r2, r3
 80026e4:	d014      	beq.n	8002710 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80026e6:	4b9f      	ldr	r3, [pc, #636]	; (8002964 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80026e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026ea:	4aa0      	ldr	r2, [pc, #640]	; (800296c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80026ec:	4013      	ands	r3, r2
 80026ee:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80026f0:	4b9c      	ldr	r3, [pc, #624]	; (8002964 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80026f2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80026f4:	4b9b      	ldr	r3, [pc, #620]	; (8002964 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80026f6:	2180      	movs	r1, #128	; 0x80
 80026f8:	0249      	lsls	r1, r1, #9
 80026fa:	430a      	orrs	r2, r1
 80026fc:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 80026fe:	4b99      	ldr	r3, [pc, #612]	; (8002964 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002700:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002702:	4b98      	ldr	r3, [pc, #608]	; (8002964 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002704:	499a      	ldr	r1, [pc, #616]	; (8002970 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8002706:	400a      	ands	r2, r1
 8002708:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800270a:	4b96      	ldr	r3, [pc, #600]	; (8002964 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800270c:	697a      	ldr	r2, [r7, #20]
 800270e:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002710:	697b      	ldr	r3, [r7, #20]
 8002712:	2201      	movs	r2, #1
 8002714:	4013      	ands	r3, r2
 8002716:	d016      	beq.n	8002746 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002718:	f7fe ff34 	bl	8001584 <HAL_GetTick>
 800271c:	0003      	movs	r3, r0
 800271e:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002720:	e00c      	b.n	800273c <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002722:	f7fe ff2f 	bl	8001584 <HAL_GetTick>
 8002726:	0002      	movs	r2, r0
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	1ad3      	subs	r3, r2, r3
 800272c:	4a91      	ldr	r2, [pc, #580]	; (8002974 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d904      	bls.n	800273c <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8002732:	2313      	movs	r3, #19
 8002734:	18fb      	adds	r3, r7, r3
 8002736:	2203      	movs	r2, #3
 8002738:	701a      	strb	r2, [r3, #0]
            break;
 800273a:	e004      	b.n	8002746 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800273c:	4b89      	ldr	r3, [pc, #548]	; (8002964 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800273e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002740:	2202      	movs	r2, #2
 8002742:	4013      	ands	r3, r2
 8002744:	d0ed      	beq.n	8002722 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8002746:	2313      	movs	r3, #19
 8002748:	18fb      	adds	r3, r7, r3
 800274a:	781b      	ldrb	r3, [r3, #0]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d10a      	bne.n	8002766 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002750:	4b84      	ldr	r3, [pc, #528]	; (8002964 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002752:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002754:	4a85      	ldr	r2, [pc, #532]	; (800296c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8002756:	4013      	ands	r3, r2
 8002758:	0019      	movs	r1, r3
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800275e:	4b81      	ldr	r3, [pc, #516]	; (8002964 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002760:	430a      	orrs	r2, r1
 8002762:	65da      	str	r2, [r3, #92]	; 0x5c
 8002764:	e00c      	b.n	8002780 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002766:	2312      	movs	r3, #18
 8002768:	18fb      	adds	r3, r7, r3
 800276a:	2213      	movs	r2, #19
 800276c:	18ba      	adds	r2, r7, r2
 800276e:	7812      	ldrb	r2, [r2, #0]
 8002770:	701a      	strb	r2, [r3, #0]
 8002772:	e005      	b.n	8002780 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002774:	2312      	movs	r3, #18
 8002776:	18fb      	adds	r3, r7, r3
 8002778:	2213      	movs	r2, #19
 800277a:	18ba      	adds	r2, r7, r2
 800277c:	7812      	ldrb	r2, [r2, #0]
 800277e:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002780:	2311      	movs	r3, #17
 8002782:	18fb      	adds	r3, r7, r3
 8002784:	781b      	ldrb	r3, [r3, #0]
 8002786:	2b01      	cmp	r3, #1
 8002788:	d105      	bne.n	8002796 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800278a:	4b76      	ldr	r3, [pc, #472]	; (8002964 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800278c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800278e:	4b75      	ldr	r3, [pc, #468]	; (8002964 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002790:	4979      	ldr	r1, [pc, #484]	; (8002978 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 8002792:	400a      	ands	r2, r1
 8002794:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	2201      	movs	r2, #1
 800279c:	4013      	ands	r3, r2
 800279e:	d009      	beq.n	80027b4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80027a0:	4b70      	ldr	r3, [pc, #448]	; (8002964 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80027a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027a4:	2203      	movs	r2, #3
 80027a6:	4393      	bics	r3, r2
 80027a8:	0019      	movs	r1, r3
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	685a      	ldr	r2, [r3, #4]
 80027ae:	4b6d      	ldr	r3, [pc, #436]	; (8002964 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80027b0:	430a      	orrs	r2, r1
 80027b2:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	2202      	movs	r2, #2
 80027ba:	4013      	ands	r3, r2
 80027bc:	d009      	beq.n	80027d2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80027be:	4b69      	ldr	r3, [pc, #420]	; (8002964 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80027c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027c2:	220c      	movs	r2, #12
 80027c4:	4393      	bics	r3, r2
 80027c6:	0019      	movs	r1, r3
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	689a      	ldr	r2, [r3, #8]
 80027cc:	4b65      	ldr	r3, [pc, #404]	; (8002964 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80027ce:	430a      	orrs	r2, r1
 80027d0:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	2210      	movs	r2, #16
 80027d8:	4013      	ands	r3, r2
 80027da:	d009      	beq.n	80027f0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80027dc:	4b61      	ldr	r3, [pc, #388]	; (8002964 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80027de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027e0:	4a66      	ldr	r2, [pc, #408]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x354>)
 80027e2:	4013      	ands	r3, r2
 80027e4:	0019      	movs	r1, r3
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	68da      	ldr	r2, [r3, #12]
 80027ea:	4b5e      	ldr	r3, [pc, #376]	; (8002964 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80027ec:	430a      	orrs	r2, r1
 80027ee:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681a      	ldr	r2, [r3, #0]
 80027f4:	2380      	movs	r3, #128	; 0x80
 80027f6:	009b      	lsls	r3, r3, #2
 80027f8:	4013      	ands	r3, r2
 80027fa:	d009      	beq.n	8002810 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80027fc:	4b59      	ldr	r3, [pc, #356]	; (8002964 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80027fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002800:	4a5f      	ldr	r2, [pc, #380]	; (8002980 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002802:	4013      	ands	r3, r2
 8002804:	0019      	movs	r1, r3
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	699a      	ldr	r2, [r3, #24]
 800280a:	4b56      	ldr	r3, [pc, #344]	; (8002964 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800280c:	430a      	orrs	r2, r1
 800280e:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681a      	ldr	r2, [r3, #0]
 8002814:	2380      	movs	r3, #128	; 0x80
 8002816:	00db      	lsls	r3, r3, #3
 8002818:	4013      	ands	r3, r2
 800281a:	d009      	beq.n	8002830 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800281c:	4b51      	ldr	r3, [pc, #324]	; (8002964 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800281e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002820:	4a58      	ldr	r2, [pc, #352]	; (8002984 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002822:	4013      	ands	r3, r2
 8002824:	0019      	movs	r1, r3
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	69da      	ldr	r2, [r3, #28]
 800282a:	4b4e      	ldr	r3, [pc, #312]	; (8002964 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800282c:	430a      	orrs	r2, r1
 800282e:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	2220      	movs	r2, #32
 8002836:	4013      	ands	r3, r2
 8002838:	d009      	beq.n	800284e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800283a:	4b4a      	ldr	r3, [pc, #296]	; (8002964 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800283c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800283e:	4a52      	ldr	r2, [pc, #328]	; (8002988 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8002840:	4013      	ands	r3, r2
 8002842:	0019      	movs	r1, r3
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	691a      	ldr	r2, [r3, #16]
 8002848:	4b46      	ldr	r3, [pc, #280]	; (8002964 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800284a:	430a      	orrs	r2, r1
 800284c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681a      	ldr	r2, [r3, #0]
 8002852:	2380      	movs	r3, #128	; 0x80
 8002854:	01db      	lsls	r3, r3, #7
 8002856:	4013      	ands	r3, r2
 8002858:	d015      	beq.n	8002886 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800285a:	4b42      	ldr	r3, [pc, #264]	; (8002964 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800285c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800285e:	009b      	lsls	r3, r3, #2
 8002860:	0899      	lsrs	r1, r3, #2
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6a1a      	ldr	r2, [r3, #32]
 8002866:	4b3f      	ldr	r3, [pc, #252]	; (8002964 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002868:	430a      	orrs	r2, r1
 800286a:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6a1a      	ldr	r2, [r3, #32]
 8002870:	2380      	movs	r3, #128	; 0x80
 8002872:	05db      	lsls	r3, r3, #23
 8002874:	429a      	cmp	r2, r3
 8002876:	d106      	bne.n	8002886 <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002878:	4b3a      	ldr	r3, [pc, #232]	; (8002964 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800287a:	68da      	ldr	r2, [r3, #12]
 800287c:	4b39      	ldr	r3, [pc, #228]	; (8002964 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800287e:	2180      	movs	r1, #128	; 0x80
 8002880:	0249      	lsls	r1, r1, #9
 8002882:	430a      	orrs	r2, r1
 8002884:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681a      	ldr	r2, [r3, #0]
 800288a:	2380      	movs	r3, #128	; 0x80
 800288c:	031b      	lsls	r3, r3, #12
 800288e:	4013      	ands	r3, r2
 8002890:	d009      	beq.n	80028a6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002892:	4b34      	ldr	r3, [pc, #208]	; (8002964 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002894:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002896:	2240      	movs	r2, #64	; 0x40
 8002898:	4393      	bics	r3, r2
 800289a:	0019      	movs	r1, r3
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80028a0:	4b30      	ldr	r3, [pc, #192]	; (8002964 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80028a2:	430a      	orrs	r2, r1
 80028a4:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681a      	ldr	r2, [r3, #0]
 80028aa:	2380      	movs	r3, #128	; 0x80
 80028ac:	039b      	lsls	r3, r3, #14
 80028ae:	4013      	ands	r3, r2
 80028b0:	d016      	beq.n	80028e0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80028b2:	4b2c      	ldr	r3, [pc, #176]	; (8002964 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80028b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028b6:	4a35      	ldr	r2, [pc, #212]	; (800298c <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80028b8:	4013      	ands	r3, r2
 80028ba:	0019      	movs	r1, r3
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80028c0:	4b28      	ldr	r3, [pc, #160]	; (8002964 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80028c2:	430a      	orrs	r2, r1
 80028c4:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80028ca:	2380      	movs	r3, #128	; 0x80
 80028cc:	03db      	lsls	r3, r3, #15
 80028ce:	429a      	cmp	r2, r3
 80028d0:	d106      	bne.n	80028e0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80028d2:	4b24      	ldr	r3, [pc, #144]	; (8002964 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80028d4:	68da      	ldr	r2, [r3, #12]
 80028d6:	4b23      	ldr	r3, [pc, #140]	; (8002964 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80028d8:	2180      	movs	r1, #128	; 0x80
 80028da:	0449      	lsls	r1, r1, #17
 80028dc:	430a      	orrs	r2, r1
 80028de:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681a      	ldr	r2, [r3, #0]
 80028e4:	2380      	movs	r3, #128	; 0x80
 80028e6:	03db      	lsls	r3, r3, #15
 80028e8:	4013      	ands	r3, r2
 80028ea:	d016      	beq.n	800291a <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80028ec:	4b1d      	ldr	r3, [pc, #116]	; (8002964 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80028ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028f0:	4a27      	ldr	r2, [pc, #156]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 80028f2:	4013      	ands	r3, r2
 80028f4:	0019      	movs	r1, r3
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028fa:	4b1a      	ldr	r3, [pc, #104]	; (8002964 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80028fc:	430a      	orrs	r2, r1
 80028fe:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002904:	2380      	movs	r3, #128	; 0x80
 8002906:	045b      	lsls	r3, r3, #17
 8002908:	429a      	cmp	r2, r3
 800290a:	d106      	bne.n	800291a <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800290c:	4b15      	ldr	r3, [pc, #84]	; (8002964 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800290e:	68da      	ldr	r2, [r3, #12]
 8002910:	4b14      	ldr	r3, [pc, #80]	; (8002964 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002912:	2180      	movs	r1, #128	; 0x80
 8002914:	0449      	lsls	r1, r1, #17
 8002916:	430a      	orrs	r2, r1
 8002918:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681a      	ldr	r2, [r3, #0]
 800291e:	2380      	movs	r3, #128	; 0x80
 8002920:	011b      	lsls	r3, r3, #4
 8002922:	4013      	ands	r3, r2
 8002924:	d016      	beq.n	8002954 <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8002926:	4b0f      	ldr	r3, [pc, #60]	; (8002964 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002928:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800292a:	4a1a      	ldr	r2, [pc, #104]	; (8002994 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 800292c:	4013      	ands	r3, r2
 800292e:	0019      	movs	r1, r3
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	695a      	ldr	r2, [r3, #20]
 8002934:	4b0b      	ldr	r3, [pc, #44]	; (8002964 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002936:	430a      	orrs	r2, r1
 8002938:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	695a      	ldr	r2, [r3, #20]
 800293e:	2380      	movs	r3, #128	; 0x80
 8002940:	01db      	lsls	r3, r3, #7
 8002942:	429a      	cmp	r2, r3
 8002944:	d106      	bne.n	8002954 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002946:	4b07      	ldr	r3, [pc, #28]	; (8002964 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002948:	68da      	ldr	r2, [r3, #12]
 800294a:	4b06      	ldr	r3, [pc, #24]	; (8002964 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800294c:	2180      	movs	r1, #128	; 0x80
 800294e:	0249      	lsls	r1, r1, #9
 8002950:	430a      	orrs	r2, r1
 8002952:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8002954:	2312      	movs	r3, #18
 8002956:	18fb      	adds	r3, r7, r3
 8002958:	781b      	ldrb	r3, [r3, #0]
}
 800295a:	0018      	movs	r0, r3
 800295c:	46bd      	mov	sp, r7
 800295e:	b006      	add	sp, #24
 8002960:	bd80      	pop	{r7, pc}
 8002962:	46c0      	nop			; (mov r8, r8)
 8002964:	40021000 	.word	0x40021000
 8002968:	40007000 	.word	0x40007000
 800296c:	fffffcff 	.word	0xfffffcff
 8002970:	fffeffff 	.word	0xfffeffff
 8002974:	00001388 	.word	0x00001388
 8002978:	efffffff 	.word	0xefffffff
 800297c:	fffff3ff 	.word	0xfffff3ff
 8002980:	fff3ffff 	.word	0xfff3ffff
 8002984:	ffcfffff 	.word	0xffcfffff
 8002988:	ffffcfff 	.word	0xffffcfff
 800298c:	ffbfffff 	.word	0xffbfffff
 8002990:	feffffff 	.word	0xfeffffff
 8002994:	ffff3fff 	.word	0xffff3fff

08002998 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b084      	sub	sp, #16
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d101      	bne.n	80029aa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80029a6:	2301      	movs	r3, #1
 80029a8:	e0a8      	b.n	8002afc <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d109      	bne.n	80029c6 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	685a      	ldr	r2, [r3, #4]
 80029b6:	2382      	movs	r3, #130	; 0x82
 80029b8:	005b      	lsls	r3, r3, #1
 80029ba:	429a      	cmp	r2, r3
 80029bc:	d009      	beq.n	80029d2 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2200      	movs	r2, #0
 80029c2:	61da      	str	r2, [r3, #28]
 80029c4:	e005      	b.n	80029d2 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2200      	movs	r2, #0
 80029ca:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2200      	movs	r2, #0
 80029d0:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2200      	movs	r2, #0
 80029d6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	225d      	movs	r2, #93	; 0x5d
 80029dc:	5c9b      	ldrb	r3, [r3, r2]
 80029de:	b2db      	uxtb	r3, r3
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d107      	bne.n	80029f4 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	225c      	movs	r2, #92	; 0x5c
 80029e8:	2100      	movs	r1, #0
 80029ea:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	0018      	movs	r0, r3
 80029f0:	f7fe fa7e 	bl	8000ef0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	225d      	movs	r2, #93	; 0x5d
 80029f8:	2102      	movs	r1, #2
 80029fa:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	681a      	ldr	r2, [r3, #0]
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	2140      	movs	r1, #64	; 0x40
 8002a08:	438a      	bics	r2, r1
 8002a0a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	68da      	ldr	r2, [r3, #12]
 8002a10:	23e0      	movs	r3, #224	; 0xe0
 8002a12:	00db      	lsls	r3, r3, #3
 8002a14:	429a      	cmp	r2, r3
 8002a16:	d902      	bls.n	8002a1e <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002a18:	2300      	movs	r3, #0
 8002a1a:	60fb      	str	r3, [r7, #12]
 8002a1c:	e002      	b.n	8002a24 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002a1e:	2380      	movs	r3, #128	; 0x80
 8002a20:	015b      	lsls	r3, r3, #5
 8002a22:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	68da      	ldr	r2, [r3, #12]
 8002a28:	23f0      	movs	r3, #240	; 0xf0
 8002a2a:	011b      	lsls	r3, r3, #4
 8002a2c:	429a      	cmp	r2, r3
 8002a2e:	d008      	beq.n	8002a42 <HAL_SPI_Init+0xaa>
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	68da      	ldr	r2, [r3, #12]
 8002a34:	23e0      	movs	r3, #224	; 0xe0
 8002a36:	00db      	lsls	r3, r3, #3
 8002a38:	429a      	cmp	r2, r3
 8002a3a:	d002      	beq.n	8002a42 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2200      	movs	r2, #0
 8002a40:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	685a      	ldr	r2, [r3, #4]
 8002a46:	2382      	movs	r3, #130	; 0x82
 8002a48:	005b      	lsls	r3, r3, #1
 8002a4a:	401a      	ands	r2, r3
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6899      	ldr	r1, [r3, #8]
 8002a50:	2384      	movs	r3, #132	; 0x84
 8002a52:	021b      	lsls	r3, r3, #8
 8002a54:	400b      	ands	r3, r1
 8002a56:	431a      	orrs	r2, r3
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	691b      	ldr	r3, [r3, #16]
 8002a5c:	2102      	movs	r1, #2
 8002a5e:	400b      	ands	r3, r1
 8002a60:	431a      	orrs	r2, r3
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	695b      	ldr	r3, [r3, #20]
 8002a66:	2101      	movs	r1, #1
 8002a68:	400b      	ands	r3, r1
 8002a6a:	431a      	orrs	r2, r3
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6999      	ldr	r1, [r3, #24]
 8002a70:	2380      	movs	r3, #128	; 0x80
 8002a72:	009b      	lsls	r3, r3, #2
 8002a74:	400b      	ands	r3, r1
 8002a76:	431a      	orrs	r2, r3
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	69db      	ldr	r3, [r3, #28]
 8002a7c:	2138      	movs	r1, #56	; 0x38
 8002a7e:	400b      	ands	r3, r1
 8002a80:	431a      	orrs	r2, r3
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6a1b      	ldr	r3, [r3, #32]
 8002a86:	2180      	movs	r1, #128	; 0x80
 8002a88:	400b      	ands	r3, r1
 8002a8a:	431a      	orrs	r2, r3
 8002a8c:	0011      	movs	r1, r2
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002a92:	2380      	movs	r3, #128	; 0x80
 8002a94:	019b      	lsls	r3, r3, #6
 8002a96:	401a      	ands	r2, r3
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	430a      	orrs	r2, r1
 8002a9e:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	699b      	ldr	r3, [r3, #24]
 8002aa4:	0c1b      	lsrs	r3, r3, #16
 8002aa6:	2204      	movs	r2, #4
 8002aa8:	401a      	ands	r2, r3
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aae:	2110      	movs	r1, #16
 8002ab0:	400b      	ands	r3, r1
 8002ab2:	431a      	orrs	r2, r3
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ab8:	2108      	movs	r1, #8
 8002aba:	400b      	ands	r3, r1
 8002abc:	431a      	orrs	r2, r3
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	68d9      	ldr	r1, [r3, #12]
 8002ac2:	23f0      	movs	r3, #240	; 0xf0
 8002ac4:	011b      	lsls	r3, r3, #4
 8002ac6:	400b      	ands	r3, r1
 8002ac8:	431a      	orrs	r2, r3
 8002aca:	0011      	movs	r1, r2
 8002acc:	68fa      	ldr	r2, [r7, #12]
 8002ace:	2380      	movs	r3, #128	; 0x80
 8002ad0:	015b      	lsls	r3, r3, #5
 8002ad2:	401a      	ands	r2, r3
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	430a      	orrs	r2, r1
 8002ada:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	69da      	ldr	r2, [r3, #28]
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4907      	ldr	r1, [pc, #28]	; (8002b04 <HAL_SPI_Init+0x16c>)
 8002ae8:	400a      	ands	r2, r1
 8002aea:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2200      	movs	r2, #0
 8002af0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	225d      	movs	r2, #93	; 0x5d
 8002af6:	2101      	movs	r1, #1
 8002af8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002afa:	2300      	movs	r3, #0
}
 8002afc:	0018      	movs	r0, r3
 8002afe:	46bd      	mov	sp, r7
 8002b00:	b004      	add	sp, #16
 8002b02:	bd80      	pop	{r7, pc}
 8002b04:	fffff7ff 	.word	0xfffff7ff

08002b08 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b08a      	sub	sp, #40	; 0x28
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	60f8      	str	r0, [r7, #12]
 8002b10:	60b9      	str	r1, [r7, #8]
 8002b12:	607a      	str	r2, [r7, #4]
 8002b14:	001a      	movs	r2, r3
 8002b16:	1cbb      	adds	r3, r7, #2
 8002b18:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002b1e:	2323      	movs	r3, #35	; 0x23
 8002b20:	18fb      	adds	r3, r7, r3
 8002b22:	2200      	movs	r2, #0
 8002b24:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	225c      	movs	r2, #92	; 0x5c
 8002b2a:	5c9b      	ldrb	r3, [r3, r2]
 8002b2c:	2b01      	cmp	r3, #1
 8002b2e:	d101      	bne.n	8002b34 <HAL_SPI_TransmitReceive+0x2c>
 8002b30:	2302      	movs	r3, #2
 8002b32:	e1b5      	b.n	8002ea0 <HAL_SPI_TransmitReceive+0x398>
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	225c      	movs	r2, #92	; 0x5c
 8002b38:	2101      	movs	r1, #1
 8002b3a:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002b3c:	f7fe fd22 	bl	8001584 <HAL_GetTick>
 8002b40:	0003      	movs	r3, r0
 8002b42:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002b44:	201b      	movs	r0, #27
 8002b46:	183b      	adds	r3, r7, r0
 8002b48:	68fa      	ldr	r2, [r7, #12]
 8002b4a:	215d      	movs	r1, #93	; 0x5d
 8002b4c:	5c52      	ldrb	r2, [r2, r1]
 8002b4e:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8002b56:	2312      	movs	r3, #18
 8002b58:	18fb      	adds	r3, r7, r3
 8002b5a:	1cba      	adds	r2, r7, #2
 8002b5c:	8812      	ldrh	r2, [r2, #0]
 8002b5e:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002b60:	183b      	adds	r3, r7, r0
 8002b62:	781b      	ldrb	r3, [r3, #0]
 8002b64:	2b01      	cmp	r3, #1
 8002b66:	d011      	beq.n	8002b8c <HAL_SPI_TransmitReceive+0x84>
 8002b68:	697a      	ldr	r2, [r7, #20]
 8002b6a:	2382      	movs	r3, #130	; 0x82
 8002b6c:	005b      	lsls	r3, r3, #1
 8002b6e:	429a      	cmp	r2, r3
 8002b70:	d107      	bne.n	8002b82 <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	689b      	ldr	r3, [r3, #8]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d103      	bne.n	8002b82 <HAL_SPI_TransmitReceive+0x7a>
 8002b7a:	183b      	adds	r3, r7, r0
 8002b7c:	781b      	ldrb	r3, [r3, #0]
 8002b7e:	2b04      	cmp	r3, #4
 8002b80:	d004      	beq.n	8002b8c <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 8002b82:	2323      	movs	r3, #35	; 0x23
 8002b84:	18fb      	adds	r3, r7, r3
 8002b86:	2202      	movs	r2, #2
 8002b88:	701a      	strb	r2, [r3, #0]
    goto error;
 8002b8a:	e17e      	b.n	8002e8a <HAL_SPI_TransmitReceive+0x382>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002b8c:	68bb      	ldr	r3, [r7, #8]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d006      	beq.n	8002ba0 <HAL_SPI_TransmitReceive+0x98>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d003      	beq.n	8002ba0 <HAL_SPI_TransmitReceive+0x98>
 8002b98:	1cbb      	adds	r3, r7, #2
 8002b9a:	881b      	ldrh	r3, [r3, #0]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d104      	bne.n	8002baa <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8002ba0:	2323      	movs	r3, #35	; 0x23
 8002ba2:	18fb      	adds	r3, r7, r3
 8002ba4:	2201      	movs	r2, #1
 8002ba6:	701a      	strb	r2, [r3, #0]
    goto error;
 8002ba8:	e16f      	b.n	8002e8a <HAL_SPI_TransmitReceive+0x382>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	225d      	movs	r2, #93	; 0x5d
 8002bae:	5c9b      	ldrb	r3, [r3, r2]
 8002bb0:	b2db      	uxtb	r3, r3
 8002bb2:	2b04      	cmp	r3, #4
 8002bb4:	d003      	beq.n	8002bbe <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	225d      	movs	r2, #93	; 0x5d
 8002bba:	2105      	movs	r1, #5
 8002bbc:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	687a      	ldr	r2, [r7, #4]
 8002bc8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	1cba      	adds	r2, r7, #2
 8002bce:	2146      	movs	r1, #70	; 0x46
 8002bd0:	8812      	ldrh	r2, [r2, #0]
 8002bd2:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	1cba      	adds	r2, r7, #2
 8002bd8:	2144      	movs	r1, #68	; 0x44
 8002bda:	8812      	ldrh	r2, [r2, #0]
 8002bdc:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	68ba      	ldr	r2, [r7, #8]
 8002be2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	1cba      	adds	r2, r7, #2
 8002be8:	8812      	ldrh	r2, [r2, #0]
 8002bea:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	1cba      	adds	r2, r7, #2
 8002bf0:	8812      	ldrh	r2, [r2, #0]
 8002bf2:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	68da      	ldr	r2, [r3, #12]
 8002c04:	23e0      	movs	r3, #224	; 0xe0
 8002c06:	00db      	lsls	r3, r3, #3
 8002c08:	429a      	cmp	r2, r3
 8002c0a:	d908      	bls.n	8002c1e <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	685a      	ldr	r2, [r3, #4]
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	49a4      	ldr	r1, [pc, #656]	; (8002ea8 <HAL_SPI_TransmitReceive+0x3a0>)
 8002c18:	400a      	ands	r2, r1
 8002c1a:	605a      	str	r2, [r3, #4]
 8002c1c:	e008      	b.n	8002c30 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	685a      	ldr	r2, [r3, #4]
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	2180      	movs	r1, #128	; 0x80
 8002c2a:	0149      	lsls	r1, r1, #5
 8002c2c:	430a      	orrs	r2, r1
 8002c2e:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	2240      	movs	r2, #64	; 0x40
 8002c38:	4013      	ands	r3, r2
 8002c3a:	2b40      	cmp	r3, #64	; 0x40
 8002c3c:	d007      	beq.n	8002c4e <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	681a      	ldr	r2, [r3, #0]
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	2140      	movs	r1, #64	; 0x40
 8002c4a:	430a      	orrs	r2, r1
 8002c4c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	68da      	ldr	r2, [r3, #12]
 8002c52:	23e0      	movs	r3, #224	; 0xe0
 8002c54:	00db      	lsls	r3, r3, #3
 8002c56:	429a      	cmp	r2, r3
 8002c58:	d800      	bhi.n	8002c5c <HAL_SPI_TransmitReceive+0x154>
 8002c5a:	e07f      	b.n	8002d5c <HAL_SPI_TransmitReceive+0x254>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d005      	beq.n	8002c70 <HAL_SPI_TransmitReceive+0x168>
 8002c64:	2312      	movs	r3, #18
 8002c66:	18fb      	adds	r3, r7, r3
 8002c68:	881b      	ldrh	r3, [r3, #0]
 8002c6a:	2b01      	cmp	r3, #1
 8002c6c:	d000      	beq.n	8002c70 <HAL_SPI_TransmitReceive+0x168>
 8002c6e:	e069      	b.n	8002d44 <HAL_SPI_TransmitReceive+0x23c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c74:	881a      	ldrh	r2, [r3, #0]
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c80:	1c9a      	adds	r2, r3, #2
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c8a:	b29b      	uxth	r3, r3
 8002c8c:	3b01      	subs	r3, #1
 8002c8e:	b29a      	uxth	r2, r3
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002c94:	e056      	b.n	8002d44 <HAL_SPI_TransmitReceive+0x23c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	689b      	ldr	r3, [r3, #8]
 8002c9c:	2202      	movs	r2, #2
 8002c9e:	4013      	ands	r3, r2
 8002ca0:	2b02      	cmp	r3, #2
 8002ca2:	d11b      	bne.n	8002cdc <HAL_SPI_TransmitReceive+0x1d4>
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ca8:	b29b      	uxth	r3, r3
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d016      	beq.n	8002cdc <HAL_SPI_TransmitReceive+0x1d4>
 8002cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cb0:	2b01      	cmp	r3, #1
 8002cb2:	d113      	bne.n	8002cdc <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cb8:	881a      	ldrh	r2, [r3, #0]
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cc4:	1c9a      	adds	r2, r3, #2
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002cce:	b29b      	uxth	r3, r3
 8002cd0:	3b01      	subs	r3, #1
 8002cd2:	b29a      	uxth	r2, r3
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002cd8:	2300      	movs	r3, #0
 8002cda:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	689b      	ldr	r3, [r3, #8]
 8002ce2:	2201      	movs	r2, #1
 8002ce4:	4013      	ands	r3, r2
 8002ce6:	2b01      	cmp	r3, #1
 8002ce8:	d11c      	bne.n	8002d24 <HAL_SPI_TransmitReceive+0x21c>
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	2246      	movs	r2, #70	; 0x46
 8002cee:	5a9b      	ldrh	r3, [r3, r2]
 8002cf0:	b29b      	uxth	r3, r3
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d016      	beq.n	8002d24 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	68da      	ldr	r2, [r3, #12]
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d00:	b292      	uxth	r2, r2
 8002d02:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d08:	1c9a      	adds	r2, r3, #2
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	2246      	movs	r2, #70	; 0x46
 8002d12:	5a9b      	ldrh	r3, [r3, r2]
 8002d14:	b29b      	uxth	r3, r3
 8002d16:	3b01      	subs	r3, #1
 8002d18:	b299      	uxth	r1, r3
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	2246      	movs	r2, #70	; 0x46
 8002d1e:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002d20:	2301      	movs	r3, #1
 8002d22:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002d24:	f7fe fc2e 	bl	8001584 <HAL_GetTick>
 8002d28:	0002      	movs	r2, r0
 8002d2a:	69fb      	ldr	r3, [r7, #28]
 8002d2c:	1ad3      	subs	r3, r2, r3
 8002d2e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002d30:	429a      	cmp	r2, r3
 8002d32:	d807      	bhi.n	8002d44 <HAL_SPI_TransmitReceive+0x23c>
 8002d34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d36:	3301      	adds	r3, #1
 8002d38:	d004      	beq.n	8002d44 <HAL_SPI_TransmitReceive+0x23c>
      {
        errorcode = HAL_TIMEOUT;
 8002d3a:	2323      	movs	r3, #35	; 0x23
 8002d3c:	18fb      	adds	r3, r7, r3
 8002d3e:	2203      	movs	r2, #3
 8002d40:	701a      	strb	r2, [r3, #0]
        goto error;
 8002d42:	e0a2      	b.n	8002e8a <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d48:	b29b      	uxth	r3, r3
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d1a3      	bne.n	8002c96 <HAL_SPI_TransmitReceive+0x18e>
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	2246      	movs	r2, #70	; 0x46
 8002d52:	5a9b      	ldrh	r3, [r3, r2]
 8002d54:	b29b      	uxth	r3, r3
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d19d      	bne.n	8002c96 <HAL_SPI_TransmitReceive+0x18e>
 8002d5a:	e085      	b.n	8002e68 <HAL_SPI_TransmitReceive+0x360>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d005      	beq.n	8002d70 <HAL_SPI_TransmitReceive+0x268>
 8002d64:	2312      	movs	r3, #18
 8002d66:	18fb      	adds	r3, r7, r3
 8002d68:	881b      	ldrh	r3, [r3, #0]
 8002d6a:	2b01      	cmp	r3, #1
 8002d6c:	d000      	beq.n	8002d70 <HAL_SPI_TransmitReceive+0x268>
 8002d6e:	e070      	b.n	8002e52 <HAL_SPI_TransmitReceive+0x34a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	330c      	adds	r3, #12
 8002d7a:	7812      	ldrb	r2, [r2, #0]
 8002d7c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d82:	1c5a      	adds	r2, r3, #1
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d8c:	b29b      	uxth	r3, r3
 8002d8e:	3b01      	subs	r3, #1
 8002d90:	b29a      	uxth	r2, r3
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002d96:	e05c      	b.n	8002e52 <HAL_SPI_TransmitReceive+0x34a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	689b      	ldr	r3, [r3, #8]
 8002d9e:	2202      	movs	r2, #2
 8002da0:	4013      	ands	r3, r2
 8002da2:	2b02      	cmp	r3, #2
 8002da4:	d11c      	bne.n	8002de0 <HAL_SPI_TransmitReceive+0x2d8>
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002daa:	b29b      	uxth	r3, r3
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d017      	beq.n	8002de0 <HAL_SPI_TransmitReceive+0x2d8>
 8002db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db2:	2b01      	cmp	r3, #1
 8002db4:	d114      	bne.n	8002de0 <HAL_SPI_TransmitReceive+0x2d8>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	330c      	adds	r3, #12
 8002dc0:	7812      	ldrb	r2, [r2, #0]
 8002dc2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dc8:	1c5a      	adds	r2, r3, #1
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002dd2:	b29b      	uxth	r3, r3
 8002dd4:	3b01      	subs	r3, #1
 8002dd6:	b29a      	uxth	r2, r3
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002ddc:	2300      	movs	r3, #0
 8002dde:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	689b      	ldr	r3, [r3, #8]
 8002de6:	2201      	movs	r2, #1
 8002de8:	4013      	ands	r3, r2
 8002dea:	2b01      	cmp	r3, #1
 8002dec:	d11e      	bne.n	8002e2c <HAL_SPI_TransmitReceive+0x324>
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	2246      	movs	r2, #70	; 0x46
 8002df2:	5a9b      	ldrh	r3, [r3, r2]
 8002df4:	b29b      	uxth	r3, r3
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d018      	beq.n	8002e2c <HAL_SPI_TransmitReceive+0x324>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	330c      	adds	r3, #12
 8002e00:	001a      	movs	r2, r3
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e06:	7812      	ldrb	r2, [r2, #0]
 8002e08:	b2d2      	uxtb	r2, r2
 8002e0a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e10:	1c5a      	adds	r2, r3, #1
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	2246      	movs	r2, #70	; 0x46
 8002e1a:	5a9b      	ldrh	r3, [r3, r2]
 8002e1c:	b29b      	uxth	r3, r3
 8002e1e:	3b01      	subs	r3, #1
 8002e20:	b299      	uxth	r1, r3
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	2246      	movs	r2, #70	; 0x46
 8002e26:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002e28:	2301      	movs	r3, #1
 8002e2a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002e2c:	f7fe fbaa 	bl	8001584 <HAL_GetTick>
 8002e30:	0002      	movs	r2, r0
 8002e32:	69fb      	ldr	r3, [r7, #28]
 8002e34:	1ad3      	subs	r3, r2, r3
 8002e36:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e38:	429a      	cmp	r2, r3
 8002e3a:	d802      	bhi.n	8002e42 <HAL_SPI_TransmitReceive+0x33a>
 8002e3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e3e:	3301      	adds	r3, #1
 8002e40:	d102      	bne.n	8002e48 <HAL_SPI_TransmitReceive+0x340>
 8002e42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d104      	bne.n	8002e52 <HAL_SPI_TransmitReceive+0x34a>
      {
        errorcode = HAL_TIMEOUT;
 8002e48:	2323      	movs	r3, #35	; 0x23
 8002e4a:	18fb      	adds	r3, r7, r3
 8002e4c:	2203      	movs	r2, #3
 8002e4e:	701a      	strb	r2, [r3, #0]
        goto error;
 8002e50:	e01b      	b.n	8002e8a <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e56:	b29b      	uxth	r3, r3
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d19d      	bne.n	8002d98 <HAL_SPI_TransmitReceive+0x290>
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	2246      	movs	r2, #70	; 0x46
 8002e60:	5a9b      	ldrh	r3, [r3, r2]
 8002e62:	b29b      	uxth	r3, r3
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d197      	bne.n	8002d98 <HAL_SPI_TransmitReceive+0x290>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002e68:	69fa      	ldr	r2, [r7, #28]
 8002e6a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	0018      	movs	r0, r3
 8002e70:	f000 fdbc 	bl	80039ec <SPI_EndRxTxTransaction>
 8002e74:	1e03      	subs	r3, r0, #0
 8002e76:	d007      	beq.n	8002e88 <HAL_SPI_TransmitReceive+0x380>
  {
    errorcode = HAL_ERROR;
 8002e78:	2323      	movs	r3, #35	; 0x23
 8002e7a:	18fb      	adds	r3, r7, r3
 8002e7c:	2201      	movs	r2, #1
 8002e7e:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	2220      	movs	r2, #32
 8002e84:	661a      	str	r2, [r3, #96]	; 0x60
 8002e86:	e000      	b.n	8002e8a <HAL_SPI_TransmitReceive+0x382>
  }

error :
 8002e88:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	225d      	movs	r2, #93	; 0x5d
 8002e8e:	2101      	movs	r1, #1
 8002e90:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	225c      	movs	r2, #92	; 0x5c
 8002e96:	2100      	movs	r1, #0
 8002e98:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8002e9a:	2323      	movs	r3, #35	; 0x23
 8002e9c:	18fb      	adds	r3, r7, r3
 8002e9e:	781b      	ldrb	r3, [r3, #0]
}
 8002ea0:	0018      	movs	r0, r3
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	b00a      	add	sp, #40	; 0x28
 8002ea6:	bd80      	pop	{r7, pc}
 8002ea8:	ffffefff 	.word	0xffffefff

08002eac <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b086      	sub	sp, #24
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	60f8      	str	r0, [r7, #12]
 8002eb4:	60b9      	str	r1, [r7, #8]
 8002eb6:	1dbb      	adds	r3, r7, #6
 8002eb8:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002eba:	2317      	movs	r3, #23
 8002ebc:	18fb      	adds	r3, r7, r3
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	701a      	strb	r2, [r3, #0]

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	689b      	ldr	r3, [r3, #8]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d112      	bne.n	8002ef0 <HAL_SPI_Receive_IT+0x44>
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	685a      	ldr	r2, [r3, #4]
 8002ece:	2382      	movs	r3, #130	; 0x82
 8002ed0:	005b      	lsls	r3, r3, #1
 8002ed2:	429a      	cmp	r2, r3
 8002ed4:	d10c      	bne.n	8002ef0 <HAL_SPI_Receive_IT+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	225d      	movs	r2, #93	; 0x5d
 8002eda:	2104      	movs	r1, #4
 8002edc:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 8002ede:	1dbb      	adds	r3, r7, #6
 8002ee0:	881b      	ldrh	r3, [r3, #0]
 8002ee2:	68ba      	ldr	r2, [r7, #8]
 8002ee4:	68b9      	ldr	r1, [r7, #8]
 8002ee6:	68f8      	ldr	r0, [r7, #12]
 8002ee8:	f000 f8a4 	bl	8003034 <HAL_SPI_TransmitReceive_IT>
 8002eec:	0003      	movs	r3, r0
 8002eee:	e095      	b.n	800301c <HAL_SPI_Receive_IT+0x170>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	225c      	movs	r2, #92	; 0x5c
 8002ef4:	5c9b      	ldrb	r3, [r3, r2]
 8002ef6:	2b01      	cmp	r3, #1
 8002ef8:	d101      	bne.n	8002efe <HAL_SPI_Receive_IT+0x52>
 8002efa:	2302      	movs	r3, #2
 8002efc:	e08e      	b.n	800301c <HAL_SPI_Receive_IT+0x170>
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	225c      	movs	r2, #92	; 0x5c
 8002f02:	2101      	movs	r1, #1
 8002f04:	5499      	strb	r1, [r3, r2]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	225d      	movs	r2, #93	; 0x5d
 8002f0a:	5c9b      	ldrb	r3, [r3, r2]
 8002f0c:	b2db      	uxtb	r3, r3
 8002f0e:	2b01      	cmp	r3, #1
 8002f10:	d004      	beq.n	8002f1c <HAL_SPI_Receive_IT+0x70>
  {
    errorcode = HAL_BUSY;
 8002f12:	2317      	movs	r3, #23
 8002f14:	18fb      	adds	r3, r7, r3
 8002f16:	2202      	movs	r2, #2
 8002f18:	701a      	strb	r2, [r3, #0]
    goto error;
 8002f1a:	e078      	b.n	800300e <HAL_SPI_Receive_IT+0x162>
  }

  if ((pData == NULL) || (Size == 0U))
 8002f1c:	68bb      	ldr	r3, [r7, #8]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d003      	beq.n	8002f2a <HAL_SPI_Receive_IT+0x7e>
 8002f22:	1dbb      	adds	r3, r7, #6
 8002f24:	881b      	ldrh	r3, [r3, #0]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d104      	bne.n	8002f34 <HAL_SPI_Receive_IT+0x88>
  {
    errorcode = HAL_ERROR;
 8002f2a:	2317      	movs	r3, #23
 8002f2c:	18fb      	adds	r3, r7, r3
 8002f2e:	2201      	movs	r2, #1
 8002f30:	701a      	strb	r2, [r3, #0]
    goto error;
 8002f32:	e06c      	b.n	800300e <HAL_SPI_Receive_IT+0x162>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	225d      	movs	r2, #93	; 0x5d
 8002f38:	2104      	movs	r1, #4
 8002f3a:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	2200      	movs	r2, #0
 8002f40:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	68ba      	ldr	r2, [r7, #8]
 8002f46:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	1dba      	adds	r2, r7, #6
 8002f4c:	2144      	movs	r1, #68	; 0x44
 8002f4e:	8812      	ldrh	r2, [r2, #0]
 8002f50:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	1dba      	adds	r2, r7, #6
 8002f56:	2146      	movs	r1, #70	; 0x46
 8002f58:	8812      	ldrh	r2, [r2, #0]
 8002f5a:	525a      	strh	r2, [r3, r1]

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	2200      	movs	r2, #0
 8002f60:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	2200      	movs	r2, #0
 8002f66:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	2200      	movs	r2, #0
 8002f72:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check the data size to adapt Rx threshold and the set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	68da      	ldr	r2, [r3, #12]
 8002f78:	23e0      	movs	r3, #224	; 0xe0
 8002f7a:	00db      	lsls	r3, r3, #3
 8002f7c:	429a      	cmp	r2, r3
 8002f7e:	d90b      	bls.n	8002f98 <HAL_SPI_Receive_IT+0xec>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	685a      	ldr	r2, [r3, #4]
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4926      	ldr	r1, [pc, #152]	; (8003024 <HAL_SPI_Receive_IT+0x178>)
 8002f8c:	400a      	ands	r2, r1
 8002f8e:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_16BIT;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	4a25      	ldr	r2, [pc, #148]	; (8003028 <HAL_SPI_Receive_IT+0x17c>)
 8002f94:	64da      	str	r2, [r3, #76]	; 0x4c
 8002f96:	e00b      	b.n	8002fb0 <HAL_SPI_Receive_IT+0x104>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	685a      	ldr	r2, [r3, #4]
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	2180      	movs	r1, #128	; 0x80
 8002fa4:	0149      	lsls	r1, r1, #5
 8002fa6:	430a      	orrs	r2, r1
 8002fa8:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_8BIT;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	4a1f      	ldr	r2, [pc, #124]	; (800302c <HAL_SPI_Receive_IT+0x180>)
 8002fae:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	689a      	ldr	r2, [r3, #8]
 8002fb4:	2380      	movs	r3, #128	; 0x80
 8002fb6:	021b      	lsls	r3, r3, #8
 8002fb8:	429a      	cmp	r2, r3
 8002fba:	d10f      	bne.n	8002fdc <HAL_SPI_Receive_IT+0x130>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	681a      	ldr	r2, [r3, #0]
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	2140      	movs	r1, #64	; 0x40
 8002fc8:	438a      	bics	r2, r1
 8002fca:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	681a      	ldr	r2, [r3, #0]
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	4916      	ldr	r1, [pc, #88]	; (8003030 <HAL_SPI_Receive_IT+0x184>)
 8002fd8:	400a      	ands	r2, r1
 8002fda:	601a      	str	r2, [r3, #0]
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	685a      	ldr	r2, [r3, #4]
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	2160      	movs	r1, #96	; 0x60
 8002fe8:	430a      	orrs	r2, r1
 8002fea:	605a      	str	r2, [r3, #4]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	2240      	movs	r2, #64	; 0x40
 8002ff4:	4013      	ands	r3, r2
 8002ff6:	2b40      	cmp	r3, #64	; 0x40
 8002ff8:	d008      	beq.n	800300c <HAL_SPI_Receive_IT+0x160>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	681a      	ldr	r2, [r3, #0]
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	2140      	movs	r1, #64	; 0x40
 8003006:	430a      	orrs	r2, r1
 8003008:	601a      	str	r2, [r3, #0]
 800300a:	e000      	b.n	800300e <HAL_SPI_Receive_IT+0x162>
  }

error :
 800300c:	46c0      	nop			; (mov r8, r8)
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	225c      	movs	r2, #92	; 0x5c
 8003012:	2100      	movs	r1, #0
 8003014:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8003016:	2317      	movs	r3, #23
 8003018:	18fb      	adds	r3, r7, r3
 800301a:	781b      	ldrb	r3, [r3, #0]
}
 800301c:	0018      	movs	r0, r3
 800301e:	46bd      	mov	sp, r7
 8003020:	b006      	add	sp, #24
 8003022:	bd80      	pop	{r7, pc}
 8003024:	ffffefff 	.word	0xffffefff
 8003028:	08003683 	.word	0x08003683
 800302c:	08003631 	.word	0x08003631
 8003030:	ffffbfff 	.word	0xffffbfff

08003034 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b086      	sub	sp, #24
 8003038:	af00      	add	r7, sp, #0
 800303a:	60f8      	str	r0, [r7, #12]
 800303c:	60b9      	str	r1, [r7, #8]
 800303e:	607a      	str	r2, [r7, #4]
 8003040:	001a      	movs	r2, r3
 8003042:	1cbb      	adds	r3, r7, #2
 8003044:	801a      	strh	r2, [r3, #0]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003046:	2317      	movs	r3, #23
 8003048:	18fb      	adds	r3, r7, r3
 800304a:	2200      	movs	r2, #0
 800304c:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	225c      	movs	r2, #92	; 0x5c
 8003052:	5c9b      	ldrb	r3, [r3, r2]
 8003054:	2b01      	cmp	r3, #1
 8003056:	d101      	bne.n	800305c <HAL_SPI_TransmitReceive_IT+0x28>
 8003058:	2302      	movs	r3, #2
 800305a:	e0a6      	b.n	80031aa <HAL_SPI_TransmitReceive_IT+0x176>
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	225c      	movs	r2, #92	; 0x5c
 8003060:	2101      	movs	r1, #1
 8003062:	5499      	strb	r1, [r3, r2]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003064:	2016      	movs	r0, #22
 8003066:	183b      	adds	r3, r7, r0
 8003068:	68fa      	ldr	r2, [r7, #12]
 800306a:	215d      	movs	r1, #93	; 0x5d
 800306c:	5c52      	ldrb	r2, [r2, r1]
 800306e:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	685b      	ldr	r3, [r3, #4]
 8003074:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003076:	0001      	movs	r1, r0
 8003078:	187b      	adds	r3, r7, r1
 800307a:	781b      	ldrb	r3, [r3, #0]
 800307c:	2b01      	cmp	r3, #1
 800307e:	d011      	beq.n	80030a4 <HAL_SPI_TransmitReceive_IT+0x70>
 8003080:	693a      	ldr	r2, [r7, #16]
 8003082:	2382      	movs	r3, #130	; 0x82
 8003084:	005b      	lsls	r3, r3, #1
 8003086:	429a      	cmp	r2, r3
 8003088:	d107      	bne.n	800309a <HAL_SPI_TransmitReceive_IT+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	689b      	ldr	r3, [r3, #8]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d103      	bne.n	800309a <HAL_SPI_TransmitReceive_IT+0x66>
 8003092:	187b      	adds	r3, r7, r1
 8003094:	781b      	ldrb	r3, [r3, #0]
 8003096:	2b04      	cmp	r3, #4
 8003098:	d004      	beq.n	80030a4 <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_BUSY;
 800309a:	2317      	movs	r3, #23
 800309c:	18fb      	adds	r3, r7, r3
 800309e:	2202      	movs	r2, #2
 80030a0:	701a      	strb	r2, [r3, #0]
    goto error;
 80030a2:	e07b      	b.n	800319c <HAL_SPI_TransmitReceive_IT+0x168>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80030a4:	68bb      	ldr	r3, [r7, #8]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d006      	beq.n	80030b8 <HAL_SPI_TransmitReceive_IT+0x84>
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d003      	beq.n	80030b8 <HAL_SPI_TransmitReceive_IT+0x84>
 80030b0:	1cbb      	adds	r3, r7, #2
 80030b2:	881b      	ldrh	r3, [r3, #0]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d104      	bne.n	80030c2 <HAL_SPI_TransmitReceive_IT+0x8e>
  {
    errorcode = HAL_ERROR;
 80030b8:	2317      	movs	r3, #23
 80030ba:	18fb      	adds	r3, r7, r3
 80030bc:	2201      	movs	r2, #1
 80030be:	701a      	strb	r2, [r3, #0]
    goto error;
 80030c0:	e06c      	b.n	800319c <HAL_SPI_TransmitReceive_IT+0x168>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	225d      	movs	r2, #93	; 0x5d
 80030c6:	5c9b      	ldrb	r3, [r3, r2]
 80030c8:	b2db      	uxtb	r3, r3
 80030ca:	2b04      	cmp	r3, #4
 80030cc:	d003      	beq.n	80030d6 <HAL_SPI_TransmitReceive_IT+0xa2>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	225d      	movs	r2, #93	; 0x5d
 80030d2:	2105      	movs	r1, #5
 80030d4:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	2200      	movs	r2, #0
 80030da:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	68ba      	ldr	r2, [r7, #8]
 80030e0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	1cba      	adds	r2, r7, #2
 80030e6:	8812      	ldrh	r2, [r2, #0]
 80030e8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	1cba      	adds	r2, r7, #2
 80030ee:	8812      	ldrh	r2, [r2, #0]
 80030f0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	687a      	ldr	r2, [r7, #4]
 80030f6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	1cba      	adds	r2, r7, #2
 80030fc:	2144      	movs	r1, #68	; 0x44
 80030fe:	8812      	ldrh	r2, [r2, #0]
 8003100:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	1cba      	adds	r2, r7, #2
 8003106:	2146      	movs	r1, #70	; 0x46
 8003108:	8812      	ldrh	r2, [r2, #0]
 800310a:	525a      	strh	r2, [r3, r1]

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	68da      	ldr	r2, [r3, #12]
 8003110:	23e0      	movs	r3, #224	; 0xe0
 8003112:	00db      	lsls	r3, r3, #3
 8003114:	429a      	cmp	r2, r3
 8003116:	d906      	bls.n	8003126 <HAL_SPI_TransmitReceive_IT+0xf2>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	4a26      	ldr	r2, [pc, #152]	; (80031b4 <HAL_SPI_TransmitReceive_IT+0x180>)
 800311c:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	4a25      	ldr	r2, [pc, #148]	; (80031b8 <HAL_SPI_TransmitReceive_IT+0x184>)
 8003122:	651a      	str	r2, [r3, #80]	; 0x50
 8003124:	e005      	b.n	8003132 <HAL_SPI_TransmitReceive_IT+0xfe>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	4a24      	ldr	r2, [pc, #144]	; (80031bc <HAL_SPI_TransmitReceive_IT+0x188>)
 800312a:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	4a24      	ldr	r2, [pc, #144]	; (80031c0 <HAL_SPI_TransmitReceive_IT+0x18c>)
 8003130:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Check if packing mode is enabled and if there is more than 2 data to receive */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	68da      	ldr	r2, [r3, #12]
 8003136:	23e0      	movs	r3, #224	; 0xe0
 8003138:	00db      	lsls	r3, r3, #3
 800313a:	429a      	cmp	r2, r3
 800313c:	d803      	bhi.n	8003146 <HAL_SPI_TransmitReceive_IT+0x112>
 800313e:	1cbb      	adds	r3, r7, #2
 8003140:	881b      	ldrh	r3, [r3, #0]
 8003142:	2b01      	cmp	r3, #1
 8003144:	d908      	bls.n	8003158 <HAL_SPI_TransmitReceive_IT+0x124>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	685a      	ldr	r2, [r3, #4]
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	491c      	ldr	r1, [pc, #112]	; (80031c4 <HAL_SPI_TransmitReceive_IT+0x190>)
 8003152:	400a      	ands	r2, r1
 8003154:	605a      	str	r2, [r3, #4]
 8003156:	e008      	b.n	800316a <HAL_SPI_TransmitReceive_IT+0x136>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	685a      	ldr	r2, [r3, #4]
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	2180      	movs	r1, #128	; 0x80
 8003164:	0149      	lsls	r1, r1, #5
 8003166:	430a      	orrs	r2, r1
 8003168:	605a      	str	r2, [r3, #4]
  }

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	685a      	ldr	r2, [r3, #4]
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	21e0      	movs	r1, #224	; 0xe0
 8003176:	430a      	orrs	r2, r1
 8003178:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	2240      	movs	r2, #64	; 0x40
 8003182:	4013      	ands	r3, r2
 8003184:	2b40      	cmp	r3, #64	; 0x40
 8003186:	d008      	beq.n	800319a <HAL_SPI_TransmitReceive_IT+0x166>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	681a      	ldr	r2, [r3, #0]
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	2140      	movs	r1, #64	; 0x40
 8003194:	430a      	orrs	r2, r1
 8003196:	601a      	str	r2, [r3, #0]
 8003198:	e000      	b.n	800319c <HAL_SPI_TransmitReceive_IT+0x168>
  }

error :
 800319a:	46c0      	nop			; (mov r8, r8)
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	225c      	movs	r2, #92	; 0x5c
 80031a0:	2100      	movs	r1, #0
 80031a2:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80031a4:	2317      	movs	r3, #23
 80031a6:	18fb      	adds	r3, r7, r3
 80031a8:	781b      	ldrb	r3, [r3, #0]
}
 80031aa:	0018      	movs	r0, r3
 80031ac:	46bd      	mov	sp, r7
 80031ae:	b006      	add	sp, #24
 80031b0:	bd80      	pop	{r7, pc}
 80031b2:	46c0      	nop			; (mov r8, r8)
 80031b4:	08003567 	.word	0x08003567
 80031b8:	080035cf 	.word	0x080035cf
 80031bc:	08003411 	.word	0x08003411
 80031c0:	080034d3 	.word	0x080034d3
 80031c4:	ffffefff 	.word	0xffffefff

080031c8 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b088      	sub	sp, #32
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	685b      	ldr	r3, [r3, #4]
 80031d6:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	689b      	ldr	r3, [r3, #8]
 80031de:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80031e0:	69bb      	ldr	r3, [r7, #24]
 80031e2:	099b      	lsrs	r3, r3, #6
 80031e4:	001a      	movs	r2, r3
 80031e6:	2301      	movs	r3, #1
 80031e8:	4013      	ands	r3, r2
 80031ea:	d10f      	bne.n	800320c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80031ec:	69bb      	ldr	r3, [r7, #24]
 80031ee:	2201      	movs	r2, #1
 80031f0:	4013      	ands	r3, r2
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80031f2:	d00b      	beq.n	800320c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80031f4:	69fb      	ldr	r3, [r7, #28]
 80031f6:	099b      	lsrs	r3, r3, #6
 80031f8:	001a      	movs	r2, r3
 80031fa:	2301      	movs	r3, #1
 80031fc:	4013      	ands	r3, r2
 80031fe:	d005      	beq.n	800320c <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003204:	687a      	ldr	r2, [r7, #4]
 8003206:	0010      	movs	r0, r2
 8003208:	4798      	blx	r3
    return;
 800320a:	e0d5      	b.n	80033b8 <HAL_SPI_IRQHandler+0x1f0>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800320c:	69bb      	ldr	r3, [r7, #24]
 800320e:	085b      	lsrs	r3, r3, #1
 8003210:	001a      	movs	r2, r3
 8003212:	2301      	movs	r3, #1
 8003214:	4013      	ands	r3, r2
 8003216:	d00b      	beq.n	8003230 <HAL_SPI_IRQHandler+0x68>
 8003218:	69fb      	ldr	r3, [r7, #28]
 800321a:	09db      	lsrs	r3, r3, #7
 800321c:	001a      	movs	r2, r3
 800321e:	2301      	movs	r3, #1
 8003220:	4013      	ands	r3, r2
 8003222:	d005      	beq.n	8003230 <HAL_SPI_IRQHandler+0x68>
  {
    hspi->TxISR(hspi);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003228:	687a      	ldr	r2, [r7, #4]
 800322a:	0010      	movs	r0, r2
 800322c:	4798      	blx	r3
    return;
 800322e:	e0c3      	b.n	80033b8 <HAL_SPI_IRQHandler+0x1f0>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003230:	69bb      	ldr	r3, [r7, #24]
 8003232:	095b      	lsrs	r3, r3, #5
 8003234:	001a      	movs	r2, r3
 8003236:	2301      	movs	r3, #1
 8003238:	4013      	ands	r3, r2
 800323a:	d10c      	bne.n	8003256 <HAL_SPI_IRQHandler+0x8e>
 800323c:	69bb      	ldr	r3, [r7, #24]
 800323e:	099b      	lsrs	r3, r3, #6
 8003240:	001a      	movs	r2, r3
 8003242:	2301      	movs	r3, #1
 8003244:	4013      	ands	r3, r2
 8003246:	d106      	bne.n	8003256 <HAL_SPI_IRQHandler+0x8e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8003248:	69bb      	ldr	r3, [r7, #24]
 800324a:	0a1b      	lsrs	r3, r3, #8
 800324c:	001a      	movs	r2, r3
 800324e:	2301      	movs	r3, #1
 8003250:	4013      	ands	r3, r2
 8003252:	d100      	bne.n	8003256 <HAL_SPI_IRQHandler+0x8e>
 8003254:	e0b0      	b.n	80033b8 <HAL_SPI_IRQHandler+0x1f0>
 8003256:	69fb      	ldr	r3, [r7, #28]
 8003258:	095b      	lsrs	r3, r3, #5
 800325a:	001a      	movs	r2, r3
 800325c:	2301      	movs	r3, #1
 800325e:	4013      	ands	r3, r2
 8003260:	d100      	bne.n	8003264 <HAL_SPI_IRQHandler+0x9c>
 8003262:	e0a9      	b.n	80033b8 <HAL_SPI_IRQHandler+0x1f0>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003264:	69bb      	ldr	r3, [r7, #24]
 8003266:	099b      	lsrs	r3, r3, #6
 8003268:	001a      	movs	r2, r3
 800326a:	2301      	movs	r3, #1
 800326c:	4013      	ands	r3, r2
 800326e:	d023      	beq.n	80032b8 <HAL_SPI_IRQHandler+0xf0>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	225d      	movs	r2, #93	; 0x5d
 8003274:	5c9b      	ldrb	r3, [r3, r2]
 8003276:	b2db      	uxtb	r3, r3
 8003278:	2b03      	cmp	r3, #3
 800327a:	d011      	beq.n	80032a0 <HAL_SPI_IRQHandler+0xd8>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003280:	2204      	movs	r2, #4
 8003282:	431a      	orrs	r2, r3
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003288:	2300      	movs	r3, #0
 800328a:	617b      	str	r3, [r7, #20]
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	68db      	ldr	r3, [r3, #12]
 8003292:	617b      	str	r3, [r7, #20]
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	689b      	ldr	r3, [r3, #8]
 800329a:	617b      	str	r3, [r7, #20]
 800329c:	697b      	ldr	r3, [r7, #20]
 800329e:	e00b      	b.n	80032b8 <HAL_SPI_IRQHandler+0xf0>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80032a0:	2300      	movs	r3, #0
 80032a2:	613b      	str	r3, [r7, #16]
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	68db      	ldr	r3, [r3, #12]
 80032aa:	613b      	str	r3, [r7, #16]
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	689b      	ldr	r3, [r3, #8]
 80032b2:	613b      	str	r3, [r7, #16]
 80032b4:	693b      	ldr	r3, [r7, #16]
        return;
 80032b6:	e07f      	b.n	80033b8 <HAL_SPI_IRQHandler+0x1f0>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80032b8:	69bb      	ldr	r3, [r7, #24]
 80032ba:	095b      	lsrs	r3, r3, #5
 80032bc:	001a      	movs	r2, r3
 80032be:	2301      	movs	r3, #1
 80032c0:	4013      	ands	r3, r2
 80032c2:	d014      	beq.n	80032ee <HAL_SPI_IRQHandler+0x126>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032c8:	2201      	movs	r2, #1
 80032ca:	431a      	orrs	r2, r3
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80032d0:	2300      	movs	r3, #0
 80032d2:	60fb      	str	r3, [r7, #12]
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	689b      	ldr	r3, [r3, #8]
 80032da:	60fb      	str	r3, [r7, #12]
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	681a      	ldr	r2, [r3, #0]
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	2140      	movs	r1, #64	; 0x40
 80032e8:	438a      	bics	r2, r1
 80032ea:	601a      	str	r2, [r3, #0]
 80032ec:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80032ee:	69bb      	ldr	r3, [r7, #24]
 80032f0:	0a1b      	lsrs	r3, r3, #8
 80032f2:	001a      	movs	r2, r3
 80032f4:	2301      	movs	r3, #1
 80032f6:	4013      	ands	r3, r2
 80032f8:	d00c      	beq.n	8003314 <HAL_SPI_IRQHandler+0x14c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032fe:	2208      	movs	r2, #8
 8003300:	431a      	orrs	r2, r3
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8003306:	2300      	movs	r3, #0
 8003308:	60bb      	str	r3, [r7, #8]
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	689b      	ldr	r3, [r3, #8]
 8003310:	60bb      	str	r3, [r7, #8]
 8003312:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003318:	2b00      	cmp	r3, #0
 800331a:	d04c      	beq.n	80033b6 <HAL_SPI_IRQHandler+0x1ee>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	685a      	ldr	r2, [r3, #4]
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	21e0      	movs	r1, #224	; 0xe0
 8003328:	438a      	bics	r2, r1
 800332a:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	225d      	movs	r2, #93	; 0x5d
 8003330:	2101      	movs	r1, #1
 8003332:	5499      	strb	r1, [r3, r2]
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8003334:	69fb      	ldr	r3, [r7, #28]
 8003336:	2202      	movs	r2, #2
 8003338:	4013      	ands	r3, r2
 800333a:	d103      	bne.n	8003344 <HAL_SPI_IRQHandler+0x17c>
 800333c:	69fb      	ldr	r3, [r7, #28]
 800333e:	2201      	movs	r2, #1
 8003340:	4013      	ands	r3, r2
 8003342:	d032      	beq.n	80033aa <HAL_SPI_IRQHandler+0x1e2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	685a      	ldr	r2, [r3, #4]
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	2103      	movs	r1, #3
 8003350:	438a      	bics	r2, r1
 8003352:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003358:	2b00      	cmp	r3, #0
 800335a:	d010      	beq.n	800337e <HAL_SPI_IRQHandler+0x1b6>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003360:	4a17      	ldr	r2, [pc, #92]	; (80033c0 <HAL_SPI_IRQHandler+0x1f8>)
 8003362:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003368:	0018      	movs	r0, r3
 800336a:	f7fe fa2d 	bl	80017c8 <HAL_DMA_Abort_IT>
 800336e:	1e03      	subs	r3, r0, #0
 8003370:	d005      	beq.n	800337e <HAL_SPI_IRQHandler+0x1b6>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003376:	2240      	movs	r2, #64	; 0x40
 8003378:	431a      	orrs	r2, r3
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003382:	2b00      	cmp	r3, #0
 8003384:	d016      	beq.n	80033b4 <HAL_SPI_IRQHandler+0x1ec>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800338a:	4a0d      	ldr	r2, [pc, #52]	; (80033c0 <HAL_SPI_IRQHandler+0x1f8>)
 800338c:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003392:	0018      	movs	r0, r3
 8003394:	f7fe fa18 	bl	80017c8 <HAL_DMA_Abort_IT>
 8003398:	1e03      	subs	r3, r0, #0
 800339a:	d00b      	beq.n	80033b4 <HAL_SPI_IRQHandler+0x1ec>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033a0:	2240      	movs	r2, #64	; 0x40
 80033a2:	431a      	orrs	r2, r3
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 80033a8:	e004      	b.n	80033b4 <HAL_SPI_IRQHandler+0x1ec>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	0018      	movs	r0, r3
 80033ae:	f000 f811 	bl	80033d4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80033b2:	e000      	b.n	80033b6 <HAL_SPI_IRQHandler+0x1ee>
        if (hspi->hdmatx != NULL)
 80033b4:	46c0      	nop			; (mov r8, r8)
    return;
 80033b6:	46c0      	nop			; (mov r8, r8)
  }
}
 80033b8:	46bd      	mov	sp, r7
 80033ba:	b008      	add	sp, #32
 80033bc:	bd80      	pop	{r7, pc}
 80033be:	46c0      	nop			; (mov r8, r8)
 80033c0:	080033e5 	.word	0x080033e5

080033c4 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b082      	sub	sp, #8
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 80033cc:	46c0      	nop			; (mov r8, r8)
 80033ce:	46bd      	mov	sp, r7
 80033d0:	b002      	add	sp, #8
 80033d2:	bd80      	pop	{r7, pc}

080033d4 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b082      	sub	sp, #8
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80033dc:	46c0      	nop			; (mov r8, r8)
 80033de:	46bd      	mov	sp, r7
 80033e0:	b002      	add	sp, #8
 80033e2:	bd80      	pop	{r7, pc}

080033e4 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b084      	sub	sp, #16
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033f0:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	2246      	movs	r2, #70	; 0x46
 80033f6:	2100      	movs	r1, #0
 80033f8:	5299      	strh	r1, [r3, r2]
  hspi->TxXferCount = 0U;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	2200      	movs	r2, #0
 80033fe:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	0018      	movs	r0, r3
 8003404:	f7ff ffe6 	bl	80033d4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003408:	46c0      	nop			; (mov r8, r8)
 800340a:	46bd      	mov	sp, r7
 800340c:	b004      	add	sp, #16
 800340e:	bd80      	pop	{r7, pc}

08003410 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b082      	sub	sp, #8
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
  /* Receive data in packing mode */
  if (hspi->RxXferCount > 1U)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2246      	movs	r2, #70	; 0x46
 800341c:	5a9b      	ldrh	r3, [r3, r2]
 800341e:	b29b      	uxth	r3, r3
 8003420:	2b01      	cmp	r3, #1
 8003422:	d924      	bls.n	800346e <SPI_2linesRxISR_8BIT+0x5e>
  {
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	68da      	ldr	r2, [r3, #12]
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800342e:	b292      	uxth	r2, r2
 8003430:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003436:	1c9a      	adds	r2, r3, #2
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount -= 2U;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2246      	movs	r2, #70	; 0x46
 8003440:	5a9b      	ldrh	r3, [r3, r2]
 8003442:	b29b      	uxth	r3, r3
 8003444:	3b02      	subs	r3, #2
 8003446:	b299      	uxth	r1, r3
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2246      	movs	r2, #70	; 0x46
 800344c:	5299      	strh	r1, [r3, r2]
    if (hspi->RxXferCount == 1U)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2246      	movs	r2, #70	; 0x46
 8003452:	5a9b      	ldrh	r3, [r3, r2]
 8003454:	b29b      	uxth	r3, r3
 8003456:	2b01      	cmp	r3, #1
 8003458:	d120      	bne.n	800349c <SPI_2linesRxISR_8BIT+0x8c>
    {
      /* Set RX Fifo threshold according the reception data length: 8bit */
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	685a      	ldr	r2, [r3, #4]
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	2180      	movs	r1, #128	; 0x80
 8003466:	0149      	lsls	r1, r1, #5
 8003468:	430a      	orrs	r2, r1
 800346a:	605a      	str	r2, [r3, #4]
 800346c:	e016      	b.n	800349c <SPI_2linesRxISR_8BIT+0x8c>
    }
  }
  /* Receive data in 8 Bit mode */
  else
  {
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	330c      	adds	r3, #12
 8003474:	001a      	movs	r2, r3
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800347a:	7812      	ldrb	r2, [r2, #0]
 800347c:	b2d2      	uxtb	r2, r2
 800347e:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003484:	1c5a      	adds	r2, r3, #1
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount--;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2246      	movs	r2, #70	; 0x46
 800348e:	5a9b      	ldrh	r3, [r3, r2]
 8003490:	b29b      	uxth	r3, r3
 8003492:	3b01      	subs	r3, #1
 8003494:	b299      	uxth	r1, r3
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2246      	movs	r2, #70	; 0x46
 800349a:	5299      	strh	r1, [r3, r2]
  }

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2246      	movs	r2, #70	; 0x46
 80034a0:	5a9b      	ldrh	r3, [r3, r2]
 80034a2:	b29b      	uxth	r3, r3
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d110      	bne.n	80034ca <SPI_2linesRxISR_8BIT+0xba>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	685a      	ldr	r2, [r3, #4]
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	2160      	movs	r1, #96	; 0x60
 80034b4:	438a      	bics	r2, r1
 80034b6:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80034bc:	b29b      	uxth	r3, r3
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d103      	bne.n	80034ca <SPI_2linesRxISR_8BIT+0xba>
    {
      SPI_CloseRxTx_ISR(hspi);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	0018      	movs	r0, r3
 80034c6:	f000 fad7 	bl	8003a78 <SPI_CloseRxTx_ISR>
    }
  }
}
 80034ca:	46c0      	nop			; (mov r8, r8)
 80034cc:	46bd      	mov	sp, r7
 80034ce:	b002      	add	sp, #8
 80034d0:	bd80      	pop	{r7, pc}

080034d2 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80034d2:	b580      	push	{r7, lr}
 80034d4:	b082      	sub	sp, #8
 80034d6:	af00      	add	r7, sp, #0
 80034d8:	6078      	str	r0, [r7, #4]
  /* Transmit data in packing Bit mode */
  if (hspi->TxXferCount >= 2U)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80034de:	b29b      	uxth	r3, r3
 80034e0:	2b01      	cmp	r3, #1
 80034e2:	d912      	bls.n	800350a <SPI_2linesTxISR_8BIT+0x38>
  {
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034e8:	881a      	ldrh	r2, [r3, #0]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034f4:	1c9a      	adds	r2, r3, #2
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount -= 2U;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80034fe:	b29b      	uxth	r3, r3
 8003500:	3b02      	subs	r3, #2
 8003502:	b29a      	uxth	r2, r3
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003508:	e012      	b.n	8003530 <SPI_2linesTxISR_8BIT+0x5e>
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	330c      	adds	r3, #12
 8003514:	7812      	ldrb	r2, [r2, #0]
 8003516:	701a      	strb	r2, [r3, #0]
    hspi->pTxBuffPtr++;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800351c:	1c5a      	adds	r2, r3, #1
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount--;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003526:	b29b      	uxth	r3, r3
 8003528:	3b01      	subs	r3, #1
 800352a:	b29a      	uxth	r2, r3
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	87da      	strh	r2, [r3, #62]	; 0x3e
  }

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003534:	b29b      	uxth	r3, r3
 8003536:	2b00      	cmp	r3, #0
 8003538:	d111      	bne.n	800355e <SPI_2linesTxISR_8BIT+0x8c>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	685a      	ldr	r2, [r3, #4]
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	2180      	movs	r1, #128	; 0x80
 8003546:	438a      	bics	r2, r1
 8003548:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2246      	movs	r2, #70	; 0x46
 800354e:	5a9b      	ldrh	r3, [r3, r2]
 8003550:	b29b      	uxth	r3, r3
 8003552:	2b00      	cmp	r3, #0
 8003554:	d103      	bne.n	800355e <SPI_2linesTxISR_8BIT+0x8c>
    {
      SPI_CloseRxTx_ISR(hspi);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	0018      	movs	r0, r3
 800355a:	f000 fa8d 	bl	8003a78 <SPI_CloseRxTx_ISR>
    }
  }
}
 800355e:	46c0      	nop			; (mov r8, r8)
 8003560:	46bd      	mov	sp, r7
 8003562:	b002      	add	sp, #8
 8003564:	bd80      	pop	{r7, pc}

08003566 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8003566:	b580      	push	{r7, lr}
 8003568:	b082      	sub	sp, #8
 800356a:	af00      	add	r7, sp, #0
 800356c:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	68da      	ldr	r2, [r3, #12]
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003578:	b292      	uxth	r2, r2
 800357a:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003580:	1c9a      	adds	r2, r3, #2
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2246      	movs	r2, #70	; 0x46
 800358a:	5a9b      	ldrh	r3, [r3, r2]
 800358c:	b29b      	uxth	r3, r3
 800358e:	3b01      	subs	r3, #1
 8003590:	b299      	uxth	r1, r3
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2246      	movs	r2, #70	; 0x46
 8003596:	5299      	strh	r1, [r3, r2]

  if (hspi->RxXferCount == 0U)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2246      	movs	r2, #70	; 0x46
 800359c:	5a9b      	ldrh	r3, [r3, r2]
 800359e:	b29b      	uxth	r3, r3
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d110      	bne.n	80035c6 <SPI_2linesRxISR_16BIT+0x60>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	685a      	ldr	r2, [r3, #4]
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	2140      	movs	r1, #64	; 0x40
 80035b0:	438a      	bics	r2, r1
 80035b2:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80035b8:	b29b      	uxth	r3, r3
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d103      	bne.n	80035c6 <SPI_2linesRxISR_16BIT+0x60>
    {
      SPI_CloseRxTx_ISR(hspi);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	0018      	movs	r0, r3
 80035c2:	f000 fa59 	bl	8003a78 <SPI_CloseRxTx_ISR>
    }
  }
}
 80035c6:	46c0      	nop			; (mov r8, r8)
 80035c8:	46bd      	mov	sp, r7
 80035ca:	b002      	add	sp, #8
 80035cc:	bd80      	pop	{r7, pc}

080035ce <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80035ce:	b580      	push	{r7, lr}
 80035d0:	b082      	sub	sp, #8
 80035d2:	af00      	add	r7, sp, #0
 80035d4:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035da:	881a      	ldrh	r2, [r3, #0]
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035e6:	1c9a      	adds	r2, r3, #2
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80035f0:	b29b      	uxth	r3, r3
 80035f2:	3b01      	subs	r3, #1
 80035f4:	b29a      	uxth	r2, r3
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80035fe:	b29b      	uxth	r3, r3
 8003600:	2b00      	cmp	r3, #0
 8003602:	d111      	bne.n	8003628 <SPI_2linesTxISR_16BIT+0x5a>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	685a      	ldr	r2, [r3, #4]
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	2180      	movs	r1, #128	; 0x80
 8003610:	438a      	bics	r2, r1
 8003612:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2246      	movs	r2, #70	; 0x46
 8003618:	5a9b      	ldrh	r3, [r3, r2]
 800361a:	b29b      	uxth	r3, r3
 800361c:	2b00      	cmp	r3, #0
 800361e:	d103      	bne.n	8003628 <SPI_2linesTxISR_16BIT+0x5a>
    {
      SPI_CloseRxTx_ISR(hspi);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	0018      	movs	r0, r3
 8003624:	f000 fa28 	bl	8003a78 <SPI_CloseRxTx_ISR>
    }
  }
}
 8003628:	46c0      	nop			; (mov r8, r8)
 800362a:	46bd      	mov	sp, r7
 800362c:	b002      	add	sp, #8
 800362e:	bd80      	pop	{r7, pc}

08003630 <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b082      	sub	sp, #8
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	330c      	adds	r3, #12
 800363e:	001a      	movs	r2, r3
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003644:	7812      	ldrb	r2, [r2, #0]
 8003646:	b2d2      	uxtb	r2, r2
 8003648:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800364e:	1c5a      	adds	r2, r3, #1
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2246      	movs	r2, #70	; 0x46
 8003658:	5a9b      	ldrh	r3, [r3, r2]
 800365a:	b29b      	uxth	r3, r3
 800365c:	3b01      	subs	r3, #1
 800365e:	b299      	uxth	r1, r3
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2246      	movs	r2, #70	; 0x46
 8003664:	5299      	strh	r1, [r3, r2]
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2246      	movs	r2, #70	; 0x46
 800366a:	5a9b      	ldrh	r3, [r3, r2]
 800366c:	b29b      	uxth	r3, r3
 800366e:	2b00      	cmp	r3, #0
 8003670:	d103      	bne.n	800367a <SPI_RxISR_8BIT+0x4a>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	0018      	movs	r0, r3
 8003676:	f000 fa45 	bl	8003b04 <SPI_CloseRx_ISR>
  }
}
 800367a:	46c0      	nop			; (mov r8, r8)
 800367c:	46bd      	mov	sp, r7
 800367e:	b002      	add	sp, #8
 8003680:	bd80      	pop	{r7, pc}

08003682 <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8003682:	b580      	push	{r7, lr}
 8003684:	b082      	sub	sp, #8
 8003686:	af00      	add	r7, sp, #0
 8003688:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	68da      	ldr	r2, [r3, #12]
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003694:	b292      	uxth	r2, r2
 8003696:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800369c:	1c9a      	adds	r2, r3, #2
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2246      	movs	r2, #70	; 0x46
 80036a6:	5a9b      	ldrh	r3, [r3, r2]
 80036a8:	b29b      	uxth	r3, r3
 80036aa:	3b01      	subs	r3, #1
 80036ac:	b299      	uxth	r1, r3
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2246      	movs	r2, #70	; 0x46
 80036b2:	5299      	strh	r1, [r3, r2]
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2246      	movs	r2, #70	; 0x46
 80036b8:	5a9b      	ldrh	r3, [r3, r2]
 80036ba:	b29b      	uxth	r3, r3
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d103      	bne.n	80036c8 <SPI_RxISR_16BIT+0x46>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	0018      	movs	r0, r3
 80036c4:	f000 fa1e 	bl	8003b04 <SPI_CloseRx_ISR>
  }
}
 80036c8:	46c0      	nop			; (mov r8, r8)
 80036ca:	46bd      	mov	sp, r7
 80036cc:	b002      	add	sp, #8
 80036ce:	bd80      	pop	{r7, pc}

080036d0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b088      	sub	sp, #32
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	60f8      	str	r0, [r7, #12]
 80036d8:	60b9      	str	r1, [r7, #8]
 80036da:	603b      	str	r3, [r7, #0]
 80036dc:	1dfb      	adds	r3, r7, #7
 80036de:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80036e0:	f7fd ff50 	bl	8001584 <HAL_GetTick>
 80036e4:	0002      	movs	r2, r0
 80036e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036e8:	1a9b      	subs	r3, r3, r2
 80036ea:	683a      	ldr	r2, [r7, #0]
 80036ec:	18d3      	adds	r3, r2, r3
 80036ee:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80036f0:	f7fd ff48 	bl	8001584 <HAL_GetTick>
 80036f4:	0003      	movs	r3, r0
 80036f6:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80036f8:	4b3a      	ldr	r3, [pc, #232]	; (80037e4 <SPI_WaitFlagStateUntilTimeout+0x114>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	015b      	lsls	r3, r3, #5
 80036fe:	0d1b      	lsrs	r3, r3, #20
 8003700:	69fa      	ldr	r2, [r7, #28]
 8003702:	4353      	muls	r3, r2
 8003704:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003706:	e058      	b.n	80037ba <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	3301      	adds	r3, #1
 800370c:	d055      	beq.n	80037ba <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800370e:	f7fd ff39 	bl	8001584 <HAL_GetTick>
 8003712:	0002      	movs	r2, r0
 8003714:	69bb      	ldr	r3, [r7, #24]
 8003716:	1ad3      	subs	r3, r2, r3
 8003718:	69fa      	ldr	r2, [r7, #28]
 800371a:	429a      	cmp	r2, r3
 800371c:	d902      	bls.n	8003724 <SPI_WaitFlagStateUntilTimeout+0x54>
 800371e:	69fb      	ldr	r3, [r7, #28]
 8003720:	2b00      	cmp	r3, #0
 8003722:	d142      	bne.n	80037aa <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	685a      	ldr	r2, [r3, #4]
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	21e0      	movs	r1, #224	; 0xe0
 8003730:	438a      	bics	r2, r1
 8003732:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	685a      	ldr	r2, [r3, #4]
 8003738:	2382      	movs	r3, #130	; 0x82
 800373a:	005b      	lsls	r3, r3, #1
 800373c:	429a      	cmp	r2, r3
 800373e:	d113      	bne.n	8003768 <SPI_WaitFlagStateUntilTimeout+0x98>
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	689a      	ldr	r2, [r3, #8]
 8003744:	2380      	movs	r3, #128	; 0x80
 8003746:	021b      	lsls	r3, r3, #8
 8003748:	429a      	cmp	r2, r3
 800374a:	d005      	beq.n	8003758 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	689a      	ldr	r2, [r3, #8]
 8003750:	2380      	movs	r3, #128	; 0x80
 8003752:	00db      	lsls	r3, r3, #3
 8003754:	429a      	cmp	r2, r3
 8003756:	d107      	bne.n	8003768 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	681a      	ldr	r2, [r3, #0]
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	2140      	movs	r1, #64	; 0x40
 8003764:	438a      	bics	r2, r1
 8003766:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800376c:	2380      	movs	r3, #128	; 0x80
 800376e:	019b      	lsls	r3, r3, #6
 8003770:	429a      	cmp	r2, r3
 8003772:	d110      	bne.n	8003796 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	681a      	ldr	r2, [r3, #0]
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	491a      	ldr	r1, [pc, #104]	; (80037e8 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8003780:	400a      	ands	r2, r1
 8003782:	601a      	str	r2, [r3, #0]
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	681a      	ldr	r2, [r3, #0]
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	2180      	movs	r1, #128	; 0x80
 8003790:	0189      	lsls	r1, r1, #6
 8003792:	430a      	orrs	r2, r1
 8003794:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	225d      	movs	r2, #93	; 0x5d
 800379a:	2101      	movs	r1, #1
 800379c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	225c      	movs	r2, #92	; 0x5c
 80037a2:	2100      	movs	r1, #0
 80037a4:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80037a6:	2303      	movs	r3, #3
 80037a8:	e017      	b.n	80037da <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80037aa:	697b      	ldr	r3, [r7, #20]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d101      	bne.n	80037b4 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 80037b0:	2300      	movs	r3, #0
 80037b2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80037b4:	697b      	ldr	r3, [r7, #20]
 80037b6:	3b01      	subs	r3, #1
 80037b8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	689b      	ldr	r3, [r3, #8]
 80037c0:	68ba      	ldr	r2, [r7, #8]
 80037c2:	4013      	ands	r3, r2
 80037c4:	68ba      	ldr	r2, [r7, #8]
 80037c6:	1ad3      	subs	r3, r2, r3
 80037c8:	425a      	negs	r2, r3
 80037ca:	4153      	adcs	r3, r2
 80037cc:	b2db      	uxtb	r3, r3
 80037ce:	001a      	movs	r2, r3
 80037d0:	1dfb      	adds	r3, r7, #7
 80037d2:	781b      	ldrb	r3, [r3, #0]
 80037d4:	429a      	cmp	r2, r3
 80037d6:	d197      	bne.n	8003708 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80037d8:	2300      	movs	r3, #0
}
 80037da:	0018      	movs	r0, r3
 80037dc:	46bd      	mov	sp, r7
 80037de:	b008      	add	sp, #32
 80037e0:	bd80      	pop	{r7, pc}
 80037e2:	46c0      	nop			; (mov r8, r8)
 80037e4:	20000004 	.word	0x20000004
 80037e8:	ffffdfff 	.word	0xffffdfff

080037ec <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b08a      	sub	sp, #40	; 0x28
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	60f8      	str	r0, [r7, #12]
 80037f4:	60b9      	str	r1, [r7, #8]
 80037f6:	607a      	str	r2, [r7, #4]
 80037f8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80037fa:	2317      	movs	r3, #23
 80037fc:	18fb      	adds	r3, r7, r3
 80037fe:	2200      	movs	r2, #0
 8003800:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003802:	f7fd febf 	bl	8001584 <HAL_GetTick>
 8003806:	0002      	movs	r2, r0
 8003808:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800380a:	1a9b      	subs	r3, r3, r2
 800380c:	683a      	ldr	r2, [r7, #0]
 800380e:	18d3      	adds	r3, r2, r3
 8003810:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8003812:	f7fd feb7 	bl	8001584 <HAL_GetTick>
 8003816:	0003      	movs	r3, r0
 8003818:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	330c      	adds	r3, #12
 8003820:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003822:	4b41      	ldr	r3, [pc, #260]	; (8003928 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8003824:	681a      	ldr	r2, [r3, #0]
 8003826:	0013      	movs	r3, r2
 8003828:	009b      	lsls	r3, r3, #2
 800382a:	189b      	adds	r3, r3, r2
 800382c:	00da      	lsls	r2, r3, #3
 800382e:	1ad3      	subs	r3, r2, r3
 8003830:	0d1b      	lsrs	r3, r3, #20
 8003832:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003834:	4353      	muls	r3, r2
 8003836:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003838:	e068      	b.n	800390c <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800383a:	68ba      	ldr	r2, [r7, #8]
 800383c:	23c0      	movs	r3, #192	; 0xc0
 800383e:	00db      	lsls	r3, r3, #3
 8003840:	429a      	cmp	r2, r3
 8003842:	d10a      	bne.n	800385a <SPI_WaitFifoStateUntilTimeout+0x6e>
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d107      	bne.n	800385a <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800384a:	69fb      	ldr	r3, [r7, #28]
 800384c:	781b      	ldrb	r3, [r3, #0]
 800384e:	b2da      	uxtb	r2, r3
 8003850:	2117      	movs	r1, #23
 8003852:	187b      	adds	r3, r7, r1
 8003854:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003856:	187b      	adds	r3, r7, r1
 8003858:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	3301      	adds	r3, #1
 800385e:	d055      	beq.n	800390c <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003860:	f7fd fe90 	bl	8001584 <HAL_GetTick>
 8003864:	0002      	movs	r2, r0
 8003866:	6a3b      	ldr	r3, [r7, #32]
 8003868:	1ad3      	subs	r3, r2, r3
 800386a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800386c:	429a      	cmp	r2, r3
 800386e:	d902      	bls.n	8003876 <SPI_WaitFifoStateUntilTimeout+0x8a>
 8003870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003872:	2b00      	cmp	r3, #0
 8003874:	d142      	bne.n	80038fc <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	685a      	ldr	r2, [r3, #4]
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	21e0      	movs	r1, #224	; 0xe0
 8003882:	438a      	bics	r2, r1
 8003884:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	685a      	ldr	r2, [r3, #4]
 800388a:	2382      	movs	r3, #130	; 0x82
 800388c:	005b      	lsls	r3, r3, #1
 800388e:	429a      	cmp	r2, r3
 8003890:	d113      	bne.n	80038ba <SPI_WaitFifoStateUntilTimeout+0xce>
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	689a      	ldr	r2, [r3, #8]
 8003896:	2380      	movs	r3, #128	; 0x80
 8003898:	021b      	lsls	r3, r3, #8
 800389a:	429a      	cmp	r2, r3
 800389c:	d005      	beq.n	80038aa <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	689a      	ldr	r2, [r3, #8]
 80038a2:	2380      	movs	r3, #128	; 0x80
 80038a4:	00db      	lsls	r3, r3, #3
 80038a6:	429a      	cmp	r2, r3
 80038a8:	d107      	bne.n	80038ba <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	681a      	ldr	r2, [r3, #0]
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	2140      	movs	r1, #64	; 0x40
 80038b6:	438a      	bics	r2, r1
 80038b8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80038be:	2380      	movs	r3, #128	; 0x80
 80038c0:	019b      	lsls	r3, r3, #6
 80038c2:	429a      	cmp	r2, r3
 80038c4:	d110      	bne.n	80038e8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	681a      	ldr	r2, [r3, #0]
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4916      	ldr	r1, [pc, #88]	; (800392c <SPI_WaitFifoStateUntilTimeout+0x140>)
 80038d2:	400a      	ands	r2, r1
 80038d4:	601a      	str	r2, [r3, #0]
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	681a      	ldr	r2, [r3, #0]
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	2180      	movs	r1, #128	; 0x80
 80038e2:	0189      	lsls	r1, r1, #6
 80038e4:	430a      	orrs	r2, r1
 80038e6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	225d      	movs	r2, #93	; 0x5d
 80038ec:	2101      	movs	r1, #1
 80038ee:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	225c      	movs	r2, #92	; 0x5c
 80038f4:	2100      	movs	r1, #0
 80038f6:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80038f8:	2303      	movs	r3, #3
 80038fa:	e010      	b.n	800391e <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80038fc:	69bb      	ldr	r3, [r7, #24]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d101      	bne.n	8003906 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8003902:	2300      	movs	r3, #0
 8003904:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8003906:	69bb      	ldr	r3, [r7, #24]
 8003908:	3b01      	subs	r3, #1
 800390a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	689b      	ldr	r3, [r3, #8]
 8003912:	68ba      	ldr	r2, [r7, #8]
 8003914:	4013      	ands	r3, r2
 8003916:	687a      	ldr	r2, [r7, #4]
 8003918:	429a      	cmp	r2, r3
 800391a:	d18e      	bne.n	800383a <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 800391c:	2300      	movs	r3, #0
}
 800391e:	0018      	movs	r0, r3
 8003920:	46bd      	mov	sp, r7
 8003922:	b00a      	add	sp, #40	; 0x28
 8003924:	bd80      	pop	{r7, pc}
 8003926:	46c0      	nop			; (mov r8, r8)
 8003928:	20000004 	.word	0x20000004
 800392c:	ffffdfff 	.word	0xffffdfff

08003930 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b086      	sub	sp, #24
 8003934:	af02      	add	r7, sp, #8
 8003936:	60f8      	str	r0, [r7, #12]
 8003938:	60b9      	str	r1, [r7, #8]
 800393a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	685a      	ldr	r2, [r3, #4]
 8003940:	2382      	movs	r3, #130	; 0x82
 8003942:	005b      	lsls	r3, r3, #1
 8003944:	429a      	cmp	r2, r3
 8003946:	d113      	bne.n	8003970 <SPI_EndRxTransaction+0x40>
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	689a      	ldr	r2, [r3, #8]
 800394c:	2380      	movs	r3, #128	; 0x80
 800394e:	021b      	lsls	r3, r3, #8
 8003950:	429a      	cmp	r2, r3
 8003952:	d005      	beq.n	8003960 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	689a      	ldr	r2, [r3, #8]
 8003958:	2380      	movs	r3, #128	; 0x80
 800395a:	00db      	lsls	r3, r3, #3
 800395c:	429a      	cmp	r2, r3
 800395e:	d107      	bne.n	8003970 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	681a      	ldr	r2, [r3, #0]
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	2140      	movs	r1, #64	; 0x40
 800396c:	438a      	bics	r2, r1
 800396e:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003970:	68ba      	ldr	r2, [r7, #8]
 8003972:	68f8      	ldr	r0, [r7, #12]
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	9300      	str	r3, [sp, #0]
 8003978:	0013      	movs	r3, r2
 800397a:	2200      	movs	r2, #0
 800397c:	2180      	movs	r1, #128	; 0x80
 800397e:	f7ff fea7 	bl	80036d0 <SPI_WaitFlagStateUntilTimeout>
 8003982:	1e03      	subs	r3, r0, #0
 8003984:	d007      	beq.n	8003996 <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800398a:	2220      	movs	r2, #32
 800398c:	431a      	orrs	r2, r3
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003992:	2303      	movs	r3, #3
 8003994:	e026      	b.n	80039e4 <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	685a      	ldr	r2, [r3, #4]
 800399a:	2382      	movs	r3, #130	; 0x82
 800399c:	005b      	lsls	r3, r3, #1
 800399e:	429a      	cmp	r2, r3
 80039a0:	d11f      	bne.n	80039e2 <SPI_EndRxTransaction+0xb2>
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	689a      	ldr	r2, [r3, #8]
 80039a6:	2380      	movs	r3, #128	; 0x80
 80039a8:	021b      	lsls	r3, r3, #8
 80039aa:	429a      	cmp	r2, r3
 80039ac:	d005      	beq.n	80039ba <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	689a      	ldr	r2, [r3, #8]
 80039b2:	2380      	movs	r3, #128	; 0x80
 80039b4:	00db      	lsls	r3, r3, #3
 80039b6:	429a      	cmp	r2, r3
 80039b8:	d113      	bne.n	80039e2 <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80039ba:	68ba      	ldr	r2, [r7, #8]
 80039bc:	23c0      	movs	r3, #192	; 0xc0
 80039be:	00d9      	lsls	r1, r3, #3
 80039c0:	68f8      	ldr	r0, [r7, #12]
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	9300      	str	r3, [sp, #0]
 80039c6:	0013      	movs	r3, r2
 80039c8:	2200      	movs	r2, #0
 80039ca:	f7ff ff0f 	bl	80037ec <SPI_WaitFifoStateUntilTimeout>
 80039ce:	1e03      	subs	r3, r0, #0
 80039d0:	d007      	beq.n	80039e2 <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039d6:	2220      	movs	r2, #32
 80039d8:	431a      	orrs	r2, r3
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80039de:	2303      	movs	r3, #3
 80039e0:	e000      	b.n	80039e4 <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 80039e2:	2300      	movs	r3, #0
}
 80039e4:	0018      	movs	r0, r3
 80039e6:	46bd      	mov	sp, r7
 80039e8:	b004      	add	sp, #16
 80039ea:	bd80      	pop	{r7, pc}

080039ec <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b086      	sub	sp, #24
 80039f0:	af02      	add	r7, sp, #8
 80039f2:	60f8      	str	r0, [r7, #12]
 80039f4:	60b9      	str	r1, [r7, #8]
 80039f6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80039f8:	68ba      	ldr	r2, [r7, #8]
 80039fa:	23c0      	movs	r3, #192	; 0xc0
 80039fc:	0159      	lsls	r1, r3, #5
 80039fe:	68f8      	ldr	r0, [r7, #12]
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	9300      	str	r3, [sp, #0]
 8003a04:	0013      	movs	r3, r2
 8003a06:	2200      	movs	r2, #0
 8003a08:	f7ff fef0 	bl	80037ec <SPI_WaitFifoStateUntilTimeout>
 8003a0c:	1e03      	subs	r3, r0, #0
 8003a0e:	d007      	beq.n	8003a20 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a14:	2220      	movs	r2, #32
 8003a16:	431a      	orrs	r2, r3
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003a1c:	2303      	movs	r3, #3
 8003a1e:	e027      	b.n	8003a70 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003a20:	68ba      	ldr	r2, [r7, #8]
 8003a22:	68f8      	ldr	r0, [r7, #12]
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	9300      	str	r3, [sp, #0]
 8003a28:	0013      	movs	r3, r2
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	2180      	movs	r1, #128	; 0x80
 8003a2e:	f7ff fe4f 	bl	80036d0 <SPI_WaitFlagStateUntilTimeout>
 8003a32:	1e03      	subs	r3, r0, #0
 8003a34:	d007      	beq.n	8003a46 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a3a:	2220      	movs	r2, #32
 8003a3c:	431a      	orrs	r2, r3
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003a42:	2303      	movs	r3, #3
 8003a44:	e014      	b.n	8003a70 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003a46:	68ba      	ldr	r2, [r7, #8]
 8003a48:	23c0      	movs	r3, #192	; 0xc0
 8003a4a:	00d9      	lsls	r1, r3, #3
 8003a4c:	68f8      	ldr	r0, [r7, #12]
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	9300      	str	r3, [sp, #0]
 8003a52:	0013      	movs	r3, r2
 8003a54:	2200      	movs	r2, #0
 8003a56:	f7ff fec9 	bl	80037ec <SPI_WaitFifoStateUntilTimeout>
 8003a5a:	1e03      	subs	r3, r0, #0
 8003a5c:	d007      	beq.n	8003a6e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a62:	2220      	movs	r2, #32
 8003a64:	431a      	orrs	r2, r3
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003a6a:	2303      	movs	r3, #3
 8003a6c:	e000      	b.n	8003a70 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003a6e:	2300      	movs	r3, #0
}
 8003a70:	0018      	movs	r0, r3
 8003a72:	46bd      	mov	sp, r7
 8003a74:	b004      	add	sp, #16
 8003a76:	bd80      	pop	{r7, pc}

08003a78 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b084      	sub	sp, #16
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003a80:	f7fd fd80 	bl	8001584 <HAL_GetTick>
 8003a84:	0003      	movs	r3, r0
 8003a86:	60fb      	str	r3, [r7, #12]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	685a      	ldr	r2, [r3, #4]
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	2120      	movs	r1, #32
 8003a94:	438a      	bics	r2, r1
 8003a96:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8003a98:	68fa      	ldr	r2, [r7, #12]
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2164      	movs	r1, #100	; 0x64
 8003a9e:	0018      	movs	r0, r3
 8003aa0:	f7ff ffa4 	bl	80039ec <SPI_EndRxTxTransaction>
 8003aa4:	1e03      	subs	r3, r0, #0
 8003aa6:	d005      	beq.n	8003ab4 <SPI_CloseRxTx_ISR+0x3c>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003aac:	2220      	movs	r2, #32
 8003aae:	431a      	orrs	r2, r3
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	661a      	str	r2, [r3, #96]	; 0x60
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d117      	bne.n	8003aec <SPI_CloseRxTx_ISR+0x74>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	225d      	movs	r2, #93	; 0x5d
 8003ac0:	5c9b      	ldrb	r3, [r3, r2]
 8003ac2:	b2db      	uxtb	r3, r3
 8003ac4:	2b04      	cmp	r3, #4
 8003ac6:	d108      	bne.n	8003ada <SPI_CloseRxTx_ISR+0x62>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	225d      	movs	r2, #93	; 0x5d
 8003acc:	2101      	movs	r1, #1
 8003ace:	5499      	strb	r1, [r3, r2]
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	0018      	movs	r0, r3
 8003ad4:	f7fd f95a 	bl	8000d8c <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8003ad8:	e010      	b.n	8003afc <SPI_CloseRxTx_ISR+0x84>
        hspi->State = HAL_SPI_STATE_READY;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	225d      	movs	r2, #93	; 0x5d
 8003ade:	2101      	movs	r1, #1
 8003ae0:	5499      	strb	r1, [r3, r2]
        HAL_SPI_TxRxCpltCallback(hspi);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	0018      	movs	r0, r3
 8003ae6:	f7ff fc6d 	bl	80033c4 <HAL_SPI_TxRxCpltCallback>
}
 8003aea:	e007      	b.n	8003afc <SPI_CloseRxTx_ISR+0x84>
      hspi->State = HAL_SPI_STATE_READY;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	225d      	movs	r2, #93	; 0x5d
 8003af0:	2101      	movs	r1, #1
 8003af2:	5499      	strb	r1, [r3, r2]
      HAL_SPI_ErrorCallback(hspi);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	0018      	movs	r0, r3
 8003af8:	f7ff fc6c 	bl	80033d4 <HAL_SPI_ErrorCallback>
}
 8003afc:	46c0      	nop			; (mov r8, r8)
 8003afe:	46bd      	mov	sp, r7
 8003b00:	b004      	add	sp, #16
 8003b02:	bd80      	pop	{r7, pc}

08003b04 <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b082      	sub	sp, #8
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	685a      	ldr	r2, [r3, #4]
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	2160      	movs	r1, #96	; 0x60
 8003b18:	438a      	bics	r2, r1
 8003b1a:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 8003b1c:	f7fd fd32 	bl	8001584 <HAL_GetTick>
 8003b20:	0002      	movs	r2, r0
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	2164      	movs	r1, #100	; 0x64
 8003b26:	0018      	movs	r0, r3
 8003b28:	f7ff ff02 	bl	8003930 <SPI_EndRxTransaction>
 8003b2c:	1e03      	subs	r3, r0, #0
 8003b2e:	d005      	beq.n	8003b3c <SPI_CloseRx_ISR+0x38>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b34:	2220      	movs	r2, #32
 8003b36:	431a      	orrs	r2, r3
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	661a      	str	r2, [r3, #96]	; 0x60
  }
  hspi->State = HAL_SPI_STATE_READY;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	225d      	movs	r2, #93	; 0x5d
 8003b40:	2101      	movs	r1, #1
 8003b42:	5499      	strb	r1, [r3, r2]
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d104      	bne.n	8003b56 <SPI_CloseRx_ISR+0x52>
    {
      /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	0018      	movs	r0, r3
 8003b50:	f7fd f91c 	bl	8000d8c <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8003b54:	e003      	b.n	8003b5e <SPI_CloseRx_ISR+0x5a>
      HAL_SPI_ErrorCallback(hspi);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	0018      	movs	r0, r3
 8003b5a:	f7ff fc3b 	bl	80033d4 <HAL_SPI_ErrorCallback>
}
 8003b5e:	46c0      	nop			; (mov r8, r8)
 8003b60:	46bd      	mov	sp, r7
 8003b62:	b002      	add	sp, #8
 8003b64:	bd80      	pop	{r7, pc}

08003b66 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003b66:	b580      	push	{r7, lr}
 8003b68:	b082      	sub	sp, #8
 8003b6a:	af00      	add	r7, sp, #0
 8003b6c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d101      	bne.n	8003b78 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003b74:	2301      	movs	r3, #1
 8003b76:	e04a      	b.n	8003c0e <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	223d      	movs	r2, #61	; 0x3d
 8003b7c:	5c9b      	ldrb	r3, [r3, r2]
 8003b7e:	b2db      	uxtb	r3, r3
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d107      	bne.n	8003b94 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	223c      	movs	r2, #60	; 0x3c
 8003b88:	2100      	movs	r1, #0
 8003b8a:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	0018      	movs	r0, r3
 8003b90:	f7fd fb6c 	bl	800126c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	223d      	movs	r2, #61	; 0x3d
 8003b98:	2102      	movs	r1, #2
 8003b9a:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681a      	ldr	r2, [r3, #0]
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	3304      	adds	r3, #4
 8003ba4:	0019      	movs	r1, r3
 8003ba6:	0010      	movs	r0, r2
 8003ba8:	f000 faba 	bl	8004120 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2248      	movs	r2, #72	; 0x48
 8003bb0:	2101      	movs	r1, #1
 8003bb2:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	223e      	movs	r2, #62	; 0x3e
 8003bb8:	2101      	movs	r1, #1
 8003bba:	5499      	strb	r1, [r3, r2]
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	223f      	movs	r2, #63	; 0x3f
 8003bc0:	2101      	movs	r1, #1
 8003bc2:	5499      	strb	r1, [r3, r2]
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2240      	movs	r2, #64	; 0x40
 8003bc8:	2101      	movs	r1, #1
 8003bca:	5499      	strb	r1, [r3, r2]
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2241      	movs	r2, #65	; 0x41
 8003bd0:	2101      	movs	r1, #1
 8003bd2:	5499      	strb	r1, [r3, r2]
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2242      	movs	r2, #66	; 0x42
 8003bd8:	2101      	movs	r1, #1
 8003bda:	5499      	strb	r1, [r3, r2]
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2243      	movs	r2, #67	; 0x43
 8003be0:	2101      	movs	r1, #1
 8003be2:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2244      	movs	r2, #68	; 0x44
 8003be8:	2101      	movs	r1, #1
 8003bea:	5499      	strb	r1, [r3, r2]
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2245      	movs	r2, #69	; 0x45
 8003bf0:	2101      	movs	r1, #1
 8003bf2:	5499      	strb	r1, [r3, r2]
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2246      	movs	r2, #70	; 0x46
 8003bf8:	2101      	movs	r1, #1
 8003bfa:	5499      	strb	r1, [r3, r2]
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2247      	movs	r2, #71	; 0x47
 8003c00:	2101      	movs	r1, #1
 8003c02:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	223d      	movs	r2, #61	; 0x3d
 8003c08:	2101      	movs	r1, #1
 8003c0a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003c0c:	2300      	movs	r3, #0
}
 8003c0e:	0018      	movs	r0, r3
 8003c10:	46bd      	mov	sp, r7
 8003c12:	b002      	add	sp, #8
 8003c14:	bd80      	pop	{r7, pc}
	...

08003c18 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b084      	sub	sp, #16
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	223d      	movs	r2, #61	; 0x3d
 8003c24:	5c9b      	ldrb	r3, [r3, r2]
 8003c26:	b2db      	uxtb	r3, r3
 8003c28:	2b01      	cmp	r3, #1
 8003c2a:	d001      	beq.n	8003c30 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003c2c:	2301      	movs	r3, #1
 8003c2e:	e042      	b.n	8003cb6 <HAL_TIM_Base_Start_IT+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	223d      	movs	r2, #61	; 0x3d
 8003c34:	2102      	movs	r1, #2
 8003c36:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	68da      	ldr	r2, [r3, #12]
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	2101      	movs	r1, #1
 8003c44:	430a      	orrs	r2, r1
 8003c46:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4a1c      	ldr	r2, [pc, #112]	; (8003cc0 <HAL_TIM_Base_Start_IT+0xa8>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d00f      	beq.n	8003c72 <HAL_TIM_Base_Start_IT+0x5a>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681a      	ldr	r2, [r3, #0]
 8003c56:	2380      	movs	r3, #128	; 0x80
 8003c58:	05db      	lsls	r3, r3, #23
 8003c5a:	429a      	cmp	r2, r3
 8003c5c:	d009      	beq.n	8003c72 <HAL_TIM_Base_Start_IT+0x5a>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	4a18      	ldr	r2, [pc, #96]	; (8003cc4 <HAL_TIM_Base_Start_IT+0xac>)
 8003c64:	4293      	cmp	r3, r2
 8003c66:	d004      	beq.n	8003c72 <HAL_TIM_Base_Start_IT+0x5a>
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4a16      	ldr	r2, [pc, #88]	; (8003cc8 <HAL_TIM_Base_Start_IT+0xb0>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d116      	bne.n	8003ca0 <HAL_TIM_Base_Start_IT+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	689b      	ldr	r3, [r3, #8]
 8003c78:	4a14      	ldr	r2, [pc, #80]	; (8003ccc <HAL_TIM_Base_Start_IT+0xb4>)
 8003c7a:	4013      	ands	r3, r2
 8003c7c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	2b06      	cmp	r3, #6
 8003c82:	d016      	beq.n	8003cb2 <HAL_TIM_Base_Start_IT+0x9a>
 8003c84:	68fa      	ldr	r2, [r7, #12]
 8003c86:	2380      	movs	r3, #128	; 0x80
 8003c88:	025b      	lsls	r3, r3, #9
 8003c8a:	429a      	cmp	r2, r3
 8003c8c:	d011      	beq.n	8003cb2 <HAL_TIM_Base_Start_IT+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	681a      	ldr	r2, [r3, #0]
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	2101      	movs	r1, #1
 8003c9a:	430a      	orrs	r2, r1
 8003c9c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c9e:	e008      	b.n	8003cb2 <HAL_TIM_Base_Start_IT+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	681a      	ldr	r2, [r3, #0]
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	2101      	movs	r1, #1
 8003cac:	430a      	orrs	r2, r1
 8003cae:	601a      	str	r2, [r3, #0]
 8003cb0:	e000      	b.n	8003cb4 <HAL_TIM_Base_Start_IT+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cb2:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8003cb4:	2300      	movs	r3, #0
}
 8003cb6:	0018      	movs	r0, r3
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	b004      	add	sp, #16
 8003cbc:	bd80      	pop	{r7, pc}
 8003cbe:	46c0      	nop			; (mov r8, r8)
 8003cc0:	40012c00 	.word	0x40012c00
 8003cc4:	40000400 	.word	0x40000400
 8003cc8:	40014000 	.word	0x40014000
 8003ccc:	00010007 	.word	0x00010007

08003cd0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b082      	sub	sp, #8
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	691b      	ldr	r3, [r3, #16]
 8003cde:	2202      	movs	r2, #2
 8003ce0:	4013      	ands	r3, r2
 8003ce2:	2b02      	cmp	r3, #2
 8003ce4:	d124      	bne.n	8003d30 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	68db      	ldr	r3, [r3, #12]
 8003cec:	2202      	movs	r2, #2
 8003cee:	4013      	ands	r3, r2
 8003cf0:	2b02      	cmp	r3, #2
 8003cf2:	d11d      	bne.n	8003d30 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	2203      	movs	r2, #3
 8003cfa:	4252      	negs	r2, r2
 8003cfc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2201      	movs	r2, #1
 8003d02:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	699b      	ldr	r3, [r3, #24]
 8003d0a:	2203      	movs	r2, #3
 8003d0c:	4013      	ands	r3, r2
 8003d0e:	d004      	beq.n	8003d1a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	0018      	movs	r0, r3
 8003d14:	f000 f9ec 	bl	80040f0 <HAL_TIM_IC_CaptureCallback>
 8003d18:	e007      	b.n	8003d2a <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	0018      	movs	r0, r3
 8003d1e:	f000 f9df 	bl	80040e0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	0018      	movs	r0, r3
 8003d26:	f000 f9eb 	bl	8004100 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	691b      	ldr	r3, [r3, #16]
 8003d36:	2204      	movs	r2, #4
 8003d38:	4013      	ands	r3, r2
 8003d3a:	2b04      	cmp	r3, #4
 8003d3c:	d125      	bne.n	8003d8a <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	68db      	ldr	r3, [r3, #12]
 8003d44:	2204      	movs	r2, #4
 8003d46:	4013      	ands	r3, r2
 8003d48:	2b04      	cmp	r3, #4
 8003d4a:	d11e      	bne.n	8003d8a <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	2205      	movs	r2, #5
 8003d52:	4252      	negs	r2, r2
 8003d54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2202      	movs	r2, #2
 8003d5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	699a      	ldr	r2, [r3, #24]
 8003d62:	23c0      	movs	r3, #192	; 0xc0
 8003d64:	009b      	lsls	r3, r3, #2
 8003d66:	4013      	ands	r3, r2
 8003d68:	d004      	beq.n	8003d74 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	0018      	movs	r0, r3
 8003d6e:	f000 f9bf 	bl	80040f0 <HAL_TIM_IC_CaptureCallback>
 8003d72:	e007      	b.n	8003d84 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	0018      	movs	r0, r3
 8003d78:	f000 f9b2 	bl	80040e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	0018      	movs	r0, r3
 8003d80:	f000 f9be 	bl	8004100 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2200      	movs	r2, #0
 8003d88:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	691b      	ldr	r3, [r3, #16]
 8003d90:	2208      	movs	r2, #8
 8003d92:	4013      	ands	r3, r2
 8003d94:	2b08      	cmp	r3, #8
 8003d96:	d124      	bne.n	8003de2 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	68db      	ldr	r3, [r3, #12]
 8003d9e:	2208      	movs	r2, #8
 8003da0:	4013      	ands	r3, r2
 8003da2:	2b08      	cmp	r3, #8
 8003da4:	d11d      	bne.n	8003de2 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	2209      	movs	r2, #9
 8003dac:	4252      	negs	r2, r2
 8003dae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2204      	movs	r2, #4
 8003db4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	69db      	ldr	r3, [r3, #28]
 8003dbc:	2203      	movs	r2, #3
 8003dbe:	4013      	ands	r3, r2
 8003dc0:	d004      	beq.n	8003dcc <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	0018      	movs	r0, r3
 8003dc6:	f000 f993 	bl	80040f0 <HAL_TIM_IC_CaptureCallback>
 8003dca:	e007      	b.n	8003ddc <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	0018      	movs	r0, r3
 8003dd0:	f000 f986 	bl	80040e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	0018      	movs	r0, r3
 8003dd8:	f000 f992 	bl	8004100 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2200      	movs	r2, #0
 8003de0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	691b      	ldr	r3, [r3, #16]
 8003de8:	2210      	movs	r2, #16
 8003dea:	4013      	ands	r3, r2
 8003dec:	2b10      	cmp	r3, #16
 8003dee:	d125      	bne.n	8003e3c <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	68db      	ldr	r3, [r3, #12]
 8003df6:	2210      	movs	r2, #16
 8003df8:	4013      	ands	r3, r2
 8003dfa:	2b10      	cmp	r3, #16
 8003dfc:	d11e      	bne.n	8003e3c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	2211      	movs	r2, #17
 8003e04:	4252      	negs	r2, r2
 8003e06:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2208      	movs	r2, #8
 8003e0c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	69da      	ldr	r2, [r3, #28]
 8003e14:	23c0      	movs	r3, #192	; 0xc0
 8003e16:	009b      	lsls	r3, r3, #2
 8003e18:	4013      	ands	r3, r2
 8003e1a:	d004      	beq.n	8003e26 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	0018      	movs	r0, r3
 8003e20:	f000 f966 	bl	80040f0 <HAL_TIM_IC_CaptureCallback>
 8003e24:	e007      	b.n	8003e36 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	0018      	movs	r0, r3
 8003e2a:	f000 f959 	bl	80040e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	0018      	movs	r0, r3
 8003e32:	f000 f965 	bl	8004100 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2200      	movs	r2, #0
 8003e3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	691b      	ldr	r3, [r3, #16]
 8003e42:	2201      	movs	r2, #1
 8003e44:	4013      	ands	r3, r2
 8003e46:	2b01      	cmp	r3, #1
 8003e48:	d10f      	bne.n	8003e6a <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	68db      	ldr	r3, [r3, #12]
 8003e50:	2201      	movs	r2, #1
 8003e52:	4013      	ands	r3, r2
 8003e54:	2b01      	cmp	r3, #1
 8003e56:	d108      	bne.n	8003e6a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	2202      	movs	r2, #2
 8003e5e:	4252      	negs	r2, r2
 8003e60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	0018      	movs	r0, r3
 8003e66:	f7fc ffef 	bl	8000e48 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	691b      	ldr	r3, [r3, #16]
 8003e70:	2280      	movs	r2, #128	; 0x80
 8003e72:	4013      	ands	r3, r2
 8003e74:	2b80      	cmp	r3, #128	; 0x80
 8003e76:	d10f      	bne.n	8003e98 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	68db      	ldr	r3, [r3, #12]
 8003e7e:	2280      	movs	r2, #128	; 0x80
 8003e80:	4013      	ands	r3, r2
 8003e82:	2b80      	cmp	r3, #128	; 0x80
 8003e84:	d108      	bne.n	8003e98 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	2281      	movs	r2, #129	; 0x81
 8003e8c:	4252      	negs	r2, r2
 8003e8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	0018      	movs	r0, r3
 8003e94:	f000 fad6 	bl	8004444 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	691a      	ldr	r2, [r3, #16]
 8003e9e:	2380      	movs	r3, #128	; 0x80
 8003ea0:	005b      	lsls	r3, r3, #1
 8003ea2:	401a      	ands	r2, r3
 8003ea4:	2380      	movs	r3, #128	; 0x80
 8003ea6:	005b      	lsls	r3, r3, #1
 8003ea8:	429a      	cmp	r2, r3
 8003eaa:	d10e      	bne.n	8003eca <HAL_TIM_IRQHandler+0x1fa>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	68db      	ldr	r3, [r3, #12]
 8003eb2:	2280      	movs	r2, #128	; 0x80
 8003eb4:	4013      	ands	r3, r2
 8003eb6:	2b80      	cmp	r3, #128	; 0x80
 8003eb8:	d107      	bne.n	8003eca <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	4a1c      	ldr	r2, [pc, #112]	; (8003f30 <HAL_TIM_IRQHandler+0x260>)
 8003ec0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	0018      	movs	r0, r3
 8003ec6:	f000 fac5 	bl	8004454 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	691b      	ldr	r3, [r3, #16]
 8003ed0:	2240      	movs	r2, #64	; 0x40
 8003ed2:	4013      	ands	r3, r2
 8003ed4:	2b40      	cmp	r3, #64	; 0x40
 8003ed6:	d10f      	bne.n	8003ef8 <HAL_TIM_IRQHandler+0x228>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	68db      	ldr	r3, [r3, #12]
 8003ede:	2240      	movs	r2, #64	; 0x40
 8003ee0:	4013      	ands	r3, r2
 8003ee2:	2b40      	cmp	r3, #64	; 0x40
 8003ee4:	d108      	bne.n	8003ef8 <HAL_TIM_IRQHandler+0x228>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	2241      	movs	r2, #65	; 0x41
 8003eec:	4252      	negs	r2, r2
 8003eee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	0018      	movs	r0, r3
 8003ef4:	f000 f90c 	bl	8004110 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	691b      	ldr	r3, [r3, #16]
 8003efe:	2220      	movs	r2, #32
 8003f00:	4013      	ands	r3, r2
 8003f02:	2b20      	cmp	r3, #32
 8003f04:	d10f      	bne.n	8003f26 <HAL_TIM_IRQHandler+0x256>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	68db      	ldr	r3, [r3, #12]
 8003f0c:	2220      	movs	r2, #32
 8003f0e:	4013      	ands	r3, r2
 8003f10:	2b20      	cmp	r3, #32
 8003f12:	d108      	bne.n	8003f26 <HAL_TIM_IRQHandler+0x256>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	2221      	movs	r2, #33	; 0x21
 8003f1a:	4252      	negs	r2, r2
 8003f1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	0018      	movs	r0, r3
 8003f22:	f000 fa87 	bl	8004434 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003f26:	46c0      	nop			; (mov r8, r8)
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	b002      	add	sp, #8
 8003f2c:	bd80      	pop	{r7, pc}
 8003f2e:	46c0      	nop			; (mov r8, r8)
 8003f30:	fffffeff 	.word	0xfffffeff

08003f34 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b084      	sub	sp, #16
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
 8003f3c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003f3e:	230f      	movs	r3, #15
 8003f40:	18fb      	adds	r3, r7, r3
 8003f42:	2200      	movs	r2, #0
 8003f44:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	223c      	movs	r2, #60	; 0x3c
 8003f4a:	5c9b      	ldrb	r3, [r3, r2]
 8003f4c:	2b01      	cmp	r3, #1
 8003f4e:	d101      	bne.n	8003f54 <HAL_TIM_ConfigClockSource+0x20>
 8003f50:	2302      	movs	r3, #2
 8003f52:	e0bc      	b.n	80040ce <HAL_TIM_ConfigClockSource+0x19a>
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	223c      	movs	r2, #60	; 0x3c
 8003f58:	2101      	movs	r1, #1
 8003f5a:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	223d      	movs	r2, #61	; 0x3d
 8003f60:	2102      	movs	r1, #2
 8003f62:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	689b      	ldr	r3, [r3, #8]
 8003f6a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003f6c:	68bb      	ldr	r3, [r7, #8]
 8003f6e:	4a5a      	ldr	r2, [pc, #360]	; (80040d8 <HAL_TIM_ConfigClockSource+0x1a4>)
 8003f70:	4013      	ands	r3, r2
 8003f72:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f74:	68bb      	ldr	r3, [r7, #8]
 8003f76:	4a59      	ldr	r2, [pc, #356]	; (80040dc <HAL_TIM_ConfigClockSource+0x1a8>)
 8003f78:	4013      	ands	r3, r2
 8003f7a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	68ba      	ldr	r2, [r7, #8]
 8003f82:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	2280      	movs	r2, #128	; 0x80
 8003f8a:	0192      	lsls	r2, r2, #6
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d040      	beq.n	8004012 <HAL_TIM_ConfigClockSource+0xde>
 8003f90:	2280      	movs	r2, #128	; 0x80
 8003f92:	0192      	lsls	r2, r2, #6
 8003f94:	4293      	cmp	r3, r2
 8003f96:	d900      	bls.n	8003f9a <HAL_TIM_ConfigClockSource+0x66>
 8003f98:	e088      	b.n	80040ac <HAL_TIM_ConfigClockSource+0x178>
 8003f9a:	2280      	movs	r2, #128	; 0x80
 8003f9c:	0152      	lsls	r2, r2, #5
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d100      	bne.n	8003fa4 <HAL_TIM_ConfigClockSource+0x70>
 8003fa2:	e088      	b.n	80040b6 <HAL_TIM_ConfigClockSource+0x182>
 8003fa4:	2280      	movs	r2, #128	; 0x80
 8003fa6:	0152      	lsls	r2, r2, #5
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d900      	bls.n	8003fae <HAL_TIM_ConfigClockSource+0x7a>
 8003fac:	e07e      	b.n	80040ac <HAL_TIM_ConfigClockSource+0x178>
 8003fae:	2b70      	cmp	r3, #112	; 0x70
 8003fb0:	d018      	beq.n	8003fe4 <HAL_TIM_ConfigClockSource+0xb0>
 8003fb2:	d900      	bls.n	8003fb6 <HAL_TIM_ConfigClockSource+0x82>
 8003fb4:	e07a      	b.n	80040ac <HAL_TIM_ConfigClockSource+0x178>
 8003fb6:	2b60      	cmp	r3, #96	; 0x60
 8003fb8:	d04f      	beq.n	800405a <HAL_TIM_ConfigClockSource+0x126>
 8003fba:	d900      	bls.n	8003fbe <HAL_TIM_ConfigClockSource+0x8a>
 8003fbc:	e076      	b.n	80040ac <HAL_TIM_ConfigClockSource+0x178>
 8003fbe:	2b50      	cmp	r3, #80	; 0x50
 8003fc0:	d03b      	beq.n	800403a <HAL_TIM_ConfigClockSource+0x106>
 8003fc2:	d900      	bls.n	8003fc6 <HAL_TIM_ConfigClockSource+0x92>
 8003fc4:	e072      	b.n	80040ac <HAL_TIM_ConfigClockSource+0x178>
 8003fc6:	2b40      	cmp	r3, #64	; 0x40
 8003fc8:	d057      	beq.n	800407a <HAL_TIM_ConfigClockSource+0x146>
 8003fca:	d900      	bls.n	8003fce <HAL_TIM_ConfigClockSource+0x9a>
 8003fcc:	e06e      	b.n	80040ac <HAL_TIM_ConfigClockSource+0x178>
 8003fce:	2b30      	cmp	r3, #48	; 0x30
 8003fd0:	d063      	beq.n	800409a <HAL_TIM_ConfigClockSource+0x166>
 8003fd2:	d86b      	bhi.n	80040ac <HAL_TIM_ConfigClockSource+0x178>
 8003fd4:	2b20      	cmp	r3, #32
 8003fd6:	d060      	beq.n	800409a <HAL_TIM_ConfigClockSource+0x166>
 8003fd8:	d868      	bhi.n	80040ac <HAL_TIM_ConfigClockSource+0x178>
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d05d      	beq.n	800409a <HAL_TIM_ConfigClockSource+0x166>
 8003fde:	2b10      	cmp	r3, #16
 8003fe0:	d05b      	beq.n	800409a <HAL_TIM_ConfigClockSource+0x166>
 8003fe2:	e063      	b.n	80040ac <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6818      	ldr	r0, [r3, #0]
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	6899      	ldr	r1, [r3, #8]
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	685a      	ldr	r2, [r3, #4]
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	68db      	ldr	r3, [r3, #12]
 8003ff4:	f000 f990 	bl	8004318 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	689b      	ldr	r3, [r3, #8]
 8003ffe:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004000:	68bb      	ldr	r3, [r7, #8]
 8004002:	2277      	movs	r2, #119	; 0x77
 8004004:	4313      	orrs	r3, r2
 8004006:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	68ba      	ldr	r2, [r7, #8]
 800400e:	609a      	str	r2, [r3, #8]
      break;
 8004010:	e052      	b.n	80040b8 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6818      	ldr	r0, [r3, #0]
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	6899      	ldr	r1, [r3, #8]
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	685a      	ldr	r2, [r3, #4]
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	68db      	ldr	r3, [r3, #12]
 8004022:	f000 f979 	bl	8004318 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	689a      	ldr	r2, [r3, #8]
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	2180      	movs	r1, #128	; 0x80
 8004032:	01c9      	lsls	r1, r1, #7
 8004034:	430a      	orrs	r2, r1
 8004036:	609a      	str	r2, [r3, #8]
      break;
 8004038:	e03e      	b.n	80040b8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6818      	ldr	r0, [r3, #0]
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	6859      	ldr	r1, [r3, #4]
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	68db      	ldr	r3, [r3, #12]
 8004046:	001a      	movs	r2, r3
 8004048:	f000 f8ea 	bl	8004220 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	2150      	movs	r1, #80	; 0x50
 8004052:	0018      	movs	r0, r3
 8004054:	f000 f944 	bl	80042e0 <TIM_ITRx_SetConfig>
      break;
 8004058:	e02e      	b.n	80040b8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6818      	ldr	r0, [r3, #0]
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	6859      	ldr	r1, [r3, #4]
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	68db      	ldr	r3, [r3, #12]
 8004066:	001a      	movs	r2, r3
 8004068:	f000 f908 	bl	800427c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	2160      	movs	r1, #96	; 0x60
 8004072:	0018      	movs	r0, r3
 8004074:	f000 f934 	bl	80042e0 <TIM_ITRx_SetConfig>
      break;
 8004078:	e01e      	b.n	80040b8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6818      	ldr	r0, [r3, #0]
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	6859      	ldr	r1, [r3, #4]
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	68db      	ldr	r3, [r3, #12]
 8004086:	001a      	movs	r2, r3
 8004088:	f000 f8ca 	bl	8004220 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	2140      	movs	r1, #64	; 0x40
 8004092:	0018      	movs	r0, r3
 8004094:	f000 f924 	bl	80042e0 <TIM_ITRx_SetConfig>
      break;
 8004098:	e00e      	b.n	80040b8 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681a      	ldr	r2, [r3, #0]
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	0019      	movs	r1, r3
 80040a4:	0010      	movs	r0, r2
 80040a6:	f000 f91b 	bl	80042e0 <TIM_ITRx_SetConfig>
      break;
 80040aa:	e005      	b.n	80040b8 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 80040ac:	230f      	movs	r3, #15
 80040ae:	18fb      	adds	r3, r7, r3
 80040b0:	2201      	movs	r2, #1
 80040b2:	701a      	strb	r2, [r3, #0]
      break;
 80040b4:	e000      	b.n	80040b8 <HAL_TIM_ConfigClockSource+0x184>
      break;
 80040b6:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	223d      	movs	r2, #61	; 0x3d
 80040bc:	2101      	movs	r1, #1
 80040be:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	223c      	movs	r2, #60	; 0x3c
 80040c4:	2100      	movs	r1, #0
 80040c6:	5499      	strb	r1, [r3, r2]

  return status;
 80040c8:	230f      	movs	r3, #15
 80040ca:	18fb      	adds	r3, r7, r3
 80040cc:	781b      	ldrb	r3, [r3, #0]
}
 80040ce:	0018      	movs	r0, r3
 80040d0:	46bd      	mov	sp, r7
 80040d2:	b004      	add	sp, #16
 80040d4:	bd80      	pop	{r7, pc}
 80040d6:	46c0      	nop			; (mov r8, r8)
 80040d8:	ffceff88 	.word	0xffceff88
 80040dc:	ffff00ff 	.word	0xffff00ff

080040e0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b082      	sub	sp, #8
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80040e8:	46c0      	nop			; (mov r8, r8)
 80040ea:	46bd      	mov	sp, r7
 80040ec:	b002      	add	sp, #8
 80040ee:	bd80      	pop	{r7, pc}

080040f0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b082      	sub	sp, #8
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80040f8:	46c0      	nop			; (mov r8, r8)
 80040fa:	46bd      	mov	sp, r7
 80040fc:	b002      	add	sp, #8
 80040fe:	bd80      	pop	{r7, pc}

08004100 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	b082      	sub	sp, #8
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004108:	46c0      	nop			; (mov r8, r8)
 800410a:	46bd      	mov	sp, r7
 800410c:	b002      	add	sp, #8
 800410e:	bd80      	pop	{r7, pc}

08004110 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004110:	b580      	push	{r7, lr}
 8004112:	b082      	sub	sp, #8
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004118:	46c0      	nop			; (mov r8, r8)
 800411a:	46bd      	mov	sp, r7
 800411c:	b002      	add	sp, #8
 800411e:	bd80      	pop	{r7, pc}

08004120 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b084      	sub	sp, #16
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
 8004128:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	4a34      	ldr	r2, [pc, #208]	; (8004204 <TIM_Base_SetConfig+0xe4>)
 8004134:	4293      	cmp	r3, r2
 8004136:	d008      	beq.n	800414a <TIM_Base_SetConfig+0x2a>
 8004138:	687a      	ldr	r2, [r7, #4]
 800413a:	2380      	movs	r3, #128	; 0x80
 800413c:	05db      	lsls	r3, r3, #23
 800413e:	429a      	cmp	r2, r3
 8004140:	d003      	beq.n	800414a <TIM_Base_SetConfig+0x2a>
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	4a30      	ldr	r2, [pc, #192]	; (8004208 <TIM_Base_SetConfig+0xe8>)
 8004146:	4293      	cmp	r3, r2
 8004148:	d108      	bne.n	800415c <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	2270      	movs	r2, #112	; 0x70
 800414e:	4393      	bics	r3, r2
 8004150:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	685b      	ldr	r3, [r3, #4]
 8004156:	68fa      	ldr	r2, [r7, #12]
 8004158:	4313      	orrs	r3, r2
 800415a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	4a29      	ldr	r2, [pc, #164]	; (8004204 <TIM_Base_SetConfig+0xe4>)
 8004160:	4293      	cmp	r3, r2
 8004162:	d018      	beq.n	8004196 <TIM_Base_SetConfig+0x76>
 8004164:	687a      	ldr	r2, [r7, #4]
 8004166:	2380      	movs	r3, #128	; 0x80
 8004168:	05db      	lsls	r3, r3, #23
 800416a:	429a      	cmp	r2, r3
 800416c:	d013      	beq.n	8004196 <TIM_Base_SetConfig+0x76>
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	4a25      	ldr	r2, [pc, #148]	; (8004208 <TIM_Base_SetConfig+0xe8>)
 8004172:	4293      	cmp	r3, r2
 8004174:	d00f      	beq.n	8004196 <TIM_Base_SetConfig+0x76>
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	4a24      	ldr	r2, [pc, #144]	; (800420c <TIM_Base_SetConfig+0xec>)
 800417a:	4293      	cmp	r3, r2
 800417c:	d00b      	beq.n	8004196 <TIM_Base_SetConfig+0x76>
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	4a23      	ldr	r2, [pc, #140]	; (8004210 <TIM_Base_SetConfig+0xf0>)
 8004182:	4293      	cmp	r3, r2
 8004184:	d007      	beq.n	8004196 <TIM_Base_SetConfig+0x76>
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	4a22      	ldr	r2, [pc, #136]	; (8004214 <TIM_Base_SetConfig+0xf4>)
 800418a:	4293      	cmp	r3, r2
 800418c:	d003      	beq.n	8004196 <TIM_Base_SetConfig+0x76>
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	4a21      	ldr	r2, [pc, #132]	; (8004218 <TIM_Base_SetConfig+0xf8>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d108      	bne.n	80041a8 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	4a20      	ldr	r2, [pc, #128]	; (800421c <TIM_Base_SetConfig+0xfc>)
 800419a:	4013      	ands	r3, r2
 800419c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	68db      	ldr	r3, [r3, #12]
 80041a2:	68fa      	ldr	r2, [r7, #12]
 80041a4:	4313      	orrs	r3, r2
 80041a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	2280      	movs	r2, #128	; 0x80
 80041ac:	4393      	bics	r3, r2
 80041ae:	001a      	movs	r2, r3
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	695b      	ldr	r3, [r3, #20]
 80041b4:	4313      	orrs	r3, r2
 80041b6:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	68fa      	ldr	r2, [r7, #12]
 80041bc:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	689a      	ldr	r2, [r3, #8]
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	681a      	ldr	r2, [r3, #0]
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	4a0c      	ldr	r2, [pc, #48]	; (8004204 <TIM_Base_SetConfig+0xe4>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d00b      	beq.n	80041ee <TIM_Base_SetConfig+0xce>
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	4a0d      	ldr	r2, [pc, #52]	; (8004210 <TIM_Base_SetConfig+0xf0>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d007      	beq.n	80041ee <TIM_Base_SetConfig+0xce>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	4a0c      	ldr	r2, [pc, #48]	; (8004214 <TIM_Base_SetConfig+0xf4>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d003      	beq.n	80041ee <TIM_Base_SetConfig+0xce>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	4a0b      	ldr	r2, [pc, #44]	; (8004218 <TIM_Base_SetConfig+0xf8>)
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d103      	bne.n	80041f6 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	691a      	ldr	r2, [r3, #16]
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2201      	movs	r2, #1
 80041fa:	615a      	str	r2, [r3, #20]
}
 80041fc:	46c0      	nop			; (mov r8, r8)
 80041fe:	46bd      	mov	sp, r7
 8004200:	b004      	add	sp, #16
 8004202:	bd80      	pop	{r7, pc}
 8004204:	40012c00 	.word	0x40012c00
 8004208:	40000400 	.word	0x40000400
 800420c:	40002000 	.word	0x40002000
 8004210:	40014000 	.word	0x40014000
 8004214:	40014400 	.word	0x40014400
 8004218:	40014800 	.word	0x40014800
 800421c:	fffffcff 	.word	0xfffffcff

08004220 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004220:	b580      	push	{r7, lr}
 8004222:	b086      	sub	sp, #24
 8004224:	af00      	add	r7, sp, #0
 8004226:	60f8      	str	r0, [r7, #12]
 8004228:	60b9      	str	r1, [r7, #8]
 800422a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	6a1b      	ldr	r3, [r3, #32]
 8004230:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	6a1b      	ldr	r3, [r3, #32]
 8004236:	2201      	movs	r2, #1
 8004238:	4393      	bics	r3, r2
 800423a:	001a      	movs	r2, r3
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	699b      	ldr	r3, [r3, #24]
 8004244:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004246:	693b      	ldr	r3, [r7, #16]
 8004248:	22f0      	movs	r2, #240	; 0xf0
 800424a:	4393      	bics	r3, r2
 800424c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	011b      	lsls	r3, r3, #4
 8004252:	693a      	ldr	r2, [r7, #16]
 8004254:	4313      	orrs	r3, r2
 8004256:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004258:	697b      	ldr	r3, [r7, #20]
 800425a:	220a      	movs	r2, #10
 800425c:	4393      	bics	r3, r2
 800425e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004260:	697a      	ldr	r2, [r7, #20]
 8004262:	68bb      	ldr	r3, [r7, #8]
 8004264:	4313      	orrs	r3, r2
 8004266:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	693a      	ldr	r2, [r7, #16]
 800426c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	697a      	ldr	r2, [r7, #20]
 8004272:	621a      	str	r2, [r3, #32]
}
 8004274:	46c0      	nop			; (mov r8, r8)
 8004276:	46bd      	mov	sp, r7
 8004278:	b006      	add	sp, #24
 800427a:	bd80      	pop	{r7, pc}

0800427c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	b086      	sub	sp, #24
 8004280:	af00      	add	r7, sp, #0
 8004282:	60f8      	str	r0, [r7, #12]
 8004284:	60b9      	str	r1, [r7, #8]
 8004286:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	6a1b      	ldr	r3, [r3, #32]
 800428c:	2210      	movs	r2, #16
 800428e:	4393      	bics	r3, r2
 8004290:	001a      	movs	r2, r3
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	699b      	ldr	r3, [r3, #24]
 800429a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	6a1b      	ldr	r3, [r3, #32]
 80042a0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80042a2:	697b      	ldr	r3, [r7, #20]
 80042a4:	4a0d      	ldr	r2, [pc, #52]	; (80042dc <TIM_TI2_ConfigInputStage+0x60>)
 80042a6:	4013      	ands	r3, r2
 80042a8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	031b      	lsls	r3, r3, #12
 80042ae:	697a      	ldr	r2, [r7, #20]
 80042b0:	4313      	orrs	r3, r2
 80042b2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80042b4:	693b      	ldr	r3, [r7, #16]
 80042b6:	22a0      	movs	r2, #160	; 0xa0
 80042b8:	4393      	bics	r3, r2
 80042ba:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80042bc:	68bb      	ldr	r3, [r7, #8]
 80042be:	011b      	lsls	r3, r3, #4
 80042c0:	693a      	ldr	r2, [r7, #16]
 80042c2:	4313      	orrs	r3, r2
 80042c4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	697a      	ldr	r2, [r7, #20]
 80042ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	693a      	ldr	r2, [r7, #16]
 80042d0:	621a      	str	r2, [r3, #32]
}
 80042d2:	46c0      	nop			; (mov r8, r8)
 80042d4:	46bd      	mov	sp, r7
 80042d6:	b006      	add	sp, #24
 80042d8:	bd80      	pop	{r7, pc}
 80042da:	46c0      	nop			; (mov r8, r8)
 80042dc:	ffff0fff 	.word	0xffff0fff

080042e0 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b084      	sub	sp, #16
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
 80042e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	689b      	ldr	r3, [r3, #8]
 80042ee:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	4a08      	ldr	r2, [pc, #32]	; (8004314 <TIM_ITRx_SetConfig+0x34>)
 80042f4:	4013      	ands	r3, r2
 80042f6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80042f8:	683a      	ldr	r2, [r7, #0]
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	4313      	orrs	r3, r2
 80042fe:	2207      	movs	r2, #7
 8004300:	4313      	orrs	r3, r2
 8004302:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	68fa      	ldr	r2, [r7, #12]
 8004308:	609a      	str	r2, [r3, #8]
}
 800430a:	46c0      	nop			; (mov r8, r8)
 800430c:	46bd      	mov	sp, r7
 800430e:	b004      	add	sp, #16
 8004310:	bd80      	pop	{r7, pc}
 8004312:	46c0      	nop			; (mov r8, r8)
 8004314:	ffcfff8f 	.word	0xffcfff8f

08004318 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b086      	sub	sp, #24
 800431c:	af00      	add	r7, sp, #0
 800431e:	60f8      	str	r0, [r7, #12]
 8004320:	60b9      	str	r1, [r7, #8]
 8004322:	607a      	str	r2, [r7, #4]
 8004324:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	689b      	ldr	r3, [r3, #8]
 800432a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800432c:	697b      	ldr	r3, [r7, #20]
 800432e:	4a09      	ldr	r2, [pc, #36]	; (8004354 <TIM_ETR_SetConfig+0x3c>)
 8004330:	4013      	ands	r3, r2
 8004332:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	021a      	lsls	r2, r3, #8
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	431a      	orrs	r2, r3
 800433c:	68bb      	ldr	r3, [r7, #8]
 800433e:	4313      	orrs	r3, r2
 8004340:	697a      	ldr	r2, [r7, #20]
 8004342:	4313      	orrs	r3, r2
 8004344:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	697a      	ldr	r2, [r7, #20]
 800434a:	609a      	str	r2, [r3, #8]
}
 800434c:	46c0      	nop			; (mov r8, r8)
 800434e:	46bd      	mov	sp, r7
 8004350:	b006      	add	sp, #24
 8004352:	bd80      	pop	{r7, pc}
 8004354:	ffff00ff 	.word	0xffff00ff

08004358 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004358:	b580      	push	{r7, lr}
 800435a:	b084      	sub	sp, #16
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
 8004360:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	223c      	movs	r2, #60	; 0x3c
 8004366:	5c9b      	ldrb	r3, [r3, r2]
 8004368:	2b01      	cmp	r3, #1
 800436a:	d101      	bne.n	8004370 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800436c:	2302      	movs	r3, #2
 800436e:	e055      	b.n	800441c <HAL_TIMEx_MasterConfigSynchronization+0xc4>
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	223c      	movs	r2, #60	; 0x3c
 8004374:	2101      	movs	r1, #1
 8004376:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	223d      	movs	r2, #61	; 0x3d
 800437c:	2102      	movs	r1, #2
 800437e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	685b      	ldr	r3, [r3, #4]
 8004386:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	689b      	ldr	r3, [r3, #8]
 800438e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	4a23      	ldr	r2, [pc, #140]	; (8004424 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004396:	4293      	cmp	r3, r2
 8004398:	d108      	bne.n	80043ac <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	4a22      	ldr	r2, [pc, #136]	; (8004428 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800439e:	4013      	ands	r3, r2
 80043a0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	685b      	ldr	r3, [r3, #4]
 80043a6:	68fa      	ldr	r2, [r7, #12]
 80043a8:	4313      	orrs	r3, r2
 80043aa:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	2270      	movs	r2, #112	; 0x70
 80043b0:	4393      	bics	r3, r2
 80043b2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	68fa      	ldr	r2, [r7, #12]
 80043ba:	4313      	orrs	r3, r2
 80043bc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	68fa      	ldr	r2, [r7, #12]
 80043c4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4a16      	ldr	r2, [pc, #88]	; (8004424 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d00f      	beq.n	80043f0 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681a      	ldr	r2, [r3, #0]
 80043d4:	2380      	movs	r3, #128	; 0x80
 80043d6:	05db      	lsls	r3, r3, #23
 80043d8:	429a      	cmp	r2, r3
 80043da:	d009      	beq.n	80043f0 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	4a12      	ldr	r2, [pc, #72]	; (800442c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d004      	beq.n	80043f0 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	4a11      	ldr	r2, [pc, #68]	; (8004430 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80043ec:	4293      	cmp	r3, r2
 80043ee:	d10c      	bne.n	800440a <HAL_TIMEx_MasterConfigSynchronization+0xb2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80043f0:	68bb      	ldr	r3, [r7, #8]
 80043f2:	2280      	movs	r2, #128	; 0x80
 80043f4:	4393      	bics	r3, r2
 80043f6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	689b      	ldr	r3, [r3, #8]
 80043fc:	68ba      	ldr	r2, [r7, #8]
 80043fe:	4313      	orrs	r3, r2
 8004400:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	68ba      	ldr	r2, [r7, #8]
 8004408:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	223d      	movs	r2, #61	; 0x3d
 800440e:	2101      	movs	r1, #1
 8004410:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	223c      	movs	r2, #60	; 0x3c
 8004416:	2100      	movs	r1, #0
 8004418:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800441a:	2300      	movs	r3, #0
}
 800441c:	0018      	movs	r0, r3
 800441e:	46bd      	mov	sp, r7
 8004420:	b004      	add	sp, #16
 8004422:	bd80      	pop	{r7, pc}
 8004424:	40012c00 	.word	0x40012c00
 8004428:	ff0fffff 	.word	0xff0fffff
 800442c:	40000400 	.word	0x40000400
 8004430:	40014000 	.word	0x40014000

08004434 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b082      	sub	sp, #8
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800443c:	46c0      	nop			; (mov r8, r8)
 800443e:	46bd      	mov	sp, r7
 8004440:	b002      	add	sp, #8
 8004442:	bd80      	pop	{r7, pc}

08004444 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004444:	b580      	push	{r7, lr}
 8004446:	b082      	sub	sp, #8
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800444c:	46c0      	nop			; (mov r8, r8)
 800444e:	46bd      	mov	sp, r7
 8004450:	b002      	add	sp, #8
 8004452:	bd80      	pop	{r7, pc}

08004454 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004454:	b580      	push	{r7, lr}
 8004456:	b082      	sub	sp, #8
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800445c:	46c0      	nop			; (mov r8, r8)
 800445e:	46bd      	mov	sp, r7
 8004460:	b002      	add	sp, #8
 8004462:	bd80      	pop	{r7, pc}

08004464 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b082      	sub	sp, #8
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d101      	bne.n	8004476 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004472:	2301      	movs	r3, #1
 8004474:	e046      	b.n	8004504 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	2284      	movs	r2, #132	; 0x84
 800447a:	589b      	ldr	r3, [r3, r2]
 800447c:	2b00      	cmp	r3, #0
 800447e:	d107      	bne.n	8004490 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2280      	movs	r2, #128	; 0x80
 8004484:	2100      	movs	r1, #0
 8004486:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	0018      	movs	r0, r3
 800448c:	f7fc ff74 	bl	8001378 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2284      	movs	r2, #132	; 0x84
 8004494:	2124      	movs	r1, #36	; 0x24
 8004496:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	681a      	ldr	r2, [r3, #0]
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	2101      	movs	r1, #1
 80044a4:	438a      	bics	r2, r1
 80044a6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	0018      	movs	r0, r3
 80044ac:	f000 f830 	bl	8004510 <UART_SetConfig>
 80044b0:	0003      	movs	r3, r0
 80044b2:	2b01      	cmp	r3, #1
 80044b4:	d101      	bne.n	80044ba <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 80044b6:	2301      	movs	r3, #1
 80044b8:	e024      	b.n	8004504 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d003      	beq.n	80044ca <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	0018      	movs	r0, r3
 80044c6:	f000 fae1 	bl	8004a8c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	685a      	ldr	r2, [r3, #4]
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	490d      	ldr	r1, [pc, #52]	; (800450c <HAL_UART_Init+0xa8>)
 80044d6:	400a      	ands	r2, r1
 80044d8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	689a      	ldr	r2, [r3, #8]
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	212a      	movs	r1, #42	; 0x2a
 80044e6:	438a      	bics	r2, r1
 80044e8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	681a      	ldr	r2, [r3, #0]
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	2101      	movs	r1, #1
 80044f6:	430a      	orrs	r2, r1
 80044f8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	0018      	movs	r0, r3
 80044fe:	f000 fb79 	bl	8004bf4 <UART_CheckIdleState>
 8004502:	0003      	movs	r3, r0
}
 8004504:	0018      	movs	r0, r3
 8004506:	46bd      	mov	sp, r7
 8004508:	b002      	add	sp, #8
 800450a:	bd80      	pop	{r7, pc}
 800450c:	ffffb7ff 	.word	0xffffb7ff

08004510 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004510:	b5b0      	push	{r4, r5, r7, lr}
 8004512:	b090      	sub	sp, #64	; 0x40
 8004514:	af00      	add	r7, sp, #0
 8004516:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004518:	231a      	movs	r3, #26
 800451a:	2220      	movs	r2, #32
 800451c:	189b      	adds	r3, r3, r2
 800451e:	19db      	adds	r3, r3, r7
 8004520:	2200      	movs	r2, #0
 8004522:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004526:	689a      	ldr	r2, [r3, #8]
 8004528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800452a:	691b      	ldr	r3, [r3, #16]
 800452c:	431a      	orrs	r2, r3
 800452e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004530:	695b      	ldr	r3, [r3, #20]
 8004532:	431a      	orrs	r2, r3
 8004534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004536:	69db      	ldr	r3, [r3, #28]
 8004538:	4313      	orrs	r3, r2
 800453a:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800453c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	4aaf      	ldr	r2, [pc, #700]	; (8004800 <UART_SetConfig+0x2f0>)
 8004544:	4013      	ands	r3, r2
 8004546:	0019      	movs	r1, r3
 8004548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800454a:	681a      	ldr	r2, [r3, #0]
 800454c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800454e:	430b      	orrs	r3, r1
 8004550:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	685b      	ldr	r3, [r3, #4]
 8004558:	4aaa      	ldr	r2, [pc, #680]	; (8004804 <UART_SetConfig+0x2f4>)
 800455a:	4013      	ands	r3, r2
 800455c:	0018      	movs	r0, r3
 800455e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004560:	68d9      	ldr	r1, [r3, #12]
 8004562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004564:	681a      	ldr	r2, [r3, #0]
 8004566:	0003      	movs	r3, r0
 8004568:	430b      	orrs	r3, r1
 800456a:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800456c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800456e:	699b      	ldr	r3, [r3, #24]
 8004570:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	4aa4      	ldr	r2, [pc, #656]	; (8004808 <UART_SetConfig+0x2f8>)
 8004578:	4293      	cmp	r3, r2
 800457a:	d004      	beq.n	8004586 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800457c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800457e:	6a1b      	ldr	r3, [r3, #32]
 8004580:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004582:	4313      	orrs	r3, r2
 8004584:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	689b      	ldr	r3, [r3, #8]
 800458c:	4a9f      	ldr	r2, [pc, #636]	; (800480c <UART_SetConfig+0x2fc>)
 800458e:	4013      	ands	r3, r2
 8004590:	0019      	movs	r1, r3
 8004592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004594:	681a      	ldr	r2, [r3, #0]
 8004596:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004598:	430b      	orrs	r3, r1
 800459a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800459c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045a2:	220f      	movs	r2, #15
 80045a4:	4393      	bics	r3, r2
 80045a6:	0018      	movs	r0, r3
 80045a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045aa:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80045ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ae:	681a      	ldr	r2, [r3, #0]
 80045b0:	0003      	movs	r3, r0
 80045b2:	430b      	orrs	r3, r1
 80045b4:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80045b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	4a95      	ldr	r2, [pc, #596]	; (8004810 <UART_SetConfig+0x300>)
 80045bc:	4293      	cmp	r3, r2
 80045be:	d131      	bne.n	8004624 <UART_SetConfig+0x114>
 80045c0:	4b94      	ldr	r3, [pc, #592]	; (8004814 <UART_SetConfig+0x304>)
 80045c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045c4:	2203      	movs	r2, #3
 80045c6:	4013      	ands	r3, r2
 80045c8:	2b03      	cmp	r3, #3
 80045ca:	d01d      	beq.n	8004608 <UART_SetConfig+0xf8>
 80045cc:	d823      	bhi.n	8004616 <UART_SetConfig+0x106>
 80045ce:	2b02      	cmp	r3, #2
 80045d0:	d00c      	beq.n	80045ec <UART_SetConfig+0xdc>
 80045d2:	d820      	bhi.n	8004616 <UART_SetConfig+0x106>
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d002      	beq.n	80045de <UART_SetConfig+0xce>
 80045d8:	2b01      	cmp	r3, #1
 80045da:	d00e      	beq.n	80045fa <UART_SetConfig+0xea>
 80045dc:	e01b      	b.n	8004616 <UART_SetConfig+0x106>
 80045de:	231b      	movs	r3, #27
 80045e0:	2220      	movs	r2, #32
 80045e2:	189b      	adds	r3, r3, r2
 80045e4:	19db      	adds	r3, r3, r7
 80045e6:	2200      	movs	r2, #0
 80045e8:	701a      	strb	r2, [r3, #0]
 80045ea:	e0b4      	b.n	8004756 <UART_SetConfig+0x246>
 80045ec:	231b      	movs	r3, #27
 80045ee:	2220      	movs	r2, #32
 80045f0:	189b      	adds	r3, r3, r2
 80045f2:	19db      	adds	r3, r3, r7
 80045f4:	2202      	movs	r2, #2
 80045f6:	701a      	strb	r2, [r3, #0]
 80045f8:	e0ad      	b.n	8004756 <UART_SetConfig+0x246>
 80045fa:	231b      	movs	r3, #27
 80045fc:	2220      	movs	r2, #32
 80045fe:	189b      	adds	r3, r3, r2
 8004600:	19db      	adds	r3, r3, r7
 8004602:	2204      	movs	r2, #4
 8004604:	701a      	strb	r2, [r3, #0]
 8004606:	e0a6      	b.n	8004756 <UART_SetConfig+0x246>
 8004608:	231b      	movs	r3, #27
 800460a:	2220      	movs	r2, #32
 800460c:	189b      	adds	r3, r3, r2
 800460e:	19db      	adds	r3, r3, r7
 8004610:	2208      	movs	r2, #8
 8004612:	701a      	strb	r2, [r3, #0]
 8004614:	e09f      	b.n	8004756 <UART_SetConfig+0x246>
 8004616:	231b      	movs	r3, #27
 8004618:	2220      	movs	r2, #32
 800461a:	189b      	adds	r3, r3, r2
 800461c:	19db      	adds	r3, r3, r7
 800461e:	2210      	movs	r2, #16
 8004620:	701a      	strb	r2, [r3, #0]
 8004622:	e098      	b.n	8004756 <UART_SetConfig+0x246>
 8004624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	4a7b      	ldr	r2, [pc, #492]	; (8004818 <UART_SetConfig+0x308>)
 800462a:	4293      	cmp	r3, r2
 800462c:	d131      	bne.n	8004692 <UART_SetConfig+0x182>
 800462e:	4b79      	ldr	r3, [pc, #484]	; (8004814 <UART_SetConfig+0x304>)
 8004630:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004632:	220c      	movs	r2, #12
 8004634:	4013      	ands	r3, r2
 8004636:	2b0c      	cmp	r3, #12
 8004638:	d01d      	beq.n	8004676 <UART_SetConfig+0x166>
 800463a:	d823      	bhi.n	8004684 <UART_SetConfig+0x174>
 800463c:	2b08      	cmp	r3, #8
 800463e:	d00c      	beq.n	800465a <UART_SetConfig+0x14a>
 8004640:	d820      	bhi.n	8004684 <UART_SetConfig+0x174>
 8004642:	2b00      	cmp	r3, #0
 8004644:	d002      	beq.n	800464c <UART_SetConfig+0x13c>
 8004646:	2b04      	cmp	r3, #4
 8004648:	d00e      	beq.n	8004668 <UART_SetConfig+0x158>
 800464a:	e01b      	b.n	8004684 <UART_SetConfig+0x174>
 800464c:	231b      	movs	r3, #27
 800464e:	2220      	movs	r2, #32
 8004650:	189b      	adds	r3, r3, r2
 8004652:	19db      	adds	r3, r3, r7
 8004654:	2200      	movs	r2, #0
 8004656:	701a      	strb	r2, [r3, #0]
 8004658:	e07d      	b.n	8004756 <UART_SetConfig+0x246>
 800465a:	231b      	movs	r3, #27
 800465c:	2220      	movs	r2, #32
 800465e:	189b      	adds	r3, r3, r2
 8004660:	19db      	adds	r3, r3, r7
 8004662:	2202      	movs	r2, #2
 8004664:	701a      	strb	r2, [r3, #0]
 8004666:	e076      	b.n	8004756 <UART_SetConfig+0x246>
 8004668:	231b      	movs	r3, #27
 800466a:	2220      	movs	r2, #32
 800466c:	189b      	adds	r3, r3, r2
 800466e:	19db      	adds	r3, r3, r7
 8004670:	2204      	movs	r2, #4
 8004672:	701a      	strb	r2, [r3, #0]
 8004674:	e06f      	b.n	8004756 <UART_SetConfig+0x246>
 8004676:	231b      	movs	r3, #27
 8004678:	2220      	movs	r2, #32
 800467a:	189b      	adds	r3, r3, r2
 800467c:	19db      	adds	r3, r3, r7
 800467e:	2208      	movs	r2, #8
 8004680:	701a      	strb	r2, [r3, #0]
 8004682:	e068      	b.n	8004756 <UART_SetConfig+0x246>
 8004684:	231b      	movs	r3, #27
 8004686:	2220      	movs	r2, #32
 8004688:	189b      	adds	r3, r3, r2
 800468a:	19db      	adds	r3, r3, r7
 800468c:	2210      	movs	r2, #16
 800468e:	701a      	strb	r2, [r3, #0]
 8004690:	e061      	b.n	8004756 <UART_SetConfig+0x246>
 8004692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	4a61      	ldr	r2, [pc, #388]	; (800481c <UART_SetConfig+0x30c>)
 8004698:	4293      	cmp	r3, r2
 800469a:	d106      	bne.n	80046aa <UART_SetConfig+0x19a>
 800469c:	231b      	movs	r3, #27
 800469e:	2220      	movs	r2, #32
 80046a0:	189b      	adds	r3, r3, r2
 80046a2:	19db      	adds	r3, r3, r7
 80046a4:	2200      	movs	r2, #0
 80046a6:	701a      	strb	r2, [r3, #0]
 80046a8:	e055      	b.n	8004756 <UART_SetConfig+0x246>
 80046aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	4a5c      	ldr	r2, [pc, #368]	; (8004820 <UART_SetConfig+0x310>)
 80046b0:	4293      	cmp	r3, r2
 80046b2:	d106      	bne.n	80046c2 <UART_SetConfig+0x1b2>
 80046b4:	231b      	movs	r3, #27
 80046b6:	2220      	movs	r2, #32
 80046b8:	189b      	adds	r3, r3, r2
 80046ba:	19db      	adds	r3, r3, r7
 80046bc:	2200      	movs	r2, #0
 80046be:	701a      	strb	r2, [r3, #0]
 80046c0:	e049      	b.n	8004756 <UART_SetConfig+0x246>
 80046c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	4a50      	ldr	r2, [pc, #320]	; (8004808 <UART_SetConfig+0x2f8>)
 80046c8:	4293      	cmp	r3, r2
 80046ca:	d13e      	bne.n	800474a <UART_SetConfig+0x23a>
 80046cc:	4b51      	ldr	r3, [pc, #324]	; (8004814 <UART_SetConfig+0x304>)
 80046ce:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80046d0:	23c0      	movs	r3, #192	; 0xc0
 80046d2:	011b      	lsls	r3, r3, #4
 80046d4:	4013      	ands	r3, r2
 80046d6:	22c0      	movs	r2, #192	; 0xc0
 80046d8:	0112      	lsls	r2, r2, #4
 80046da:	4293      	cmp	r3, r2
 80046dc:	d027      	beq.n	800472e <UART_SetConfig+0x21e>
 80046de:	22c0      	movs	r2, #192	; 0xc0
 80046e0:	0112      	lsls	r2, r2, #4
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d82a      	bhi.n	800473c <UART_SetConfig+0x22c>
 80046e6:	2280      	movs	r2, #128	; 0x80
 80046e8:	0112      	lsls	r2, r2, #4
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d011      	beq.n	8004712 <UART_SetConfig+0x202>
 80046ee:	2280      	movs	r2, #128	; 0x80
 80046f0:	0112      	lsls	r2, r2, #4
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d822      	bhi.n	800473c <UART_SetConfig+0x22c>
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d004      	beq.n	8004704 <UART_SetConfig+0x1f4>
 80046fa:	2280      	movs	r2, #128	; 0x80
 80046fc:	00d2      	lsls	r2, r2, #3
 80046fe:	4293      	cmp	r3, r2
 8004700:	d00e      	beq.n	8004720 <UART_SetConfig+0x210>
 8004702:	e01b      	b.n	800473c <UART_SetConfig+0x22c>
 8004704:	231b      	movs	r3, #27
 8004706:	2220      	movs	r2, #32
 8004708:	189b      	adds	r3, r3, r2
 800470a:	19db      	adds	r3, r3, r7
 800470c:	2200      	movs	r2, #0
 800470e:	701a      	strb	r2, [r3, #0]
 8004710:	e021      	b.n	8004756 <UART_SetConfig+0x246>
 8004712:	231b      	movs	r3, #27
 8004714:	2220      	movs	r2, #32
 8004716:	189b      	adds	r3, r3, r2
 8004718:	19db      	adds	r3, r3, r7
 800471a:	2202      	movs	r2, #2
 800471c:	701a      	strb	r2, [r3, #0]
 800471e:	e01a      	b.n	8004756 <UART_SetConfig+0x246>
 8004720:	231b      	movs	r3, #27
 8004722:	2220      	movs	r2, #32
 8004724:	189b      	adds	r3, r3, r2
 8004726:	19db      	adds	r3, r3, r7
 8004728:	2204      	movs	r2, #4
 800472a:	701a      	strb	r2, [r3, #0]
 800472c:	e013      	b.n	8004756 <UART_SetConfig+0x246>
 800472e:	231b      	movs	r3, #27
 8004730:	2220      	movs	r2, #32
 8004732:	189b      	adds	r3, r3, r2
 8004734:	19db      	adds	r3, r3, r7
 8004736:	2208      	movs	r2, #8
 8004738:	701a      	strb	r2, [r3, #0]
 800473a:	e00c      	b.n	8004756 <UART_SetConfig+0x246>
 800473c:	231b      	movs	r3, #27
 800473e:	2220      	movs	r2, #32
 8004740:	189b      	adds	r3, r3, r2
 8004742:	19db      	adds	r3, r3, r7
 8004744:	2210      	movs	r2, #16
 8004746:	701a      	strb	r2, [r3, #0]
 8004748:	e005      	b.n	8004756 <UART_SetConfig+0x246>
 800474a:	231b      	movs	r3, #27
 800474c:	2220      	movs	r2, #32
 800474e:	189b      	adds	r3, r3, r2
 8004750:	19db      	adds	r3, r3, r7
 8004752:	2210      	movs	r2, #16
 8004754:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4a2b      	ldr	r2, [pc, #172]	; (8004808 <UART_SetConfig+0x2f8>)
 800475c:	4293      	cmp	r3, r2
 800475e:	d000      	beq.n	8004762 <UART_SetConfig+0x252>
 8004760:	e0a9      	b.n	80048b6 <UART_SetConfig+0x3a6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004762:	231b      	movs	r3, #27
 8004764:	2220      	movs	r2, #32
 8004766:	189b      	adds	r3, r3, r2
 8004768:	19db      	adds	r3, r3, r7
 800476a:	781b      	ldrb	r3, [r3, #0]
 800476c:	2b08      	cmp	r3, #8
 800476e:	d015      	beq.n	800479c <UART_SetConfig+0x28c>
 8004770:	dc18      	bgt.n	80047a4 <UART_SetConfig+0x294>
 8004772:	2b04      	cmp	r3, #4
 8004774:	d00d      	beq.n	8004792 <UART_SetConfig+0x282>
 8004776:	dc15      	bgt.n	80047a4 <UART_SetConfig+0x294>
 8004778:	2b00      	cmp	r3, #0
 800477a:	d002      	beq.n	8004782 <UART_SetConfig+0x272>
 800477c:	2b02      	cmp	r3, #2
 800477e:	d005      	beq.n	800478c <UART_SetConfig+0x27c>
 8004780:	e010      	b.n	80047a4 <UART_SetConfig+0x294>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004782:	f7fd ff3b 	bl	80025fc <HAL_RCC_GetPCLK1Freq>
 8004786:	0003      	movs	r3, r0
 8004788:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800478a:	e014      	b.n	80047b6 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800478c:	4b25      	ldr	r3, [pc, #148]	; (8004824 <UART_SetConfig+0x314>)
 800478e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004790:	e011      	b.n	80047b6 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004792:	f7fd fea7 	bl	80024e4 <HAL_RCC_GetSysClockFreq>
 8004796:	0003      	movs	r3, r0
 8004798:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800479a:	e00c      	b.n	80047b6 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800479c:	2380      	movs	r3, #128	; 0x80
 800479e:	021b      	lsls	r3, r3, #8
 80047a0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80047a2:	e008      	b.n	80047b6 <UART_SetConfig+0x2a6>
      default:
        pclk = 0U;
 80047a4:	2300      	movs	r3, #0
 80047a6:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80047a8:	231a      	movs	r3, #26
 80047aa:	2220      	movs	r2, #32
 80047ac:	189b      	adds	r3, r3, r2
 80047ae:	19db      	adds	r3, r3, r7
 80047b0:	2201      	movs	r2, #1
 80047b2:	701a      	strb	r2, [r3, #0]
        break;
 80047b4:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80047b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d100      	bne.n	80047be <UART_SetConfig+0x2ae>
 80047bc:	e14b      	b.n	8004a56 <UART_SetConfig+0x546>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80047be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047c0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80047c2:	4b19      	ldr	r3, [pc, #100]	; (8004828 <UART_SetConfig+0x318>)
 80047c4:	0052      	lsls	r2, r2, #1
 80047c6:	5ad3      	ldrh	r3, [r2, r3]
 80047c8:	0019      	movs	r1, r3
 80047ca:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80047cc:	f7fb fcac 	bl	8000128 <__udivsi3>
 80047d0:	0003      	movs	r3, r0
 80047d2:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80047d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047d6:	685a      	ldr	r2, [r3, #4]
 80047d8:	0013      	movs	r3, r2
 80047da:	005b      	lsls	r3, r3, #1
 80047dc:	189b      	adds	r3, r3, r2
 80047de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80047e0:	429a      	cmp	r2, r3
 80047e2:	d305      	bcc.n	80047f0 <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80047e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047e6:	685b      	ldr	r3, [r3, #4]
 80047e8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80047ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80047ec:	429a      	cmp	r2, r3
 80047ee:	d91d      	bls.n	800482c <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 80047f0:	231a      	movs	r3, #26
 80047f2:	2220      	movs	r2, #32
 80047f4:	189b      	adds	r3, r3, r2
 80047f6:	19db      	adds	r3, r3, r7
 80047f8:	2201      	movs	r2, #1
 80047fa:	701a      	strb	r2, [r3, #0]
 80047fc:	e12b      	b.n	8004a56 <UART_SetConfig+0x546>
 80047fe:	46c0      	nop			; (mov r8, r8)
 8004800:	cfff69f3 	.word	0xcfff69f3
 8004804:	ffffcfff 	.word	0xffffcfff
 8004808:	40008000 	.word	0x40008000
 800480c:	11fff4ff 	.word	0x11fff4ff
 8004810:	40013800 	.word	0x40013800
 8004814:	40021000 	.word	0x40021000
 8004818:	40004400 	.word	0x40004400
 800481c:	40004800 	.word	0x40004800
 8004820:	40004c00 	.word	0x40004c00
 8004824:	00f42400 	.word	0x00f42400
 8004828:	08006f08 	.word	0x08006f08
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800482c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800482e:	61bb      	str	r3, [r7, #24]
 8004830:	2300      	movs	r3, #0
 8004832:	61fb      	str	r3, [r7, #28]
 8004834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004836:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004838:	4b92      	ldr	r3, [pc, #584]	; (8004a84 <UART_SetConfig+0x574>)
 800483a:	0052      	lsls	r2, r2, #1
 800483c:	5ad3      	ldrh	r3, [r2, r3]
 800483e:	613b      	str	r3, [r7, #16]
 8004840:	2300      	movs	r3, #0
 8004842:	617b      	str	r3, [r7, #20]
 8004844:	693a      	ldr	r2, [r7, #16]
 8004846:	697b      	ldr	r3, [r7, #20]
 8004848:	69b8      	ldr	r0, [r7, #24]
 800484a:	69f9      	ldr	r1, [r7, #28]
 800484c:	f7fb fde2 	bl	8000414 <__aeabi_uldivmod>
 8004850:	0002      	movs	r2, r0
 8004852:	000b      	movs	r3, r1
 8004854:	0e11      	lsrs	r1, r2, #24
 8004856:	021d      	lsls	r5, r3, #8
 8004858:	430d      	orrs	r5, r1
 800485a:	0214      	lsls	r4, r2, #8
 800485c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800485e:	685b      	ldr	r3, [r3, #4]
 8004860:	085b      	lsrs	r3, r3, #1
 8004862:	60bb      	str	r3, [r7, #8]
 8004864:	2300      	movs	r3, #0
 8004866:	60fb      	str	r3, [r7, #12]
 8004868:	68b8      	ldr	r0, [r7, #8]
 800486a:	68f9      	ldr	r1, [r7, #12]
 800486c:	1900      	adds	r0, r0, r4
 800486e:	4169      	adcs	r1, r5
 8004870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004872:	685b      	ldr	r3, [r3, #4]
 8004874:	603b      	str	r3, [r7, #0]
 8004876:	2300      	movs	r3, #0
 8004878:	607b      	str	r3, [r7, #4]
 800487a:	683a      	ldr	r2, [r7, #0]
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	f7fb fdc9 	bl	8000414 <__aeabi_uldivmod>
 8004882:	0002      	movs	r2, r0
 8004884:	000b      	movs	r3, r1
 8004886:	0013      	movs	r3, r2
 8004888:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800488a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800488c:	23c0      	movs	r3, #192	; 0xc0
 800488e:	009b      	lsls	r3, r3, #2
 8004890:	429a      	cmp	r2, r3
 8004892:	d309      	bcc.n	80048a8 <UART_SetConfig+0x398>
 8004894:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004896:	2380      	movs	r3, #128	; 0x80
 8004898:	035b      	lsls	r3, r3, #13
 800489a:	429a      	cmp	r2, r3
 800489c:	d204      	bcs.n	80048a8 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 800489e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80048a4:	60da      	str	r2, [r3, #12]
 80048a6:	e0d6      	b.n	8004a56 <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 80048a8:	231a      	movs	r3, #26
 80048aa:	2220      	movs	r2, #32
 80048ac:	189b      	adds	r3, r3, r2
 80048ae:	19db      	adds	r3, r3, r7
 80048b0:	2201      	movs	r2, #1
 80048b2:	701a      	strb	r2, [r3, #0]
 80048b4:	e0cf      	b.n	8004a56 <UART_SetConfig+0x546>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80048b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048b8:	69da      	ldr	r2, [r3, #28]
 80048ba:	2380      	movs	r3, #128	; 0x80
 80048bc:	021b      	lsls	r3, r3, #8
 80048be:	429a      	cmp	r2, r3
 80048c0:	d000      	beq.n	80048c4 <UART_SetConfig+0x3b4>
 80048c2:	e070      	b.n	80049a6 <UART_SetConfig+0x496>
  {
    switch (clocksource)
 80048c4:	231b      	movs	r3, #27
 80048c6:	2220      	movs	r2, #32
 80048c8:	189b      	adds	r3, r3, r2
 80048ca:	19db      	adds	r3, r3, r7
 80048cc:	781b      	ldrb	r3, [r3, #0]
 80048ce:	2b08      	cmp	r3, #8
 80048d0:	d015      	beq.n	80048fe <UART_SetConfig+0x3ee>
 80048d2:	dc18      	bgt.n	8004906 <UART_SetConfig+0x3f6>
 80048d4:	2b04      	cmp	r3, #4
 80048d6:	d00d      	beq.n	80048f4 <UART_SetConfig+0x3e4>
 80048d8:	dc15      	bgt.n	8004906 <UART_SetConfig+0x3f6>
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d002      	beq.n	80048e4 <UART_SetConfig+0x3d4>
 80048de:	2b02      	cmp	r3, #2
 80048e0:	d005      	beq.n	80048ee <UART_SetConfig+0x3de>
 80048e2:	e010      	b.n	8004906 <UART_SetConfig+0x3f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80048e4:	f7fd fe8a 	bl	80025fc <HAL_RCC_GetPCLK1Freq>
 80048e8:	0003      	movs	r3, r0
 80048ea:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80048ec:	e014      	b.n	8004918 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80048ee:	4b66      	ldr	r3, [pc, #408]	; (8004a88 <UART_SetConfig+0x578>)
 80048f0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80048f2:	e011      	b.n	8004918 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80048f4:	f7fd fdf6 	bl	80024e4 <HAL_RCC_GetSysClockFreq>
 80048f8:	0003      	movs	r3, r0
 80048fa:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80048fc:	e00c      	b.n	8004918 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80048fe:	2380      	movs	r3, #128	; 0x80
 8004900:	021b      	lsls	r3, r3, #8
 8004902:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004904:	e008      	b.n	8004918 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8004906:	2300      	movs	r3, #0
 8004908:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 800490a:	231a      	movs	r3, #26
 800490c:	2220      	movs	r2, #32
 800490e:	189b      	adds	r3, r3, r2
 8004910:	19db      	adds	r3, r3, r7
 8004912:	2201      	movs	r2, #1
 8004914:	701a      	strb	r2, [r3, #0]
        break;
 8004916:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004918:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800491a:	2b00      	cmp	r3, #0
 800491c:	d100      	bne.n	8004920 <UART_SetConfig+0x410>
 800491e:	e09a      	b.n	8004a56 <UART_SetConfig+0x546>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004922:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004924:	4b57      	ldr	r3, [pc, #348]	; (8004a84 <UART_SetConfig+0x574>)
 8004926:	0052      	lsls	r2, r2, #1
 8004928:	5ad3      	ldrh	r3, [r2, r3]
 800492a:	0019      	movs	r1, r3
 800492c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800492e:	f7fb fbfb 	bl	8000128 <__udivsi3>
 8004932:	0003      	movs	r3, r0
 8004934:	005a      	lsls	r2, r3, #1
 8004936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004938:	685b      	ldr	r3, [r3, #4]
 800493a:	085b      	lsrs	r3, r3, #1
 800493c:	18d2      	adds	r2, r2, r3
 800493e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004940:	685b      	ldr	r3, [r3, #4]
 8004942:	0019      	movs	r1, r3
 8004944:	0010      	movs	r0, r2
 8004946:	f7fb fbef 	bl	8000128 <__udivsi3>
 800494a:	0003      	movs	r3, r0
 800494c:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800494e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004950:	2b0f      	cmp	r3, #15
 8004952:	d921      	bls.n	8004998 <UART_SetConfig+0x488>
 8004954:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004956:	2380      	movs	r3, #128	; 0x80
 8004958:	025b      	lsls	r3, r3, #9
 800495a:	429a      	cmp	r2, r3
 800495c:	d21c      	bcs.n	8004998 <UART_SetConfig+0x488>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800495e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004960:	b29a      	uxth	r2, r3
 8004962:	200e      	movs	r0, #14
 8004964:	2420      	movs	r4, #32
 8004966:	1903      	adds	r3, r0, r4
 8004968:	19db      	adds	r3, r3, r7
 800496a:	210f      	movs	r1, #15
 800496c:	438a      	bics	r2, r1
 800496e:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004970:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004972:	085b      	lsrs	r3, r3, #1
 8004974:	b29b      	uxth	r3, r3
 8004976:	2207      	movs	r2, #7
 8004978:	4013      	ands	r3, r2
 800497a:	b299      	uxth	r1, r3
 800497c:	1903      	adds	r3, r0, r4
 800497e:	19db      	adds	r3, r3, r7
 8004980:	1902      	adds	r2, r0, r4
 8004982:	19d2      	adds	r2, r2, r7
 8004984:	8812      	ldrh	r2, [r2, #0]
 8004986:	430a      	orrs	r2, r1
 8004988:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800498a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	1902      	adds	r2, r0, r4
 8004990:	19d2      	adds	r2, r2, r7
 8004992:	8812      	ldrh	r2, [r2, #0]
 8004994:	60da      	str	r2, [r3, #12]
 8004996:	e05e      	b.n	8004a56 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8004998:	231a      	movs	r3, #26
 800499a:	2220      	movs	r2, #32
 800499c:	189b      	adds	r3, r3, r2
 800499e:	19db      	adds	r3, r3, r7
 80049a0:	2201      	movs	r2, #1
 80049a2:	701a      	strb	r2, [r3, #0]
 80049a4:	e057      	b.n	8004a56 <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 80049a6:	231b      	movs	r3, #27
 80049a8:	2220      	movs	r2, #32
 80049aa:	189b      	adds	r3, r3, r2
 80049ac:	19db      	adds	r3, r3, r7
 80049ae:	781b      	ldrb	r3, [r3, #0]
 80049b0:	2b08      	cmp	r3, #8
 80049b2:	d015      	beq.n	80049e0 <UART_SetConfig+0x4d0>
 80049b4:	dc18      	bgt.n	80049e8 <UART_SetConfig+0x4d8>
 80049b6:	2b04      	cmp	r3, #4
 80049b8:	d00d      	beq.n	80049d6 <UART_SetConfig+0x4c6>
 80049ba:	dc15      	bgt.n	80049e8 <UART_SetConfig+0x4d8>
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d002      	beq.n	80049c6 <UART_SetConfig+0x4b6>
 80049c0:	2b02      	cmp	r3, #2
 80049c2:	d005      	beq.n	80049d0 <UART_SetConfig+0x4c0>
 80049c4:	e010      	b.n	80049e8 <UART_SetConfig+0x4d8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80049c6:	f7fd fe19 	bl	80025fc <HAL_RCC_GetPCLK1Freq>
 80049ca:	0003      	movs	r3, r0
 80049cc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80049ce:	e014      	b.n	80049fa <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80049d0:	4b2d      	ldr	r3, [pc, #180]	; (8004a88 <UART_SetConfig+0x578>)
 80049d2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80049d4:	e011      	b.n	80049fa <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80049d6:	f7fd fd85 	bl	80024e4 <HAL_RCC_GetSysClockFreq>
 80049da:	0003      	movs	r3, r0
 80049dc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80049de:	e00c      	b.n	80049fa <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80049e0:	2380      	movs	r3, #128	; 0x80
 80049e2:	021b      	lsls	r3, r3, #8
 80049e4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80049e6:	e008      	b.n	80049fa <UART_SetConfig+0x4ea>
      default:
        pclk = 0U;
 80049e8:	2300      	movs	r3, #0
 80049ea:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80049ec:	231a      	movs	r3, #26
 80049ee:	2220      	movs	r2, #32
 80049f0:	189b      	adds	r3, r3, r2
 80049f2:	19db      	adds	r3, r3, r7
 80049f4:	2201      	movs	r2, #1
 80049f6:	701a      	strb	r2, [r3, #0]
        break;
 80049f8:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80049fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d02a      	beq.n	8004a56 <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a02:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004a04:	4b1f      	ldr	r3, [pc, #124]	; (8004a84 <UART_SetConfig+0x574>)
 8004a06:	0052      	lsls	r2, r2, #1
 8004a08:	5ad3      	ldrh	r3, [r2, r3]
 8004a0a:	0019      	movs	r1, r3
 8004a0c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004a0e:	f7fb fb8b 	bl	8000128 <__udivsi3>
 8004a12:	0003      	movs	r3, r0
 8004a14:	001a      	movs	r2, r3
 8004a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a18:	685b      	ldr	r3, [r3, #4]
 8004a1a:	085b      	lsrs	r3, r3, #1
 8004a1c:	18d2      	adds	r2, r2, r3
 8004a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a20:	685b      	ldr	r3, [r3, #4]
 8004a22:	0019      	movs	r1, r3
 8004a24:	0010      	movs	r0, r2
 8004a26:	f7fb fb7f 	bl	8000128 <__udivsi3>
 8004a2a:	0003      	movs	r3, r0
 8004a2c:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004a2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a30:	2b0f      	cmp	r3, #15
 8004a32:	d90a      	bls.n	8004a4a <UART_SetConfig+0x53a>
 8004a34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a36:	2380      	movs	r3, #128	; 0x80
 8004a38:	025b      	lsls	r3, r3, #9
 8004a3a:	429a      	cmp	r2, r3
 8004a3c:	d205      	bcs.n	8004a4a <UART_SetConfig+0x53a>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004a3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a40:	b29a      	uxth	r2, r3
 8004a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	60da      	str	r2, [r3, #12]
 8004a48:	e005      	b.n	8004a56 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8004a4a:	231a      	movs	r3, #26
 8004a4c:	2220      	movs	r2, #32
 8004a4e:	189b      	adds	r3, r3, r2
 8004a50:	19db      	adds	r3, r3, r7
 8004a52:	2201      	movs	r2, #1
 8004a54:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a58:	226a      	movs	r2, #106	; 0x6a
 8004a5a:	2101      	movs	r1, #1
 8004a5c:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8004a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a60:	2268      	movs	r2, #104	; 0x68
 8004a62:	2101      	movs	r1, #1
 8004a64:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a68:	2200      	movs	r2, #0
 8004a6a:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8004a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a6e:	2200      	movs	r2, #0
 8004a70:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8004a72:	231a      	movs	r3, #26
 8004a74:	2220      	movs	r2, #32
 8004a76:	189b      	adds	r3, r3, r2
 8004a78:	19db      	adds	r3, r3, r7
 8004a7a:	781b      	ldrb	r3, [r3, #0]
}
 8004a7c:	0018      	movs	r0, r3
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	b010      	add	sp, #64	; 0x40
 8004a82:	bdb0      	pop	{r4, r5, r7, pc}
 8004a84:	08006f08 	.word	0x08006f08
 8004a88:	00f42400 	.word	0x00f42400

08004a8c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b082      	sub	sp, #8
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a98:	2201      	movs	r2, #1
 8004a9a:	4013      	ands	r3, r2
 8004a9c:	d00b      	beq.n	8004ab6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	685b      	ldr	r3, [r3, #4]
 8004aa4:	4a4a      	ldr	r2, [pc, #296]	; (8004bd0 <UART_AdvFeatureConfig+0x144>)
 8004aa6:	4013      	ands	r3, r2
 8004aa8:	0019      	movs	r1, r3
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	430a      	orrs	r2, r1
 8004ab4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004aba:	2202      	movs	r2, #2
 8004abc:	4013      	ands	r3, r2
 8004abe:	d00b      	beq.n	8004ad8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	685b      	ldr	r3, [r3, #4]
 8004ac6:	4a43      	ldr	r2, [pc, #268]	; (8004bd4 <UART_AdvFeatureConfig+0x148>)
 8004ac8:	4013      	ands	r3, r2
 8004aca:	0019      	movs	r1, r3
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	430a      	orrs	r2, r1
 8004ad6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004adc:	2204      	movs	r2, #4
 8004ade:	4013      	ands	r3, r2
 8004ae0:	d00b      	beq.n	8004afa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	685b      	ldr	r3, [r3, #4]
 8004ae8:	4a3b      	ldr	r2, [pc, #236]	; (8004bd8 <UART_AdvFeatureConfig+0x14c>)
 8004aea:	4013      	ands	r3, r2
 8004aec:	0019      	movs	r1, r3
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	430a      	orrs	r2, r1
 8004af8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004afe:	2208      	movs	r2, #8
 8004b00:	4013      	ands	r3, r2
 8004b02:	d00b      	beq.n	8004b1c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	685b      	ldr	r3, [r3, #4]
 8004b0a:	4a34      	ldr	r2, [pc, #208]	; (8004bdc <UART_AdvFeatureConfig+0x150>)
 8004b0c:	4013      	ands	r3, r2
 8004b0e:	0019      	movs	r1, r3
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	430a      	orrs	r2, r1
 8004b1a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b20:	2210      	movs	r2, #16
 8004b22:	4013      	ands	r3, r2
 8004b24:	d00b      	beq.n	8004b3e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	689b      	ldr	r3, [r3, #8]
 8004b2c:	4a2c      	ldr	r2, [pc, #176]	; (8004be0 <UART_AdvFeatureConfig+0x154>)
 8004b2e:	4013      	ands	r3, r2
 8004b30:	0019      	movs	r1, r3
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	430a      	orrs	r2, r1
 8004b3c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b42:	2220      	movs	r2, #32
 8004b44:	4013      	ands	r3, r2
 8004b46:	d00b      	beq.n	8004b60 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	689b      	ldr	r3, [r3, #8]
 8004b4e:	4a25      	ldr	r2, [pc, #148]	; (8004be4 <UART_AdvFeatureConfig+0x158>)
 8004b50:	4013      	ands	r3, r2
 8004b52:	0019      	movs	r1, r3
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	430a      	orrs	r2, r1
 8004b5e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b64:	2240      	movs	r2, #64	; 0x40
 8004b66:	4013      	ands	r3, r2
 8004b68:	d01d      	beq.n	8004ba6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	685b      	ldr	r3, [r3, #4]
 8004b70:	4a1d      	ldr	r2, [pc, #116]	; (8004be8 <UART_AdvFeatureConfig+0x15c>)
 8004b72:	4013      	ands	r3, r2
 8004b74:	0019      	movs	r1, r3
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	430a      	orrs	r2, r1
 8004b80:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004b86:	2380      	movs	r3, #128	; 0x80
 8004b88:	035b      	lsls	r3, r3, #13
 8004b8a:	429a      	cmp	r2, r3
 8004b8c:	d10b      	bne.n	8004ba6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	685b      	ldr	r3, [r3, #4]
 8004b94:	4a15      	ldr	r2, [pc, #84]	; (8004bec <UART_AdvFeatureConfig+0x160>)
 8004b96:	4013      	ands	r3, r2
 8004b98:	0019      	movs	r1, r3
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	430a      	orrs	r2, r1
 8004ba4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004baa:	2280      	movs	r2, #128	; 0x80
 8004bac:	4013      	ands	r3, r2
 8004bae:	d00b      	beq.n	8004bc8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	685b      	ldr	r3, [r3, #4]
 8004bb6:	4a0e      	ldr	r2, [pc, #56]	; (8004bf0 <UART_AdvFeatureConfig+0x164>)
 8004bb8:	4013      	ands	r3, r2
 8004bba:	0019      	movs	r1, r3
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	430a      	orrs	r2, r1
 8004bc6:	605a      	str	r2, [r3, #4]
  }
}
 8004bc8:	46c0      	nop			; (mov r8, r8)
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	b002      	add	sp, #8
 8004bce:	bd80      	pop	{r7, pc}
 8004bd0:	fffdffff 	.word	0xfffdffff
 8004bd4:	fffeffff 	.word	0xfffeffff
 8004bd8:	fffbffff 	.word	0xfffbffff
 8004bdc:	ffff7fff 	.word	0xffff7fff
 8004be0:	ffffefff 	.word	0xffffefff
 8004be4:	ffffdfff 	.word	0xffffdfff
 8004be8:	ffefffff 	.word	0xffefffff
 8004bec:	ff9fffff 	.word	0xff9fffff
 8004bf0:	fff7ffff 	.word	0xfff7ffff

08004bf4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b086      	sub	sp, #24
 8004bf8:	af02      	add	r7, sp, #8
 8004bfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	228c      	movs	r2, #140	; 0x8c
 8004c00:	2100      	movs	r1, #0
 8004c02:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004c04:	f7fc fcbe 	bl	8001584 <HAL_GetTick>
 8004c08:	0003      	movs	r3, r0
 8004c0a:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	2208      	movs	r2, #8
 8004c14:	4013      	ands	r3, r2
 8004c16:	2b08      	cmp	r3, #8
 8004c18:	d10c      	bne.n	8004c34 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	2280      	movs	r2, #128	; 0x80
 8004c1e:	0391      	lsls	r1, r2, #14
 8004c20:	6878      	ldr	r0, [r7, #4]
 8004c22:	4a18      	ldr	r2, [pc, #96]	; (8004c84 <UART_CheckIdleState+0x90>)
 8004c24:	9200      	str	r2, [sp, #0]
 8004c26:	2200      	movs	r2, #0
 8004c28:	f000 f82e 	bl	8004c88 <UART_WaitOnFlagUntilTimeout>
 8004c2c:	1e03      	subs	r3, r0, #0
 8004c2e:	d001      	beq.n	8004c34 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004c30:	2303      	movs	r3, #3
 8004c32:	e023      	b.n	8004c7c <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	2204      	movs	r2, #4
 8004c3c:	4013      	ands	r3, r2
 8004c3e:	2b04      	cmp	r3, #4
 8004c40:	d10c      	bne.n	8004c5c <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	2280      	movs	r2, #128	; 0x80
 8004c46:	03d1      	lsls	r1, r2, #15
 8004c48:	6878      	ldr	r0, [r7, #4]
 8004c4a:	4a0e      	ldr	r2, [pc, #56]	; (8004c84 <UART_CheckIdleState+0x90>)
 8004c4c:	9200      	str	r2, [sp, #0]
 8004c4e:	2200      	movs	r2, #0
 8004c50:	f000 f81a 	bl	8004c88 <UART_WaitOnFlagUntilTimeout>
 8004c54:	1e03      	subs	r3, r0, #0
 8004c56:	d001      	beq.n	8004c5c <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004c58:	2303      	movs	r3, #3
 8004c5a:	e00f      	b.n	8004c7c <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2284      	movs	r2, #132	; 0x84
 8004c60:	2120      	movs	r1, #32
 8004c62:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2288      	movs	r2, #136	; 0x88
 8004c68:	2120      	movs	r1, #32
 8004c6a:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2200      	movs	r2, #0
 8004c70:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	2280      	movs	r2, #128	; 0x80
 8004c76:	2100      	movs	r1, #0
 8004c78:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004c7a:	2300      	movs	r3, #0
}
 8004c7c:	0018      	movs	r0, r3
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	b004      	add	sp, #16
 8004c82:	bd80      	pop	{r7, pc}
 8004c84:	01ffffff 	.word	0x01ffffff

08004c88 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b094      	sub	sp, #80	; 0x50
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	60f8      	str	r0, [r7, #12]
 8004c90:	60b9      	str	r1, [r7, #8]
 8004c92:	603b      	str	r3, [r7, #0]
 8004c94:	1dfb      	adds	r3, r7, #7
 8004c96:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c98:	e0a7      	b.n	8004dea <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c9a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004c9c:	3301      	adds	r3, #1
 8004c9e:	d100      	bne.n	8004ca2 <UART_WaitOnFlagUntilTimeout+0x1a>
 8004ca0:	e0a3      	b.n	8004dea <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ca2:	f7fc fc6f 	bl	8001584 <HAL_GetTick>
 8004ca6:	0002      	movs	r2, r0
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	1ad3      	subs	r3, r2, r3
 8004cac:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004cae:	429a      	cmp	r2, r3
 8004cb0:	d302      	bcc.n	8004cb8 <UART_WaitOnFlagUntilTimeout+0x30>
 8004cb2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d13f      	bne.n	8004d38 <UART_WaitOnFlagUntilTimeout+0xb0>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004cb8:	f3ef 8310 	mrs	r3, PRIMASK
 8004cbc:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8004cbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004cc0:	647b      	str	r3, [r7, #68]	; 0x44
 8004cc2:	2301      	movs	r3, #1
 8004cc4:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004cc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cc8:	f383 8810 	msr	PRIMASK, r3
}
 8004ccc:	46c0      	nop			; (mov r8, r8)
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	681a      	ldr	r2, [r3, #0]
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	494e      	ldr	r1, [pc, #312]	; (8004e14 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8004cda:	400a      	ands	r2, r1
 8004cdc:	601a      	str	r2, [r3, #0]
 8004cde:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ce0:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ce2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ce4:	f383 8810 	msr	PRIMASK, r3
}
 8004ce8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004cea:	f3ef 8310 	mrs	r3, PRIMASK
 8004cee:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8004cf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cf2:	643b      	str	r3, [r7, #64]	; 0x40
 8004cf4:	2301      	movs	r3, #1
 8004cf6:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004cf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cfa:	f383 8810 	msr	PRIMASK, r3
}
 8004cfe:	46c0      	nop			; (mov r8, r8)
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	689a      	ldr	r2, [r3, #8]
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	2101      	movs	r1, #1
 8004d0c:	438a      	bics	r2, r1
 8004d0e:	609a      	str	r2, [r3, #8]
 8004d10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d12:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d16:	f383 8810 	msr	PRIMASK, r3
}
 8004d1a:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	2284      	movs	r2, #132	; 0x84
 8004d20:	2120      	movs	r1, #32
 8004d22:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	2288      	movs	r2, #136	; 0x88
 8004d28:	2120      	movs	r1, #32
 8004d2a:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	2280      	movs	r2, #128	; 0x80
 8004d30:	2100      	movs	r1, #0
 8004d32:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004d34:	2303      	movs	r3, #3
 8004d36:	e069      	b.n	8004e0c <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	2204      	movs	r2, #4
 8004d40:	4013      	ands	r3, r2
 8004d42:	d052      	beq.n	8004dea <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	69da      	ldr	r2, [r3, #28]
 8004d4a:	2380      	movs	r3, #128	; 0x80
 8004d4c:	011b      	lsls	r3, r3, #4
 8004d4e:	401a      	ands	r2, r3
 8004d50:	2380      	movs	r3, #128	; 0x80
 8004d52:	011b      	lsls	r3, r3, #4
 8004d54:	429a      	cmp	r2, r3
 8004d56:	d148      	bne.n	8004dea <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	2280      	movs	r2, #128	; 0x80
 8004d5e:	0112      	lsls	r2, r2, #4
 8004d60:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d62:	f3ef 8310 	mrs	r3, PRIMASK
 8004d66:	613b      	str	r3, [r7, #16]
  return(result);
 8004d68:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004d6a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004d6c:	2301      	movs	r3, #1
 8004d6e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d70:	697b      	ldr	r3, [r7, #20]
 8004d72:	f383 8810 	msr	PRIMASK, r3
}
 8004d76:	46c0      	nop			; (mov r8, r8)
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	681a      	ldr	r2, [r3, #0]
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	4924      	ldr	r1, [pc, #144]	; (8004e14 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8004d84:	400a      	ands	r2, r1
 8004d86:	601a      	str	r2, [r3, #0]
 8004d88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d8a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d8c:	69bb      	ldr	r3, [r7, #24]
 8004d8e:	f383 8810 	msr	PRIMASK, r3
}
 8004d92:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d94:	f3ef 8310 	mrs	r3, PRIMASK
 8004d98:	61fb      	str	r3, [r7, #28]
  return(result);
 8004d9a:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d9c:	64bb      	str	r3, [r7, #72]	; 0x48
 8004d9e:	2301      	movs	r3, #1
 8004da0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004da2:	6a3b      	ldr	r3, [r7, #32]
 8004da4:	f383 8810 	msr	PRIMASK, r3
}
 8004da8:	46c0      	nop			; (mov r8, r8)
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	689a      	ldr	r2, [r3, #8]
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	2101      	movs	r1, #1
 8004db6:	438a      	bics	r2, r1
 8004db8:	609a      	str	r2, [r3, #8]
 8004dba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004dbc:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dc0:	f383 8810 	msr	PRIMASK, r3
}
 8004dc4:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	2284      	movs	r2, #132	; 0x84
 8004dca:	2120      	movs	r1, #32
 8004dcc:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	2288      	movs	r2, #136	; 0x88
 8004dd2:	2120      	movs	r1, #32
 8004dd4:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	228c      	movs	r2, #140	; 0x8c
 8004dda:	2120      	movs	r1, #32
 8004ddc:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	2280      	movs	r2, #128	; 0x80
 8004de2:	2100      	movs	r1, #0
 8004de4:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004de6:	2303      	movs	r3, #3
 8004de8:	e010      	b.n	8004e0c <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	69db      	ldr	r3, [r3, #28]
 8004df0:	68ba      	ldr	r2, [r7, #8]
 8004df2:	4013      	ands	r3, r2
 8004df4:	68ba      	ldr	r2, [r7, #8]
 8004df6:	1ad3      	subs	r3, r2, r3
 8004df8:	425a      	negs	r2, r3
 8004dfa:	4153      	adcs	r3, r2
 8004dfc:	b2db      	uxtb	r3, r3
 8004dfe:	001a      	movs	r2, r3
 8004e00:	1dfb      	adds	r3, r7, #7
 8004e02:	781b      	ldrb	r3, [r3, #0]
 8004e04:	429a      	cmp	r2, r3
 8004e06:	d100      	bne.n	8004e0a <UART_WaitOnFlagUntilTimeout+0x182>
 8004e08:	e747      	b.n	8004c9a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004e0a:	2300      	movs	r3, #0
}
 8004e0c:	0018      	movs	r0, r3
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	b014      	add	sp, #80	; 0x50
 8004e12:	bd80      	pop	{r7, pc}
 8004e14:	fffffe5f 	.word	0xfffffe5f

08004e18 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	b084      	sub	sp, #16
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2280      	movs	r2, #128	; 0x80
 8004e24:	5c9b      	ldrb	r3, [r3, r2]
 8004e26:	2b01      	cmp	r3, #1
 8004e28:	d101      	bne.n	8004e2e <HAL_UARTEx_DisableFifoMode+0x16>
 8004e2a:	2302      	movs	r3, #2
 8004e2c:	e027      	b.n	8004e7e <HAL_UARTEx_DisableFifoMode+0x66>
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	2280      	movs	r2, #128	; 0x80
 8004e32:	2101      	movs	r1, #1
 8004e34:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	2284      	movs	r2, #132	; 0x84
 8004e3a:	2124      	movs	r1, #36	; 0x24
 8004e3c:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	681a      	ldr	r2, [r3, #0]
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	2101      	movs	r1, #1
 8004e52:	438a      	bics	r2, r1
 8004e54:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	4a0b      	ldr	r2, [pc, #44]	; (8004e88 <HAL_UARTEx_DisableFifoMode+0x70>)
 8004e5a:	4013      	ands	r3, r2
 8004e5c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	2200      	movs	r2, #0
 8004e62:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	68fa      	ldr	r2, [r7, #12]
 8004e6a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2284      	movs	r2, #132	; 0x84
 8004e70:	2120      	movs	r1, #32
 8004e72:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2280      	movs	r2, #128	; 0x80
 8004e78:	2100      	movs	r1, #0
 8004e7a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004e7c:	2300      	movs	r3, #0
}
 8004e7e:	0018      	movs	r0, r3
 8004e80:	46bd      	mov	sp, r7
 8004e82:	b004      	add	sp, #16
 8004e84:	bd80      	pop	{r7, pc}
 8004e86:	46c0      	nop			; (mov r8, r8)
 8004e88:	dfffffff 	.word	0xdfffffff

08004e8c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	b084      	sub	sp, #16
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
 8004e94:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	2280      	movs	r2, #128	; 0x80
 8004e9a:	5c9b      	ldrb	r3, [r3, r2]
 8004e9c:	2b01      	cmp	r3, #1
 8004e9e:	d101      	bne.n	8004ea4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004ea0:	2302      	movs	r3, #2
 8004ea2:	e02e      	b.n	8004f02 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2280      	movs	r2, #128	; 0x80
 8004ea8:	2101      	movs	r1, #1
 8004eaa:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2284      	movs	r2, #132	; 0x84
 8004eb0:	2124      	movs	r1, #36	; 0x24
 8004eb2:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	681a      	ldr	r2, [r3, #0]
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	2101      	movs	r1, #1
 8004ec8:	438a      	bics	r2, r1
 8004eca:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	689b      	ldr	r3, [r3, #8]
 8004ed2:	00db      	lsls	r3, r3, #3
 8004ed4:	08d9      	lsrs	r1, r3, #3
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	683a      	ldr	r2, [r7, #0]
 8004edc:	430a      	orrs	r2, r1
 8004ede:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	0018      	movs	r0, r3
 8004ee4:	f000 f854 	bl	8004f90 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	68fa      	ldr	r2, [r7, #12]
 8004eee:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2284      	movs	r2, #132	; 0x84
 8004ef4:	2120      	movs	r1, #32
 8004ef6:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2280      	movs	r2, #128	; 0x80
 8004efc:	2100      	movs	r1, #0
 8004efe:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004f00:	2300      	movs	r3, #0
}
 8004f02:	0018      	movs	r0, r3
 8004f04:	46bd      	mov	sp, r7
 8004f06:	b004      	add	sp, #16
 8004f08:	bd80      	pop	{r7, pc}
	...

08004f0c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b084      	sub	sp, #16
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
 8004f14:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2280      	movs	r2, #128	; 0x80
 8004f1a:	5c9b      	ldrb	r3, [r3, r2]
 8004f1c:	2b01      	cmp	r3, #1
 8004f1e:	d101      	bne.n	8004f24 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004f20:	2302      	movs	r3, #2
 8004f22:	e02f      	b.n	8004f84 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2280      	movs	r2, #128	; 0x80
 8004f28:	2101      	movs	r1, #1
 8004f2a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2284      	movs	r2, #132	; 0x84
 8004f30:	2124      	movs	r1, #36	; 0x24
 8004f32:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	681a      	ldr	r2, [r3, #0]
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	2101      	movs	r1, #1
 8004f48:	438a      	bics	r2, r1
 8004f4a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	689b      	ldr	r3, [r3, #8]
 8004f52:	4a0e      	ldr	r2, [pc, #56]	; (8004f8c <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8004f54:	4013      	ands	r3, r2
 8004f56:	0019      	movs	r1, r3
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	683a      	ldr	r2, [r7, #0]
 8004f5e:	430a      	orrs	r2, r1
 8004f60:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	0018      	movs	r0, r3
 8004f66:	f000 f813 	bl	8004f90 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	68fa      	ldr	r2, [r7, #12]
 8004f70:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	2284      	movs	r2, #132	; 0x84
 8004f76:	2120      	movs	r1, #32
 8004f78:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	2280      	movs	r2, #128	; 0x80
 8004f7e:	2100      	movs	r1, #0
 8004f80:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004f82:	2300      	movs	r3, #0
}
 8004f84:	0018      	movs	r0, r3
 8004f86:	46bd      	mov	sp, r7
 8004f88:	b004      	add	sp, #16
 8004f8a:	bd80      	pop	{r7, pc}
 8004f8c:	f1ffffff 	.word	0xf1ffffff

08004f90 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004f90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004f92:	b085      	sub	sp, #20
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d108      	bne.n	8004fb2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	226a      	movs	r2, #106	; 0x6a
 8004fa4:	2101      	movs	r1, #1
 8004fa6:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2268      	movs	r2, #104	; 0x68
 8004fac:	2101      	movs	r1, #1
 8004fae:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004fb0:	e043      	b.n	800503a <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004fb2:	260f      	movs	r6, #15
 8004fb4:	19bb      	adds	r3, r7, r6
 8004fb6:	2208      	movs	r2, #8
 8004fb8:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004fba:	200e      	movs	r0, #14
 8004fbc:	183b      	adds	r3, r7, r0
 8004fbe:	2208      	movs	r2, #8
 8004fc0:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	689b      	ldr	r3, [r3, #8]
 8004fc8:	0e5b      	lsrs	r3, r3, #25
 8004fca:	b2da      	uxtb	r2, r3
 8004fcc:	240d      	movs	r4, #13
 8004fce:	193b      	adds	r3, r7, r4
 8004fd0:	2107      	movs	r1, #7
 8004fd2:	400a      	ands	r2, r1
 8004fd4:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	689b      	ldr	r3, [r3, #8]
 8004fdc:	0f5b      	lsrs	r3, r3, #29
 8004fde:	b2da      	uxtb	r2, r3
 8004fe0:	250c      	movs	r5, #12
 8004fe2:	197b      	adds	r3, r7, r5
 8004fe4:	2107      	movs	r1, #7
 8004fe6:	400a      	ands	r2, r1
 8004fe8:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004fea:	183b      	adds	r3, r7, r0
 8004fec:	781b      	ldrb	r3, [r3, #0]
 8004fee:	197a      	adds	r2, r7, r5
 8004ff0:	7812      	ldrb	r2, [r2, #0]
 8004ff2:	4914      	ldr	r1, [pc, #80]	; (8005044 <UARTEx_SetNbDataToProcess+0xb4>)
 8004ff4:	5c8a      	ldrb	r2, [r1, r2]
 8004ff6:	435a      	muls	r2, r3
 8004ff8:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8004ffa:	197b      	adds	r3, r7, r5
 8004ffc:	781b      	ldrb	r3, [r3, #0]
 8004ffe:	4a12      	ldr	r2, [pc, #72]	; (8005048 <UARTEx_SetNbDataToProcess+0xb8>)
 8005000:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005002:	0019      	movs	r1, r3
 8005004:	f7fb f91a 	bl	800023c <__divsi3>
 8005008:	0003      	movs	r3, r0
 800500a:	b299      	uxth	r1, r3
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	226a      	movs	r2, #106	; 0x6a
 8005010:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005012:	19bb      	adds	r3, r7, r6
 8005014:	781b      	ldrb	r3, [r3, #0]
 8005016:	193a      	adds	r2, r7, r4
 8005018:	7812      	ldrb	r2, [r2, #0]
 800501a:	490a      	ldr	r1, [pc, #40]	; (8005044 <UARTEx_SetNbDataToProcess+0xb4>)
 800501c:	5c8a      	ldrb	r2, [r1, r2]
 800501e:	435a      	muls	r2, r3
 8005020:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8005022:	193b      	adds	r3, r7, r4
 8005024:	781b      	ldrb	r3, [r3, #0]
 8005026:	4a08      	ldr	r2, [pc, #32]	; (8005048 <UARTEx_SetNbDataToProcess+0xb8>)
 8005028:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800502a:	0019      	movs	r1, r3
 800502c:	f7fb f906 	bl	800023c <__divsi3>
 8005030:	0003      	movs	r3, r0
 8005032:	b299      	uxth	r1, r3
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2268      	movs	r2, #104	; 0x68
 8005038:	5299      	strh	r1, [r3, r2]
}
 800503a:	46c0      	nop			; (mov r8, r8)
 800503c:	46bd      	mov	sp, r7
 800503e:	b005      	add	sp, #20
 8005040:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005042:	46c0      	nop			; (mov r8, r8)
 8005044:	08006f20 	.word	0x08006f20
 8005048:	08006f28 	.word	0x08006f28

0800504c <NRF905_read_config_register>:
NRF905_PAYLOAD_SIZE, // RX payload size
		NRF905_PAYLOAD_SIZE, // TX payload size
		0xE7, 0xE7, 0xE7, 0xE7, // Default receive address
		NRF905_CRC | NRF905_CLK_FREQ | NRF905_OUTCLK };

uint8_t NRF905_read_config_register(NRF905_t *dev, uint8_t reg) {
 800504c:	b590      	push	{r4, r7, lr}
 800504e:	b085      	sub	sp, #20
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
 8005054:	000a      	movs	r2, r1
 8005056:	1cfb      	adds	r3, r7, #3
 8005058:	701a      	strb	r2, [r3, #0]
	if (dev == NULL) {
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2b00      	cmp	r3, #0
 800505e:	d101      	bne.n	8005064 <NRF905_read_config_register+0x18>
		return -1;
 8005060:	23ff      	movs	r3, #255	; 0xff
 8005062:	e025      	b.n	80050b0 <NRF905_read_config_register+0x64>
	}
	uint8_t val = 0;
 8005064:	240f      	movs	r4, #15
 8005066:	193b      	adds	r3, r7, r4
 8005068:	2200      	movs	r2, #0
 800506a:	701a      	strb	r2, [r3, #0]
	NRF905_HW_SPI_SELECT(dev->hw);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	2200      	movs	r2, #0
 8005072:	2106      	movs	r1, #6
 8005074:	0018      	movs	r0, r3
 8005076:	f000 f9c1 	bl	80053fc <NRF905_hw_gpio_set>
	NRF905_hw_spi_transfer(dev->hw, NRF905_CMD_R_CONFIG | reg, NULL);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6818      	ldr	r0, [r3, #0]
 800507e:	1cfb      	adds	r3, r7, #3
 8005080:	781b      	ldrb	r3, [r3, #0]
 8005082:	2210      	movs	r2, #16
 8005084:	4313      	orrs	r3, r2
 8005086:	b2db      	uxtb	r3, r3
 8005088:	2200      	movs	r2, #0
 800508a:	0019      	movs	r1, r3
 800508c:	f000 fa63 	bl	8005556 <NRF905_hw_spi_transfer>
	NRF905_hw_spi_transfer(dev->hw, NRF905_CMD_NOP, &val);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	193a      	adds	r2, r7, r4
 8005096:	21ff      	movs	r1, #255	; 0xff
 8005098:	0018      	movs	r0, r3
 800509a:	f000 fa5c 	bl	8005556 <NRF905_hw_spi_transfer>
	NRF905_HW_SPI_DESELECT(dev->hw);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	2201      	movs	r2, #1
 80050a4:	2106      	movs	r1, #6
 80050a6:	0018      	movs	r0, r3
 80050a8:	f000 f9a8 	bl	80053fc <NRF905_hw_gpio_set>
	return val;
 80050ac:	193b      	adds	r3, r7, r4
 80050ae:	781b      	ldrb	r3, [r3, #0]
}
 80050b0:	0018      	movs	r0, r3
 80050b2:	46bd      	mov	sp, r7
 80050b4:	b005      	add	sp, #20
 80050b6:	bd90      	pop	{r4, r7, pc}

080050b8 <NRF905_setAddress>:
					| val);

	return 0;
}

int NRF905_setAddress(NRF905_t *dev, uint32_t address, uint8_t cmd) {
 80050b8:	b590      	push	{r4, r7, lr}
 80050ba:	b087      	sub	sp, #28
 80050bc:	af00      	add	r7, sp, #0
 80050be:	60f8      	str	r0, [r7, #12]
 80050c0:	60b9      	str	r1, [r7, #8]
 80050c2:	1dfb      	adds	r3, r7, #7
 80050c4:	701a      	strb	r2, [r3, #0]
	if (dev == NULL) {
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d102      	bne.n	80050d2 <NRF905_setAddress+0x1a>
		return -1;
 80050cc:	2301      	movs	r3, #1
 80050ce:	425b      	negs	r3, r3
 80050d0:	e033      	b.n	800513a <NRF905_setAddress+0x82>
	}
	uint8_t i;
	NRF905_HW_SPI_SELECT(dev->hw);
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	2200      	movs	r2, #0
 80050d8:	2106      	movs	r1, #6
 80050da:	0018      	movs	r0, r3
 80050dc:	f000 f98e 	bl	80053fc <NRF905_hw_gpio_set>
	NRF905_hw_spi_transfer(dev->hw, cmd, NULL);
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	6818      	ldr	r0, [r3, #0]
 80050e4:	1dfb      	adds	r3, r7, #7
 80050e6:	781b      	ldrb	r3, [r3, #0]
 80050e8:	2200      	movs	r2, #0
 80050ea:	0019      	movs	r1, r3
 80050ec:	f000 fa33 	bl	8005556 <NRF905_hw_spi_transfer>
	for (i = 0; i < 4; i++) {
 80050f0:	2317      	movs	r3, #23
 80050f2:	18fb      	adds	r3, r7, r3
 80050f4:	2200      	movs	r2, #0
 80050f6:	701a      	strb	r2, [r3, #0]
 80050f8:	e012      	b.n	8005120 <NRF905_setAddress+0x68>
		NRF905_hw_spi_transfer(dev->hw, address >> (8 * i), NULL);
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	6818      	ldr	r0, [r3, #0]
 80050fe:	2417      	movs	r4, #23
 8005100:	193b      	adds	r3, r7, r4
 8005102:	781b      	ldrb	r3, [r3, #0]
 8005104:	00db      	lsls	r3, r3, #3
 8005106:	68ba      	ldr	r2, [r7, #8]
 8005108:	40da      	lsrs	r2, r3
 800510a:	0013      	movs	r3, r2
 800510c:	b2db      	uxtb	r3, r3
 800510e:	2200      	movs	r2, #0
 8005110:	0019      	movs	r1, r3
 8005112:	f000 fa20 	bl	8005556 <NRF905_hw_spi_transfer>
	for (i = 0; i < 4; i++) {
 8005116:	193b      	adds	r3, r7, r4
 8005118:	781a      	ldrb	r2, [r3, #0]
 800511a:	193b      	adds	r3, r7, r4
 800511c:	3201      	adds	r2, #1
 800511e:	701a      	strb	r2, [r3, #0]
 8005120:	2317      	movs	r3, #23
 8005122:	18fb      	adds	r3, r7, r3
 8005124:	781b      	ldrb	r3, [r3, #0]
 8005126:	2b03      	cmp	r3, #3
 8005128:	d9e7      	bls.n	80050fa <NRF905_setAddress+0x42>
	}
	NRF905_HW_SPI_DESELECT(dev->hw);
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	2201      	movs	r2, #1
 8005130:	2106      	movs	r1, #6
 8005132:	0018      	movs	r0, r3
 8005134:	f000 f962 	bl	80053fc <NRF905_hw_gpio_set>

	return 0;
 8005138:	2300      	movs	r3, #0
}
 800513a:	0018      	movs	r0, r3
 800513c:	46bd      	mov	sp, r7
 800513e:	b007      	add	sp, #28
 8005140:	bd90      	pop	{r4, r7, pc}

08005142 <NRF905_set_listen_address>:
	}

	return NRF905_hw_gpio_get(dev->hw, NRF905_HW_GPIO_CD);
}

int NRF905_set_listen_address(NRF905_t *dev, uint32_t address) {
 8005142:	b580      	push	{r7, lr}
 8005144:	b082      	sub	sp, #8
 8005146:	af00      	add	r7, sp, #0
 8005148:	6078      	str	r0, [r7, #4]
 800514a:	6039      	str	r1, [r7, #0]
	if (dev == NULL) {
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2b00      	cmp	r3, #0
 8005150:	d102      	bne.n	8005158 <NRF905_set_listen_address+0x16>
		return -1;
 8005152:	2301      	movs	r3, #1
 8005154:	425b      	negs	r3, r3
 8005156:	e006      	b.n	8005166 <NRF905_set_listen_address+0x24>
	}
	NRF905_setAddress(dev, address,
 8005158:	6839      	ldr	r1, [r7, #0]
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	2205      	movs	r2, #5
 800515e:	0018      	movs	r0, r3
 8005160:	f7ff ffaa 	bl	80050b8 <NRF905_setAddress>
	NRF905_CMD_W_CONFIG | NRF905_REG_RX_ADDRESS);
	return 0;
 8005164:	2300      	movs	r3, #0
}
 8005166:	0018      	movs	r0, r3
 8005168:	46bd      	mov	sp, r7
 800516a:	b002      	add	sp, #8
 800516c:	bd80      	pop	{r7, pc}

0800516e <NRF905_rx>:
	// else NRF905_NEXTMODE_TX

	return 1;
}

int NRF905_rx(NRF905_t *dev) {
 800516e:	b580      	push	{r7, lr}
 8005170:	b082      	sub	sp, #8
 8005172:	af00      	add	r7, sp, #0
 8005174:	6078      	str	r0, [r7, #4]
	if (dev == NULL) {
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	2b00      	cmp	r3, #0
 800517a:	d102      	bne.n	8005182 <NRF905_rx+0x14>
		return -1;
 800517c:	2301      	movs	r3, #1
 800517e:	425b      	negs	r3, r3
 8005180:	e015      	b.n	80051ae <NRF905_rx+0x40>
	}
	NRF905_HW_MODE_RX(dev->hw);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	2200      	movs	r2, #0
 8005188:	2100      	movs	r1, #0
 800518a:	0018      	movs	r0, r3
 800518c:	f000 f936 	bl	80053fc <NRF905_hw_gpio_set>
	NRF905_HW_STANDBY_LEAVE(dev->hw);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	2201      	movs	r2, #1
 8005196:	2101      	movs	r1, #1
 8005198:	0018      	movs	r0, r3
 800519a:	f000 f92f 	bl	80053fc <NRF905_hw_gpio_set>
	NRF905_HW_POWER_UP(dev->hw);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	2201      	movs	r2, #1
 80051a4:	2102      	movs	r1, #2
 80051a6:	0018      	movs	r0, r3
 80051a8:	f000 f928 	bl	80053fc <NRF905_hw_gpio_set>
	return 0;
 80051ac:	2300      	movs	r3, #0
}
 80051ae:	0018      	movs	r0, r3
 80051b0:	46bd      	mov	sp, r7
 80051b2:	b002      	add	sp, #8
 80051b4:	bd80      	pop	{r7, pc}

080051b6 <NRF905_read_it>:
	return 0;
}

//	Function for non-blocking SPI
//	Original function slightly modified for using interrupts
int NRF905_read_it(NRF905_t *dev, void *data, uint8_t len) {
 80051b6:	b580      	push	{r7, lr}
 80051b8:	b084      	sub	sp, #16
 80051ba:	af00      	add	r7, sp, #0
 80051bc:	60f8      	str	r0, [r7, #12]
 80051be:	60b9      	str	r1, [r7, #8]
 80051c0:	1dfb      	adds	r3, r7, #7
 80051c2:	701a      	strb	r2, [r3, #0]
	if (dev == NULL) {
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d102      	bne.n	80051d0 <NRF905_read_it+0x1a>
		return -1;
 80051ca:	2301      	movs	r3, #1
 80051cc:	425b      	negs	r3, r3
 80051ce:	e017      	b.n	8005200 <NRF905_read_it+0x4a>
	}

	NRF905_HW_SPI_SELECT(dev->hw);
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	2200      	movs	r2, #0
 80051d6:	2106      	movs	r1, #6
 80051d8:	0018      	movs	r0, r3
 80051da:	f000 f90f 	bl	80053fc <NRF905_hw_gpio_set>
	NRF905_hw_spi_transfer(dev->hw, NRF905_CMD_R_RX_PAYLOAD, NULL);
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	2200      	movs	r2, #0
 80051e4:	2124      	movs	r1, #36	; 0x24
 80051e6:	0018      	movs	r0, r3
 80051e8:	f000 f9b5 	bl	8005556 <NRF905_hw_spi_transfer>

	// Get received payload

	NRF905_hw_spi_receive_it(dev->hw, (uint8_t*)data,len);
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	6818      	ldr	r0, [r3, #0]
 80051f0:	1dfb      	adds	r3, r7, #7
 80051f2:	781b      	ldrb	r3, [r3, #0]
 80051f4:	b29a      	uxth	r2, r3
 80051f6:	68bb      	ldr	r3, [r7, #8]
 80051f8:	0019      	movs	r1, r3
 80051fa:	f000 f9d2 	bl	80055a2 <NRF905_hw_spi_receive_it>

	return 0;
 80051fe:	2300      	movs	r3, #0
}
 8005200:	0018      	movs	r0, r3
 8005202:	46bd      	mov	sp, r7
 8005204:	b004      	add	sp, #16
 8005206:	bd80      	pop	{r7, pc}

08005208 <NRF905_spi_deselect>:

void NRF905_spi_deselect(NRF905_t *dev) {
 8005208:	b580      	push	{r7, lr}
 800520a:	b082      	sub	sp, #8
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]

	NRF905_HW_SPI_DESELECT(dev->hw);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	2201      	movs	r2, #1
 8005216:	2106      	movs	r1, #6
 8005218:	0018      	movs	r0, r3
 800521a:	f000 f8ef 	bl	80053fc <NRF905_hw_gpio_set>

}
 800521e:	46c0      	nop			; (mov r8, r8)
 8005220:	46bd      	mov	sp, r7
 8005222:	b002      	add	sp, #8
 8005224:	bd80      	pop	{r7, pc}
	...

08005228 <NRF905_init>:
	NRF905_HW_SPI_DESELECT(dev->hw);

	return 0;
}

int NRF905_init(NRF905_t *dev, NRF905_hw_t *hw) {
 8005228:	b590      	push	{r4, r7, lr}
 800522a:	b085      	sub	sp, #20
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
 8005230:	6039      	str	r1, [r7, #0]
	uint8_t i;

	if (dev == NULL) {
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d102      	bne.n	800523e <NRF905_init+0x16>
		return -1;
 8005238:	2301      	movs	r3, #1
 800523a:	425b      	negs	r3, r3
 800523c:	e0d7      	b.n	80053ee <NRF905_init+0x1c6>
	}

	if (hw == NULL) {
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	2b00      	cmp	r3, #0
 8005242:	d102      	bne.n	800524a <NRF905_init+0x22>
		return -2;
 8005244:	2302      	movs	r3, #2
 8005246:	425b      	negs	r3, r3
 8005248:	e0d1      	b.n	80053ee <NRF905_init+0x1c6>
	}

	dev->hw = hw;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	683a      	ldr	r2, [r7, #0]
 800524e:	601a      	str	r2, [r3, #0]

	dev->software_pin_configuration = 0x00;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2200      	movs	r2, #0
 8005254:	741a      	strb	r2, [r3, #16]

	NRF905_hw_enable_timer(hw);
 8005256:	683b      	ldr	r3, [r7, #0]
 8005258:	0018      	movs	r0, r3
 800525a:	f000 f961 	bl	8005520 <NRF905_hw_enable_timer>

	if (hw->gpio[NRF905_HW_GPIO_DR].port == NULL) {
 800525e:	683b      	ldr	r3, [r7, #0]
 8005260:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005262:	2b00      	cmp	r3, #0
 8005264:	d106      	bne.n	8005274 <NRF905_init+0x4c>
		dev->software_pin_configuration |= NRF905_USE_SOFTWARE_DATA_READY;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	7c1b      	ldrb	r3, [r3, #16]
 800526a:	2201      	movs	r2, #1
 800526c:	4313      	orrs	r3, r2
 800526e:	b2da      	uxtb	r2, r3
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	741a      	strb	r2, [r3, #16]
	}
	if (hw->gpio[NRF905_HW_GPIO_AM].port == NULL) {
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005278:	2b00      	cmp	r3, #0
 800527a:	d106      	bne.n	800528a <NRF905_init+0x62>
		dev->software_pin_configuration |= NRF905_USE_SOFTWARE_ADDRESS_MATCH;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	7c1b      	ldrb	r3, [r3, #16]
 8005280:	2202      	movs	r2, #2
 8005282:	4313      	orrs	r3, r2
 8005284:	b2da      	uxtb	r2, r3
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	741a      	strb	r2, [r3, #16]
	}

	NRF905_HW_SPI_DESELECT(dev->hw);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	2201      	movs	r2, #1
 8005290:	2106      	movs	r1, #6
 8005292:	0018      	movs	r0, r3
 8005294:	f000 f8b2 	bl	80053fc <NRF905_hw_gpio_set>

	NRF905_HW_POWER_DOWN(dev->hw);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	2200      	movs	r2, #0
 800529e:	2102      	movs	r1, #2
 80052a0:	0018      	movs	r0, r3
 80052a2:	f000 f8ab 	bl	80053fc <NRF905_hw_gpio_set>
	NRF905_HW_STANDBY_ENTER(hw);
 80052a6:	683b      	ldr	r3, [r7, #0]
 80052a8:	2200      	movs	r2, #0
 80052aa:	2101      	movs	r1, #1
 80052ac:	0018      	movs	r0, r3
 80052ae:	f000 f8a5 	bl	80053fc <NRF905_hw_gpio_set>
	NRF905_HW_MODE_RX(hw);
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	2200      	movs	r2, #0
 80052b6:	2100      	movs	r1, #0
 80052b8:	0018      	movs	r0, r3
 80052ba:	f000 f89f 	bl	80053fc <NRF905_hw_gpio_set>
	NRF905_hw_delay_ms(dev->hw, 3);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	2103      	movs	r1, #3
 80052c4:	0018      	movs	r0, r3
 80052c6:	f000 f8d3 	bl	8005470 <NRF905_hw_delay_ms>

	// Set control registers
	NRF905_HW_SPI_SELECT(dev->hw);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	2200      	movs	r2, #0
 80052d0:	2106      	movs	r1, #6
 80052d2:	0018      	movs	r0, r3
 80052d4:	f000 f892 	bl	80053fc <NRF905_hw_gpio_set>
	NRF905_hw_spi_transfer(dev->hw, NRF905_CMD_W_CONFIG | 0x00, NULL);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	2200      	movs	r2, #0
 80052de:	2100      	movs	r1, #0
 80052e0:	0018      	movs	r0, r3
 80052e2:	f000 f938 	bl	8005556 <NRF905_hw_spi_transfer>
	for (i = 0; i < sizeof(NRF905_default_config); i++) {
 80052e6:	230f      	movs	r3, #15
 80052e8:	18fb      	adds	r3, r7, r3
 80052ea:	2200      	movs	r2, #0
 80052ec:	701a      	strb	r2, [r3, #0]
 80052ee:	e00f      	b.n	8005310 <NRF905_init+0xe8>
		NRF905_hw_spi_transfer(dev->hw, NRF905_default_config[i], NULL);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	6818      	ldr	r0, [r3, #0]
 80052f4:	240f      	movs	r4, #15
 80052f6:	193b      	adds	r3, r7, r4
 80052f8:	781b      	ldrb	r3, [r3, #0]
 80052fa:	4a3f      	ldr	r2, [pc, #252]	; (80053f8 <NRF905_init+0x1d0>)
 80052fc:	5cd3      	ldrb	r3, [r2, r3]
 80052fe:	2200      	movs	r2, #0
 8005300:	0019      	movs	r1, r3
 8005302:	f000 f928 	bl	8005556 <NRF905_hw_spi_transfer>
	for (i = 0; i < sizeof(NRF905_default_config); i++) {
 8005306:	193b      	adds	r3, r7, r4
 8005308:	781a      	ldrb	r2, [r3, #0]
 800530a:	193b      	adds	r3, r7, r4
 800530c:	3201      	adds	r2, #1
 800530e:	701a      	strb	r2, [r3, #0]
 8005310:	240f      	movs	r4, #15
 8005312:	193b      	adds	r3, r7, r4
 8005314:	781b      	ldrb	r3, [r3, #0]
 8005316:	2b09      	cmp	r3, #9
 8005318:	d9ea      	bls.n	80052f0 <NRF905_init+0xc8>
	}
	NRF905_HW_SPI_DESELECT(dev->hw);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	2201      	movs	r2, #1
 8005320:	2106      	movs	r1, #6
 8005322:	0018      	movs	r0, r3
 8005324:	f000 f86a 	bl	80053fc <NRF905_hw_gpio_set>

	NRF905_hw_delay_us(dev->hw, 100);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	2164      	movs	r1, #100	; 0x64
 800532e:	0018      	movs	r0, r3
 8005330:	f000 f8ab 	bl	800548a <NRF905_hw_delay_us>

	NRF905_HW_SPI_SELECT(dev->hw);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	2200      	movs	r2, #0
 800533a:	2106      	movs	r1, #6
 800533c:	0018      	movs	r0, r3
 800533e:	f000 f85d 	bl	80053fc <NRF905_hw_gpio_set>
	// Default transmit address
	NRF905_hw_spi_transfer(dev->hw, NRF905_CMD_W_TX_ADDRESS, NULL);
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	2200      	movs	r2, #0
 8005348:	2122      	movs	r1, #34	; 0x22
 800534a:	0018      	movs	r0, r3
 800534c:	f000 f903 	bl	8005556 <NRF905_hw_spi_transfer>
	for (i = 0; i < 4; i++) {
 8005350:	193b      	adds	r3, r7, r4
 8005352:	2200      	movs	r2, #0
 8005354:	701a      	strb	r2, [r3, #0]
 8005356:	e00c      	b.n	8005372 <NRF905_init+0x14a>
		NRF905_hw_spi_transfer(dev->hw, 0xE7, NULL);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	2200      	movs	r2, #0
 800535e:	21e7      	movs	r1, #231	; 0xe7
 8005360:	0018      	movs	r0, r3
 8005362:	f000 f8f8 	bl	8005556 <NRF905_hw_spi_transfer>
	for (i = 0; i < 4; i++) {
 8005366:	210f      	movs	r1, #15
 8005368:	187b      	adds	r3, r7, r1
 800536a:	781a      	ldrb	r2, [r3, #0]
 800536c:	187b      	adds	r3, r7, r1
 800536e:	3201      	adds	r2, #1
 8005370:	701a      	strb	r2, [r3, #0]
 8005372:	240f      	movs	r4, #15
 8005374:	193b      	adds	r3, r7, r4
 8005376:	781b      	ldrb	r3, [r3, #0]
 8005378:	2b03      	cmp	r3, #3
 800537a:	d9ed      	bls.n	8005358 <NRF905_init+0x130>
	}
	NRF905_HW_SPI_DESELECT(dev->hw);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	2201      	movs	r2, #1
 8005382:	2106      	movs	r1, #6
 8005384:	0018      	movs	r0, r3
 8005386:	f000 f839 	bl	80053fc <NRF905_hw_gpio_set>

	NRF905_hw_delay_us(dev->hw, 100);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	2164      	movs	r1, #100	; 0x64
 8005390:	0018      	movs	r0, r3
 8005392:	f000 f87a 	bl	800548a <NRF905_hw_delay_us>

	NRF905_HW_SPI_SELECT(dev->hw);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	2200      	movs	r2, #0
 800539c:	2106      	movs	r1, #6
 800539e:	0018      	movs	r0, r3
 80053a0:	f000 f82c 	bl	80053fc <NRF905_hw_gpio_set>
	// Clear transmit payload
	NRF905_hw_spi_transfer(dev->hw, NRF905_CMD_W_TX_PAYLOAD, NULL);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	2200      	movs	r2, #0
 80053aa:	2120      	movs	r1, #32
 80053ac:	0018      	movs	r0, r3
 80053ae:	f000 f8d2 	bl	8005556 <NRF905_hw_spi_transfer>
	for (i = 0; i < NRF905_MAX_PAYLOAD; i++) {
 80053b2:	193b      	adds	r3, r7, r4
 80053b4:	2200      	movs	r2, #0
 80053b6:	701a      	strb	r2, [r3, #0]
 80053b8:	e00c      	b.n	80053d4 <NRF905_init+0x1ac>
		NRF905_hw_spi_transfer(dev->hw, 0x00, NULL);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	2200      	movs	r2, #0
 80053c0:	2100      	movs	r1, #0
 80053c2:	0018      	movs	r0, r3
 80053c4:	f000 f8c7 	bl	8005556 <NRF905_hw_spi_transfer>
	for (i = 0; i < NRF905_MAX_PAYLOAD; i++) {
 80053c8:	210f      	movs	r1, #15
 80053ca:	187b      	adds	r3, r7, r1
 80053cc:	781a      	ldrb	r2, [r3, #0]
 80053ce:	187b      	adds	r3, r7, r1
 80053d0:	3201      	adds	r2, #1
 80053d2:	701a      	strb	r2, [r3, #0]
 80053d4:	230f      	movs	r3, #15
 80053d6:	18fb      	adds	r3, r7, r3
 80053d8:	781b      	ldrb	r3, [r3, #0]
 80053da:	2b08      	cmp	r3, #8
 80053dc:	d9ed      	bls.n	80053ba <NRF905_init+0x192>
	}
	NRF905_HW_SPI_DESELECT(dev->hw);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	2201      	movs	r2, #1
 80053e4:	2106      	movs	r1, #6
 80053e6:	0018      	movs	r0, r3
 80053e8:	f000 f808 	bl	80053fc <NRF905_hw_gpio_set>

	return 0;
 80053ec:	2300      	movs	r3, #0
}
 80053ee:	0018      	movs	r0, r3
 80053f0:	46bd      	mov	sp, r7
 80053f2:	b005      	add	sp, #20
 80053f4:	bd90      	pop	{r4, r7, pc}
 80053f6:	46c0      	nop			; (mov r8, r8)
 80053f8:	08006f30 	.word	0x08006f30

080053fc <NRF905_hw_gpio_set>:
	}

	return -3;
}

int NRF905_hw_gpio_set(NRF905_hw_t *hw, uint8_t gpio, uint8_t value) {
 80053fc:	b580      	push	{r7, lr}
 80053fe:	b082      	sub	sp, #8
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
 8005404:	0008      	movs	r0, r1
 8005406:	0011      	movs	r1, r2
 8005408:	1cfb      	adds	r3, r7, #3
 800540a:	1c02      	adds	r2, r0, #0
 800540c:	701a      	strb	r2, [r3, #0]
 800540e:	1cbb      	adds	r3, r7, #2
 8005410:	1c0a      	adds	r2, r1, #0
 8005412:	701a      	strb	r2, [r3, #0]
	if (hw == NULL) {
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2b00      	cmp	r3, #0
 8005418:	d102      	bne.n	8005420 <NRF905_hw_gpio_set+0x24>
		return -1;
 800541a:	2301      	movs	r3, #1
 800541c:	425b      	negs	r3, r3
 800541e:	e023      	b.n	8005468 <NRF905_hw_gpio_set+0x6c>
	}

	if (gpio >= 0 && gpio <= 6) {
 8005420:	1cfb      	adds	r3, r7, #3
 8005422:	781b      	ldrb	r3, [r3, #0]
 8005424:	2b06      	cmp	r3, #6
 8005426:	d81e      	bhi.n	8005466 <NRF905_hw_gpio_set+0x6a>
		if (hw->gpio[gpio].port) {
 8005428:	1cfb      	adds	r3, r7, #3
 800542a:	781b      	ldrb	r3, [r3, #0]
 800542c:	687a      	ldr	r2, [r7, #4]
 800542e:	00db      	lsls	r3, r3, #3
 8005430:	18d3      	adds	r3, r2, r3
 8005432:	3304      	adds	r3, #4
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	2b00      	cmp	r3, #0
 8005438:	d012      	beq.n	8005460 <NRF905_hw_gpio_set+0x64>
			HAL_GPIO_WritePin((GPIO_TypeDef*) hw->gpio[gpio].port,
 800543a:	1cfb      	adds	r3, r7, #3
 800543c:	781b      	ldrb	r3, [r3, #0]
 800543e:	687a      	ldr	r2, [r7, #4]
 8005440:	00db      	lsls	r3, r3, #3
 8005442:	18d3      	adds	r3, r2, r3
 8005444:	3304      	adds	r3, #4
 8005446:	6818      	ldr	r0, [r3, #0]
					hw->gpio[gpio].pin, value);
 8005448:	1cfb      	adds	r3, r7, #3
 800544a:	781a      	ldrb	r2, [r3, #0]
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	00d2      	lsls	r2, r2, #3
 8005450:	58d3      	ldr	r3, [r2, r3]
			HAL_GPIO_WritePin((GPIO_TypeDef*) hw->gpio[gpio].port,
 8005452:	b299      	uxth	r1, r3
 8005454:	1cbb      	adds	r3, r7, #2
 8005456:	781b      	ldrb	r3, [r3, #0]
 8005458:	001a      	movs	r2, r3
 800545a:	f7fc fb83 	bl	8001b64 <HAL_GPIO_WritePin>
 800545e:	e002      	b.n	8005466 <NRF905_hw_gpio_set+0x6a>
		} else {
			return -2;
 8005460:	2302      	movs	r3, #2
 8005462:	425b      	negs	r3, r3
 8005464:	e000      	b.n	8005468 <NRF905_hw_gpio_set+0x6c>
		}
	}

	return 0;
 8005466:	2300      	movs	r3, #0
}
 8005468:	0018      	movs	r0, r3
 800546a:	46bd      	mov	sp, r7
 800546c:	b002      	add	sp, #8
 800546e:	bd80      	pop	{r7, pc}

08005470 <NRF905_hw_delay_ms>:

void NRF905_hw_delay_ms(NRF905_hw_t *hw, uint32_t ms) {
 8005470:	b580      	push	{r7, lr}
 8005472:	b082      	sub	sp, #8
 8005474:	af00      	add	r7, sp, #0
 8005476:	6078      	str	r0, [r7, #4]
 8005478:	6039      	str	r1, [r7, #0]
	HAL_Delay(ms);
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	0018      	movs	r0, r3
 800547e:	f7fc f88b 	bl	8001598 <HAL_Delay>
}
 8005482:	46c0      	nop			; (mov r8, r8)
 8005484:	46bd      	mov	sp, r7
 8005486:	b002      	add	sp, #8
 8005488:	bd80      	pop	{r7, pc}

0800548a <NRF905_hw_delay_us>:

void NRF905_hw_delay_us(NRF905_hw_t *hw, uint16_t delay) {
 800548a:	b580      	push	{r7, lr}
 800548c:	b084      	sub	sp, #16
 800548e:	af00      	add	r7, sp, #0
 8005490:	6078      	str	r0, [r7, #4]
 8005492:	000a      	movs	r2, r1
 8005494:	1cbb      	adds	r3, r7, #2
 8005496:	801a      	strh	r2, [r3, #0]
	if (hw->tim != NULL) {
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800549c:	2b00      	cmp	r3, #0
 800549e:	d03b      	beq.n	8005518 <NRF905_hw_delay_us+0x8e>
		volatile uint16_t current_time, stop_time;
		current_time = __HAL_TIM_GET_COUNTER((TIM_HandleTypeDef* ) (hw->tim));
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054a8:	b29a      	uxth	r2, r3
 80054aa:	210e      	movs	r1, #14
 80054ac:	187b      	adds	r3, r7, r1
 80054ae:	801a      	strh	r2, [r3, #0]
		stop_time = current_time + delay;
 80054b0:	187b      	adds	r3, r7, r1
 80054b2:	881b      	ldrh	r3, [r3, #0]
 80054b4:	b29a      	uxth	r2, r3
 80054b6:	1cbb      	adds	r3, r7, #2
 80054b8:	881b      	ldrh	r3, [r3, #0]
 80054ba:	18d3      	adds	r3, r2, r3
 80054bc:	b29a      	uxth	r2, r3
 80054be:	200c      	movs	r0, #12
 80054c0:	183b      	adds	r3, r7, r0
 80054c2:	801a      	strh	r2, [r3, #0]

		//overflow
		if (stop_time < current_time) {
 80054c4:	183b      	adds	r3, r7, r0
 80054c6:	881b      	ldrh	r3, [r3, #0]
 80054c8:	b29a      	uxth	r2, r3
 80054ca:	187b      	adds	r3, r7, r1
 80054cc:	881b      	ldrh	r3, [r3, #0]
 80054ce:	b29b      	uxth	r3, r3
 80054d0:	429a      	cmp	r2, r3
 80054d2:	d210      	bcs.n	80054f6 <NRF905_hw_delay_us+0x6c>
			do {
				current_time = __HAL_TIM_GET_COUNTER(
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054dc:	b29a      	uxth	r2, r3
 80054de:	210e      	movs	r1, #14
 80054e0:	187b      	adds	r3, r7, r1
 80054e2:	801a      	strh	r2, [r3, #0]
						(TIM_HandleTypeDef* ) (hw->tim));
			} while (current_time > stop_time);
 80054e4:	187b      	adds	r3, r7, r1
 80054e6:	881b      	ldrh	r3, [r3, #0]
 80054e8:	b29a      	uxth	r2, r3
 80054ea:	230c      	movs	r3, #12
 80054ec:	18fb      	adds	r3, r7, r3
 80054ee:	881b      	ldrh	r3, [r3, #0]
 80054f0:	b29b      	uxth	r3, r3
 80054f2:	429a      	cmp	r2, r3
 80054f4:	d8ee      	bhi.n	80054d4 <NRF905_hw_delay_us+0x4a>
		}

		do {
			current_time = __HAL_TIM_GET_COUNTER(
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054fe:	b29a      	uxth	r2, r3
 8005500:	210e      	movs	r1, #14
 8005502:	187b      	adds	r3, r7, r1
 8005504:	801a      	strh	r2, [r3, #0]
					(TIM_HandleTypeDef* ) (hw->tim));
		} while (current_time < stop_time);
 8005506:	187b      	adds	r3, r7, r1
 8005508:	881b      	ldrh	r3, [r3, #0]
 800550a:	b29a      	uxth	r2, r3
 800550c:	230c      	movs	r3, #12
 800550e:	18fb      	adds	r3, r7, r3
 8005510:	881b      	ldrh	r3, [r3, #0]
 8005512:	b29b      	uxth	r3, r3
 8005514:	429a      	cmp	r2, r3
 8005516:	d3ee      	bcc.n	80054f6 <NRF905_hw_delay_us+0x6c>
	}
}
 8005518:	46c0      	nop			; (mov r8, r8)
 800551a:	46bd      	mov	sp, r7
 800551c:	b004      	add	sp, #16
 800551e:	bd80      	pop	{r7, pc}

08005520 <NRF905_hw_enable_timer>:

void NRF905_hw_enable_timer(NRF905_hw_t *hw) {
 8005520:	b580      	push	{r7, lr}
 8005522:	b082      	sub	sp, #8
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
	if (hw->tim != NULL) {
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800552c:	2b00      	cmp	r3, #0
 800552e:	d00e      	beq.n	800554e <NRF905_hw_enable_timer+0x2e>
		__HAL_TIM_SET_COUNTER((TIM_HandleTypeDef* )(hw->tim), 0);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	2200      	movs	r2, #0
 8005538:	625a      	str	r2, [r3, #36]	; 0x24
		__HAL_TIM_ENABLE((TIM_HandleTypeDef* )hw->tim);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	681a      	ldr	r2, [r3, #0]
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	2101      	movs	r1, #1
 800554a:	430a      	orrs	r2, r1
 800554c:	601a      	str	r2, [r3, #0]
	}
}
 800554e:	46c0      	nop			; (mov r8, r8)
 8005550:	46bd      	mov	sp, r7
 8005552:	b002      	add	sp, #8
 8005554:	bd80      	pop	{r7, pc}

08005556 <NRF905_hw_spi_transfer>:

int NRF905_hw_spi_transfer(NRF905_hw_t *hw, uint8_t data_tx, uint8_t *data_rx) {
 8005556:	b580      	push	{r7, lr}
 8005558:	b088      	sub	sp, #32
 800555a:	af02      	add	r7, sp, #8
 800555c:	60f8      	str	r0, [r7, #12]
 800555e:	607a      	str	r2, [r7, #4]
 8005560:	230b      	movs	r3, #11
 8005562:	18fb      	adds	r3, r7, r3
 8005564:	1c0a      	adds	r2, r1, #0
 8005566:	701a      	strb	r2, [r3, #0]
	uint8_t dummy;
	int ret;

	if (hw == NULL) {
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	2b00      	cmp	r3, #0
 800556c:	d102      	bne.n	8005574 <NRF905_hw_spi_transfer+0x1e>
		return -1;
 800556e:	2301      	movs	r3, #1
 8005570:	425b      	negs	r3, r3
 8005572:	e012      	b.n	800559a <NRF905_hw_spi_transfer+0x44>
	}

	if (data_rx == NULL) {
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2b00      	cmp	r3, #0
 8005578:	d102      	bne.n	8005580 <NRF905_hw_spi_transfer+0x2a>
		data_rx = &dummy;
 800557a:	2313      	movs	r3, #19
 800557c:	18fb      	adds	r3, r7, r3
 800557e:	607b      	str	r3, [r7, #4]
	}

	ret = HAL_SPI_TransmitReceive((SPI_HandleTypeDef*) hw->spi, &data_tx,
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8005584:	687a      	ldr	r2, [r7, #4]
 8005586:	230b      	movs	r3, #11
 8005588:	18f9      	adds	r1, r7, r3
 800558a:	2364      	movs	r3, #100	; 0x64
 800558c:	9300      	str	r3, [sp, #0]
 800558e:	2301      	movs	r3, #1
 8005590:	f7fd faba 	bl	8002b08 <HAL_SPI_TransmitReceive>
 8005594:	0003      	movs	r3, r0
 8005596:	617b      	str	r3, [r7, #20]
			data_rx, 1, 100);

	return ret;
 8005598:	697b      	ldr	r3, [r7, #20]
}
 800559a:	0018      	movs	r0, r3
 800559c:	46bd      	mov	sp, r7
 800559e:	b006      	add	sp, #24
 80055a0:	bd80      	pop	{r7, pc}

080055a2 <NRF905_hw_spi_receive_it>:

//	Function for non-blocking SPI
void NRF905_hw_spi_receive_it(NRF905_hw_t *hw, uint8_t *data_rx, uint16_t size) {
 80055a2:	b580      	push	{r7, lr}
 80055a4:	b084      	sub	sp, #16
 80055a6:	af00      	add	r7, sp, #0
 80055a8:	60f8      	str	r0, [r7, #12]
 80055aa:	60b9      	str	r1, [r7, #8]
 80055ac:	1dbb      	adds	r3, r7, #6
 80055ae:	801a      	strh	r2, [r3, #0]

	HAL_SPI_Receive_IT((SPI_HandleTypeDef*) hw->spi, (uint8_t*)data_rx, size);
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80055b4:	1dbb      	adds	r3, r7, #6
 80055b6:	881a      	ldrh	r2, [r3, #0]
 80055b8:	68bb      	ldr	r3, [r7, #8]
 80055ba:	0019      	movs	r1, r3
 80055bc:	f7fd fc76 	bl	8002eac <HAL_SPI_Receive_IT>
}
 80055c0:	46c0      	nop			; (mov r8, r8)
 80055c2:	46bd      	mov	sp, r7
 80055c4:	b004      	add	sp, #16
 80055c6:	bd80      	pop	{r7, pc}

080055c8 <findslot>:
 80055c8:	4b0a      	ldr	r3, [pc, #40]	; (80055f4 <findslot+0x2c>)
 80055ca:	b510      	push	{r4, lr}
 80055cc:	0004      	movs	r4, r0
 80055ce:	6818      	ldr	r0, [r3, #0]
 80055d0:	2800      	cmp	r0, #0
 80055d2:	d004      	beq.n	80055de <findslot+0x16>
 80055d4:	6983      	ldr	r3, [r0, #24]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d101      	bne.n	80055de <findslot+0x16>
 80055da:	f000 fb03 	bl	8005be4 <__sinit>
 80055de:	2000      	movs	r0, #0
 80055e0:	2c13      	cmp	r4, #19
 80055e2:	d805      	bhi.n	80055f0 <findslot+0x28>
 80055e4:	4b04      	ldr	r3, [pc, #16]	; (80055f8 <findslot+0x30>)
 80055e6:	00e4      	lsls	r4, r4, #3
 80055e8:	58e2      	ldr	r2, [r4, r3]
 80055ea:	3201      	adds	r2, #1
 80055ec:	d000      	beq.n	80055f0 <findslot+0x28>
 80055ee:	18e0      	adds	r0, r4, r3
 80055f0:	bd10      	pop	{r4, pc}
 80055f2:	46c0      	nop			; (mov r8, r8)
 80055f4:	20000018 	.word	0x20000018
 80055f8:	200002b0 	.word	0x200002b0

080055fc <error>:
 80055fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055fe:	0004      	movs	r4, r0
 8005600:	f000 fa88 	bl	8005b14 <__errno>
 8005604:	2613      	movs	r6, #19
 8005606:	0005      	movs	r5, r0
 8005608:	2700      	movs	r7, #0
 800560a:	1c30      	adds	r0, r6, #0
 800560c:	1c39      	adds	r1, r7, #0
 800560e:	beab      	bkpt	0x00ab
 8005610:	1c06      	adds	r6, r0, #0
 8005612:	602e      	str	r6, [r5, #0]
 8005614:	0020      	movs	r0, r4
 8005616:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005618 <checkerror>:
 8005618:	b510      	push	{r4, lr}
 800561a:	1c43      	adds	r3, r0, #1
 800561c:	d101      	bne.n	8005622 <checkerror+0xa>
 800561e:	f7ff ffed 	bl	80055fc <error>
 8005622:	bd10      	pop	{r4, pc}

08005624 <_swiread>:
 8005624:	b530      	push	{r4, r5, lr}
 8005626:	b085      	sub	sp, #20
 8005628:	ad01      	add	r5, sp, #4
 800562a:	9001      	str	r0, [sp, #4]
 800562c:	9102      	str	r1, [sp, #8]
 800562e:	9203      	str	r2, [sp, #12]
 8005630:	2406      	movs	r4, #6
 8005632:	1c20      	adds	r0, r4, #0
 8005634:	1c29      	adds	r1, r5, #0
 8005636:	beab      	bkpt	0x00ab
 8005638:	1c04      	adds	r4, r0, #0
 800563a:	0020      	movs	r0, r4
 800563c:	f7ff ffec 	bl	8005618 <checkerror>
 8005640:	b005      	add	sp, #20
 8005642:	bd30      	pop	{r4, r5, pc}

08005644 <_read>:
 8005644:	b570      	push	{r4, r5, r6, lr}
 8005646:	000e      	movs	r6, r1
 8005648:	0015      	movs	r5, r2
 800564a:	f7ff ffbd 	bl	80055c8 <findslot>
 800564e:	1e04      	subs	r4, r0, #0
 8005650:	d106      	bne.n	8005660 <_read+0x1c>
 8005652:	f000 fa5f 	bl	8005b14 <__errno>
 8005656:	2309      	movs	r3, #9
 8005658:	6003      	str	r3, [r0, #0]
 800565a:	2001      	movs	r0, #1
 800565c:	4240      	negs	r0, r0
 800565e:	bd70      	pop	{r4, r5, r6, pc}
 8005660:	002a      	movs	r2, r5
 8005662:	0031      	movs	r1, r6
 8005664:	6800      	ldr	r0, [r0, #0]
 8005666:	f7ff ffdd 	bl	8005624 <_swiread>
 800566a:	1c43      	adds	r3, r0, #1
 800566c:	d0f7      	beq.n	800565e <_read+0x1a>
 800566e:	6863      	ldr	r3, [r4, #4]
 8005670:	1a28      	subs	r0, r5, r0
 8005672:	181b      	adds	r3, r3, r0
 8005674:	6063      	str	r3, [r4, #4]
 8005676:	e7f2      	b.n	800565e <_read+0x1a>

08005678 <_swilseek>:
 8005678:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800567a:	000c      	movs	r4, r1
 800567c:	0016      	movs	r6, r2
 800567e:	f7ff ffa3 	bl	80055c8 <findslot>
 8005682:	1e05      	subs	r5, r0, #0
 8005684:	d107      	bne.n	8005696 <_swilseek+0x1e>
 8005686:	f000 fa45 	bl	8005b14 <__errno>
 800568a:	2309      	movs	r3, #9
 800568c:	6003      	str	r3, [r0, #0]
 800568e:	2401      	movs	r4, #1
 8005690:	4264      	negs	r4, r4
 8005692:	0020      	movs	r0, r4
 8005694:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005696:	2e02      	cmp	r6, #2
 8005698:	d903      	bls.n	80056a2 <_swilseek+0x2a>
 800569a:	f000 fa3b 	bl	8005b14 <__errno>
 800569e:	2316      	movs	r3, #22
 80056a0:	e7f4      	b.n	800568c <_swilseek+0x14>
 80056a2:	2e01      	cmp	r6, #1
 80056a4:	d112      	bne.n	80056cc <_swilseek+0x54>
 80056a6:	6843      	ldr	r3, [r0, #4]
 80056a8:	18e4      	adds	r4, r4, r3
 80056aa:	d4f6      	bmi.n	800569a <_swilseek+0x22>
 80056ac:	466f      	mov	r7, sp
 80056ae:	682b      	ldr	r3, [r5, #0]
 80056b0:	260a      	movs	r6, #10
 80056b2:	9300      	str	r3, [sp, #0]
 80056b4:	607c      	str	r4, [r7, #4]
 80056b6:	1c30      	adds	r0, r6, #0
 80056b8:	1c39      	adds	r1, r7, #0
 80056ba:	beab      	bkpt	0x00ab
 80056bc:	1c06      	adds	r6, r0, #0
 80056be:	0030      	movs	r0, r6
 80056c0:	f7ff ffaa 	bl	8005618 <checkerror>
 80056c4:	2800      	cmp	r0, #0
 80056c6:	dbe2      	blt.n	800568e <_swilseek+0x16>
 80056c8:	606c      	str	r4, [r5, #4]
 80056ca:	e7e2      	b.n	8005692 <_swilseek+0x1a>
 80056cc:	2e02      	cmp	r6, #2
 80056ce:	d1ed      	bne.n	80056ac <_swilseek+0x34>
 80056d0:	6803      	ldr	r3, [r0, #0]
 80056d2:	466f      	mov	r7, sp
 80056d4:	9300      	str	r3, [sp, #0]
 80056d6:	360a      	adds	r6, #10
 80056d8:	1c30      	adds	r0, r6, #0
 80056da:	1c39      	adds	r1, r7, #0
 80056dc:	beab      	bkpt	0x00ab
 80056de:	1c06      	adds	r6, r0, #0
 80056e0:	0030      	movs	r0, r6
 80056e2:	f7ff ff99 	bl	8005618 <checkerror>
 80056e6:	1824      	adds	r4, r4, r0
 80056e8:	1c43      	adds	r3, r0, #1
 80056ea:	d1df      	bne.n	80056ac <_swilseek+0x34>
 80056ec:	e7cf      	b.n	800568e <_swilseek+0x16>

080056ee <_lseek>:
 80056ee:	b510      	push	{r4, lr}
 80056f0:	f7ff ffc2 	bl	8005678 <_swilseek>
 80056f4:	bd10      	pop	{r4, pc}

080056f6 <_swiwrite>:
 80056f6:	b530      	push	{r4, r5, lr}
 80056f8:	b085      	sub	sp, #20
 80056fa:	ad01      	add	r5, sp, #4
 80056fc:	9001      	str	r0, [sp, #4]
 80056fe:	9102      	str	r1, [sp, #8]
 8005700:	9203      	str	r2, [sp, #12]
 8005702:	2405      	movs	r4, #5
 8005704:	1c20      	adds	r0, r4, #0
 8005706:	1c29      	adds	r1, r5, #0
 8005708:	beab      	bkpt	0x00ab
 800570a:	1c04      	adds	r4, r0, #0
 800570c:	0020      	movs	r0, r4
 800570e:	f7ff ff83 	bl	8005618 <checkerror>
 8005712:	b005      	add	sp, #20
 8005714:	bd30      	pop	{r4, r5, pc}

08005716 <_write>:
 8005716:	b570      	push	{r4, r5, r6, lr}
 8005718:	000e      	movs	r6, r1
 800571a:	0015      	movs	r5, r2
 800571c:	f7ff ff54 	bl	80055c8 <findslot>
 8005720:	1e04      	subs	r4, r0, #0
 8005722:	d106      	bne.n	8005732 <_write+0x1c>
 8005724:	f000 f9f6 	bl	8005b14 <__errno>
 8005728:	2309      	movs	r3, #9
 800572a:	6003      	str	r3, [r0, #0]
 800572c:	2001      	movs	r0, #1
 800572e:	4240      	negs	r0, r0
 8005730:	e00f      	b.n	8005752 <_write+0x3c>
 8005732:	002a      	movs	r2, r5
 8005734:	0031      	movs	r1, r6
 8005736:	6800      	ldr	r0, [r0, #0]
 8005738:	f7ff ffdd 	bl	80056f6 <_swiwrite>
 800573c:	1e03      	subs	r3, r0, #0
 800573e:	dbf5      	blt.n	800572c <_write+0x16>
 8005740:	6862      	ldr	r2, [r4, #4]
 8005742:	1a28      	subs	r0, r5, r0
 8005744:	1812      	adds	r2, r2, r0
 8005746:	6062      	str	r2, [r4, #4]
 8005748:	42ab      	cmp	r3, r5
 800574a:	d102      	bne.n	8005752 <_write+0x3c>
 800574c:	2000      	movs	r0, #0
 800574e:	f7ff ff55 	bl	80055fc <error>
 8005752:	bd70      	pop	{r4, r5, r6, pc}

08005754 <_swiclose>:
 8005754:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005756:	2402      	movs	r4, #2
 8005758:	9001      	str	r0, [sp, #4]
 800575a:	ad01      	add	r5, sp, #4
 800575c:	1c20      	adds	r0, r4, #0
 800575e:	1c29      	adds	r1, r5, #0
 8005760:	beab      	bkpt	0x00ab
 8005762:	1c04      	adds	r4, r0, #0
 8005764:	0020      	movs	r0, r4
 8005766:	f7ff ff57 	bl	8005618 <checkerror>
 800576a:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0800576c <_close>:
 800576c:	b570      	push	{r4, r5, r6, lr}
 800576e:	0005      	movs	r5, r0
 8005770:	f7ff ff2a 	bl	80055c8 <findslot>
 8005774:	1e04      	subs	r4, r0, #0
 8005776:	d106      	bne.n	8005786 <_close+0x1a>
 8005778:	f000 f9cc 	bl	8005b14 <__errno>
 800577c:	2309      	movs	r3, #9
 800577e:	6003      	str	r3, [r0, #0]
 8005780:	2001      	movs	r0, #1
 8005782:	4240      	negs	r0, r0
 8005784:	bd70      	pop	{r4, r5, r6, pc}
 8005786:	3d01      	subs	r5, #1
 8005788:	2d01      	cmp	r5, #1
 800578a:	d809      	bhi.n	80057a0 <_close+0x34>
 800578c:	4b09      	ldr	r3, [pc, #36]	; (80057b4 <_close+0x48>)
 800578e:	689a      	ldr	r2, [r3, #8]
 8005790:	691b      	ldr	r3, [r3, #16]
 8005792:	429a      	cmp	r2, r3
 8005794:	d104      	bne.n	80057a0 <_close+0x34>
 8005796:	2301      	movs	r3, #1
 8005798:	425b      	negs	r3, r3
 800579a:	6003      	str	r3, [r0, #0]
 800579c:	2000      	movs	r0, #0
 800579e:	e7f1      	b.n	8005784 <_close+0x18>
 80057a0:	6820      	ldr	r0, [r4, #0]
 80057a2:	f7ff ffd7 	bl	8005754 <_swiclose>
 80057a6:	2800      	cmp	r0, #0
 80057a8:	d1ec      	bne.n	8005784 <_close+0x18>
 80057aa:	2301      	movs	r3, #1
 80057ac:	425b      	negs	r3, r3
 80057ae:	6023      	str	r3, [r4, #0]
 80057b0:	e7e8      	b.n	8005784 <_close+0x18>
 80057b2:	46c0      	nop			; (mov r8, r8)
 80057b4:	200002b0 	.word	0x200002b0

080057b8 <_getpid>:
 80057b8:	2001      	movs	r0, #1
 80057ba:	4770      	bx	lr

080057bc <_swistat>:
 80057bc:	b570      	push	{r4, r5, r6, lr}
 80057be:	000c      	movs	r4, r1
 80057c0:	f7ff ff02 	bl	80055c8 <findslot>
 80057c4:	1e05      	subs	r5, r0, #0
 80057c6:	d106      	bne.n	80057d6 <_swistat+0x1a>
 80057c8:	f000 f9a4 	bl	8005b14 <__errno>
 80057cc:	2309      	movs	r3, #9
 80057ce:	6003      	str	r3, [r0, #0]
 80057d0:	2001      	movs	r0, #1
 80057d2:	4240      	negs	r0, r0
 80057d4:	bd70      	pop	{r4, r5, r6, pc}
 80057d6:	2380      	movs	r3, #128	; 0x80
 80057d8:	6862      	ldr	r2, [r4, #4]
 80057da:	019b      	lsls	r3, r3, #6
 80057dc:	4313      	orrs	r3, r2
 80057de:	6063      	str	r3, [r4, #4]
 80057e0:	2380      	movs	r3, #128	; 0x80
 80057e2:	00db      	lsls	r3, r3, #3
 80057e4:	260c      	movs	r6, #12
 80057e6:	64a3      	str	r3, [r4, #72]	; 0x48
 80057e8:	1c30      	adds	r0, r6, #0
 80057ea:	1c29      	adds	r1, r5, #0
 80057ec:	beab      	bkpt	0x00ab
 80057ee:	1c05      	adds	r5, r0, #0
 80057f0:	0028      	movs	r0, r5
 80057f2:	f7ff ff11 	bl	8005618 <checkerror>
 80057f6:	1c43      	adds	r3, r0, #1
 80057f8:	d0ec      	beq.n	80057d4 <_swistat+0x18>
 80057fa:	6120      	str	r0, [r4, #16]
 80057fc:	2000      	movs	r0, #0
 80057fe:	e7e9      	b.n	80057d4 <_swistat+0x18>

08005800 <_fstat>:
 8005800:	b570      	push	{r4, r5, r6, lr}
 8005802:	000c      	movs	r4, r1
 8005804:	0005      	movs	r5, r0
 8005806:	2258      	movs	r2, #88	; 0x58
 8005808:	2100      	movs	r1, #0
 800580a:	0020      	movs	r0, r4
 800580c:	f000 fab1 	bl	8005d72 <memset>
 8005810:	0028      	movs	r0, r5
 8005812:	0021      	movs	r1, r4
 8005814:	f7ff ffd2 	bl	80057bc <_swistat>
 8005818:	bd70      	pop	{r4, r5, r6, pc}

0800581a <_stat>:
 800581a:	b570      	push	{r4, r5, r6, lr}
 800581c:	000d      	movs	r5, r1
 800581e:	0004      	movs	r4, r0
 8005820:	2258      	movs	r2, #88	; 0x58
 8005822:	2100      	movs	r1, #0
 8005824:	0028      	movs	r0, r5
 8005826:	f000 faa4 	bl	8005d72 <memset>
 800582a:	0020      	movs	r0, r4
 800582c:	2100      	movs	r1, #0
 800582e:	f000 f813 	bl	8005858 <_swiopen>
 8005832:	0004      	movs	r4, r0
 8005834:	1c43      	adds	r3, r0, #1
 8005836:	d00c      	beq.n	8005852 <_stat+0x38>
 8005838:	2381      	movs	r3, #129	; 0x81
 800583a:	686a      	ldr	r2, [r5, #4]
 800583c:	021b      	lsls	r3, r3, #8
 800583e:	4313      	orrs	r3, r2
 8005840:	0029      	movs	r1, r5
 8005842:	606b      	str	r3, [r5, #4]
 8005844:	f7ff ffba 	bl	80057bc <_swistat>
 8005848:	0005      	movs	r5, r0
 800584a:	0020      	movs	r0, r4
 800584c:	f7ff ff8e 	bl	800576c <_close>
 8005850:	002c      	movs	r4, r5
 8005852:	0020      	movs	r0, r4
 8005854:	bd70      	pop	{r4, r5, r6, pc}
	...

08005858 <_swiopen>:
 8005858:	b5f0      	push	{r4, r5, r6, r7, lr}
 800585a:	000d      	movs	r5, r1
 800585c:	2600      	movs	r6, #0
 800585e:	b099      	sub	sp, #100	; 0x64
 8005860:	9000      	str	r0, [sp, #0]
 8005862:	00f3      	lsls	r3, r6, #3
 8005864:	9301      	str	r3, [sp, #4]
 8005866:	4b29      	ldr	r3, [pc, #164]	; (800590c <_swiopen+0xb4>)
 8005868:	00f2      	lsls	r2, r6, #3
 800586a:	589c      	ldr	r4, [r3, r2]
 800586c:	1c63      	adds	r3, r4, #1
 800586e:	d038      	beq.n	80058e2 <_swiopen+0x8a>
 8005870:	3601      	adds	r6, #1
 8005872:	2e14      	cmp	r6, #20
 8005874:	d1f5      	bne.n	8005862 <_swiopen+0xa>
 8005876:	f000 f94d 	bl	8005b14 <__errno>
 800587a:	2401      	movs	r4, #1
 800587c:	2318      	movs	r3, #24
 800587e:	4264      	negs	r4, r4
 8005880:	6003      	str	r3, [r0, #0]
 8005882:	e03f      	b.n	8005904 <_swiopen+0xac>
 8005884:	2302      	movs	r3, #2
 8005886:	03ec      	lsls	r4, r5, #15
 8005888:	0fe4      	lsrs	r4, r4, #31
 800588a:	421d      	tst	r5, r3
 800588c:	d000      	beq.n	8005890 <_swiopen+0x38>
 800588e:	431c      	orrs	r4, r3
 8005890:	4b1f      	ldr	r3, [pc, #124]	; (8005910 <_swiopen+0xb8>)
 8005892:	421d      	tst	r5, r3
 8005894:	d001      	beq.n	800589a <_swiopen+0x42>
 8005896:	2304      	movs	r3, #4
 8005898:	431c      	orrs	r4, r3
 800589a:	2308      	movs	r3, #8
 800589c:	421d      	tst	r5, r3
 800589e:	d002      	beq.n	80058a6 <_swiopen+0x4e>
 80058a0:	2204      	movs	r2, #4
 80058a2:	4394      	bics	r4, r2
 80058a4:	431c      	orrs	r4, r3
 80058a6:	9b00      	ldr	r3, [sp, #0]
 80058a8:	0018      	movs	r0, r3
 80058aa:	9302      	str	r3, [sp, #8]
 80058ac:	f7fa fc2a 	bl	8000104 <strlen>
 80058b0:	607c      	str	r4, [r7, #4]
 80058b2:	60b8      	str	r0, [r7, #8]
 80058b4:	2401      	movs	r4, #1
 80058b6:	1c20      	adds	r0, r4, #0
 80058b8:	1c39      	adds	r1, r7, #0
 80058ba:	beab      	bkpt	0x00ab
 80058bc:	1c04      	adds	r4, r0, #0
 80058be:	2c00      	cmp	r4, #0
 80058c0:	db0a      	blt.n	80058d8 <_swiopen+0x80>
 80058c2:	4b12      	ldr	r3, [pc, #72]	; (800590c <_swiopen+0xb4>)
 80058c4:	00f2      	lsls	r2, r6, #3
 80058c6:	509c      	str	r4, [r3, r2]
 80058c8:	0013      	movs	r3, r2
 80058ca:	4a10      	ldr	r2, [pc, #64]	; (800590c <_swiopen+0xb4>)
 80058cc:	0034      	movs	r4, r6
 80058ce:	4694      	mov	ip, r2
 80058d0:	2200      	movs	r2, #0
 80058d2:	4463      	add	r3, ip
 80058d4:	605a      	str	r2, [r3, #4]
 80058d6:	e015      	b.n	8005904 <_swiopen+0xac>
 80058d8:	0020      	movs	r0, r4
 80058da:	f7ff fe8f 	bl	80055fc <error>
 80058de:	0004      	movs	r4, r0
 80058e0:	e010      	b.n	8005904 <_swiopen+0xac>
 80058e2:	23a0      	movs	r3, #160	; 0xa0
 80058e4:	002a      	movs	r2, r5
 80058e6:	011b      	lsls	r3, r3, #4
 80058e8:	401a      	ands	r2, r3
 80058ea:	af02      	add	r7, sp, #8
 80058ec:	429a      	cmp	r2, r3
 80058ee:	d1c9      	bne.n	8005884 <_swiopen+0x2c>
 80058f0:	0039      	movs	r1, r7
 80058f2:	9800      	ldr	r0, [sp, #0]
 80058f4:	f7ff ff91 	bl	800581a <_stat>
 80058f8:	1c43      	adds	r3, r0, #1
 80058fa:	d0c3      	beq.n	8005884 <_swiopen+0x2c>
 80058fc:	f000 f90a 	bl	8005b14 <__errno>
 8005900:	2311      	movs	r3, #17
 8005902:	6003      	str	r3, [r0, #0]
 8005904:	0020      	movs	r0, r4
 8005906:	b019      	add	sp, #100	; 0x64
 8005908:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800590a:	46c0      	nop			; (mov r8, r8)
 800590c:	200002b0 	.word	0x200002b0
 8005910:	00000601 	.word	0x00000601

08005914 <_get_semihosting_exts>:
 8005914:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005916:	b085      	sub	sp, #20
 8005918:	9000      	str	r0, [sp, #0]
 800591a:	9101      	str	r1, [sp, #4]
 800591c:	4827      	ldr	r0, [pc, #156]	; (80059bc <_get_semihosting_exts+0xa8>)
 800591e:	2100      	movs	r1, #0
 8005920:	0015      	movs	r5, r2
 8005922:	f7ff ff99 	bl	8005858 <_swiopen>
 8005926:	0004      	movs	r4, r0
 8005928:	002a      	movs	r2, r5
 800592a:	2100      	movs	r1, #0
 800592c:	9800      	ldr	r0, [sp, #0]
 800592e:	f000 fa20 	bl	8005d72 <memset>
 8005932:	1c63      	adds	r3, r4, #1
 8005934:	d015      	beq.n	8005962 <_get_semihosting_exts+0x4e>
 8005936:	0020      	movs	r0, r4
 8005938:	f7ff fe46 	bl	80055c8 <findslot>
 800593c:	260c      	movs	r6, #12
 800593e:	0007      	movs	r7, r0
 8005940:	1c30      	adds	r0, r6, #0
 8005942:	1c39      	adds	r1, r7, #0
 8005944:	beab      	bkpt	0x00ab
 8005946:	1c06      	adds	r6, r0, #0
 8005948:	0030      	movs	r0, r6
 800594a:	f7ff fe65 	bl	8005618 <checkerror>
 800594e:	2803      	cmp	r0, #3
 8005950:	dd02      	ble.n	8005958 <_get_semihosting_exts+0x44>
 8005952:	3803      	subs	r0, #3
 8005954:	42a8      	cmp	r0, r5
 8005956:	dc07      	bgt.n	8005968 <_get_semihosting_exts+0x54>
 8005958:	0020      	movs	r0, r4
 800595a:	2401      	movs	r4, #1
 800595c:	f7ff ff06 	bl	800576c <_close>
 8005960:	4264      	negs	r4, r4
 8005962:	0020      	movs	r0, r4
 8005964:	b005      	add	sp, #20
 8005966:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005968:	ae03      	add	r6, sp, #12
 800596a:	2204      	movs	r2, #4
 800596c:	0031      	movs	r1, r6
 800596e:	0020      	movs	r0, r4
 8005970:	f7ff fe68 	bl	8005644 <_read>
 8005974:	2803      	cmp	r0, #3
 8005976:	ddef      	ble.n	8005958 <_get_semihosting_exts+0x44>
 8005978:	7833      	ldrb	r3, [r6, #0]
 800597a:	2b53      	cmp	r3, #83	; 0x53
 800597c:	d1ec      	bne.n	8005958 <_get_semihosting_exts+0x44>
 800597e:	7873      	ldrb	r3, [r6, #1]
 8005980:	2b48      	cmp	r3, #72	; 0x48
 8005982:	d1e9      	bne.n	8005958 <_get_semihosting_exts+0x44>
 8005984:	78b3      	ldrb	r3, [r6, #2]
 8005986:	2b46      	cmp	r3, #70	; 0x46
 8005988:	d1e6      	bne.n	8005958 <_get_semihosting_exts+0x44>
 800598a:	78f3      	ldrb	r3, [r6, #3]
 800598c:	2b42      	cmp	r3, #66	; 0x42
 800598e:	d1e3      	bne.n	8005958 <_get_semihosting_exts+0x44>
 8005990:	2201      	movs	r2, #1
 8005992:	0020      	movs	r0, r4
 8005994:	9901      	ldr	r1, [sp, #4]
 8005996:	f7ff fe6f 	bl	8005678 <_swilseek>
 800599a:	2800      	cmp	r0, #0
 800599c:	dbdc      	blt.n	8005958 <_get_semihosting_exts+0x44>
 800599e:	002a      	movs	r2, r5
 80059a0:	9900      	ldr	r1, [sp, #0]
 80059a2:	0020      	movs	r0, r4
 80059a4:	f7ff fe4e 	bl	8005644 <_read>
 80059a8:	0005      	movs	r5, r0
 80059aa:	0020      	movs	r0, r4
 80059ac:	f7ff fede 	bl	800576c <_close>
 80059b0:	0028      	movs	r0, r5
 80059b2:	f7ff fe31 	bl	8005618 <checkerror>
 80059b6:	0004      	movs	r4, r0
 80059b8:	e7d3      	b.n	8005962 <_get_semihosting_exts+0x4e>
 80059ba:	46c0      	nop			; (mov r8, r8)
 80059bc:	08006f3a 	.word	0x08006f3a

080059c0 <initialise_semihosting_exts>:
 80059c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80059c2:	2401      	movs	r4, #1
 80059c4:	2100      	movs	r1, #0
 80059c6:	4e09      	ldr	r6, [pc, #36]	; (80059ec <initialise_semihosting_exts+0x2c>)
 80059c8:	4d09      	ldr	r5, [pc, #36]	; (80059f0 <initialise_semihosting_exts+0x30>)
 80059ca:	af01      	add	r7, sp, #4
 80059cc:	0022      	movs	r2, r4
 80059ce:	0038      	movs	r0, r7
 80059d0:	6031      	str	r1, [r6, #0]
 80059d2:	602c      	str	r4, [r5, #0]
 80059d4:	f7ff ff9e 	bl	8005914 <_get_semihosting_exts>
 80059d8:	2800      	cmp	r0, #0
 80059da:	dd05      	ble.n	80059e8 <initialise_semihosting_exts+0x28>
 80059dc:	2202      	movs	r2, #2
 80059de:	783b      	ldrb	r3, [r7, #0]
 80059e0:	401c      	ands	r4, r3
 80059e2:	4013      	ands	r3, r2
 80059e4:	6034      	str	r4, [r6, #0]
 80059e6:	602b      	str	r3, [r5, #0]
 80059e8:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 80059ea:	46c0      	nop			; (mov r8, r8)
 80059ec:	20000010 	.word	0x20000010
 80059f0:	20000014 	.word	0x20000014

080059f4 <_has_ext_exit_extended>:
 80059f4:	b510      	push	{r4, lr}
 80059f6:	4c04      	ldr	r4, [pc, #16]	; (8005a08 <_has_ext_exit_extended+0x14>)
 80059f8:	6823      	ldr	r3, [r4, #0]
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	da01      	bge.n	8005a02 <_has_ext_exit_extended+0xe>
 80059fe:	f7ff ffdf 	bl	80059c0 <initialise_semihosting_exts>
 8005a02:	6820      	ldr	r0, [r4, #0]
 8005a04:	bd10      	pop	{r4, pc}
 8005a06:	46c0      	nop			; (mov r8, r8)
 8005a08:	20000010 	.word	0x20000010

08005a0c <_has_ext_stdout_stderr>:
 8005a0c:	b510      	push	{r4, lr}
 8005a0e:	4c04      	ldr	r4, [pc, #16]	; (8005a20 <_has_ext_stdout_stderr+0x14>)
 8005a10:	6823      	ldr	r3, [r4, #0]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	da01      	bge.n	8005a1a <_has_ext_stdout_stderr+0xe>
 8005a16:	f7ff ffd3 	bl	80059c0 <initialise_semihosting_exts>
 8005a1a:	6820      	ldr	r0, [r4, #0]
 8005a1c:	bd10      	pop	{r4, pc}
 8005a1e:	46c0      	nop			; (mov r8, r8)
 8005a20:	20000014 	.word	0x20000014

08005a24 <initialise_monitor_handles>:
 8005a24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005a26:	4b27      	ldr	r3, [pc, #156]	; (8005ac4 <initialise_monitor_handles+0xa0>)
 8005a28:	b085      	sub	sp, #20
 8005a2a:	9301      	str	r3, [sp, #4]
 8005a2c:	2500      	movs	r5, #0
 8005a2e:	2303      	movs	r3, #3
 8005a30:	ac01      	add	r4, sp, #4
 8005a32:	60a3      	str	r3, [r4, #8]
 8005a34:	2701      	movs	r7, #1
 8005a36:	6065      	str	r5, [r4, #4]
 8005a38:	1c38      	adds	r0, r7, #0
 8005a3a:	1c21      	adds	r1, r4, #0
 8005a3c:	beab      	bkpt	0x00ab
 8005a3e:	1c07      	adds	r7, r0, #0
 8005a40:	2101      	movs	r1, #1
 8005a42:	4b21      	ldr	r3, [pc, #132]	; (8005ac8 <initialise_monitor_handles+0xa4>)
 8005a44:	4249      	negs	r1, r1
 8005a46:	601f      	str	r7, [r3, #0]
 8005a48:	002b      	movs	r3, r5
 8005a4a:	4d20      	ldr	r5, [pc, #128]	; (8005acc <initialise_monitor_handles+0xa8>)
 8005a4c:	00da      	lsls	r2, r3, #3
 8005a4e:	3301      	adds	r3, #1
 8005a50:	50a9      	str	r1, [r5, r2]
 8005a52:	2b14      	cmp	r3, #20
 8005a54:	d1fa      	bne.n	8005a4c <initialise_monitor_handles+0x28>
 8005a56:	f7ff ffd9 	bl	8005a0c <_has_ext_stdout_stderr>
 8005a5a:	2800      	cmp	r0, #0
 8005a5c:	d018      	beq.n	8005a90 <initialise_monitor_handles+0x6c>
 8005a5e:	4b19      	ldr	r3, [pc, #100]	; (8005ac4 <initialise_monitor_handles+0xa0>)
 8005a60:	2701      	movs	r7, #1
 8005a62:	9301      	str	r3, [sp, #4]
 8005a64:	2303      	movs	r3, #3
 8005a66:	60a3      	str	r3, [r4, #8]
 8005a68:	3301      	adds	r3, #1
 8005a6a:	6063      	str	r3, [r4, #4]
 8005a6c:	1c38      	adds	r0, r7, #0
 8005a6e:	1c21      	adds	r1, r4, #0
 8005a70:	beab      	bkpt	0x00ab
 8005a72:	1c06      	adds	r6, r0, #0
 8005a74:	4b16      	ldr	r3, [pc, #88]	; (8005ad0 <initialise_monitor_handles+0xac>)
 8005a76:	4a13      	ldr	r2, [pc, #76]	; (8005ac4 <initialise_monitor_handles+0xa0>)
 8005a78:	601e      	str	r6, [r3, #0]
 8005a7a:	2303      	movs	r3, #3
 8005a7c:	9201      	str	r2, [sp, #4]
 8005a7e:	60a3      	str	r3, [r4, #8]
 8005a80:	3305      	adds	r3, #5
 8005a82:	6063      	str	r3, [r4, #4]
 8005a84:	1c38      	adds	r0, r7, #0
 8005a86:	1c21      	adds	r1, r4, #0
 8005a88:	beab      	bkpt	0x00ab
 8005a8a:	1c04      	adds	r4, r0, #0
 8005a8c:	4b11      	ldr	r3, [pc, #68]	; (8005ad4 <initialise_monitor_handles+0xb0>)
 8005a8e:	601c      	str	r4, [r3, #0]
 8005a90:	4f10      	ldr	r7, [pc, #64]	; (8005ad4 <initialise_monitor_handles+0xb0>)
 8005a92:	683b      	ldr	r3, [r7, #0]
 8005a94:	3301      	adds	r3, #1
 8005a96:	d102      	bne.n	8005a9e <initialise_monitor_handles+0x7a>
 8005a98:	4b0d      	ldr	r3, [pc, #52]	; (8005ad0 <initialise_monitor_handles+0xac>)
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	603b      	str	r3, [r7, #0]
 8005a9e:	2400      	movs	r4, #0
 8005aa0:	4b09      	ldr	r3, [pc, #36]	; (8005ac8 <initialise_monitor_handles+0xa4>)
 8005aa2:	606c      	str	r4, [r5, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	602b      	str	r3, [r5, #0]
 8005aa8:	f7ff ffb0 	bl	8005a0c <_has_ext_stdout_stderr>
 8005aac:	42a0      	cmp	r0, r4
 8005aae:	d006      	beq.n	8005abe <initialise_monitor_handles+0x9a>
 8005ab0:	4b07      	ldr	r3, [pc, #28]	; (8005ad0 <initialise_monitor_handles+0xac>)
 8005ab2:	60ec      	str	r4, [r5, #12]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	616c      	str	r4, [r5, #20]
 8005ab8:	60ab      	str	r3, [r5, #8]
 8005aba:	683b      	ldr	r3, [r7, #0]
 8005abc:	612b      	str	r3, [r5, #16]
 8005abe:	b005      	add	sp, #20
 8005ac0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005ac2:	46c0      	nop			; (mov r8, r8)
 8005ac4:	08006f50 	.word	0x08006f50
 8005ac8:	200002a8 	.word	0x200002a8
 8005acc:	200002b0 	.word	0x200002b0
 8005ad0:	200002ac 	.word	0x200002ac
 8005ad4:	200002a4 	.word	0x200002a4

08005ad8 <_isatty>:
 8005ad8:	b570      	push	{r4, r5, r6, lr}
 8005ada:	f7ff fd75 	bl	80055c8 <findslot>
 8005ade:	2509      	movs	r5, #9
 8005ae0:	1e04      	subs	r4, r0, #0
 8005ae2:	d104      	bne.n	8005aee <_isatty+0x16>
 8005ae4:	f000 f816 	bl	8005b14 <__errno>
 8005ae8:	6005      	str	r5, [r0, #0]
 8005aea:	0020      	movs	r0, r4
 8005aec:	bd70      	pop	{r4, r5, r6, pc}
 8005aee:	1c28      	adds	r0, r5, #0
 8005af0:	1c21      	adds	r1, r4, #0
 8005af2:	beab      	bkpt	0x00ab
 8005af4:	1c04      	adds	r4, r0, #0
 8005af6:	0020      	movs	r0, r4
 8005af8:	2c01      	cmp	r4, #1
 8005afa:	d0f7      	beq.n	8005aec <_isatty+0x14>
 8005afc:	f000 f80a 	bl	8005b14 <__errno>
 8005b00:	2400      	movs	r4, #0
 8005b02:	0005      	movs	r5, r0
 8005b04:	2613      	movs	r6, #19
 8005b06:	1c30      	adds	r0, r6, #0
 8005b08:	1c21      	adds	r1, r4, #0
 8005b0a:	beab      	bkpt	0x00ab
 8005b0c:	1c06      	adds	r6, r0, #0
 8005b0e:	602e      	str	r6, [r5, #0]
 8005b10:	e7eb      	b.n	8005aea <_isatty+0x12>
	...

08005b14 <__errno>:
 8005b14:	4b01      	ldr	r3, [pc, #4]	; (8005b1c <__errno+0x8>)
 8005b16:	6818      	ldr	r0, [r3, #0]
 8005b18:	4770      	bx	lr
 8005b1a:	46c0      	nop			; (mov r8, r8)
 8005b1c:	20000018 	.word	0x20000018

08005b20 <std>:
 8005b20:	2300      	movs	r3, #0
 8005b22:	b510      	push	{r4, lr}
 8005b24:	0004      	movs	r4, r0
 8005b26:	6003      	str	r3, [r0, #0]
 8005b28:	6043      	str	r3, [r0, #4]
 8005b2a:	6083      	str	r3, [r0, #8]
 8005b2c:	8181      	strh	r1, [r0, #12]
 8005b2e:	6643      	str	r3, [r0, #100]	; 0x64
 8005b30:	0019      	movs	r1, r3
 8005b32:	81c2      	strh	r2, [r0, #14]
 8005b34:	6103      	str	r3, [r0, #16]
 8005b36:	6143      	str	r3, [r0, #20]
 8005b38:	6183      	str	r3, [r0, #24]
 8005b3a:	2208      	movs	r2, #8
 8005b3c:	305c      	adds	r0, #92	; 0x5c
 8005b3e:	f000 f918 	bl	8005d72 <memset>
 8005b42:	4b05      	ldr	r3, [pc, #20]	; (8005b58 <std+0x38>)
 8005b44:	6224      	str	r4, [r4, #32]
 8005b46:	6263      	str	r3, [r4, #36]	; 0x24
 8005b48:	4b04      	ldr	r3, [pc, #16]	; (8005b5c <std+0x3c>)
 8005b4a:	62a3      	str	r3, [r4, #40]	; 0x28
 8005b4c:	4b04      	ldr	r3, [pc, #16]	; (8005b60 <std+0x40>)
 8005b4e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005b50:	4b04      	ldr	r3, [pc, #16]	; (8005b64 <std+0x44>)
 8005b52:	6323      	str	r3, [r4, #48]	; 0x30
 8005b54:	bd10      	pop	{r4, pc}
 8005b56:	46c0      	nop			; (mov r8, r8)
 8005b58:	08006065 	.word	0x08006065
 8005b5c:	0800608d 	.word	0x0800608d
 8005b60:	080060c5 	.word	0x080060c5
 8005b64:	080060f1 	.word	0x080060f1

08005b68 <_cleanup_r>:
 8005b68:	b510      	push	{r4, lr}
 8005b6a:	4902      	ldr	r1, [pc, #8]	; (8005b74 <_cleanup_r+0xc>)
 8005b6c:	f000 f8ba 	bl	8005ce4 <_fwalk_reent>
 8005b70:	bd10      	pop	{r4, pc}
 8005b72:	46c0      	nop			; (mov r8, r8)
 8005b74:	08006439 	.word	0x08006439

08005b78 <__sfmoreglue>:
 8005b78:	b570      	push	{r4, r5, r6, lr}
 8005b7a:	2568      	movs	r5, #104	; 0x68
 8005b7c:	1e4a      	subs	r2, r1, #1
 8005b7e:	4355      	muls	r5, r2
 8005b80:	000e      	movs	r6, r1
 8005b82:	0029      	movs	r1, r5
 8005b84:	3174      	adds	r1, #116	; 0x74
 8005b86:	f000 f91f 	bl	8005dc8 <_malloc_r>
 8005b8a:	1e04      	subs	r4, r0, #0
 8005b8c:	d008      	beq.n	8005ba0 <__sfmoreglue+0x28>
 8005b8e:	2100      	movs	r1, #0
 8005b90:	002a      	movs	r2, r5
 8005b92:	6001      	str	r1, [r0, #0]
 8005b94:	6046      	str	r6, [r0, #4]
 8005b96:	300c      	adds	r0, #12
 8005b98:	60a0      	str	r0, [r4, #8]
 8005b9a:	3268      	adds	r2, #104	; 0x68
 8005b9c:	f000 f8e9 	bl	8005d72 <memset>
 8005ba0:	0020      	movs	r0, r4
 8005ba2:	bd70      	pop	{r4, r5, r6, pc}

08005ba4 <__sfp_lock_acquire>:
 8005ba4:	b510      	push	{r4, lr}
 8005ba6:	4802      	ldr	r0, [pc, #8]	; (8005bb0 <__sfp_lock_acquire+0xc>)
 8005ba8:	f000 f8e1 	bl	8005d6e <__retarget_lock_acquire_recursive>
 8005bac:	bd10      	pop	{r4, pc}
 8005bae:	46c0      	nop			; (mov r8, r8)
 8005bb0:	20000351 	.word	0x20000351

08005bb4 <__sfp_lock_release>:
 8005bb4:	b510      	push	{r4, lr}
 8005bb6:	4802      	ldr	r0, [pc, #8]	; (8005bc0 <__sfp_lock_release+0xc>)
 8005bb8:	f000 f8da 	bl	8005d70 <__retarget_lock_release_recursive>
 8005bbc:	bd10      	pop	{r4, pc}
 8005bbe:	46c0      	nop			; (mov r8, r8)
 8005bc0:	20000351 	.word	0x20000351

08005bc4 <__sinit_lock_acquire>:
 8005bc4:	b510      	push	{r4, lr}
 8005bc6:	4802      	ldr	r0, [pc, #8]	; (8005bd0 <__sinit_lock_acquire+0xc>)
 8005bc8:	f000 f8d1 	bl	8005d6e <__retarget_lock_acquire_recursive>
 8005bcc:	bd10      	pop	{r4, pc}
 8005bce:	46c0      	nop			; (mov r8, r8)
 8005bd0:	20000352 	.word	0x20000352

08005bd4 <__sinit_lock_release>:
 8005bd4:	b510      	push	{r4, lr}
 8005bd6:	4802      	ldr	r0, [pc, #8]	; (8005be0 <__sinit_lock_release+0xc>)
 8005bd8:	f000 f8ca 	bl	8005d70 <__retarget_lock_release_recursive>
 8005bdc:	bd10      	pop	{r4, pc}
 8005bde:	46c0      	nop			; (mov r8, r8)
 8005be0:	20000352 	.word	0x20000352

08005be4 <__sinit>:
 8005be4:	b513      	push	{r0, r1, r4, lr}
 8005be6:	0004      	movs	r4, r0
 8005be8:	f7ff ffec 	bl	8005bc4 <__sinit_lock_acquire>
 8005bec:	69a3      	ldr	r3, [r4, #24]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d002      	beq.n	8005bf8 <__sinit+0x14>
 8005bf2:	f7ff ffef 	bl	8005bd4 <__sinit_lock_release>
 8005bf6:	bd13      	pop	{r0, r1, r4, pc}
 8005bf8:	64a3      	str	r3, [r4, #72]	; 0x48
 8005bfa:	64e3      	str	r3, [r4, #76]	; 0x4c
 8005bfc:	6523      	str	r3, [r4, #80]	; 0x50
 8005bfe:	4b13      	ldr	r3, [pc, #76]	; (8005c4c <__sinit+0x68>)
 8005c00:	4a13      	ldr	r2, [pc, #76]	; (8005c50 <__sinit+0x6c>)
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	62a2      	str	r2, [r4, #40]	; 0x28
 8005c06:	9301      	str	r3, [sp, #4]
 8005c08:	42a3      	cmp	r3, r4
 8005c0a:	d101      	bne.n	8005c10 <__sinit+0x2c>
 8005c0c:	2301      	movs	r3, #1
 8005c0e:	61a3      	str	r3, [r4, #24]
 8005c10:	0020      	movs	r0, r4
 8005c12:	f000 f81f 	bl	8005c54 <__sfp>
 8005c16:	6060      	str	r0, [r4, #4]
 8005c18:	0020      	movs	r0, r4
 8005c1a:	f000 f81b 	bl	8005c54 <__sfp>
 8005c1e:	60a0      	str	r0, [r4, #8]
 8005c20:	0020      	movs	r0, r4
 8005c22:	f000 f817 	bl	8005c54 <__sfp>
 8005c26:	2200      	movs	r2, #0
 8005c28:	2104      	movs	r1, #4
 8005c2a:	60e0      	str	r0, [r4, #12]
 8005c2c:	6860      	ldr	r0, [r4, #4]
 8005c2e:	f7ff ff77 	bl	8005b20 <std>
 8005c32:	2201      	movs	r2, #1
 8005c34:	2109      	movs	r1, #9
 8005c36:	68a0      	ldr	r0, [r4, #8]
 8005c38:	f7ff ff72 	bl	8005b20 <std>
 8005c3c:	2202      	movs	r2, #2
 8005c3e:	2112      	movs	r1, #18
 8005c40:	68e0      	ldr	r0, [r4, #12]
 8005c42:	f7ff ff6d 	bl	8005b20 <std>
 8005c46:	2301      	movs	r3, #1
 8005c48:	61a3      	str	r3, [r4, #24]
 8005c4a:	e7d2      	b.n	8005bf2 <__sinit+0xe>
 8005c4c:	08006fb4 	.word	0x08006fb4
 8005c50:	08005b69 	.word	0x08005b69

08005c54 <__sfp>:
 8005c54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c56:	0007      	movs	r7, r0
 8005c58:	f7ff ffa4 	bl	8005ba4 <__sfp_lock_acquire>
 8005c5c:	4b1f      	ldr	r3, [pc, #124]	; (8005cdc <__sfp+0x88>)
 8005c5e:	681e      	ldr	r6, [r3, #0]
 8005c60:	69b3      	ldr	r3, [r6, #24]
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d102      	bne.n	8005c6c <__sfp+0x18>
 8005c66:	0030      	movs	r0, r6
 8005c68:	f7ff ffbc 	bl	8005be4 <__sinit>
 8005c6c:	3648      	adds	r6, #72	; 0x48
 8005c6e:	68b4      	ldr	r4, [r6, #8]
 8005c70:	6873      	ldr	r3, [r6, #4]
 8005c72:	3b01      	subs	r3, #1
 8005c74:	d504      	bpl.n	8005c80 <__sfp+0x2c>
 8005c76:	6833      	ldr	r3, [r6, #0]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d022      	beq.n	8005cc2 <__sfp+0x6e>
 8005c7c:	6836      	ldr	r6, [r6, #0]
 8005c7e:	e7f6      	b.n	8005c6e <__sfp+0x1a>
 8005c80:	220c      	movs	r2, #12
 8005c82:	5ea5      	ldrsh	r5, [r4, r2]
 8005c84:	2d00      	cmp	r5, #0
 8005c86:	d11a      	bne.n	8005cbe <__sfp+0x6a>
 8005c88:	0020      	movs	r0, r4
 8005c8a:	4b15      	ldr	r3, [pc, #84]	; (8005ce0 <__sfp+0x8c>)
 8005c8c:	3058      	adds	r0, #88	; 0x58
 8005c8e:	60e3      	str	r3, [r4, #12]
 8005c90:	6665      	str	r5, [r4, #100]	; 0x64
 8005c92:	f000 f86b 	bl	8005d6c <__retarget_lock_init_recursive>
 8005c96:	f7ff ff8d 	bl	8005bb4 <__sfp_lock_release>
 8005c9a:	0020      	movs	r0, r4
 8005c9c:	2208      	movs	r2, #8
 8005c9e:	0029      	movs	r1, r5
 8005ca0:	6025      	str	r5, [r4, #0]
 8005ca2:	60a5      	str	r5, [r4, #8]
 8005ca4:	6065      	str	r5, [r4, #4]
 8005ca6:	6125      	str	r5, [r4, #16]
 8005ca8:	6165      	str	r5, [r4, #20]
 8005caa:	61a5      	str	r5, [r4, #24]
 8005cac:	305c      	adds	r0, #92	; 0x5c
 8005cae:	f000 f860 	bl	8005d72 <memset>
 8005cb2:	6365      	str	r5, [r4, #52]	; 0x34
 8005cb4:	63a5      	str	r5, [r4, #56]	; 0x38
 8005cb6:	64a5      	str	r5, [r4, #72]	; 0x48
 8005cb8:	64e5      	str	r5, [r4, #76]	; 0x4c
 8005cba:	0020      	movs	r0, r4
 8005cbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005cbe:	3468      	adds	r4, #104	; 0x68
 8005cc0:	e7d7      	b.n	8005c72 <__sfp+0x1e>
 8005cc2:	2104      	movs	r1, #4
 8005cc4:	0038      	movs	r0, r7
 8005cc6:	f7ff ff57 	bl	8005b78 <__sfmoreglue>
 8005cca:	1e04      	subs	r4, r0, #0
 8005ccc:	6030      	str	r0, [r6, #0]
 8005cce:	d1d5      	bne.n	8005c7c <__sfp+0x28>
 8005cd0:	f7ff ff70 	bl	8005bb4 <__sfp_lock_release>
 8005cd4:	230c      	movs	r3, #12
 8005cd6:	603b      	str	r3, [r7, #0]
 8005cd8:	e7ef      	b.n	8005cba <__sfp+0x66>
 8005cda:	46c0      	nop			; (mov r8, r8)
 8005cdc:	08006fb4 	.word	0x08006fb4
 8005ce0:	ffff0001 	.word	0xffff0001

08005ce4 <_fwalk_reent>:
 8005ce4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005ce6:	0004      	movs	r4, r0
 8005ce8:	0006      	movs	r6, r0
 8005cea:	2700      	movs	r7, #0
 8005cec:	9101      	str	r1, [sp, #4]
 8005cee:	3448      	adds	r4, #72	; 0x48
 8005cf0:	6863      	ldr	r3, [r4, #4]
 8005cf2:	68a5      	ldr	r5, [r4, #8]
 8005cf4:	9300      	str	r3, [sp, #0]
 8005cf6:	9b00      	ldr	r3, [sp, #0]
 8005cf8:	3b01      	subs	r3, #1
 8005cfa:	9300      	str	r3, [sp, #0]
 8005cfc:	d504      	bpl.n	8005d08 <_fwalk_reent+0x24>
 8005cfe:	6824      	ldr	r4, [r4, #0]
 8005d00:	2c00      	cmp	r4, #0
 8005d02:	d1f5      	bne.n	8005cf0 <_fwalk_reent+0xc>
 8005d04:	0038      	movs	r0, r7
 8005d06:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005d08:	89ab      	ldrh	r3, [r5, #12]
 8005d0a:	2b01      	cmp	r3, #1
 8005d0c:	d908      	bls.n	8005d20 <_fwalk_reent+0x3c>
 8005d0e:	220e      	movs	r2, #14
 8005d10:	5eab      	ldrsh	r3, [r5, r2]
 8005d12:	3301      	adds	r3, #1
 8005d14:	d004      	beq.n	8005d20 <_fwalk_reent+0x3c>
 8005d16:	0029      	movs	r1, r5
 8005d18:	0030      	movs	r0, r6
 8005d1a:	9b01      	ldr	r3, [sp, #4]
 8005d1c:	4798      	blx	r3
 8005d1e:	4307      	orrs	r7, r0
 8005d20:	3568      	adds	r5, #104	; 0x68
 8005d22:	e7e8      	b.n	8005cf6 <_fwalk_reent+0x12>

08005d24 <__libc_init_array>:
 8005d24:	b570      	push	{r4, r5, r6, lr}
 8005d26:	2600      	movs	r6, #0
 8005d28:	4d0c      	ldr	r5, [pc, #48]	; (8005d5c <__libc_init_array+0x38>)
 8005d2a:	4c0d      	ldr	r4, [pc, #52]	; (8005d60 <__libc_init_array+0x3c>)
 8005d2c:	1b64      	subs	r4, r4, r5
 8005d2e:	10a4      	asrs	r4, r4, #2
 8005d30:	42a6      	cmp	r6, r4
 8005d32:	d109      	bne.n	8005d48 <__libc_init_array+0x24>
 8005d34:	2600      	movs	r6, #0
 8005d36:	f001 f857 	bl	8006de8 <_init>
 8005d3a:	4d0a      	ldr	r5, [pc, #40]	; (8005d64 <__libc_init_array+0x40>)
 8005d3c:	4c0a      	ldr	r4, [pc, #40]	; (8005d68 <__libc_init_array+0x44>)
 8005d3e:	1b64      	subs	r4, r4, r5
 8005d40:	10a4      	asrs	r4, r4, #2
 8005d42:	42a6      	cmp	r6, r4
 8005d44:	d105      	bne.n	8005d52 <__libc_init_array+0x2e>
 8005d46:	bd70      	pop	{r4, r5, r6, pc}
 8005d48:	00b3      	lsls	r3, r6, #2
 8005d4a:	58eb      	ldr	r3, [r5, r3]
 8005d4c:	4798      	blx	r3
 8005d4e:	3601      	adds	r6, #1
 8005d50:	e7ee      	b.n	8005d30 <__libc_init_array+0xc>
 8005d52:	00b3      	lsls	r3, r6, #2
 8005d54:	58eb      	ldr	r3, [r5, r3]
 8005d56:	4798      	blx	r3
 8005d58:	3601      	adds	r6, #1
 8005d5a:	e7f2      	b.n	8005d42 <__libc_init_array+0x1e>
 8005d5c:	080070a4 	.word	0x080070a4
 8005d60:	080070a4 	.word	0x080070a4
 8005d64:	080070a4 	.word	0x080070a4
 8005d68:	080070a8 	.word	0x080070a8

08005d6c <__retarget_lock_init_recursive>:
 8005d6c:	4770      	bx	lr

08005d6e <__retarget_lock_acquire_recursive>:
 8005d6e:	4770      	bx	lr

08005d70 <__retarget_lock_release_recursive>:
 8005d70:	4770      	bx	lr

08005d72 <memset>:
 8005d72:	0003      	movs	r3, r0
 8005d74:	1882      	adds	r2, r0, r2
 8005d76:	4293      	cmp	r3, r2
 8005d78:	d100      	bne.n	8005d7c <memset+0xa>
 8005d7a:	4770      	bx	lr
 8005d7c:	7019      	strb	r1, [r3, #0]
 8005d7e:	3301      	adds	r3, #1
 8005d80:	e7f9      	b.n	8005d76 <memset+0x4>
	...

08005d84 <sbrk_aligned>:
 8005d84:	b570      	push	{r4, r5, r6, lr}
 8005d86:	4e0f      	ldr	r6, [pc, #60]	; (8005dc4 <sbrk_aligned+0x40>)
 8005d88:	000d      	movs	r5, r1
 8005d8a:	6831      	ldr	r1, [r6, #0]
 8005d8c:	0004      	movs	r4, r0
 8005d8e:	2900      	cmp	r1, #0
 8005d90:	d102      	bne.n	8005d98 <sbrk_aligned+0x14>
 8005d92:	f000 f955 	bl	8006040 <_sbrk_r>
 8005d96:	6030      	str	r0, [r6, #0]
 8005d98:	0029      	movs	r1, r5
 8005d9a:	0020      	movs	r0, r4
 8005d9c:	f000 f950 	bl	8006040 <_sbrk_r>
 8005da0:	1c43      	adds	r3, r0, #1
 8005da2:	d00a      	beq.n	8005dba <sbrk_aligned+0x36>
 8005da4:	2303      	movs	r3, #3
 8005da6:	1cc5      	adds	r5, r0, #3
 8005da8:	439d      	bics	r5, r3
 8005daa:	42a8      	cmp	r0, r5
 8005dac:	d007      	beq.n	8005dbe <sbrk_aligned+0x3a>
 8005dae:	1a29      	subs	r1, r5, r0
 8005db0:	0020      	movs	r0, r4
 8005db2:	f000 f945 	bl	8006040 <_sbrk_r>
 8005db6:	1c43      	adds	r3, r0, #1
 8005db8:	d101      	bne.n	8005dbe <sbrk_aligned+0x3a>
 8005dba:	2501      	movs	r5, #1
 8005dbc:	426d      	negs	r5, r5
 8005dbe:	0028      	movs	r0, r5
 8005dc0:	bd70      	pop	{r4, r5, r6, pc}
 8005dc2:	46c0      	nop			; (mov r8, r8)
 8005dc4:	20000358 	.word	0x20000358

08005dc8 <_malloc_r>:
 8005dc8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005dca:	2203      	movs	r2, #3
 8005dcc:	1ccb      	adds	r3, r1, #3
 8005dce:	4393      	bics	r3, r2
 8005dd0:	3308      	adds	r3, #8
 8005dd2:	0006      	movs	r6, r0
 8005dd4:	001f      	movs	r7, r3
 8005dd6:	2b0c      	cmp	r3, #12
 8005dd8:	d232      	bcs.n	8005e40 <_malloc_r+0x78>
 8005dda:	270c      	movs	r7, #12
 8005ddc:	42b9      	cmp	r1, r7
 8005dde:	d831      	bhi.n	8005e44 <_malloc_r+0x7c>
 8005de0:	0030      	movs	r0, r6
 8005de2:	f000 fc03 	bl	80065ec <__malloc_lock>
 8005de6:	4d32      	ldr	r5, [pc, #200]	; (8005eb0 <_malloc_r+0xe8>)
 8005de8:	682b      	ldr	r3, [r5, #0]
 8005dea:	001c      	movs	r4, r3
 8005dec:	2c00      	cmp	r4, #0
 8005dee:	d12e      	bne.n	8005e4e <_malloc_r+0x86>
 8005df0:	0039      	movs	r1, r7
 8005df2:	0030      	movs	r0, r6
 8005df4:	f7ff ffc6 	bl	8005d84 <sbrk_aligned>
 8005df8:	0004      	movs	r4, r0
 8005dfa:	1c43      	adds	r3, r0, #1
 8005dfc:	d11e      	bne.n	8005e3c <_malloc_r+0x74>
 8005dfe:	682c      	ldr	r4, [r5, #0]
 8005e00:	0025      	movs	r5, r4
 8005e02:	2d00      	cmp	r5, #0
 8005e04:	d14a      	bne.n	8005e9c <_malloc_r+0xd4>
 8005e06:	6823      	ldr	r3, [r4, #0]
 8005e08:	0029      	movs	r1, r5
 8005e0a:	18e3      	adds	r3, r4, r3
 8005e0c:	0030      	movs	r0, r6
 8005e0e:	9301      	str	r3, [sp, #4]
 8005e10:	f000 f916 	bl	8006040 <_sbrk_r>
 8005e14:	9b01      	ldr	r3, [sp, #4]
 8005e16:	4283      	cmp	r3, r0
 8005e18:	d143      	bne.n	8005ea2 <_malloc_r+0xda>
 8005e1a:	6823      	ldr	r3, [r4, #0]
 8005e1c:	3703      	adds	r7, #3
 8005e1e:	1aff      	subs	r7, r7, r3
 8005e20:	2303      	movs	r3, #3
 8005e22:	439f      	bics	r7, r3
 8005e24:	3708      	adds	r7, #8
 8005e26:	2f0c      	cmp	r7, #12
 8005e28:	d200      	bcs.n	8005e2c <_malloc_r+0x64>
 8005e2a:	270c      	movs	r7, #12
 8005e2c:	0039      	movs	r1, r7
 8005e2e:	0030      	movs	r0, r6
 8005e30:	f7ff ffa8 	bl	8005d84 <sbrk_aligned>
 8005e34:	1c43      	adds	r3, r0, #1
 8005e36:	d034      	beq.n	8005ea2 <_malloc_r+0xda>
 8005e38:	6823      	ldr	r3, [r4, #0]
 8005e3a:	19df      	adds	r7, r3, r7
 8005e3c:	6027      	str	r7, [r4, #0]
 8005e3e:	e013      	b.n	8005e68 <_malloc_r+0xa0>
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	dacb      	bge.n	8005ddc <_malloc_r+0x14>
 8005e44:	230c      	movs	r3, #12
 8005e46:	2500      	movs	r5, #0
 8005e48:	6033      	str	r3, [r6, #0]
 8005e4a:	0028      	movs	r0, r5
 8005e4c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005e4e:	6822      	ldr	r2, [r4, #0]
 8005e50:	1bd1      	subs	r1, r2, r7
 8005e52:	d420      	bmi.n	8005e96 <_malloc_r+0xce>
 8005e54:	290b      	cmp	r1, #11
 8005e56:	d917      	bls.n	8005e88 <_malloc_r+0xc0>
 8005e58:	19e2      	adds	r2, r4, r7
 8005e5a:	6027      	str	r7, [r4, #0]
 8005e5c:	42a3      	cmp	r3, r4
 8005e5e:	d111      	bne.n	8005e84 <_malloc_r+0xbc>
 8005e60:	602a      	str	r2, [r5, #0]
 8005e62:	6863      	ldr	r3, [r4, #4]
 8005e64:	6011      	str	r1, [r2, #0]
 8005e66:	6053      	str	r3, [r2, #4]
 8005e68:	0030      	movs	r0, r6
 8005e6a:	0025      	movs	r5, r4
 8005e6c:	f000 fbc6 	bl	80065fc <__malloc_unlock>
 8005e70:	2207      	movs	r2, #7
 8005e72:	350b      	adds	r5, #11
 8005e74:	1d23      	adds	r3, r4, #4
 8005e76:	4395      	bics	r5, r2
 8005e78:	1aea      	subs	r2, r5, r3
 8005e7a:	429d      	cmp	r5, r3
 8005e7c:	d0e5      	beq.n	8005e4a <_malloc_r+0x82>
 8005e7e:	1b5b      	subs	r3, r3, r5
 8005e80:	50a3      	str	r3, [r4, r2]
 8005e82:	e7e2      	b.n	8005e4a <_malloc_r+0x82>
 8005e84:	605a      	str	r2, [r3, #4]
 8005e86:	e7ec      	b.n	8005e62 <_malloc_r+0x9a>
 8005e88:	6862      	ldr	r2, [r4, #4]
 8005e8a:	42a3      	cmp	r3, r4
 8005e8c:	d101      	bne.n	8005e92 <_malloc_r+0xca>
 8005e8e:	602a      	str	r2, [r5, #0]
 8005e90:	e7ea      	b.n	8005e68 <_malloc_r+0xa0>
 8005e92:	605a      	str	r2, [r3, #4]
 8005e94:	e7e8      	b.n	8005e68 <_malloc_r+0xa0>
 8005e96:	0023      	movs	r3, r4
 8005e98:	6864      	ldr	r4, [r4, #4]
 8005e9a:	e7a7      	b.n	8005dec <_malloc_r+0x24>
 8005e9c:	002c      	movs	r4, r5
 8005e9e:	686d      	ldr	r5, [r5, #4]
 8005ea0:	e7af      	b.n	8005e02 <_malloc_r+0x3a>
 8005ea2:	230c      	movs	r3, #12
 8005ea4:	0030      	movs	r0, r6
 8005ea6:	6033      	str	r3, [r6, #0]
 8005ea8:	f000 fba8 	bl	80065fc <__malloc_unlock>
 8005eac:	e7cd      	b.n	8005e4a <_malloc_r+0x82>
 8005eae:	46c0      	nop			; (mov r8, r8)
 8005eb0:	20000354 	.word	0x20000354

08005eb4 <iprintf>:
 8005eb4:	b40f      	push	{r0, r1, r2, r3}
 8005eb6:	4b0b      	ldr	r3, [pc, #44]	; (8005ee4 <iprintf+0x30>)
 8005eb8:	b513      	push	{r0, r1, r4, lr}
 8005eba:	681c      	ldr	r4, [r3, #0]
 8005ebc:	2c00      	cmp	r4, #0
 8005ebe:	d005      	beq.n	8005ecc <iprintf+0x18>
 8005ec0:	69a3      	ldr	r3, [r4, #24]
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d102      	bne.n	8005ecc <iprintf+0x18>
 8005ec6:	0020      	movs	r0, r4
 8005ec8:	f7ff fe8c 	bl	8005be4 <__sinit>
 8005ecc:	ab05      	add	r3, sp, #20
 8005ece:	0020      	movs	r0, r4
 8005ed0:	9a04      	ldr	r2, [sp, #16]
 8005ed2:	68a1      	ldr	r1, [r4, #8]
 8005ed4:	9301      	str	r3, [sp, #4]
 8005ed6:	f000 fc0b 	bl	80066f0 <_vfiprintf_r>
 8005eda:	bc16      	pop	{r1, r2, r4}
 8005edc:	bc08      	pop	{r3}
 8005ede:	b004      	add	sp, #16
 8005ee0:	4718      	bx	r3
 8005ee2:	46c0      	nop			; (mov r8, r8)
 8005ee4:	20000018 	.word	0x20000018

08005ee8 <_puts_r>:
 8005ee8:	b570      	push	{r4, r5, r6, lr}
 8005eea:	0005      	movs	r5, r0
 8005eec:	000e      	movs	r6, r1
 8005eee:	2800      	cmp	r0, #0
 8005ef0:	d004      	beq.n	8005efc <_puts_r+0x14>
 8005ef2:	6983      	ldr	r3, [r0, #24]
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d101      	bne.n	8005efc <_puts_r+0x14>
 8005ef8:	f7ff fe74 	bl	8005be4 <__sinit>
 8005efc:	69ab      	ldr	r3, [r5, #24]
 8005efe:	68ac      	ldr	r4, [r5, #8]
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d102      	bne.n	8005f0a <_puts_r+0x22>
 8005f04:	0028      	movs	r0, r5
 8005f06:	f7ff fe6d 	bl	8005be4 <__sinit>
 8005f0a:	4b2d      	ldr	r3, [pc, #180]	; (8005fc0 <_puts_r+0xd8>)
 8005f0c:	429c      	cmp	r4, r3
 8005f0e:	d122      	bne.n	8005f56 <_puts_r+0x6e>
 8005f10:	686c      	ldr	r4, [r5, #4]
 8005f12:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005f14:	07db      	lsls	r3, r3, #31
 8005f16:	d405      	bmi.n	8005f24 <_puts_r+0x3c>
 8005f18:	89a3      	ldrh	r3, [r4, #12]
 8005f1a:	059b      	lsls	r3, r3, #22
 8005f1c:	d402      	bmi.n	8005f24 <_puts_r+0x3c>
 8005f1e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005f20:	f7ff ff25 	bl	8005d6e <__retarget_lock_acquire_recursive>
 8005f24:	89a3      	ldrh	r3, [r4, #12]
 8005f26:	071b      	lsls	r3, r3, #28
 8005f28:	d502      	bpl.n	8005f30 <_puts_r+0x48>
 8005f2a:	6923      	ldr	r3, [r4, #16]
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d129      	bne.n	8005f84 <_puts_r+0x9c>
 8005f30:	0021      	movs	r1, r4
 8005f32:	0028      	movs	r0, r5
 8005f34:	f000 f94c 	bl	80061d0 <__swsetup_r>
 8005f38:	2800      	cmp	r0, #0
 8005f3a:	d023      	beq.n	8005f84 <_puts_r+0x9c>
 8005f3c:	2501      	movs	r5, #1
 8005f3e:	426d      	negs	r5, r5
 8005f40:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005f42:	07db      	lsls	r3, r3, #31
 8005f44:	d405      	bmi.n	8005f52 <_puts_r+0x6a>
 8005f46:	89a3      	ldrh	r3, [r4, #12]
 8005f48:	059b      	lsls	r3, r3, #22
 8005f4a:	d402      	bmi.n	8005f52 <_puts_r+0x6a>
 8005f4c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005f4e:	f7ff ff0f 	bl	8005d70 <__retarget_lock_release_recursive>
 8005f52:	0028      	movs	r0, r5
 8005f54:	bd70      	pop	{r4, r5, r6, pc}
 8005f56:	4b1b      	ldr	r3, [pc, #108]	; (8005fc4 <_puts_r+0xdc>)
 8005f58:	429c      	cmp	r4, r3
 8005f5a:	d101      	bne.n	8005f60 <_puts_r+0x78>
 8005f5c:	68ac      	ldr	r4, [r5, #8]
 8005f5e:	e7d8      	b.n	8005f12 <_puts_r+0x2a>
 8005f60:	4b19      	ldr	r3, [pc, #100]	; (8005fc8 <_puts_r+0xe0>)
 8005f62:	429c      	cmp	r4, r3
 8005f64:	d1d5      	bne.n	8005f12 <_puts_r+0x2a>
 8005f66:	68ec      	ldr	r4, [r5, #12]
 8005f68:	e7d3      	b.n	8005f12 <_puts_r+0x2a>
 8005f6a:	3601      	adds	r6, #1
 8005f6c:	60a3      	str	r3, [r4, #8]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	da04      	bge.n	8005f7c <_puts_r+0x94>
 8005f72:	69a2      	ldr	r2, [r4, #24]
 8005f74:	429a      	cmp	r2, r3
 8005f76:	dc16      	bgt.n	8005fa6 <_puts_r+0xbe>
 8005f78:	290a      	cmp	r1, #10
 8005f7a:	d014      	beq.n	8005fa6 <_puts_r+0xbe>
 8005f7c:	6823      	ldr	r3, [r4, #0]
 8005f7e:	1c5a      	adds	r2, r3, #1
 8005f80:	6022      	str	r2, [r4, #0]
 8005f82:	7019      	strb	r1, [r3, #0]
 8005f84:	68a3      	ldr	r3, [r4, #8]
 8005f86:	7831      	ldrb	r1, [r6, #0]
 8005f88:	3b01      	subs	r3, #1
 8005f8a:	2900      	cmp	r1, #0
 8005f8c:	d1ed      	bne.n	8005f6a <_puts_r+0x82>
 8005f8e:	60a3      	str	r3, [r4, #8]
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	da0f      	bge.n	8005fb4 <_puts_r+0xcc>
 8005f94:	0028      	movs	r0, r5
 8005f96:	0022      	movs	r2, r4
 8005f98:	310a      	adds	r1, #10
 8005f9a:	f000 f8af 	bl	80060fc <__swbuf_r>
 8005f9e:	250a      	movs	r5, #10
 8005fa0:	1c43      	adds	r3, r0, #1
 8005fa2:	d1cd      	bne.n	8005f40 <_puts_r+0x58>
 8005fa4:	e7ca      	b.n	8005f3c <_puts_r+0x54>
 8005fa6:	0022      	movs	r2, r4
 8005fa8:	0028      	movs	r0, r5
 8005faa:	f000 f8a7 	bl	80060fc <__swbuf_r>
 8005fae:	1c43      	adds	r3, r0, #1
 8005fb0:	d1e8      	bne.n	8005f84 <_puts_r+0x9c>
 8005fb2:	e7c3      	b.n	8005f3c <_puts_r+0x54>
 8005fb4:	250a      	movs	r5, #10
 8005fb6:	6823      	ldr	r3, [r4, #0]
 8005fb8:	1c5a      	adds	r2, r3, #1
 8005fba:	6022      	str	r2, [r4, #0]
 8005fbc:	701d      	strb	r5, [r3, #0]
 8005fbe:	e7bf      	b.n	8005f40 <_puts_r+0x58>
 8005fc0:	08006f74 	.word	0x08006f74
 8005fc4:	08006f94 	.word	0x08006f94
 8005fc8:	08006f54 	.word	0x08006f54

08005fcc <puts>:
 8005fcc:	b510      	push	{r4, lr}
 8005fce:	4b03      	ldr	r3, [pc, #12]	; (8005fdc <puts+0x10>)
 8005fd0:	0001      	movs	r1, r0
 8005fd2:	6818      	ldr	r0, [r3, #0]
 8005fd4:	f7ff ff88 	bl	8005ee8 <_puts_r>
 8005fd8:	bd10      	pop	{r4, pc}
 8005fda:	46c0      	nop			; (mov r8, r8)
 8005fdc:	20000018 	.word	0x20000018

08005fe0 <srand>:
 8005fe0:	4b11      	ldr	r3, [pc, #68]	; (8006028 <srand+0x48>)
 8005fe2:	b570      	push	{r4, r5, r6, lr}
 8005fe4:	681d      	ldr	r5, [r3, #0]
 8005fe6:	0004      	movs	r4, r0
 8005fe8:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d116      	bne.n	800601c <srand+0x3c>
 8005fee:	2018      	movs	r0, #24
 8005ff0:	f000 faf2 	bl	80065d8 <malloc>
 8005ff4:	1e02      	subs	r2, r0, #0
 8005ff6:	63a8      	str	r0, [r5, #56]	; 0x38
 8005ff8:	d104      	bne.n	8006004 <srand+0x24>
 8005ffa:	2142      	movs	r1, #66	; 0x42
 8005ffc:	4b0b      	ldr	r3, [pc, #44]	; (800602c <srand+0x4c>)
 8005ffe:	480c      	ldr	r0, [pc, #48]	; (8006030 <srand+0x50>)
 8006000:	f000 f95e 	bl	80062c0 <__assert_func>
 8006004:	4b0b      	ldr	r3, [pc, #44]	; (8006034 <srand+0x54>)
 8006006:	2100      	movs	r1, #0
 8006008:	6003      	str	r3, [r0, #0]
 800600a:	4b0b      	ldr	r3, [pc, #44]	; (8006038 <srand+0x58>)
 800600c:	6043      	str	r3, [r0, #4]
 800600e:	4b0b      	ldr	r3, [pc, #44]	; (800603c <srand+0x5c>)
 8006010:	6083      	str	r3, [r0, #8]
 8006012:	230b      	movs	r3, #11
 8006014:	8183      	strh	r3, [r0, #12]
 8006016:	2001      	movs	r0, #1
 8006018:	6110      	str	r0, [r2, #16]
 800601a:	6151      	str	r1, [r2, #20]
 800601c:	2200      	movs	r2, #0
 800601e:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8006020:	611c      	str	r4, [r3, #16]
 8006022:	615a      	str	r2, [r3, #20]
 8006024:	bd70      	pop	{r4, r5, r6, pc}
 8006026:	46c0      	nop			; (mov r8, r8)
 8006028:	20000018 	.word	0x20000018
 800602c:	08006fb8 	.word	0x08006fb8
 8006030:	08006fcf 	.word	0x08006fcf
 8006034:	abcd330e 	.word	0xabcd330e
 8006038:	e66d1234 	.word	0xe66d1234
 800603c:	0005deec 	.word	0x0005deec

08006040 <_sbrk_r>:
 8006040:	2300      	movs	r3, #0
 8006042:	b570      	push	{r4, r5, r6, lr}
 8006044:	4d06      	ldr	r5, [pc, #24]	; (8006060 <_sbrk_r+0x20>)
 8006046:	0004      	movs	r4, r0
 8006048:	0008      	movs	r0, r1
 800604a:	602b      	str	r3, [r5, #0]
 800604c:	f7fb f828 	bl	80010a0 <_sbrk>
 8006050:	1c43      	adds	r3, r0, #1
 8006052:	d103      	bne.n	800605c <_sbrk_r+0x1c>
 8006054:	682b      	ldr	r3, [r5, #0]
 8006056:	2b00      	cmp	r3, #0
 8006058:	d000      	beq.n	800605c <_sbrk_r+0x1c>
 800605a:	6023      	str	r3, [r4, #0]
 800605c:	bd70      	pop	{r4, r5, r6, pc}
 800605e:	46c0      	nop			; (mov r8, r8)
 8006060:	2000035c 	.word	0x2000035c

08006064 <__sread>:
 8006064:	b570      	push	{r4, r5, r6, lr}
 8006066:	000c      	movs	r4, r1
 8006068:	250e      	movs	r5, #14
 800606a:	5f49      	ldrsh	r1, [r1, r5]
 800606c:	f000 fdfc 	bl	8006c68 <_read_r>
 8006070:	2800      	cmp	r0, #0
 8006072:	db03      	blt.n	800607c <__sread+0x18>
 8006074:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8006076:	181b      	adds	r3, r3, r0
 8006078:	6563      	str	r3, [r4, #84]	; 0x54
 800607a:	bd70      	pop	{r4, r5, r6, pc}
 800607c:	89a3      	ldrh	r3, [r4, #12]
 800607e:	4a02      	ldr	r2, [pc, #8]	; (8006088 <__sread+0x24>)
 8006080:	4013      	ands	r3, r2
 8006082:	81a3      	strh	r3, [r4, #12]
 8006084:	e7f9      	b.n	800607a <__sread+0x16>
 8006086:	46c0      	nop			; (mov r8, r8)
 8006088:	ffffefff 	.word	0xffffefff

0800608c <__swrite>:
 800608c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800608e:	001f      	movs	r7, r3
 8006090:	898b      	ldrh	r3, [r1, #12]
 8006092:	0005      	movs	r5, r0
 8006094:	000c      	movs	r4, r1
 8006096:	0016      	movs	r6, r2
 8006098:	05db      	lsls	r3, r3, #23
 800609a:	d505      	bpl.n	80060a8 <__swrite+0x1c>
 800609c:	230e      	movs	r3, #14
 800609e:	5ec9      	ldrsh	r1, [r1, r3]
 80060a0:	2200      	movs	r2, #0
 80060a2:	2302      	movs	r3, #2
 80060a4:	f000 fa18 	bl	80064d8 <_lseek_r>
 80060a8:	89a3      	ldrh	r3, [r4, #12]
 80060aa:	4a05      	ldr	r2, [pc, #20]	; (80060c0 <__swrite+0x34>)
 80060ac:	0028      	movs	r0, r5
 80060ae:	4013      	ands	r3, r2
 80060b0:	81a3      	strh	r3, [r4, #12]
 80060b2:	0032      	movs	r2, r6
 80060b4:	230e      	movs	r3, #14
 80060b6:	5ee1      	ldrsh	r1, [r4, r3]
 80060b8:	003b      	movs	r3, r7
 80060ba:	f000 f875 	bl	80061a8 <_write_r>
 80060be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80060c0:	ffffefff 	.word	0xffffefff

080060c4 <__sseek>:
 80060c4:	b570      	push	{r4, r5, r6, lr}
 80060c6:	000c      	movs	r4, r1
 80060c8:	250e      	movs	r5, #14
 80060ca:	5f49      	ldrsh	r1, [r1, r5]
 80060cc:	f000 fa04 	bl	80064d8 <_lseek_r>
 80060d0:	89a3      	ldrh	r3, [r4, #12]
 80060d2:	1c42      	adds	r2, r0, #1
 80060d4:	d103      	bne.n	80060de <__sseek+0x1a>
 80060d6:	4a05      	ldr	r2, [pc, #20]	; (80060ec <__sseek+0x28>)
 80060d8:	4013      	ands	r3, r2
 80060da:	81a3      	strh	r3, [r4, #12]
 80060dc:	bd70      	pop	{r4, r5, r6, pc}
 80060de:	2280      	movs	r2, #128	; 0x80
 80060e0:	0152      	lsls	r2, r2, #5
 80060e2:	4313      	orrs	r3, r2
 80060e4:	81a3      	strh	r3, [r4, #12]
 80060e6:	6560      	str	r0, [r4, #84]	; 0x54
 80060e8:	e7f8      	b.n	80060dc <__sseek+0x18>
 80060ea:	46c0      	nop			; (mov r8, r8)
 80060ec:	ffffefff 	.word	0xffffefff

080060f0 <__sclose>:
 80060f0:	b510      	push	{r4, lr}
 80060f2:	230e      	movs	r3, #14
 80060f4:	5ec9      	ldrsh	r1, [r1, r3]
 80060f6:	f000 f901 	bl	80062fc <_close_r>
 80060fa:	bd10      	pop	{r4, pc}

080060fc <__swbuf_r>:
 80060fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060fe:	0005      	movs	r5, r0
 8006100:	000e      	movs	r6, r1
 8006102:	0014      	movs	r4, r2
 8006104:	2800      	cmp	r0, #0
 8006106:	d004      	beq.n	8006112 <__swbuf_r+0x16>
 8006108:	6983      	ldr	r3, [r0, #24]
 800610a:	2b00      	cmp	r3, #0
 800610c:	d101      	bne.n	8006112 <__swbuf_r+0x16>
 800610e:	f7ff fd69 	bl	8005be4 <__sinit>
 8006112:	4b22      	ldr	r3, [pc, #136]	; (800619c <__swbuf_r+0xa0>)
 8006114:	429c      	cmp	r4, r3
 8006116:	d12e      	bne.n	8006176 <__swbuf_r+0x7a>
 8006118:	686c      	ldr	r4, [r5, #4]
 800611a:	69a3      	ldr	r3, [r4, #24]
 800611c:	60a3      	str	r3, [r4, #8]
 800611e:	89a3      	ldrh	r3, [r4, #12]
 8006120:	071b      	lsls	r3, r3, #28
 8006122:	d532      	bpl.n	800618a <__swbuf_r+0x8e>
 8006124:	6923      	ldr	r3, [r4, #16]
 8006126:	2b00      	cmp	r3, #0
 8006128:	d02f      	beq.n	800618a <__swbuf_r+0x8e>
 800612a:	6823      	ldr	r3, [r4, #0]
 800612c:	6922      	ldr	r2, [r4, #16]
 800612e:	b2f7      	uxtb	r7, r6
 8006130:	1a98      	subs	r0, r3, r2
 8006132:	6963      	ldr	r3, [r4, #20]
 8006134:	b2f6      	uxtb	r6, r6
 8006136:	4283      	cmp	r3, r0
 8006138:	dc05      	bgt.n	8006146 <__swbuf_r+0x4a>
 800613a:	0021      	movs	r1, r4
 800613c:	0028      	movs	r0, r5
 800613e:	f000 f97b 	bl	8006438 <_fflush_r>
 8006142:	2800      	cmp	r0, #0
 8006144:	d127      	bne.n	8006196 <__swbuf_r+0x9a>
 8006146:	68a3      	ldr	r3, [r4, #8]
 8006148:	3001      	adds	r0, #1
 800614a:	3b01      	subs	r3, #1
 800614c:	60a3      	str	r3, [r4, #8]
 800614e:	6823      	ldr	r3, [r4, #0]
 8006150:	1c5a      	adds	r2, r3, #1
 8006152:	6022      	str	r2, [r4, #0]
 8006154:	701f      	strb	r7, [r3, #0]
 8006156:	6963      	ldr	r3, [r4, #20]
 8006158:	4283      	cmp	r3, r0
 800615a:	d004      	beq.n	8006166 <__swbuf_r+0x6a>
 800615c:	89a3      	ldrh	r3, [r4, #12]
 800615e:	07db      	lsls	r3, r3, #31
 8006160:	d507      	bpl.n	8006172 <__swbuf_r+0x76>
 8006162:	2e0a      	cmp	r6, #10
 8006164:	d105      	bne.n	8006172 <__swbuf_r+0x76>
 8006166:	0021      	movs	r1, r4
 8006168:	0028      	movs	r0, r5
 800616a:	f000 f965 	bl	8006438 <_fflush_r>
 800616e:	2800      	cmp	r0, #0
 8006170:	d111      	bne.n	8006196 <__swbuf_r+0x9a>
 8006172:	0030      	movs	r0, r6
 8006174:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006176:	4b0a      	ldr	r3, [pc, #40]	; (80061a0 <__swbuf_r+0xa4>)
 8006178:	429c      	cmp	r4, r3
 800617a:	d101      	bne.n	8006180 <__swbuf_r+0x84>
 800617c:	68ac      	ldr	r4, [r5, #8]
 800617e:	e7cc      	b.n	800611a <__swbuf_r+0x1e>
 8006180:	4b08      	ldr	r3, [pc, #32]	; (80061a4 <__swbuf_r+0xa8>)
 8006182:	429c      	cmp	r4, r3
 8006184:	d1c9      	bne.n	800611a <__swbuf_r+0x1e>
 8006186:	68ec      	ldr	r4, [r5, #12]
 8006188:	e7c7      	b.n	800611a <__swbuf_r+0x1e>
 800618a:	0021      	movs	r1, r4
 800618c:	0028      	movs	r0, r5
 800618e:	f000 f81f 	bl	80061d0 <__swsetup_r>
 8006192:	2800      	cmp	r0, #0
 8006194:	d0c9      	beq.n	800612a <__swbuf_r+0x2e>
 8006196:	2601      	movs	r6, #1
 8006198:	4276      	negs	r6, r6
 800619a:	e7ea      	b.n	8006172 <__swbuf_r+0x76>
 800619c:	08006f74 	.word	0x08006f74
 80061a0:	08006f94 	.word	0x08006f94
 80061a4:	08006f54 	.word	0x08006f54

080061a8 <_write_r>:
 80061a8:	b570      	push	{r4, r5, r6, lr}
 80061aa:	0004      	movs	r4, r0
 80061ac:	0008      	movs	r0, r1
 80061ae:	0011      	movs	r1, r2
 80061b0:	001a      	movs	r2, r3
 80061b2:	2300      	movs	r3, #0
 80061b4:	4d05      	ldr	r5, [pc, #20]	; (80061cc <_write_r+0x24>)
 80061b6:	602b      	str	r3, [r5, #0]
 80061b8:	f7ff faad 	bl	8005716 <_write>
 80061bc:	1c43      	adds	r3, r0, #1
 80061be:	d103      	bne.n	80061c8 <_write_r+0x20>
 80061c0:	682b      	ldr	r3, [r5, #0]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d000      	beq.n	80061c8 <_write_r+0x20>
 80061c6:	6023      	str	r3, [r4, #0]
 80061c8:	bd70      	pop	{r4, r5, r6, pc}
 80061ca:	46c0      	nop			; (mov r8, r8)
 80061cc:	2000035c 	.word	0x2000035c

080061d0 <__swsetup_r>:
 80061d0:	4b37      	ldr	r3, [pc, #220]	; (80062b0 <__swsetup_r+0xe0>)
 80061d2:	b570      	push	{r4, r5, r6, lr}
 80061d4:	681d      	ldr	r5, [r3, #0]
 80061d6:	0006      	movs	r6, r0
 80061d8:	000c      	movs	r4, r1
 80061da:	2d00      	cmp	r5, #0
 80061dc:	d005      	beq.n	80061ea <__swsetup_r+0x1a>
 80061de:	69ab      	ldr	r3, [r5, #24]
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d102      	bne.n	80061ea <__swsetup_r+0x1a>
 80061e4:	0028      	movs	r0, r5
 80061e6:	f7ff fcfd 	bl	8005be4 <__sinit>
 80061ea:	4b32      	ldr	r3, [pc, #200]	; (80062b4 <__swsetup_r+0xe4>)
 80061ec:	429c      	cmp	r4, r3
 80061ee:	d10f      	bne.n	8006210 <__swsetup_r+0x40>
 80061f0:	686c      	ldr	r4, [r5, #4]
 80061f2:	230c      	movs	r3, #12
 80061f4:	5ee2      	ldrsh	r2, [r4, r3]
 80061f6:	b293      	uxth	r3, r2
 80061f8:	0711      	lsls	r1, r2, #28
 80061fa:	d42d      	bmi.n	8006258 <__swsetup_r+0x88>
 80061fc:	06d9      	lsls	r1, r3, #27
 80061fe:	d411      	bmi.n	8006224 <__swsetup_r+0x54>
 8006200:	2309      	movs	r3, #9
 8006202:	2001      	movs	r0, #1
 8006204:	6033      	str	r3, [r6, #0]
 8006206:	3337      	adds	r3, #55	; 0x37
 8006208:	4313      	orrs	r3, r2
 800620a:	81a3      	strh	r3, [r4, #12]
 800620c:	4240      	negs	r0, r0
 800620e:	bd70      	pop	{r4, r5, r6, pc}
 8006210:	4b29      	ldr	r3, [pc, #164]	; (80062b8 <__swsetup_r+0xe8>)
 8006212:	429c      	cmp	r4, r3
 8006214:	d101      	bne.n	800621a <__swsetup_r+0x4a>
 8006216:	68ac      	ldr	r4, [r5, #8]
 8006218:	e7eb      	b.n	80061f2 <__swsetup_r+0x22>
 800621a:	4b28      	ldr	r3, [pc, #160]	; (80062bc <__swsetup_r+0xec>)
 800621c:	429c      	cmp	r4, r3
 800621e:	d1e8      	bne.n	80061f2 <__swsetup_r+0x22>
 8006220:	68ec      	ldr	r4, [r5, #12]
 8006222:	e7e6      	b.n	80061f2 <__swsetup_r+0x22>
 8006224:	075b      	lsls	r3, r3, #29
 8006226:	d513      	bpl.n	8006250 <__swsetup_r+0x80>
 8006228:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800622a:	2900      	cmp	r1, #0
 800622c:	d008      	beq.n	8006240 <__swsetup_r+0x70>
 800622e:	0023      	movs	r3, r4
 8006230:	3344      	adds	r3, #68	; 0x44
 8006232:	4299      	cmp	r1, r3
 8006234:	d002      	beq.n	800623c <__swsetup_r+0x6c>
 8006236:	0030      	movs	r0, r6
 8006238:	f000 f9e8 	bl	800660c <_free_r>
 800623c:	2300      	movs	r3, #0
 800623e:	6363      	str	r3, [r4, #52]	; 0x34
 8006240:	2224      	movs	r2, #36	; 0x24
 8006242:	89a3      	ldrh	r3, [r4, #12]
 8006244:	4393      	bics	r3, r2
 8006246:	81a3      	strh	r3, [r4, #12]
 8006248:	2300      	movs	r3, #0
 800624a:	6063      	str	r3, [r4, #4]
 800624c:	6923      	ldr	r3, [r4, #16]
 800624e:	6023      	str	r3, [r4, #0]
 8006250:	2308      	movs	r3, #8
 8006252:	89a2      	ldrh	r2, [r4, #12]
 8006254:	4313      	orrs	r3, r2
 8006256:	81a3      	strh	r3, [r4, #12]
 8006258:	6923      	ldr	r3, [r4, #16]
 800625a:	2b00      	cmp	r3, #0
 800625c:	d10b      	bne.n	8006276 <__swsetup_r+0xa6>
 800625e:	21a0      	movs	r1, #160	; 0xa0
 8006260:	2280      	movs	r2, #128	; 0x80
 8006262:	89a3      	ldrh	r3, [r4, #12]
 8006264:	0089      	lsls	r1, r1, #2
 8006266:	0092      	lsls	r2, r2, #2
 8006268:	400b      	ands	r3, r1
 800626a:	4293      	cmp	r3, r2
 800626c:	d003      	beq.n	8006276 <__swsetup_r+0xa6>
 800626e:	0021      	movs	r1, r4
 8006270:	0030      	movs	r0, r6
 8006272:	f000 f96d 	bl	8006550 <__smakebuf_r>
 8006276:	220c      	movs	r2, #12
 8006278:	5ea3      	ldrsh	r3, [r4, r2]
 800627a:	2001      	movs	r0, #1
 800627c:	001a      	movs	r2, r3
 800627e:	b299      	uxth	r1, r3
 8006280:	4002      	ands	r2, r0
 8006282:	4203      	tst	r3, r0
 8006284:	d00f      	beq.n	80062a6 <__swsetup_r+0xd6>
 8006286:	2200      	movs	r2, #0
 8006288:	60a2      	str	r2, [r4, #8]
 800628a:	6962      	ldr	r2, [r4, #20]
 800628c:	4252      	negs	r2, r2
 800628e:	61a2      	str	r2, [r4, #24]
 8006290:	2000      	movs	r0, #0
 8006292:	6922      	ldr	r2, [r4, #16]
 8006294:	4282      	cmp	r2, r0
 8006296:	d1ba      	bne.n	800620e <__swsetup_r+0x3e>
 8006298:	060a      	lsls	r2, r1, #24
 800629a:	d5b8      	bpl.n	800620e <__swsetup_r+0x3e>
 800629c:	2240      	movs	r2, #64	; 0x40
 800629e:	4313      	orrs	r3, r2
 80062a0:	81a3      	strh	r3, [r4, #12]
 80062a2:	3801      	subs	r0, #1
 80062a4:	e7b3      	b.n	800620e <__swsetup_r+0x3e>
 80062a6:	0788      	lsls	r0, r1, #30
 80062a8:	d400      	bmi.n	80062ac <__swsetup_r+0xdc>
 80062aa:	6962      	ldr	r2, [r4, #20]
 80062ac:	60a2      	str	r2, [r4, #8]
 80062ae:	e7ef      	b.n	8006290 <__swsetup_r+0xc0>
 80062b0:	20000018 	.word	0x20000018
 80062b4:	08006f74 	.word	0x08006f74
 80062b8:	08006f94 	.word	0x08006f94
 80062bc:	08006f54 	.word	0x08006f54

080062c0 <__assert_func>:
 80062c0:	b530      	push	{r4, r5, lr}
 80062c2:	0014      	movs	r4, r2
 80062c4:	001a      	movs	r2, r3
 80062c6:	4b09      	ldr	r3, [pc, #36]	; (80062ec <__assert_func+0x2c>)
 80062c8:	0005      	movs	r5, r0
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	b085      	sub	sp, #20
 80062ce:	68d8      	ldr	r0, [r3, #12]
 80062d0:	4b07      	ldr	r3, [pc, #28]	; (80062f0 <__assert_func+0x30>)
 80062d2:	2c00      	cmp	r4, #0
 80062d4:	d101      	bne.n	80062da <__assert_func+0x1a>
 80062d6:	4b07      	ldr	r3, [pc, #28]	; (80062f4 <__assert_func+0x34>)
 80062d8:	001c      	movs	r4, r3
 80062da:	9301      	str	r3, [sp, #4]
 80062dc:	9100      	str	r1, [sp, #0]
 80062de:	002b      	movs	r3, r5
 80062e0:	4905      	ldr	r1, [pc, #20]	; (80062f8 <__assert_func+0x38>)
 80062e2:	9402      	str	r4, [sp, #8]
 80062e4:	f000 f8e8 	bl	80064b8 <fiprintf>
 80062e8:	f000 fcd2 	bl	8006c90 <abort>
 80062ec:	20000018 	.word	0x20000018
 80062f0:	0800702a 	.word	0x0800702a
 80062f4:	08007065 	.word	0x08007065
 80062f8:	08007037 	.word	0x08007037

080062fc <_close_r>:
 80062fc:	2300      	movs	r3, #0
 80062fe:	b570      	push	{r4, r5, r6, lr}
 8006300:	4d06      	ldr	r5, [pc, #24]	; (800631c <_close_r+0x20>)
 8006302:	0004      	movs	r4, r0
 8006304:	0008      	movs	r0, r1
 8006306:	602b      	str	r3, [r5, #0]
 8006308:	f7ff fa30 	bl	800576c <_close>
 800630c:	1c43      	adds	r3, r0, #1
 800630e:	d103      	bne.n	8006318 <_close_r+0x1c>
 8006310:	682b      	ldr	r3, [r5, #0]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d000      	beq.n	8006318 <_close_r+0x1c>
 8006316:	6023      	str	r3, [r4, #0]
 8006318:	bd70      	pop	{r4, r5, r6, pc}
 800631a:	46c0      	nop			; (mov r8, r8)
 800631c:	2000035c 	.word	0x2000035c

08006320 <__sflush_r>:
 8006320:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006322:	898b      	ldrh	r3, [r1, #12]
 8006324:	0005      	movs	r5, r0
 8006326:	000c      	movs	r4, r1
 8006328:	071a      	lsls	r2, r3, #28
 800632a:	d45f      	bmi.n	80063ec <__sflush_r+0xcc>
 800632c:	684a      	ldr	r2, [r1, #4]
 800632e:	2a00      	cmp	r2, #0
 8006330:	dc04      	bgt.n	800633c <__sflush_r+0x1c>
 8006332:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8006334:	2a00      	cmp	r2, #0
 8006336:	dc01      	bgt.n	800633c <__sflush_r+0x1c>
 8006338:	2000      	movs	r0, #0
 800633a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800633c:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800633e:	2f00      	cmp	r7, #0
 8006340:	d0fa      	beq.n	8006338 <__sflush_r+0x18>
 8006342:	2200      	movs	r2, #0
 8006344:	2180      	movs	r1, #128	; 0x80
 8006346:	682e      	ldr	r6, [r5, #0]
 8006348:	602a      	str	r2, [r5, #0]
 800634a:	001a      	movs	r2, r3
 800634c:	0149      	lsls	r1, r1, #5
 800634e:	400a      	ands	r2, r1
 8006350:	420b      	tst	r3, r1
 8006352:	d034      	beq.n	80063be <__sflush_r+0x9e>
 8006354:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006356:	89a3      	ldrh	r3, [r4, #12]
 8006358:	075b      	lsls	r3, r3, #29
 800635a:	d506      	bpl.n	800636a <__sflush_r+0x4a>
 800635c:	6863      	ldr	r3, [r4, #4]
 800635e:	1ac0      	subs	r0, r0, r3
 8006360:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006362:	2b00      	cmp	r3, #0
 8006364:	d001      	beq.n	800636a <__sflush_r+0x4a>
 8006366:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006368:	1ac0      	subs	r0, r0, r3
 800636a:	0002      	movs	r2, r0
 800636c:	6a21      	ldr	r1, [r4, #32]
 800636e:	2300      	movs	r3, #0
 8006370:	0028      	movs	r0, r5
 8006372:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8006374:	47b8      	blx	r7
 8006376:	89a1      	ldrh	r1, [r4, #12]
 8006378:	1c43      	adds	r3, r0, #1
 800637a:	d106      	bne.n	800638a <__sflush_r+0x6a>
 800637c:	682b      	ldr	r3, [r5, #0]
 800637e:	2b1d      	cmp	r3, #29
 8006380:	d831      	bhi.n	80063e6 <__sflush_r+0xc6>
 8006382:	4a2c      	ldr	r2, [pc, #176]	; (8006434 <__sflush_r+0x114>)
 8006384:	40da      	lsrs	r2, r3
 8006386:	07d3      	lsls	r3, r2, #31
 8006388:	d52d      	bpl.n	80063e6 <__sflush_r+0xc6>
 800638a:	2300      	movs	r3, #0
 800638c:	6063      	str	r3, [r4, #4]
 800638e:	6923      	ldr	r3, [r4, #16]
 8006390:	6023      	str	r3, [r4, #0]
 8006392:	04cb      	lsls	r3, r1, #19
 8006394:	d505      	bpl.n	80063a2 <__sflush_r+0x82>
 8006396:	1c43      	adds	r3, r0, #1
 8006398:	d102      	bne.n	80063a0 <__sflush_r+0x80>
 800639a:	682b      	ldr	r3, [r5, #0]
 800639c:	2b00      	cmp	r3, #0
 800639e:	d100      	bne.n	80063a2 <__sflush_r+0x82>
 80063a0:	6560      	str	r0, [r4, #84]	; 0x54
 80063a2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80063a4:	602e      	str	r6, [r5, #0]
 80063a6:	2900      	cmp	r1, #0
 80063a8:	d0c6      	beq.n	8006338 <__sflush_r+0x18>
 80063aa:	0023      	movs	r3, r4
 80063ac:	3344      	adds	r3, #68	; 0x44
 80063ae:	4299      	cmp	r1, r3
 80063b0:	d002      	beq.n	80063b8 <__sflush_r+0x98>
 80063b2:	0028      	movs	r0, r5
 80063b4:	f000 f92a 	bl	800660c <_free_r>
 80063b8:	2000      	movs	r0, #0
 80063ba:	6360      	str	r0, [r4, #52]	; 0x34
 80063bc:	e7bd      	b.n	800633a <__sflush_r+0x1a>
 80063be:	2301      	movs	r3, #1
 80063c0:	0028      	movs	r0, r5
 80063c2:	6a21      	ldr	r1, [r4, #32]
 80063c4:	47b8      	blx	r7
 80063c6:	1c43      	adds	r3, r0, #1
 80063c8:	d1c5      	bne.n	8006356 <__sflush_r+0x36>
 80063ca:	682b      	ldr	r3, [r5, #0]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d0c2      	beq.n	8006356 <__sflush_r+0x36>
 80063d0:	2b1d      	cmp	r3, #29
 80063d2:	d001      	beq.n	80063d8 <__sflush_r+0xb8>
 80063d4:	2b16      	cmp	r3, #22
 80063d6:	d101      	bne.n	80063dc <__sflush_r+0xbc>
 80063d8:	602e      	str	r6, [r5, #0]
 80063da:	e7ad      	b.n	8006338 <__sflush_r+0x18>
 80063dc:	2340      	movs	r3, #64	; 0x40
 80063de:	89a2      	ldrh	r2, [r4, #12]
 80063e0:	4313      	orrs	r3, r2
 80063e2:	81a3      	strh	r3, [r4, #12]
 80063e4:	e7a9      	b.n	800633a <__sflush_r+0x1a>
 80063e6:	2340      	movs	r3, #64	; 0x40
 80063e8:	430b      	orrs	r3, r1
 80063ea:	e7fa      	b.n	80063e2 <__sflush_r+0xc2>
 80063ec:	690f      	ldr	r7, [r1, #16]
 80063ee:	2f00      	cmp	r7, #0
 80063f0:	d0a2      	beq.n	8006338 <__sflush_r+0x18>
 80063f2:	680a      	ldr	r2, [r1, #0]
 80063f4:	600f      	str	r7, [r1, #0]
 80063f6:	1bd2      	subs	r2, r2, r7
 80063f8:	9201      	str	r2, [sp, #4]
 80063fa:	2200      	movs	r2, #0
 80063fc:	079b      	lsls	r3, r3, #30
 80063fe:	d100      	bne.n	8006402 <__sflush_r+0xe2>
 8006400:	694a      	ldr	r2, [r1, #20]
 8006402:	60a2      	str	r2, [r4, #8]
 8006404:	9b01      	ldr	r3, [sp, #4]
 8006406:	2b00      	cmp	r3, #0
 8006408:	dc00      	bgt.n	800640c <__sflush_r+0xec>
 800640a:	e795      	b.n	8006338 <__sflush_r+0x18>
 800640c:	003a      	movs	r2, r7
 800640e:	0028      	movs	r0, r5
 8006410:	9b01      	ldr	r3, [sp, #4]
 8006412:	6a21      	ldr	r1, [r4, #32]
 8006414:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006416:	47b0      	blx	r6
 8006418:	2800      	cmp	r0, #0
 800641a:	dc06      	bgt.n	800642a <__sflush_r+0x10a>
 800641c:	2340      	movs	r3, #64	; 0x40
 800641e:	2001      	movs	r0, #1
 8006420:	89a2      	ldrh	r2, [r4, #12]
 8006422:	4240      	negs	r0, r0
 8006424:	4313      	orrs	r3, r2
 8006426:	81a3      	strh	r3, [r4, #12]
 8006428:	e787      	b.n	800633a <__sflush_r+0x1a>
 800642a:	9b01      	ldr	r3, [sp, #4]
 800642c:	183f      	adds	r7, r7, r0
 800642e:	1a1b      	subs	r3, r3, r0
 8006430:	9301      	str	r3, [sp, #4]
 8006432:	e7e7      	b.n	8006404 <__sflush_r+0xe4>
 8006434:	20400001 	.word	0x20400001

08006438 <_fflush_r>:
 8006438:	690b      	ldr	r3, [r1, #16]
 800643a:	b570      	push	{r4, r5, r6, lr}
 800643c:	0005      	movs	r5, r0
 800643e:	000c      	movs	r4, r1
 8006440:	2b00      	cmp	r3, #0
 8006442:	d102      	bne.n	800644a <_fflush_r+0x12>
 8006444:	2500      	movs	r5, #0
 8006446:	0028      	movs	r0, r5
 8006448:	bd70      	pop	{r4, r5, r6, pc}
 800644a:	2800      	cmp	r0, #0
 800644c:	d004      	beq.n	8006458 <_fflush_r+0x20>
 800644e:	6983      	ldr	r3, [r0, #24]
 8006450:	2b00      	cmp	r3, #0
 8006452:	d101      	bne.n	8006458 <_fflush_r+0x20>
 8006454:	f7ff fbc6 	bl	8005be4 <__sinit>
 8006458:	4b14      	ldr	r3, [pc, #80]	; (80064ac <_fflush_r+0x74>)
 800645a:	429c      	cmp	r4, r3
 800645c:	d11b      	bne.n	8006496 <_fflush_r+0x5e>
 800645e:	686c      	ldr	r4, [r5, #4]
 8006460:	220c      	movs	r2, #12
 8006462:	5ea3      	ldrsh	r3, [r4, r2]
 8006464:	2b00      	cmp	r3, #0
 8006466:	d0ed      	beq.n	8006444 <_fflush_r+0xc>
 8006468:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800646a:	07d2      	lsls	r2, r2, #31
 800646c:	d404      	bmi.n	8006478 <_fflush_r+0x40>
 800646e:	059b      	lsls	r3, r3, #22
 8006470:	d402      	bmi.n	8006478 <_fflush_r+0x40>
 8006472:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006474:	f7ff fc7b 	bl	8005d6e <__retarget_lock_acquire_recursive>
 8006478:	0028      	movs	r0, r5
 800647a:	0021      	movs	r1, r4
 800647c:	f7ff ff50 	bl	8006320 <__sflush_r>
 8006480:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006482:	0005      	movs	r5, r0
 8006484:	07db      	lsls	r3, r3, #31
 8006486:	d4de      	bmi.n	8006446 <_fflush_r+0xe>
 8006488:	89a3      	ldrh	r3, [r4, #12]
 800648a:	059b      	lsls	r3, r3, #22
 800648c:	d4db      	bmi.n	8006446 <_fflush_r+0xe>
 800648e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006490:	f7ff fc6e 	bl	8005d70 <__retarget_lock_release_recursive>
 8006494:	e7d7      	b.n	8006446 <_fflush_r+0xe>
 8006496:	4b06      	ldr	r3, [pc, #24]	; (80064b0 <_fflush_r+0x78>)
 8006498:	429c      	cmp	r4, r3
 800649a:	d101      	bne.n	80064a0 <_fflush_r+0x68>
 800649c:	68ac      	ldr	r4, [r5, #8]
 800649e:	e7df      	b.n	8006460 <_fflush_r+0x28>
 80064a0:	4b04      	ldr	r3, [pc, #16]	; (80064b4 <_fflush_r+0x7c>)
 80064a2:	429c      	cmp	r4, r3
 80064a4:	d1dc      	bne.n	8006460 <_fflush_r+0x28>
 80064a6:	68ec      	ldr	r4, [r5, #12]
 80064a8:	e7da      	b.n	8006460 <_fflush_r+0x28>
 80064aa:	46c0      	nop			; (mov r8, r8)
 80064ac:	08006f74 	.word	0x08006f74
 80064b0:	08006f94 	.word	0x08006f94
 80064b4:	08006f54 	.word	0x08006f54

080064b8 <fiprintf>:
 80064b8:	b40e      	push	{r1, r2, r3}
 80064ba:	b503      	push	{r0, r1, lr}
 80064bc:	0001      	movs	r1, r0
 80064be:	ab03      	add	r3, sp, #12
 80064c0:	4804      	ldr	r0, [pc, #16]	; (80064d4 <fiprintf+0x1c>)
 80064c2:	cb04      	ldmia	r3!, {r2}
 80064c4:	6800      	ldr	r0, [r0, #0]
 80064c6:	9301      	str	r3, [sp, #4]
 80064c8:	f000 f912 	bl	80066f0 <_vfiprintf_r>
 80064cc:	b002      	add	sp, #8
 80064ce:	bc08      	pop	{r3}
 80064d0:	b003      	add	sp, #12
 80064d2:	4718      	bx	r3
 80064d4:	20000018 	.word	0x20000018

080064d8 <_lseek_r>:
 80064d8:	b570      	push	{r4, r5, r6, lr}
 80064da:	0004      	movs	r4, r0
 80064dc:	0008      	movs	r0, r1
 80064de:	0011      	movs	r1, r2
 80064e0:	001a      	movs	r2, r3
 80064e2:	2300      	movs	r3, #0
 80064e4:	4d05      	ldr	r5, [pc, #20]	; (80064fc <_lseek_r+0x24>)
 80064e6:	602b      	str	r3, [r5, #0]
 80064e8:	f7ff f901 	bl	80056ee <_lseek>
 80064ec:	1c43      	adds	r3, r0, #1
 80064ee:	d103      	bne.n	80064f8 <_lseek_r+0x20>
 80064f0:	682b      	ldr	r3, [r5, #0]
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d000      	beq.n	80064f8 <_lseek_r+0x20>
 80064f6:	6023      	str	r3, [r4, #0]
 80064f8:	bd70      	pop	{r4, r5, r6, pc}
 80064fa:	46c0      	nop			; (mov r8, r8)
 80064fc:	2000035c 	.word	0x2000035c

08006500 <__swhatbuf_r>:
 8006500:	b570      	push	{r4, r5, r6, lr}
 8006502:	000e      	movs	r6, r1
 8006504:	001d      	movs	r5, r3
 8006506:	230e      	movs	r3, #14
 8006508:	5ec9      	ldrsh	r1, [r1, r3]
 800650a:	0014      	movs	r4, r2
 800650c:	b096      	sub	sp, #88	; 0x58
 800650e:	2900      	cmp	r1, #0
 8006510:	da08      	bge.n	8006524 <__swhatbuf_r+0x24>
 8006512:	220c      	movs	r2, #12
 8006514:	5eb3      	ldrsh	r3, [r6, r2]
 8006516:	2200      	movs	r2, #0
 8006518:	602a      	str	r2, [r5, #0]
 800651a:	061b      	lsls	r3, r3, #24
 800651c:	d411      	bmi.n	8006542 <__swhatbuf_r+0x42>
 800651e:	2380      	movs	r3, #128	; 0x80
 8006520:	00db      	lsls	r3, r3, #3
 8006522:	e00f      	b.n	8006544 <__swhatbuf_r+0x44>
 8006524:	466a      	mov	r2, sp
 8006526:	f000 fbbb 	bl	8006ca0 <_fstat_r>
 800652a:	2800      	cmp	r0, #0
 800652c:	dbf1      	blt.n	8006512 <__swhatbuf_r+0x12>
 800652e:	23f0      	movs	r3, #240	; 0xf0
 8006530:	9901      	ldr	r1, [sp, #4]
 8006532:	021b      	lsls	r3, r3, #8
 8006534:	4019      	ands	r1, r3
 8006536:	4b05      	ldr	r3, [pc, #20]	; (800654c <__swhatbuf_r+0x4c>)
 8006538:	18c9      	adds	r1, r1, r3
 800653a:	424b      	negs	r3, r1
 800653c:	4159      	adcs	r1, r3
 800653e:	6029      	str	r1, [r5, #0]
 8006540:	e7ed      	b.n	800651e <__swhatbuf_r+0x1e>
 8006542:	2340      	movs	r3, #64	; 0x40
 8006544:	2000      	movs	r0, #0
 8006546:	6023      	str	r3, [r4, #0]
 8006548:	b016      	add	sp, #88	; 0x58
 800654a:	bd70      	pop	{r4, r5, r6, pc}
 800654c:	ffffe000 	.word	0xffffe000

08006550 <__smakebuf_r>:
 8006550:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006552:	2602      	movs	r6, #2
 8006554:	898b      	ldrh	r3, [r1, #12]
 8006556:	0005      	movs	r5, r0
 8006558:	000c      	movs	r4, r1
 800655a:	4233      	tst	r3, r6
 800655c:	d006      	beq.n	800656c <__smakebuf_r+0x1c>
 800655e:	0023      	movs	r3, r4
 8006560:	3347      	adds	r3, #71	; 0x47
 8006562:	6023      	str	r3, [r4, #0]
 8006564:	6123      	str	r3, [r4, #16]
 8006566:	2301      	movs	r3, #1
 8006568:	6163      	str	r3, [r4, #20]
 800656a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800656c:	466a      	mov	r2, sp
 800656e:	ab01      	add	r3, sp, #4
 8006570:	f7ff ffc6 	bl	8006500 <__swhatbuf_r>
 8006574:	9900      	ldr	r1, [sp, #0]
 8006576:	0007      	movs	r7, r0
 8006578:	0028      	movs	r0, r5
 800657a:	f7ff fc25 	bl	8005dc8 <_malloc_r>
 800657e:	2800      	cmp	r0, #0
 8006580:	d108      	bne.n	8006594 <__smakebuf_r+0x44>
 8006582:	220c      	movs	r2, #12
 8006584:	5ea3      	ldrsh	r3, [r4, r2]
 8006586:	059a      	lsls	r2, r3, #22
 8006588:	d4ef      	bmi.n	800656a <__smakebuf_r+0x1a>
 800658a:	2203      	movs	r2, #3
 800658c:	4393      	bics	r3, r2
 800658e:	431e      	orrs	r6, r3
 8006590:	81a6      	strh	r6, [r4, #12]
 8006592:	e7e4      	b.n	800655e <__smakebuf_r+0xe>
 8006594:	4b0f      	ldr	r3, [pc, #60]	; (80065d4 <__smakebuf_r+0x84>)
 8006596:	62ab      	str	r3, [r5, #40]	; 0x28
 8006598:	2380      	movs	r3, #128	; 0x80
 800659a:	89a2      	ldrh	r2, [r4, #12]
 800659c:	6020      	str	r0, [r4, #0]
 800659e:	4313      	orrs	r3, r2
 80065a0:	81a3      	strh	r3, [r4, #12]
 80065a2:	9b00      	ldr	r3, [sp, #0]
 80065a4:	6120      	str	r0, [r4, #16]
 80065a6:	6163      	str	r3, [r4, #20]
 80065a8:	9b01      	ldr	r3, [sp, #4]
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d00d      	beq.n	80065ca <__smakebuf_r+0x7a>
 80065ae:	0028      	movs	r0, r5
 80065b0:	230e      	movs	r3, #14
 80065b2:	5ee1      	ldrsh	r1, [r4, r3]
 80065b4:	f000 fb86 	bl	8006cc4 <_isatty_r>
 80065b8:	2800      	cmp	r0, #0
 80065ba:	d006      	beq.n	80065ca <__smakebuf_r+0x7a>
 80065bc:	2203      	movs	r2, #3
 80065be:	89a3      	ldrh	r3, [r4, #12]
 80065c0:	4393      	bics	r3, r2
 80065c2:	001a      	movs	r2, r3
 80065c4:	2301      	movs	r3, #1
 80065c6:	4313      	orrs	r3, r2
 80065c8:	81a3      	strh	r3, [r4, #12]
 80065ca:	89a0      	ldrh	r0, [r4, #12]
 80065cc:	4307      	orrs	r7, r0
 80065ce:	81a7      	strh	r7, [r4, #12]
 80065d0:	e7cb      	b.n	800656a <__smakebuf_r+0x1a>
 80065d2:	46c0      	nop			; (mov r8, r8)
 80065d4:	08005b69 	.word	0x08005b69

080065d8 <malloc>:
 80065d8:	b510      	push	{r4, lr}
 80065da:	4b03      	ldr	r3, [pc, #12]	; (80065e8 <malloc+0x10>)
 80065dc:	0001      	movs	r1, r0
 80065de:	6818      	ldr	r0, [r3, #0]
 80065e0:	f7ff fbf2 	bl	8005dc8 <_malloc_r>
 80065e4:	bd10      	pop	{r4, pc}
 80065e6:	46c0      	nop			; (mov r8, r8)
 80065e8:	20000018 	.word	0x20000018

080065ec <__malloc_lock>:
 80065ec:	b510      	push	{r4, lr}
 80065ee:	4802      	ldr	r0, [pc, #8]	; (80065f8 <__malloc_lock+0xc>)
 80065f0:	f7ff fbbd 	bl	8005d6e <__retarget_lock_acquire_recursive>
 80065f4:	bd10      	pop	{r4, pc}
 80065f6:	46c0      	nop			; (mov r8, r8)
 80065f8:	20000350 	.word	0x20000350

080065fc <__malloc_unlock>:
 80065fc:	b510      	push	{r4, lr}
 80065fe:	4802      	ldr	r0, [pc, #8]	; (8006608 <__malloc_unlock+0xc>)
 8006600:	f7ff fbb6 	bl	8005d70 <__retarget_lock_release_recursive>
 8006604:	bd10      	pop	{r4, pc}
 8006606:	46c0      	nop			; (mov r8, r8)
 8006608:	20000350 	.word	0x20000350

0800660c <_free_r>:
 800660c:	b570      	push	{r4, r5, r6, lr}
 800660e:	0005      	movs	r5, r0
 8006610:	2900      	cmp	r1, #0
 8006612:	d010      	beq.n	8006636 <_free_r+0x2a>
 8006614:	1f0c      	subs	r4, r1, #4
 8006616:	6823      	ldr	r3, [r4, #0]
 8006618:	2b00      	cmp	r3, #0
 800661a:	da00      	bge.n	800661e <_free_r+0x12>
 800661c:	18e4      	adds	r4, r4, r3
 800661e:	0028      	movs	r0, r5
 8006620:	f7ff ffe4 	bl	80065ec <__malloc_lock>
 8006624:	4a1d      	ldr	r2, [pc, #116]	; (800669c <_free_r+0x90>)
 8006626:	6813      	ldr	r3, [r2, #0]
 8006628:	2b00      	cmp	r3, #0
 800662a:	d105      	bne.n	8006638 <_free_r+0x2c>
 800662c:	6063      	str	r3, [r4, #4]
 800662e:	6014      	str	r4, [r2, #0]
 8006630:	0028      	movs	r0, r5
 8006632:	f7ff ffe3 	bl	80065fc <__malloc_unlock>
 8006636:	bd70      	pop	{r4, r5, r6, pc}
 8006638:	42a3      	cmp	r3, r4
 800663a:	d908      	bls.n	800664e <_free_r+0x42>
 800663c:	6821      	ldr	r1, [r4, #0]
 800663e:	1860      	adds	r0, r4, r1
 8006640:	4283      	cmp	r3, r0
 8006642:	d1f3      	bne.n	800662c <_free_r+0x20>
 8006644:	6818      	ldr	r0, [r3, #0]
 8006646:	685b      	ldr	r3, [r3, #4]
 8006648:	1841      	adds	r1, r0, r1
 800664a:	6021      	str	r1, [r4, #0]
 800664c:	e7ee      	b.n	800662c <_free_r+0x20>
 800664e:	001a      	movs	r2, r3
 8006650:	685b      	ldr	r3, [r3, #4]
 8006652:	2b00      	cmp	r3, #0
 8006654:	d001      	beq.n	800665a <_free_r+0x4e>
 8006656:	42a3      	cmp	r3, r4
 8006658:	d9f9      	bls.n	800664e <_free_r+0x42>
 800665a:	6811      	ldr	r1, [r2, #0]
 800665c:	1850      	adds	r0, r2, r1
 800665e:	42a0      	cmp	r0, r4
 8006660:	d10b      	bne.n	800667a <_free_r+0x6e>
 8006662:	6820      	ldr	r0, [r4, #0]
 8006664:	1809      	adds	r1, r1, r0
 8006666:	1850      	adds	r0, r2, r1
 8006668:	6011      	str	r1, [r2, #0]
 800666a:	4283      	cmp	r3, r0
 800666c:	d1e0      	bne.n	8006630 <_free_r+0x24>
 800666e:	6818      	ldr	r0, [r3, #0]
 8006670:	685b      	ldr	r3, [r3, #4]
 8006672:	1841      	adds	r1, r0, r1
 8006674:	6011      	str	r1, [r2, #0]
 8006676:	6053      	str	r3, [r2, #4]
 8006678:	e7da      	b.n	8006630 <_free_r+0x24>
 800667a:	42a0      	cmp	r0, r4
 800667c:	d902      	bls.n	8006684 <_free_r+0x78>
 800667e:	230c      	movs	r3, #12
 8006680:	602b      	str	r3, [r5, #0]
 8006682:	e7d5      	b.n	8006630 <_free_r+0x24>
 8006684:	6821      	ldr	r1, [r4, #0]
 8006686:	1860      	adds	r0, r4, r1
 8006688:	4283      	cmp	r3, r0
 800668a:	d103      	bne.n	8006694 <_free_r+0x88>
 800668c:	6818      	ldr	r0, [r3, #0]
 800668e:	685b      	ldr	r3, [r3, #4]
 8006690:	1841      	adds	r1, r0, r1
 8006692:	6021      	str	r1, [r4, #0]
 8006694:	6063      	str	r3, [r4, #4]
 8006696:	6054      	str	r4, [r2, #4]
 8006698:	e7ca      	b.n	8006630 <_free_r+0x24>
 800669a:	46c0      	nop			; (mov r8, r8)
 800669c:	20000354 	.word	0x20000354

080066a0 <__sfputc_r>:
 80066a0:	6893      	ldr	r3, [r2, #8]
 80066a2:	b510      	push	{r4, lr}
 80066a4:	3b01      	subs	r3, #1
 80066a6:	6093      	str	r3, [r2, #8]
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	da04      	bge.n	80066b6 <__sfputc_r+0x16>
 80066ac:	6994      	ldr	r4, [r2, #24]
 80066ae:	42a3      	cmp	r3, r4
 80066b0:	db07      	blt.n	80066c2 <__sfputc_r+0x22>
 80066b2:	290a      	cmp	r1, #10
 80066b4:	d005      	beq.n	80066c2 <__sfputc_r+0x22>
 80066b6:	6813      	ldr	r3, [r2, #0]
 80066b8:	1c58      	adds	r0, r3, #1
 80066ba:	6010      	str	r0, [r2, #0]
 80066bc:	7019      	strb	r1, [r3, #0]
 80066be:	0008      	movs	r0, r1
 80066c0:	bd10      	pop	{r4, pc}
 80066c2:	f7ff fd1b 	bl	80060fc <__swbuf_r>
 80066c6:	0001      	movs	r1, r0
 80066c8:	e7f9      	b.n	80066be <__sfputc_r+0x1e>

080066ca <__sfputs_r>:
 80066ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066cc:	0006      	movs	r6, r0
 80066ce:	000f      	movs	r7, r1
 80066d0:	0014      	movs	r4, r2
 80066d2:	18d5      	adds	r5, r2, r3
 80066d4:	42ac      	cmp	r4, r5
 80066d6:	d101      	bne.n	80066dc <__sfputs_r+0x12>
 80066d8:	2000      	movs	r0, #0
 80066da:	e007      	b.n	80066ec <__sfputs_r+0x22>
 80066dc:	7821      	ldrb	r1, [r4, #0]
 80066de:	003a      	movs	r2, r7
 80066e0:	0030      	movs	r0, r6
 80066e2:	f7ff ffdd 	bl	80066a0 <__sfputc_r>
 80066e6:	3401      	adds	r4, #1
 80066e8:	1c43      	adds	r3, r0, #1
 80066ea:	d1f3      	bne.n	80066d4 <__sfputs_r+0xa>
 80066ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080066f0 <_vfiprintf_r>:
 80066f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80066f2:	b0a1      	sub	sp, #132	; 0x84
 80066f4:	0006      	movs	r6, r0
 80066f6:	000c      	movs	r4, r1
 80066f8:	001f      	movs	r7, r3
 80066fa:	9203      	str	r2, [sp, #12]
 80066fc:	2800      	cmp	r0, #0
 80066fe:	d004      	beq.n	800670a <_vfiprintf_r+0x1a>
 8006700:	6983      	ldr	r3, [r0, #24]
 8006702:	2b00      	cmp	r3, #0
 8006704:	d101      	bne.n	800670a <_vfiprintf_r+0x1a>
 8006706:	f7ff fa6d 	bl	8005be4 <__sinit>
 800670a:	4b8e      	ldr	r3, [pc, #568]	; (8006944 <_vfiprintf_r+0x254>)
 800670c:	429c      	cmp	r4, r3
 800670e:	d11c      	bne.n	800674a <_vfiprintf_r+0x5a>
 8006710:	6874      	ldr	r4, [r6, #4]
 8006712:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006714:	07db      	lsls	r3, r3, #31
 8006716:	d405      	bmi.n	8006724 <_vfiprintf_r+0x34>
 8006718:	89a3      	ldrh	r3, [r4, #12]
 800671a:	059b      	lsls	r3, r3, #22
 800671c:	d402      	bmi.n	8006724 <_vfiprintf_r+0x34>
 800671e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006720:	f7ff fb25 	bl	8005d6e <__retarget_lock_acquire_recursive>
 8006724:	89a3      	ldrh	r3, [r4, #12]
 8006726:	071b      	lsls	r3, r3, #28
 8006728:	d502      	bpl.n	8006730 <_vfiprintf_r+0x40>
 800672a:	6923      	ldr	r3, [r4, #16]
 800672c:	2b00      	cmp	r3, #0
 800672e:	d11d      	bne.n	800676c <_vfiprintf_r+0x7c>
 8006730:	0021      	movs	r1, r4
 8006732:	0030      	movs	r0, r6
 8006734:	f7ff fd4c 	bl	80061d0 <__swsetup_r>
 8006738:	2800      	cmp	r0, #0
 800673a:	d017      	beq.n	800676c <_vfiprintf_r+0x7c>
 800673c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800673e:	07db      	lsls	r3, r3, #31
 8006740:	d50d      	bpl.n	800675e <_vfiprintf_r+0x6e>
 8006742:	2001      	movs	r0, #1
 8006744:	4240      	negs	r0, r0
 8006746:	b021      	add	sp, #132	; 0x84
 8006748:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800674a:	4b7f      	ldr	r3, [pc, #508]	; (8006948 <_vfiprintf_r+0x258>)
 800674c:	429c      	cmp	r4, r3
 800674e:	d101      	bne.n	8006754 <_vfiprintf_r+0x64>
 8006750:	68b4      	ldr	r4, [r6, #8]
 8006752:	e7de      	b.n	8006712 <_vfiprintf_r+0x22>
 8006754:	4b7d      	ldr	r3, [pc, #500]	; (800694c <_vfiprintf_r+0x25c>)
 8006756:	429c      	cmp	r4, r3
 8006758:	d1db      	bne.n	8006712 <_vfiprintf_r+0x22>
 800675a:	68f4      	ldr	r4, [r6, #12]
 800675c:	e7d9      	b.n	8006712 <_vfiprintf_r+0x22>
 800675e:	89a3      	ldrh	r3, [r4, #12]
 8006760:	059b      	lsls	r3, r3, #22
 8006762:	d4ee      	bmi.n	8006742 <_vfiprintf_r+0x52>
 8006764:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006766:	f7ff fb03 	bl	8005d70 <__retarget_lock_release_recursive>
 800676a:	e7ea      	b.n	8006742 <_vfiprintf_r+0x52>
 800676c:	2300      	movs	r3, #0
 800676e:	ad08      	add	r5, sp, #32
 8006770:	616b      	str	r3, [r5, #20]
 8006772:	3320      	adds	r3, #32
 8006774:	766b      	strb	r3, [r5, #25]
 8006776:	3310      	adds	r3, #16
 8006778:	76ab      	strb	r3, [r5, #26]
 800677a:	9707      	str	r7, [sp, #28]
 800677c:	9f03      	ldr	r7, [sp, #12]
 800677e:	783b      	ldrb	r3, [r7, #0]
 8006780:	2b00      	cmp	r3, #0
 8006782:	d001      	beq.n	8006788 <_vfiprintf_r+0x98>
 8006784:	2b25      	cmp	r3, #37	; 0x25
 8006786:	d14e      	bne.n	8006826 <_vfiprintf_r+0x136>
 8006788:	9b03      	ldr	r3, [sp, #12]
 800678a:	1afb      	subs	r3, r7, r3
 800678c:	9305      	str	r3, [sp, #20]
 800678e:	9b03      	ldr	r3, [sp, #12]
 8006790:	429f      	cmp	r7, r3
 8006792:	d00d      	beq.n	80067b0 <_vfiprintf_r+0xc0>
 8006794:	9b05      	ldr	r3, [sp, #20]
 8006796:	0021      	movs	r1, r4
 8006798:	0030      	movs	r0, r6
 800679a:	9a03      	ldr	r2, [sp, #12]
 800679c:	f7ff ff95 	bl	80066ca <__sfputs_r>
 80067a0:	1c43      	adds	r3, r0, #1
 80067a2:	d100      	bne.n	80067a6 <_vfiprintf_r+0xb6>
 80067a4:	e0b5      	b.n	8006912 <_vfiprintf_r+0x222>
 80067a6:	696a      	ldr	r2, [r5, #20]
 80067a8:	9b05      	ldr	r3, [sp, #20]
 80067aa:	4694      	mov	ip, r2
 80067ac:	4463      	add	r3, ip
 80067ae:	616b      	str	r3, [r5, #20]
 80067b0:	783b      	ldrb	r3, [r7, #0]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d100      	bne.n	80067b8 <_vfiprintf_r+0xc8>
 80067b6:	e0ac      	b.n	8006912 <_vfiprintf_r+0x222>
 80067b8:	2201      	movs	r2, #1
 80067ba:	1c7b      	adds	r3, r7, #1
 80067bc:	9303      	str	r3, [sp, #12]
 80067be:	2300      	movs	r3, #0
 80067c0:	4252      	negs	r2, r2
 80067c2:	606a      	str	r2, [r5, #4]
 80067c4:	a904      	add	r1, sp, #16
 80067c6:	3254      	adds	r2, #84	; 0x54
 80067c8:	1852      	adds	r2, r2, r1
 80067ca:	602b      	str	r3, [r5, #0]
 80067cc:	60eb      	str	r3, [r5, #12]
 80067ce:	60ab      	str	r3, [r5, #8]
 80067d0:	7013      	strb	r3, [r2, #0]
 80067d2:	65ab      	str	r3, [r5, #88]	; 0x58
 80067d4:	9b03      	ldr	r3, [sp, #12]
 80067d6:	2205      	movs	r2, #5
 80067d8:	7819      	ldrb	r1, [r3, #0]
 80067da:	485d      	ldr	r0, [pc, #372]	; (8006950 <_vfiprintf_r+0x260>)
 80067dc:	f000 fa84 	bl	8006ce8 <memchr>
 80067e0:	9b03      	ldr	r3, [sp, #12]
 80067e2:	1c5f      	adds	r7, r3, #1
 80067e4:	2800      	cmp	r0, #0
 80067e6:	d120      	bne.n	800682a <_vfiprintf_r+0x13a>
 80067e8:	682a      	ldr	r2, [r5, #0]
 80067ea:	06d3      	lsls	r3, r2, #27
 80067ec:	d504      	bpl.n	80067f8 <_vfiprintf_r+0x108>
 80067ee:	2353      	movs	r3, #83	; 0x53
 80067f0:	a904      	add	r1, sp, #16
 80067f2:	185b      	adds	r3, r3, r1
 80067f4:	2120      	movs	r1, #32
 80067f6:	7019      	strb	r1, [r3, #0]
 80067f8:	0713      	lsls	r3, r2, #28
 80067fa:	d504      	bpl.n	8006806 <_vfiprintf_r+0x116>
 80067fc:	2353      	movs	r3, #83	; 0x53
 80067fe:	a904      	add	r1, sp, #16
 8006800:	185b      	adds	r3, r3, r1
 8006802:	212b      	movs	r1, #43	; 0x2b
 8006804:	7019      	strb	r1, [r3, #0]
 8006806:	9b03      	ldr	r3, [sp, #12]
 8006808:	781b      	ldrb	r3, [r3, #0]
 800680a:	2b2a      	cmp	r3, #42	; 0x2a
 800680c:	d016      	beq.n	800683c <_vfiprintf_r+0x14c>
 800680e:	2100      	movs	r1, #0
 8006810:	68eb      	ldr	r3, [r5, #12]
 8006812:	9f03      	ldr	r7, [sp, #12]
 8006814:	783a      	ldrb	r2, [r7, #0]
 8006816:	1c78      	adds	r0, r7, #1
 8006818:	3a30      	subs	r2, #48	; 0x30
 800681a:	4684      	mov	ip, r0
 800681c:	2a09      	cmp	r2, #9
 800681e:	d94f      	bls.n	80068c0 <_vfiprintf_r+0x1d0>
 8006820:	2900      	cmp	r1, #0
 8006822:	d111      	bne.n	8006848 <_vfiprintf_r+0x158>
 8006824:	e017      	b.n	8006856 <_vfiprintf_r+0x166>
 8006826:	3701      	adds	r7, #1
 8006828:	e7a9      	b.n	800677e <_vfiprintf_r+0x8e>
 800682a:	4b49      	ldr	r3, [pc, #292]	; (8006950 <_vfiprintf_r+0x260>)
 800682c:	682a      	ldr	r2, [r5, #0]
 800682e:	1ac0      	subs	r0, r0, r3
 8006830:	2301      	movs	r3, #1
 8006832:	4083      	lsls	r3, r0
 8006834:	4313      	orrs	r3, r2
 8006836:	602b      	str	r3, [r5, #0]
 8006838:	9703      	str	r7, [sp, #12]
 800683a:	e7cb      	b.n	80067d4 <_vfiprintf_r+0xe4>
 800683c:	9b07      	ldr	r3, [sp, #28]
 800683e:	1d19      	adds	r1, r3, #4
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	9107      	str	r1, [sp, #28]
 8006844:	2b00      	cmp	r3, #0
 8006846:	db01      	blt.n	800684c <_vfiprintf_r+0x15c>
 8006848:	930b      	str	r3, [sp, #44]	; 0x2c
 800684a:	e004      	b.n	8006856 <_vfiprintf_r+0x166>
 800684c:	425b      	negs	r3, r3
 800684e:	60eb      	str	r3, [r5, #12]
 8006850:	2302      	movs	r3, #2
 8006852:	4313      	orrs	r3, r2
 8006854:	602b      	str	r3, [r5, #0]
 8006856:	783b      	ldrb	r3, [r7, #0]
 8006858:	2b2e      	cmp	r3, #46	; 0x2e
 800685a:	d10a      	bne.n	8006872 <_vfiprintf_r+0x182>
 800685c:	787b      	ldrb	r3, [r7, #1]
 800685e:	2b2a      	cmp	r3, #42	; 0x2a
 8006860:	d137      	bne.n	80068d2 <_vfiprintf_r+0x1e2>
 8006862:	9b07      	ldr	r3, [sp, #28]
 8006864:	3702      	adds	r7, #2
 8006866:	1d1a      	adds	r2, r3, #4
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	9207      	str	r2, [sp, #28]
 800686c:	2b00      	cmp	r3, #0
 800686e:	db2d      	blt.n	80068cc <_vfiprintf_r+0x1dc>
 8006870:	9309      	str	r3, [sp, #36]	; 0x24
 8006872:	2203      	movs	r2, #3
 8006874:	7839      	ldrb	r1, [r7, #0]
 8006876:	4837      	ldr	r0, [pc, #220]	; (8006954 <_vfiprintf_r+0x264>)
 8006878:	f000 fa36 	bl	8006ce8 <memchr>
 800687c:	2800      	cmp	r0, #0
 800687e:	d007      	beq.n	8006890 <_vfiprintf_r+0x1a0>
 8006880:	4b34      	ldr	r3, [pc, #208]	; (8006954 <_vfiprintf_r+0x264>)
 8006882:	682a      	ldr	r2, [r5, #0]
 8006884:	1ac0      	subs	r0, r0, r3
 8006886:	2340      	movs	r3, #64	; 0x40
 8006888:	4083      	lsls	r3, r0
 800688a:	4313      	orrs	r3, r2
 800688c:	3701      	adds	r7, #1
 800688e:	602b      	str	r3, [r5, #0]
 8006890:	7839      	ldrb	r1, [r7, #0]
 8006892:	1c7b      	adds	r3, r7, #1
 8006894:	2206      	movs	r2, #6
 8006896:	4830      	ldr	r0, [pc, #192]	; (8006958 <_vfiprintf_r+0x268>)
 8006898:	9303      	str	r3, [sp, #12]
 800689a:	7629      	strb	r1, [r5, #24]
 800689c:	f000 fa24 	bl	8006ce8 <memchr>
 80068a0:	2800      	cmp	r0, #0
 80068a2:	d045      	beq.n	8006930 <_vfiprintf_r+0x240>
 80068a4:	4b2d      	ldr	r3, [pc, #180]	; (800695c <_vfiprintf_r+0x26c>)
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d127      	bne.n	80068fa <_vfiprintf_r+0x20a>
 80068aa:	2207      	movs	r2, #7
 80068ac:	9b07      	ldr	r3, [sp, #28]
 80068ae:	3307      	adds	r3, #7
 80068b0:	4393      	bics	r3, r2
 80068b2:	3308      	adds	r3, #8
 80068b4:	9307      	str	r3, [sp, #28]
 80068b6:	696b      	ldr	r3, [r5, #20]
 80068b8:	9a04      	ldr	r2, [sp, #16]
 80068ba:	189b      	adds	r3, r3, r2
 80068bc:	616b      	str	r3, [r5, #20]
 80068be:	e75d      	b.n	800677c <_vfiprintf_r+0x8c>
 80068c0:	210a      	movs	r1, #10
 80068c2:	434b      	muls	r3, r1
 80068c4:	4667      	mov	r7, ip
 80068c6:	189b      	adds	r3, r3, r2
 80068c8:	3909      	subs	r1, #9
 80068ca:	e7a3      	b.n	8006814 <_vfiprintf_r+0x124>
 80068cc:	2301      	movs	r3, #1
 80068ce:	425b      	negs	r3, r3
 80068d0:	e7ce      	b.n	8006870 <_vfiprintf_r+0x180>
 80068d2:	2300      	movs	r3, #0
 80068d4:	001a      	movs	r2, r3
 80068d6:	3701      	adds	r7, #1
 80068d8:	606b      	str	r3, [r5, #4]
 80068da:	7839      	ldrb	r1, [r7, #0]
 80068dc:	1c78      	adds	r0, r7, #1
 80068de:	3930      	subs	r1, #48	; 0x30
 80068e0:	4684      	mov	ip, r0
 80068e2:	2909      	cmp	r1, #9
 80068e4:	d903      	bls.n	80068ee <_vfiprintf_r+0x1fe>
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d0c3      	beq.n	8006872 <_vfiprintf_r+0x182>
 80068ea:	9209      	str	r2, [sp, #36]	; 0x24
 80068ec:	e7c1      	b.n	8006872 <_vfiprintf_r+0x182>
 80068ee:	230a      	movs	r3, #10
 80068f0:	435a      	muls	r2, r3
 80068f2:	4667      	mov	r7, ip
 80068f4:	1852      	adds	r2, r2, r1
 80068f6:	3b09      	subs	r3, #9
 80068f8:	e7ef      	b.n	80068da <_vfiprintf_r+0x1ea>
 80068fa:	ab07      	add	r3, sp, #28
 80068fc:	9300      	str	r3, [sp, #0]
 80068fe:	0022      	movs	r2, r4
 8006900:	0029      	movs	r1, r5
 8006902:	0030      	movs	r0, r6
 8006904:	4b16      	ldr	r3, [pc, #88]	; (8006960 <_vfiprintf_r+0x270>)
 8006906:	e000      	b.n	800690a <_vfiprintf_r+0x21a>
 8006908:	bf00      	nop
 800690a:	9004      	str	r0, [sp, #16]
 800690c:	9b04      	ldr	r3, [sp, #16]
 800690e:	3301      	adds	r3, #1
 8006910:	d1d1      	bne.n	80068b6 <_vfiprintf_r+0x1c6>
 8006912:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006914:	07db      	lsls	r3, r3, #31
 8006916:	d405      	bmi.n	8006924 <_vfiprintf_r+0x234>
 8006918:	89a3      	ldrh	r3, [r4, #12]
 800691a:	059b      	lsls	r3, r3, #22
 800691c:	d402      	bmi.n	8006924 <_vfiprintf_r+0x234>
 800691e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006920:	f7ff fa26 	bl	8005d70 <__retarget_lock_release_recursive>
 8006924:	89a3      	ldrh	r3, [r4, #12]
 8006926:	065b      	lsls	r3, r3, #25
 8006928:	d500      	bpl.n	800692c <_vfiprintf_r+0x23c>
 800692a:	e70a      	b.n	8006742 <_vfiprintf_r+0x52>
 800692c:	980d      	ldr	r0, [sp, #52]	; 0x34
 800692e:	e70a      	b.n	8006746 <_vfiprintf_r+0x56>
 8006930:	ab07      	add	r3, sp, #28
 8006932:	9300      	str	r3, [sp, #0]
 8006934:	0022      	movs	r2, r4
 8006936:	0029      	movs	r1, r5
 8006938:	0030      	movs	r0, r6
 800693a:	4b09      	ldr	r3, [pc, #36]	; (8006960 <_vfiprintf_r+0x270>)
 800693c:	f000 f882 	bl	8006a44 <_printf_i>
 8006940:	e7e3      	b.n	800690a <_vfiprintf_r+0x21a>
 8006942:	46c0      	nop			; (mov r8, r8)
 8006944:	08006f74 	.word	0x08006f74
 8006948:	08006f94 	.word	0x08006f94
 800694c:	08006f54 	.word	0x08006f54
 8006950:	08007066 	.word	0x08007066
 8006954:	0800706c 	.word	0x0800706c
 8006958:	08007070 	.word	0x08007070
 800695c:	00000000 	.word	0x00000000
 8006960:	080066cb 	.word	0x080066cb

08006964 <_printf_common>:
 8006964:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006966:	0015      	movs	r5, r2
 8006968:	9301      	str	r3, [sp, #4]
 800696a:	688a      	ldr	r2, [r1, #8]
 800696c:	690b      	ldr	r3, [r1, #16]
 800696e:	000c      	movs	r4, r1
 8006970:	9000      	str	r0, [sp, #0]
 8006972:	4293      	cmp	r3, r2
 8006974:	da00      	bge.n	8006978 <_printf_common+0x14>
 8006976:	0013      	movs	r3, r2
 8006978:	0022      	movs	r2, r4
 800697a:	602b      	str	r3, [r5, #0]
 800697c:	3243      	adds	r2, #67	; 0x43
 800697e:	7812      	ldrb	r2, [r2, #0]
 8006980:	2a00      	cmp	r2, #0
 8006982:	d001      	beq.n	8006988 <_printf_common+0x24>
 8006984:	3301      	adds	r3, #1
 8006986:	602b      	str	r3, [r5, #0]
 8006988:	6823      	ldr	r3, [r4, #0]
 800698a:	069b      	lsls	r3, r3, #26
 800698c:	d502      	bpl.n	8006994 <_printf_common+0x30>
 800698e:	682b      	ldr	r3, [r5, #0]
 8006990:	3302      	adds	r3, #2
 8006992:	602b      	str	r3, [r5, #0]
 8006994:	6822      	ldr	r2, [r4, #0]
 8006996:	2306      	movs	r3, #6
 8006998:	0017      	movs	r7, r2
 800699a:	401f      	ands	r7, r3
 800699c:	421a      	tst	r2, r3
 800699e:	d027      	beq.n	80069f0 <_printf_common+0x8c>
 80069a0:	0023      	movs	r3, r4
 80069a2:	3343      	adds	r3, #67	; 0x43
 80069a4:	781b      	ldrb	r3, [r3, #0]
 80069a6:	1e5a      	subs	r2, r3, #1
 80069a8:	4193      	sbcs	r3, r2
 80069aa:	6822      	ldr	r2, [r4, #0]
 80069ac:	0692      	lsls	r2, r2, #26
 80069ae:	d430      	bmi.n	8006a12 <_printf_common+0xae>
 80069b0:	0022      	movs	r2, r4
 80069b2:	9901      	ldr	r1, [sp, #4]
 80069b4:	9800      	ldr	r0, [sp, #0]
 80069b6:	9e08      	ldr	r6, [sp, #32]
 80069b8:	3243      	adds	r2, #67	; 0x43
 80069ba:	47b0      	blx	r6
 80069bc:	1c43      	adds	r3, r0, #1
 80069be:	d025      	beq.n	8006a0c <_printf_common+0xa8>
 80069c0:	2306      	movs	r3, #6
 80069c2:	6820      	ldr	r0, [r4, #0]
 80069c4:	682a      	ldr	r2, [r5, #0]
 80069c6:	68e1      	ldr	r1, [r4, #12]
 80069c8:	2500      	movs	r5, #0
 80069ca:	4003      	ands	r3, r0
 80069cc:	2b04      	cmp	r3, #4
 80069ce:	d103      	bne.n	80069d8 <_printf_common+0x74>
 80069d0:	1a8d      	subs	r5, r1, r2
 80069d2:	43eb      	mvns	r3, r5
 80069d4:	17db      	asrs	r3, r3, #31
 80069d6:	401d      	ands	r5, r3
 80069d8:	68a3      	ldr	r3, [r4, #8]
 80069da:	6922      	ldr	r2, [r4, #16]
 80069dc:	4293      	cmp	r3, r2
 80069de:	dd01      	ble.n	80069e4 <_printf_common+0x80>
 80069e0:	1a9b      	subs	r3, r3, r2
 80069e2:	18ed      	adds	r5, r5, r3
 80069e4:	2700      	movs	r7, #0
 80069e6:	42bd      	cmp	r5, r7
 80069e8:	d120      	bne.n	8006a2c <_printf_common+0xc8>
 80069ea:	2000      	movs	r0, #0
 80069ec:	e010      	b.n	8006a10 <_printf_common+0xac>
 80069ee:	3701      	adds	r7, #1
 80069f0:	68e3      	ldr	r3, [r4, #12]
 80069f2:	682a      	ldr	r2, [r5, #0]
 80069f4:	1a9b      	subs	r3, r3, r2
 80069f6:	42bb      	cmp	r3, r7
 80069f8:	ddd2      	ble.n	80069a0 <_printf_common+0x3c>
 80069fa:	0022      	movs	r2, r4
 80069fc:	2301      	movs	r3, #1
 80069fe:	9901      	ldr	r1, [sp, #4]
 8006a00:	9800      	ldr	r0, [sp, #0]
 8006a02:	9e08      	ldr	r6, [sp, #32]
 8006a04:	3219      	adds	r2, #25
 8006a06:	47b0      	blx	r6
 8006a08:	1c43      	adds	r3, r0, #1
 8006a0a:	d1f0      	bne.n	80069ee <_printf_common+0x8a>
 8006a0c:	2001      	movs	r0, #1
 8006a0e:	4240      	negs	r0, r0
 8006a10:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006a12:	2030      	movs	r0, #48	; 0x30
 8006a14:	18e1      	adds	r1, r4, r3
 8006a16:	3143      	adds	r1, #67	; 0x43
 8006a18:	7008      	strb	r0, [r1, #0]
 8006a1a:	0021      	movs	r1, r4
 8006a1c:	1c5a      	adds	r2, r3, #1
 8006a1e:	3145      	adds	r1, #69	; 0x45
 8006a20:	7809      	ldrb	r1, [r1, #0]
 8006a22:	18a2      	adds	r2, r4, r2
 8006a24:	3243      	adds	r2, #67	; 0x43
 8006a26:	3302      	adds	r3, #2
 8006a28:	7011      	strb	r1, [r2, #0]
 8006a2a:	e7c1      	b.n	80069b0 <_printf_common+0x4c>
 8006a2c:	0022      	movs	r2, r4
 8006a2e:	2301      	movs	r3, #1
 8006a30:	9901      	ldr	r1, [sp, #4]
 8006a32:	9800      	ldr	r0, [sp, #0]
 8006a34:	9e08      	ldr	r6, [sp, #32]
 8006a36:	321a      	adds	r2, #26
 8006a38:	47b0      	blx	r6
 8006a3a:	1c43      	adds	r3, r0, #1
 8006a3c:	d0e6      	beq.n	8006a0c <_printf_common+0xa8>
 8006a3e:	3701      	adds	r7, #1
 8006a40:	e7d1      	b.n	80069e6 <_printf_common+0x82>
	...

08006a44 <_printf_i>:
 8006a44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006a46:	b08b      	sub	sp, #44	; 0x2c
 8006a48:	9206      	str	r2, [sp, #24]
 8006a4a:	000a      	movs	r2, r1
 8006a4c:	3243      	adds	r2, #67	; 0x43
 8006a4e:	9307      	str	r3, [sp, #28]
 8006a50:	9005      	str	r0, [sp, #20]
 8006a52:	9204      	str	r2, [sp, #16]
 8006a54:	7e0a      	ldrb	r2, [r1, #24]
 8006a56:	000c      	movs	r4, r1
 8006a58:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006a5a:	2a78      	cmp	r2, #120	; 0x78
 8006a5c:	d807      	bhi.n	8006a6e <_printf_i+0x2a>
 8006a5e:	2a62      	cmp	r2, #98	; 0x62
 8006a60:	d809      	bhi.n	8006a76 <_printf_i+0x32>
 8006a62:	2a00      	cmp	r2, #0
 8006a64:	d100      	bne.n	8006a68 <_printf_i+0x24>
 8006a66:	e0c1      	b.n	8006bec <_printf_i+0x1a8>
 8006a68:	2a58      	cmp	r2, #88	; 0x58
 8006a6a:	d100      	bne.n	8006a6e <_printf_i+0x2a>
 8006a6c:	e08c      	b.n	8006b88 <_printf_i+0x144>
 8006a6e:	0026      	movs	r6, r4
 8006a70:	3642      	adds	r6, #66	; 0x42
 8006a72:	7032      	strb	r2, [r6, #0]
 8006a74:	e022      	b.n	8006abc <_printf_i+0x78>
 8006a76:	0010      	movs	r0, r2
 8006a78:	3863      	subs	r0, #99	; 0x63
 8006a7a:	2815      	cmp	r0, #21
 8006a7c:	d8f7      	bhi.n	8006a6e <_printf_i+0x2a>
 8006a7e:	f7f9 fb49 	bl	8000114 <__gnu_thumb1_case_shi>
 8006a82:	0016      	.short	0x0016
 8006a84:	fff6001f 	.word	0xfff6001f
 8006a88:	fff6fff6 	.word	0xfff6fff6
 8006a8c:	001ffff6 	.word	0x001ffff6
 8006a90:	fff6fff6 	.word	0xfff6fff6
 8006a94:	fff6fff6 	.word	0xfff6fff6
 8006a98:	003600a8 	.word	0x003600a8
 8006a9c:	fff6009a 	.word	0xfff6009a
 8006aa0:	00b9fff6 	.word	0x00b9fff6
 8006aa4:	0036fff6 	.word	0x0036fff6
 8006aa8:	fff6fff6 	.word	0xfff6fff6
 8006aac:	009e      	.short	0x009e
 8006aae:	0026      	movs	r6, r4
 8006ab0:	681a      	ldr	r2, [r3, #0]
 8006ab2:	3642      	adds	r6, #66	; 0x42
 8006ab4:	1d11      	adds	r1, r2, #4
 8006ab6:	6019      	str	r1, [r3, #0]
 8006ab8:	6813      	ldr	r3, [r2, #0]
 8006aba:	7033      	strb	r3, [r6, #0]
 8006abc:	2301      	movs	r3, #1
 8006abe:	e0a7      	b.n	8006c10 <_printf_i+0x1cc>
 8006ac0:	6808      	ldr	r0, [r1, #0]
 8006ac2:	6819      	ldr	r1, [r3, #0]
 8006ac4:	1d0a      	adds	r2, r1, #4
 8006ac6:	0605      	lsls	r5, r0, #24
 8006ac8:	d50b      	bpl.n	8006ae2 <_printf_i+0x9e>
 8006aca:	680d      	ldr	r5, [r1, #0]
 8006acc:	601a      	str	r2, [r3, #0]
 8006ace:	2d00      	cmp	r5, #0
 8006ad0:	da03      	bge.n	8006ada <_printf_i+0x96>
 8006ad2:	232d      	movs	r3, #45	; 0x2d
 8006ad4:	9a04      	ldr	r2, [sp, #16]
 8006ad6:	426d      	negs	r5, r5
 8006ad8:	7013      	strb	r3, [r2, #0]
 8006ada:	4b61      	ldr	r3, [pc, #388]	; (8006c60 <_printf_i+0x21c>)
 8006adc:	270a      	movs	r7, #10
 8006ade:	9303      	str	r3, [sp, #12]
 8006ae0:	e01b      	b.n	8006b1a <_printf_i+0xd6>
 8006ae2:	680d      	ldr	r5, [r1, #0]
 8006ae4:	601a      	str	r2, [r3, #0]
 8006ae6:	0641      	lsls	r1, r0, #25
 8006ae8:	d5f1      	bpl.n	8006ace <_printf_i+0x8a>
 8006aea:	b22d      	sxth	r5, r5
 8006aec:	e7ef      	b.n	8006ace <_printf_i+0x8a>
 8006aee:	680d      	ldr	r5, [r1, #0]
 8006af0:	6819      	ldr	r1, [r3, #0]
 8006af2:	1d08      	adds	r0, r1, #4
 8006af4:	6018      	str	r0, [r3, #0]
 8006af6:	062e      	lsls	r6, r5, #24
 8006af8:	d501      	bpl.n	8006afe <_printf_i+0xba>
 8006afa:	680d      	ldr	r5, [r1, #0]
 8006afc:	e003      	b.n	8006b06 <_printf_i+0xc2>
 8006afe:	066d      	lsls	r5, r5, #25
 8006b00:	d5fb      	bpl.n	8006afa <_printf_i+0xb6>
 8006b02:	680d      	ldr	r5, [r1, #0]
 8006b04:	b2ad      	uxth	r5, r5
 8006b06:	4b56      	ldr	r3, [pc, #344]	; (8006c60 <_printf_i+0x21c>)
 8006b08:	2708      	movs	r7, #8
 8006b0a:	9303      	str	r3, [sp, #12]
 8006b0c:	2a6f      	cmp	r2, #111	; 0x6f
 8006b0e:	d000      	beq.n	8006b12 <_printf_i+0xce>
 8006b10:	3702      	adds	r7, #2
 8006b12:	0023      	movs	r3, r4
 8006b14:	2200      	movs	r2, #0
 8006b16:	3343      	adds	r3, #67	; 0x43
 8006b18:	701a      	strb	r2, [r3, #0]
 8006b1a:	6863      	ldr	r3, [r4, #4]
 8006b1c:	60a3      	str	r3, [r4, #8]
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	db03      	blt.n	8006b2a <_printf_i+0xe6>
 8006b22:	2204      	movs	r2, #4
 8006b24:	6821      	ldr	r1, [r4, #0]
 8006b26:	4391      	bics	r1, r2
 8006b28:	6021      	str	r1, [r4, #0]
 8006b2a:	2d00      	cmp	r5, #0
 8006b2c:	d102      	bne.n	8006b34 <_printf_i+0xf0>
 8006b2e:	9e04      	ldr	r6, [sp, #16]
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d00c      	beq.n	8006b4e <_printf_i+0x10a>
 8006b34:	9e04      	ldr	r6, [sp, #16]
 8006b36:	0028      	movs	r0, r5
 8006b38:	0039      	movs	r1, r7
 8006b3a:	f7f9 fb7b 	bl	8000234 <__aeabi_uidivmod>
 8006b3e:	9b03      	ldr	r3, [sp, #12]
 8006b40:	3e01      	subs	r6, #1
 8006b42:	5c5b      	ldrb	r3, [r3, r1]
 8006b44:	7033      	strb	r3, [r6, #0]
 8006b46:	002b      	movs	r3, r5
 8006b48:	0005      	movs	r5, r0
 8006b4a:	429f      	cmp	r7, r3
 8006b4c:	d9f3      	bls.n	8006b36 <_printf_i+0xf2>
 8006b4e:	2f08      	cmp	r7, #8
 8006b50:	d109      	bne.n	8006b66 <_printf_i+0x122>
 8006b52:	6823      	ldr	r3, [r4, #0]
 8006b54:	07db      	lsls	r3, r3, #31
 8006b56:	d506      	bpl.n	8006b66 <_printf_i+0x122>
 8006b58:	6863      	ldr	r3, [r4, #4]
 8006b5a:	6922      	ldr	r2, [r4, #16]
 8006b5c:	4293      	cmp	r3, r2
 8006b5e:	dc02      	bgt.n	8006b66 <_printf_i+0x122>
 8006b60:	2330      	movs	r3, #48	; 0x30
 8006b62:	3e01      	subs	r6, #1
 8006b64:	7033      	strb	r3, [r6, #0]
 8006b66:	9b04      	ldr	r3, [sp, #16]
 8006b68:	1b9b      	subs	r3, r3, r6
 8006b6a:	6123      	str	r3, [r4, #16]
 8006b6c:	9b07      	ldr	r3, [sp, #28]
 8006b6e:	0021      	movs	r1, r4
 8006b70:	9300      	str	r3, [sp, #0]
 8006b72:	9805      	ldr	r0, [sp, #20]
 8006b74:	9b06      	ldr	r3, [sp, #24]
 8006b76:	aa09      	add	r2, sp, #36	; 0x24
 8006b78:	f7ff fef4 	bl	8006964 <_printf_common>
 8006b7c:	1c43      	adds	r3, r0, #1
 8006b7e:	d14c      	bne.n	8006c1a <_printf_i+0x1d6>
 8006b80:	2001      	movs	r0, #1
 8006b82:	4240      	negs	r0, r0
 8006b84:	b00b      	add	sp, #44	; 0x2c
 8006b86:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006b88:	3145      	adds	r1, #69	; 0x45
 8006b8a:	700a      	strb	r2, [r1, #0]
 8006b8c:	4a34      	ldr	r2, [pc, #208]	; (8006c60 <_printf_i+0x21c>)
 8006b8e:	9203      	str	r2, [sp, #12]
 8006b90:	681a      	ldr	r2, [r3, #0]
 8006b92:	6821      	ldr	r1, [r4, #0]
 8006b94:	ca20      	ldmia	r2!, {r5}
 8006b96:	601a      	str	r2, [r3, #0]
 8006b98:	0608      	lsls	r0, r1, #24
 8006b9a:	d516      	bpl.n	8006bca <_printf_i+0x186>
 8006b9c:	07cb      	lsls	r3, r1, #31
 8006b9e:	d502      	bpl.n	8006ba6 <_printf_i+0x162>
 8006ba0:	2320      	movs	r3, #32
 8006ba2:	4319      	orrs	r1, r3
 8006ba4:	6021      	str	r1, [r4, #0]
 8006ba6:	2710      	movs	r7, #16
 8006ba8:	2d00      	cmp	r5, #0
 8006baa:	d1b2      	bne.n	8006b12 <_printf_i+0xce>
 8006bac:	2320      	movs	r3, #32
 8006bae:	6822      	ldr	r2, [r4, #0]
 8006bb0:	439a      	bics	r2, r3
 8006bb2:	6022      	str	r2, [r4, #0]
 8006bb4:	e7ad      	b.n	8006b12 <_printf_i+0xce>
 8006bb6:	2220      	movs	r2, #32
 8006bb8:	6809      	ldr	r1, [r1, #0]
 8006bba:	430a      	orrs	r2, r1
 8006bbc:	6022      	str	r2, [r4, #0]
 8006bbe:	0022      	movs	r2, r4
 8006bc0:	2178      	movs	r1, #120	; 0x78
 8006bc2:	3245      	adds	r2, #69	; 0x45
 8006bc4:	7011      	strb	r1, [r2, #0]
 8006bc6:	4a27      	ldr	r2, [pc, #156]	; (8006c64 <_printf_i+0x220>)
 8006bc8:	e7e1      	b.n	8006b8e <_printf_i+0x14a>
 8006bca:	0648      	lsls	r0, r1, #25
 8006bcc:	d5e6      	bpl.n	8006b9c <_printf_i+0x158>
 8006bce:	b2ad      	uxth	r5, r5
 8006bd0:	e7e4      	b.n	8006b9c <_printf_i+0x158>
 8006bd2:	681a      	ldr	r2, [r3, #0]
 8006bd4:	680d      	ldr	r5, [r1, #0]
 8006bd6:	1d10      	adds	r0, r2, #4
 8006bd8:	6949      	ldr	r1, [r1, #20]
 8006bda:	6018      	str	r0, [r3, #0]
 8006bdc:	6813      	ldr	r3, [r2, #0]
 8006bde:	062e      	lsls	r6, r5, #24
 8006be0:	d501      	bpl.n	8006be6 <_printf_i+0x1a2>
 8006be2:	6019      	str	r1, [r3, #0]
 8006be4:	e002      	b.n	8006bec <_printf_i+0x1a8>
 8006be6:	066d      	lsls	r5, r5, #25
 8006be8:	d5fb      	bpl.n	8006be2 <_printf_i+0x19e>
 8006bea:	8019      	strh	r1, [r3, #0]
 8006bec:	2300      	movs	r3, #0
 8006bee:	9e04      	ldr	r6, [sp, #16]
 8006bf0:	6123      	str	r3, [r4, #16]
 8006bf2:	e7bb      	b.n	8006b6c <_printf_i+0x128>
 8006bf4:	681a      	ldr	r2, [r3, #0]
 8006bf6:	1d11      	adds	r1, r2, #4
 8006bf8:	6019      	str	r1, [r3, #0]
 8006bfa:	6816      	ldr	r6, [r2, #0]
 8006bfc:	2100      	movs	r1, #0
 8006bfe:	0030      	movs	r0, r6
 8006c00:	6862      	ldr	r2, [r4, #4]
 8006c02:	f000 f871 	bl	8006ce8 <memchr>
 8006c06:	2800      	cmp	r0, #0
 8006c08:	d001      	beq.n	8006c0e <_printf_i+0x1ca>
 8006c0a:	1b80      	subs	r0, r0, r6
 8006c0c:	6060      	str	r0, [r4, #4]
 8006c0e:	6863      	ldr	r3, [r4, #4]
 8006c10:	6123      	str	r3, [r4, #16]
 8006c12:	2300      	movs	r3, #0
 8006c14:	9a04      	ldr	r2, [sp, #16]
 8006c16:	7013      	strb	r3, [r2, #0]
 8006c18:	e7a8      	b.n	8006b6c <_printf_i+0x128>
 8006c1a:	6923      	ldr	r3, [r4, #16]
 8006c1c:	0032      	movs	r2, r6
 8006c1e:	9906      	ldr	r1, [sp, #24]
 8006c20:	9805      	ldr	r0, [sp, #20]
 8006c22:	9d07      	ldr	r5, [sp, #28]
 8006c24:	47a8      	blx	r5
 8006c26:	1c43      	adds	r3, r0, #1
 8006c28:	d0aa      	beq.n	8006b80 <_printf_i+0x13c>
 8006c2a:	6823      	ldr	r3, [r4, #0]
 8006c2c:	079b      	lsls	r3, r3, #30
 8006c2e:	d415      	bmi.n	8006c5c <_printf_i+0x218>
 8006c30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c32:	68e0      	ldr	r0, [r4, #12]
 8006c34:	4298      	cmp	r0, r3
 8006c36:	daa5      	bge.n	8006b84 <_printf_i+0x140>
 8006c38:	0018      	movs	r0, r3
 8006c3a:	e7a3      	b.n	8006b84 <_printf_i+0x140>
 8006c3c:	0022      	movs	r2, r4
 8006c3e:	2301      	movs	r3, #1
 8006c40:	9906      	ldr	r1, [sp, #24]
 8006c42:	9805      	ldr	r0, [sp, #20]
 8006c44:	9e07      	ldr	r6, [sp, #28]
 8006c46:	3219      	adds	r2, #25
 8006c48:	47b0      	blx	r6
 8006c4a:	1c43      	adds	r3, r0, #1
 8006c4c:	d098      	beq.n	8006b80 <_printf_i+0x13c>
 8006c4e:	3501      	adds	r5, #1
 8006c50:	68e3      	ldr	r3, [r4, #12]
 8006c52:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006c54:	1a9b      	subs	r3, r3, r2
 8006c56:	42ab      	cmp	r3, r5
 8006c58:	dcf0      	bgt.n	8006c3c <_printf_i+0x1f8>
 8006c5a:	e7e9      	b.n	8006c30 <_printf_i+0x1ec>
 8006c5c:	2500      	movs	r5, #0
 8006c5e:	e7f7      	b.n	8006c50 <_printf_i+0x20c>
 8006c60:	08007077 	.word	0x08007077
 8006c64:	08007088 	.word	0x08007088

08006c68 <_read_r>:
 8006c68:	b570      	push	{r4, r5, r6, lr}
 8006c6a:	0004      	movs	r4, r0
 8006c6c:	0008      	movs	r0, r1
 8006c6e:	0011      	movs	r1, r2
 8006c70:	001a      	movs	r2, r3
 8006c72:	2300      	movs	r3, #0
 8006c74:	4d05      	ldr	r5, [pc, #20]	; (8006c8c <_read_r+0x24>)
 8006c76:	602b      	str	r3, [r5, #0]
 8006c78:	f7fe fce4 	bl	8005644 <_read>
 8006c7c:	1c43      	adds	r3, r0, #1
 8006c7e:	d103      	bne.n	8006c88 <_read_r+0x20>
 8006c80:	682b      	ldr	r3, [r5, #0]
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d000      	beq.n	8006c88 <_read_r+0x20>
 8006c86:	6023      	str	r3, [r4, #0]
 8006c88:	bd70      	pop	{r4, r5, r6, pc}
 8006c8a:	46c0      	nop			; (mov r8, r8)
 8006c8c:	2000035c 	.word	0x2000035c

08006c90 <abort>:
 8006c90:	2006      	movs	r0, #6
 8006c92:	b510      	push	{r4, lr}
 8006c94:	f000 f85e 	bl	8006d54 <raise>
 8006c98:	2001      	movs	r0, #1
 8006c9a:	f000 f87b 	bl	8006d94 <_exit>
	...

08006ca0 <_fstat_r>:
 8006ca0:	2300      	movs	r3, #0
 8006ca2:	b570      	push	{r4, r5, r6, lr}
 8006ca4:	4d06      	ldr	r5, [pc, #24]	; (8006cc0 <_fstat_r+0x20>)
 8006ca6:	0004      	movs	r4, r0
 8006ca8:	0008      	movs	r0, r1
 8006caa:	0011      	movs	r1, r2
 8006cac:	602b      	str	r3, [r5, #0]
 8006cae:	f7fe fda7 	bl	8005800 <_fstat>
 8006cb2:	1c43      	adds	r3, r0, #1
 8006cb4:	d103      	bne.n	8006cbe <_fstat_r+0x1e>
 8006cb6:	682b      	ldr	r3, [r5, #0]
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d000      	beq.n	8006cbe <_fstat_r+0x1e>
 8006cbc:	6023      	str	r3, [r4, #0]
 8006cbe:	bd70      	pop	{r4, r5, r6, pc}
 8006cc0:	2000035c 	.word	0x2000035c

08006cc4 <_isatty_r>:
 8006cc4:	2300      	movs	r3, #0
 8006cc6:	b570      	push	{r4, r5, r6, lr}
 8006cc8:	4d06      	ldr	r5, [pc, #24]	; (8006ce4 <_isatty_r+0x20>)
 8006cca:	0004      	movs	r4, r0
 8006ccc:	0008      	movs	r0, r1
 8006cce:	602b      	str	r3, [r5, #0]
 8006cd0:	f7fe ff02 	bl	8005ad8 <_isatty>
 8006cd4:	1c43      	adds	r3, r0, #1
 8006cd6:	d103      	bne.n	8006ce0 <_isatty_r+0x1c>
 8006cd8:	682b      	ldr	r3, [r5, #0]
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d000      	beq.n	8006ce0 <_isatty_r+0x1c>
 8006cde:	6023      	str	r3, [r4, #0]
 8006ce0:	bd70      	pop	{r4, r5, r6, pc}
 8006ce2:	46c0      	nop			; (mov r8, r8)
 8006ce4:	2000035c 	.word	0x2000035c

08006ce8 <memchr>:
 8006ce8:	b2c9      	uxtb	r1, r1
 8006cea:	1882      	adds	r2, r0, r2
 8006cec:	4290      	cmp	r0, r2
 8006cee:	d101      	bne.n	8006cf4 <memchr+0xc>
 8006cf0:	2000      	movs	r0, #0
 8006cf2:	4770      	bx	lr
 8006cf4:	7803      	ldrb	r3, [r0, #0]
 8006cf6:	428b      	cmp	r3, r1
 8006cf8:	d0fb      	beq.n	8006cf2 <memchr+0xa>
 8006cfa:	3001      	adds	r0, #1
 8006cfc:	e7f6      	b.n	8006cec <memchr+0x4>

08006cfe <_raise_r>:
 8006cfe:	b570      	push	{r4, r5, r6, lr}
 8006d00:	0004      	movs	r4, r0
 8006d02:	000d      	movs	r5, r1
 8006d04:	291f      	cmp	r1, #31
 8006d06:	d904      	bls.n	8006d12 <_raise_r+0x14>
 8006d08:	2316      	movs	r3, #22
 8006d0a:	6003      	str	r3, [r0, #0]
 8006d0c:	2001      	movs	r0, #1
 8006d0e:	4240      	negs	r0, r0
 8006d10:	bd70      	pop	{r4, r5, r6, pc}
 8006d12:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d004      	beq.n	8006d22 <_raise_r+0x24>
 8006d18:	008a      	lsls	r2, r1, #2
 8006d1a:	189b      	adds	r3, r3, r2
 8006d1c:	681a      	ldr	r2, [r3, #0]
 8006d1e:	2a00      	cmp	r2, #0
 8006d20:	d108      	bne.n	8006d34 <_raise_r+0x36>
 8006d22:	0020      	movs	r0, r4
 8006d24:	f000 f832 	bl	8006d8c <_getpid_r>
 8006d28:	002a      	movs	r2, r5
 8006d2a:	0001      	movs	r1, r0
 8006d2c:	0020      	movs	r0, r4
 8006d2e:	f000 f81b 	bl	8006d68 <_kill_r>
 8006d32:	e7ed      	b.n	8006d10 <_raise_r+0x12>
 8006d34:	2000      	movs	r0, #0
 8006d36:	2a01      	cmp	r2, #1
 8006d38:	d0ea      	beq.n	8006d10 <_raise_r+0x12>
 8006d3a:	1c51      	adds	r1, r2, #1
 8006d3c:	d103      	bne.n	8006d46 <_raise_r+0x48>
 8006d3e:	2316      	movs	r3, #22
 8006d40:	3001      	adds	r0, #1
 8006d42:	6023      	str	r3, [r4, #0]
 8006d44:	e7e4      	b.n	8006d10 <_raise_r+0x12>
 8006d46:	2400      	movs	r4, #0
 8006d48:	0028      	movs	r0, r5
 8006d4a:	601c      	str	r4, [r3, #0]
 8006d4c:	4790      	blx	r2
 8006d4e:	0020      	movs	r0, r4
 8006d50:	e7de      	b.n	8006d10 <_raise_r+0x12>
	...

08006d54 <raise>:
 8006d54:	b510      	push	{r4, lr}
 8006d56:	4b03      	ldr	r3, [pc, #12]	; (8006d64 <raise+0x10>)
 8006d58:	0001      	movs	r1, r0
 8006d5a:	6818      	ldr	r0, [r3, #0]
 8006d5c:	f7ff ffcf 	bl	8006cfe <_raise_r>
 8006d60:	bd10      	pop	{r4, pc}
 8006d62:	46c0      	nop			; (mov r8, r8)
 8006d64:	20000018 	.word	0x20000018

08006d68 <_kill_r>:
 8006d68:	2300      	movs	r3, #0
 8006d6a:	b570      	push	{r4, r5, r6, lr}
 8006d6c:	4d06      	ldr	r5, [pc, #24]	; (8006d88 <_kill_r+0x20>)
 8006d6e:	0004      	movs	r4, r0
 8006d70:	0008      	movs	r0, r1
 8006d72:	0011      	movs	r1, r2
 8006d74:	602b      	str	r3, [r5, #0]
 8006d76:	f000 f82b 	bl	8006dd0 <_kill>
 8006d7a:	1c43      	adds	r3, r0, #1
 8006d7c:	d103      	bne.n	8006d86 <_kill_r+0x1e>
 8006d7e:	682b      	ldr	r3, [r5, #0]
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d000      	beq.n	8006d86 <_kill_r+0x1e>
 8006d84:	6023      	str	r3, [r4, #0]
 8006d86:	bd70      	pop	{r4, r5, r6, pc}
 8006d88:	2000035c 	.word	0x2000035c

08006d8c <_getpid_r>:
 8006d8c:	b510      	push	{r4, lr}
 8006d8e:	f7fe fd13 	bl	80057b8 <_getpid>
 8006d92:	bd10      	pop	{r4, pc}

08006d94 <_exit>:
 8006d94:	0001      	movs	r1, r0
 8006d96:	2001      	movs	r0, #1
 8006d98:	b510      	push	{r4, lr}
 8006d9a:	4a02      	ldr	r2, [pc, #8]	; (8006da4 <_exit+0x10>)
 8006d9c:	4240      	negs	r0, r0
 8006d9e:	f000 f803 	bl	8006da8 <_kill_shared>
 8006da2:	46c0      	nop			; (mov r8, r8)
 8006da4:	00020026 	.word	0x00020026

08006da8 <_kill_shared>:
 8006da8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006daa:	466d      	mov	r5, sp
 8006dac:	6069      	str	r1, [r5, #4]
 8006dae:	9200      	str	r2, [sp, #0]
 8006db0:	f7fe fe20 	bl	80059f4 <_has_ext_exit_extended>
 8006db4:	2420      	movs	r4, #32
 8006db6:	2800      	cmp	r0, #0
 8006db8:	d100      	bne.n	8006dbc <_kill_shared+0x14>
 8006dba:	3c08      	subs	r4, #8
 8006dbc:	f7fe fe1a 	bl	80059f4 <_has_ext_exit_extended>
 8006dc0:	2800      	cmp	r0, #0
 8006dc2:	d003      	beq.n	8006dcc <_kill_shared+0x24>
 8006dc4:	1c20      	adds	r0, r4, #0
 8006dc6:	1c29      	adds	r1, r5, #0
 8006dc8:	beab      	bkpt	0x00ab
 8006dca:	1c04      	adds	r4, r0, #0
 8006dcc:	9d00      	ldr	r5, [sp, #0]
 8006dce:	e7f9      	b.n	8006dc4 <_kill_shared+0x1c>

08006dd0 <_kill>:
 8006dd0:	b510      	push	{r4, lr}
 8006dd2:	2906      	cmp	r1, #6
 8006dd4:	d102      	bne.n	8006ddc <_kill+0xc>
 8006dd6:	4a02      	ldr	r2, [pc, #8]	; (8006de0 <_kill+0x10>)
 8006dd8:	f7ff ffe6 	bl	8006da8 <_kill_shared>
 8006ddc:	4a01      	ldr	r2, [pc, #4]	; (8006de4 <_kill+0x14>)
 8006dde:	e7fb      	b.n	8006dd8 <_kill+0x8>
 8006de0:	00020023 	.word	0x00020023
 8006de4:	00020026 	.word	0x00020026

08006de8 <_init>:
 8006de8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006dea:	46c0      	nop			; (mov r8, r8)
 8006dec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006dee:	bc08      	pop	{r3}
 8006df0:	469e      	mov	lr, r3
 8006df2:	4770      	bx	lr

08006df4 <_fini>:
 8006df4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006df6:	46c0      	nop			; (mov r8, r8)
 8006df8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006dfa:	bc08      	pop	{r3}
 8006dfc:	469e      	mov	lr, r3
 8006dfe:	4770      	bx	lr
